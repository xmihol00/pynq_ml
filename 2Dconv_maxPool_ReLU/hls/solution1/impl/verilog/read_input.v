// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_input (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_upper_0_V_din,
        input_upper_0_V_full_n,
        input_upper_0_V_write,
        input_upper_1_V_din,
        input_upper_1_V_full_n,
        input_upper_1_V_write,
        input_upper_2_V_din,
        input_upper_2_V_full_n,
        input_upper_2_V_write,
        input_lower_0_V_din,
        input_lower_0_V_full_n,
        input_lower_0_V_write,
        input_lower_1_V_din,
        input_lower_1_V_full_n,
        input_lower_1_V_write,
        input_lower_2_V_din,
        input_lower_2_V_full_n,
        input_lower_2_V_write,
        in_0_TDATA,
        in_0_TVALID,
        in_0_TREADY,
        in_1_TDATA,
        in_1_TVALID,
        in_1_TREADY,
        in_0_TKEEP,
        in_1_TKEEP,
        in_0_TSTRB,
        in_1_TSTRB,
        in_0_TLAST,
        in_1_TLAST
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [7:0] input_upper_0_V_din;
input   input_upper_0_V_full_n;
output   input_upper_0_V_write;
output  [7:0] input_upper_1_V_din;
input   input_upper_1_V_full_n;
output   input_upper_1_V_write;
output  [7:0] input_upper_2_V_din;
input   input_upper_2_V_full_n;
output   input_upper_2_V_write;
output  [7:0] input_lower_0_V_din;
input   input_lower_0_V_full_n;
output   input_lower_0_V_write;
output  [7:0] input_lower_1_V_din;
input   input_lower_1_V_full_n;
output   input_lower_1_V_write;
output  [7:0] input_lower_2_V_din;
input   input_lower_2_V_full_n;
output   input_lower_2_V_write;
input  [63:0] in_0_TDATA;
input   in_0_TVALID;
output   in_0_TREADY;
input  [63:0] in_1_TDATA;
input   in_1_TVALID;
output   in_1_TREADY;
input  [7:0] in_0_TKEEP;
input  [7:0] in_1_TKEEP;
input  [7:0] in_0_TSTRB;
input  [7:0] in_1_TSTRB;
input  [0:0] in_0_TLAST;
input  [0:0] in_1_TLAST;

reg ap_done;
reg ap_idle;
reg start_write;
reg[7:0] input_upper_0_V_din;
reg input_upper_0_V_write;
reg[7:0] input_upper_1_V_din;
reg input_upper_1_V_write;
reg[7:0] input_upper_2_V_din;
reg input_upper_2_V_write;
reg[7:0] input_lower_0_V_din;
reg input_lower_0_V_write;
reg[7:0] input_lower_1_V_din;
reg input_lower_1_V_write;
reg[7:0] input_lower_2_V_din;
reg input_lower_2_V_write;
reg in_0_TREADY;
reg in_1_TREADY;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    input_upper_0_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    input_upper_1_V_blk_n;
reg    input_upper_2_V_blk_n;
reg    input_lower_0_V_blk_n;
reg    input_lower_1_V_blk_n;
reg    input_lower_2_V_blk_n;
reg    in_0_TDATA_blk_n;
reg    in_1_TDATA_blk_n;
reg   [7:0] reg_298;
reg    ap_block_state1;
reg    ap_block_state3;
reg    ap_block_state6;
reg   [7:0] reg_305;
reg   [7:0] reg_312;
reg   [7:0] reg_319;
reg   [7:0] reg_326;
reg   [7:0] reg_333;
reg   [7:0] reg_340;
reg   [7:0] reg_347;
reg   [7:0] reg_354;
reg   [7:0] reg_361;
reg   [7:0] reg_368;
reg   [7:0] reg_374;
reg   [7:0] tmp_33_reg_410;
reg   [7:0] tmp_36_reg_415;
wire   [7:0] tmp_fu_380_p1;
reg    ap_block_state2;
reg    ap_block_state4;
reg    ap_block_state5;
reg    ap_block_state7;
reg    ap_block_state8;
wire   [7:0] tmp_46_fu_400_p1;
wire   [7:0] tmp_29_fu_390_p1;
wire   [7:0] tmp_18_fu_385_p1;
wire   [7:0] tmp_49_fu_405_p1;
wire   [7:0] tmp_32_fu_395_p1;
reg   [7:0] ap_NS_fsm;
wire    regslice_both_in_0_V_data_V_U_apdone_blk;
wire   [63:0] in_0_TDATA_int;
wire    in_0_TVALID_int;
reg    in_0_TREADY_int;
wire    regslice_both_in_0_V_data_V_U_ack_in;
wire    regslice_both_in_1_V_data_V_U_apdone_blk;
wire   [63:0] in_1_TDATA_int;
wire    in_1_TVALID_int;
reg    in_1_TREADY_int;
wire    regslice_both_in_1_V_data_V_U_ack_in;
wire    regslice_both_in_0_V_keep_V_U_apdone_blk;
wire   [7:0] in_0_TKEEP_int;
wire    regslice_both_in_0_V_keep_V_U_vld_out;
wire    regslice_both_in_0_V_keep_V_U_ack_in;
wire    regslice_both_in_1_V_keep_V_U_apdone_blk;
wire   [7:0] in_1_TKEEP_int;
wire    regslice_both_in_1_V_keep_V_U_vld_out;
wire    regslice_both_in_1_V_keep_V_U_ack_in;
wire    regslice_both_in_0_V_strb_V_U_apdone_blk;
wire   [7:0] in_0_TSTRB_int;
wire    regslice_both_in_0_V_strb_V_U_vld_out;
wire    regslice_both_in_0_V_strb_V_U_ack_in;
wire    regslice_both_in_1_V_strb_V_U_apdone_blk;
wire   [7:0] in_1_TSTRB_int;
wire    regslice_both_in_1_V_strb_V_U_vld_out;
wire    regslice_both_in_1_V_strb_V_U_ack_in;
wire    regslice_both_in_0_V_last_V_U_apdone_blk;
wire   [0:0] in_0_TLAST_int;
wire    regslice_both_in_0_V_last_V_U_vld_out;
wire    regslice_both_in_0_V_last_V_U_ack_in;
wire    regslice_both_in_1_V_last_V_U_apdone_blk;
wire   [0:0] in_1_TLAST_int;
wire    regslice_both_in_1_V_last_V_U_vld_out;
wire    regslice_both_in_1_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TDATA),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_data_V_U_ack_in),
    .data_out(in_0_TDATA_int),
    .vld_out(in_0_TVALID_int),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TDATA),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_data_V_U_ack_in),
    .data_out(in_1_TDATA_int),
    .vld_out(in_1_TVALID_int),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TKEEP),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_keep_V_U_ack_in),
    .data_out(in_0_TKEEP_int),
    .vld_out(regslice_both_in_0_V_keep_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TKEEP),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_keep_V_U_ack_in),
    .data_out(in_1_TKEEP_int),
    .vld_out(regslice_both_in_1_V_keep_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TSTRB),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_strb_V_U_ack_in),
    .data_out(in_0_TSTRB_int),
    .vld_out(regslice_both_in_0_V_strb_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TSTRB),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_strb_V_U_ack_in),
    .data_out(in_1_TSTRB_int),
    .vld_out(regslice_both_in_1_V_strb_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TLAST),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_last_V_U_ack_in),
    .data_out(in_0_TLAST_int),
    .vld_out(regslice_both_in_0_V_last_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TLAST),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_last_V_U_ack_in),
    .data_out(in_1_TLAST_int),
    .vld_out(regslice_both_in_1_V_last_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_298 <= {{in_0_TDATA_int[31:24]}};
        reg_305 <= {{in_0_TDATA_int[39:32]}};
        reg_312 <= {{in_0_TDATA_int[47:40]}};
        reg_319 <= {{in_1_TDATA_int[31:24]}};
        reg_326 <= {{in_1_TDATA_int[39:32]}};
        reg_333 <= {{in_1_TDATA_int[47:40]}};
        reg_340 <= {{in_0_TDATA_int[55:48]}};
        reg_347 <= {{in_0_TDATA_int[63:56]}};
        reg_354 <= {{in_1_TDATA_int[55:48]}};
        reg_361 <= {{in_1_TDATA_int[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_368 <= {{in_0_TDATA_int[23:16]}};
        reg_374 <= {{in_1_TDATA_int[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_33_reg_410 <= {{in_0_TDATA_int[15:8]}};
        tmp_36_reg_415 <= {{in_1_TDATA_int[15:8]}};
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_0_TDATA_blk_n = in_0_TVALID_int;
    end else begin
        in_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_0_TVALID == 1'b1) & (regslice_both_in_0_V_data_V_U_ack_in == 1'b1))) begin
        in_0_TREADY = 1'b1;
    end else begin
        in_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        in_0_TREADY_int = 1'b1;
    end else begin
        in_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_1_TDATA_blk_n = in_1_TVALID_int;
    end else begin
        in_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_1_TVALID == 1'b1) & (regslice_both_in_1_V_data_V_U_ack_in == 1'b1))) begin
        in_1_TREADY = 1'b1;
    end else begin
        in_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        in_1_TREADY_int = 1'b1;
    end else begin
        in_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_lower_0_V_blk_n = input_lower_0_V_full_n;
    end else begin
        input_lower_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        input_lower_0_V_din = reg_333;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        input_lower_0_V_din = reg_374;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        input_lower_0_V_din = reg_361;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        input_lower_0_V_din = reg_326;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        input_lower_0_V_din = tmp_36_reg_415;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_lower_0_V_din = reg_354;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_lower_0_V_din = reg_319;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_lower_0_V_din = tmp_18_fu_385_p1;
    end else begin
        input_lower_0_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_lower_0_V_write = 1'b1;
    end else begin
        input_lower_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_lower_1_V_blk_n = input_lower_1_V_full_n;
    end else begin
        input_lower_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        input_lower_1_V_din = reg_354;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        input_lower_1_V_din = reg_319;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        input_lower_1_V_din = tmp_49_fu_405_p1;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        input_lower_1_V_din = reg_333;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        input_lower_1_V_din = reg_374;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_lower_1_V_din = reg_361;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_lower_1_V_din = reg_326;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_lower_1_V_din = {{in_1_TDATA_int[15:8]}};
    end else begin
        input_lower_1_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_lower_1_V_write = 1'b1;
    end else begin
        input_lower_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_lower_2_V_blk_n = input_lower_2_V_full_n;
    end else begin
        input_lower_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        input_lower_2_V_din = reg_361;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        input_lower_2_V_din = reg_326;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        input_lower_2_V_din = {{in_1_TDATA_int[15:8]}};
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        input_lower_2_V_din = reg_354;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        input_lower_2_V_din = reg_319;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_lower_2_V_din = tmp_32_fu_395_p1;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_lower_2_V_din = reg_333;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_lower_2_V_din = {{in_1_TDATA_int[23:16]}};
    end else begin
        input_lower_2_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_lower_2_V_write = 1'b1;
    end else begin
        input_lower_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_upper_0_V_blk_n = input_upper_0_V_full_n;
    end else begin
        input_upper_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        input_upper_0_V_din = reg_312;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        input_upper_0_V_din = reg_368;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        input_upper_0_V_din = reg_347;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        input_upper_0_V_din = reg_305;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        input_upper_0_V_din = tmp_33_reg_410;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_upper_0_V_din = reg_340;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_upper_0_V_din = reg_298;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_upper_0_V_din = tmp_fu_380_p1;
    end else begin
        input_upper_0_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_upper_0_V_write = 1'b1;
    end else begin
        input_upper_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_upper_1_V_blk_n = input_upper_1_V_full_n;
    end else begin
        input_upper_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        input_upper_1_V_din = reg_340;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        input_upper_1_V_din = reg_298;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        input_upper_1_V_din = tmp_46_fu_400_p1;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        input_upper_1_V_din = reg_312;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        input_upper_1_V_din = reg_368;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_upper_1_V_din = reg_347;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_upper_1_V_din = reg_305;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_upper_1_V_din = {{in_0_TDATA_int[15:8]}};
    end else begin
        input_upper_1_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_upper_1_V_write = 1'b1;
    end else begin
        input_upper_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_upper_2_V_blk_n = input_upper_2_V_full_n;
    end else begin
        input_upper_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        input_upper_2_V_din = reg_347;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        input_upper_2_V_din = reg_305;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        input_upper_2_V_din = {{in_0_TDATA_int[15:8]}};
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        input_upper_2_V_din = reg_340;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        input_upper_2_V_din = reg_298;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_upper_2_V_din = tmp_29_fu_390_p1;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_upper_2_V_din = reg_312;
    end else if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_upper_2_V_din = {{in_0_TDATA_int[23:16]}};
    end else begin
        input_upper_2_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_upper_2_V_write = 1'b1;
    end else begin
        input_upper_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0) | (in_1_TVALID_int == 1'b0) | (in_0_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((input_lower_2_V_full_n == 1'b0) | (input_lower_1_V_full_n == 1'b0) | (input_lower_0_V_full_n == 1'b0) | (input_upper_2_V_full_n == 1'b0) | (input_upper_1_V_full_n == 1'b0) | (input_upper_0_V_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign start_out = real_start;

assign tmp_18_fu_385_p1 = in_1_TDATA_int[7:0];

assign tmp_29_fu_390_p1 = in_0_TDATA_int[7:0];

assign tmp_32_fu_395_p1 = in_1_TDATA_int[7:0];

assign tmp_46_fu_400_p1 = in_0_TDATA_int[7:0];

assign tmp_49_fu_405_p1 = in_1_TDATA_int[7:0];

assign tmp_fu_380_p1 = in_0_TDATA_int[7:0];

endmodule //read_input
