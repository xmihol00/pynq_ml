-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    output_0_V_empty_n : IN STD_LOGIC;
    output_0_V_read : OUT STD_LOGIC;
    output_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    output_1_V_empty_n : IN STD_LOGIC;
    output_1_V_read : OUT STD_LOGIC;
    output_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    output_2_V_empty_n : IN STD_LOGIC;
    output_2_V_read : OUT STD_LOGIC;
    output_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    output_3_V_empty_n : IN STD_LOGIC;
    output_3_V_read : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_0_V_blk_n : OUT STD_LOGIC;
    output_1_V_blk_n : OUT STD_LOGIC;
    output_2_V_blk_n : OUT STD_LOGIC;
    output_3_V_blk_n : OUT STD_LOGIC;
    out_r_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of write_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln67_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal iteration : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal sent : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln66_fu_115_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln67_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_iteration_new_0_reg_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_iteration_load : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln80_fu_157_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_last_V_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_144_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_87 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_iteration_new_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_87)) then
                if ((icmp_ln67_fu_121_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 <= add_ln66_fu_115_p2;
                elsif ((icmp_ln67_fu_121_p2 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 <= ap_phi_reg_pp0_iter0_iteration_new_0_reg_100;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln67_reg_182 <= icmp_ln67_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iteration <= ap_phi_reg_pp0_iter1_iteration_new_0_reg_100;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sent <= select_ln80_fu_157_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln66_fu_115_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_iteration_load) + unsigned(ap_const_lv8_1));
    add_ln79_fu_144_p2 <= std_logic_vector(unsigned(sent) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, output_0_V_empty_n, icmp_ln67_reg_182, output_1_V_empty_n, output_2_V_empty_n, output_3_V_empty_n)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_3_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, output_0_V_empty_n, icmp_ln67_reg_182, output_1_V_empty_n, output_2_V_empty_n, output_3_V_empty_n, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_3_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, output_0_V_empty_n, icmp_ln67_reg_182, output_1_V_empty_n, output_2_V_empty_n, output_3_V_empty_n, ap_block_state2_io, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_3_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_0_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln67_reg_182, out_r_TREADY)
    begin
                ap_block_state2_io <= ((icmp_ln67_reg_182 = ap_const_lv1_1) and (out_r_TREADY = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(output_0_V_empty_n, icmp_ln67_reg_182, output_1_V_empty_n, output_2_V_empty_n, output_3_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_3_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln67_reg_182 = ap_const_lv1_1) and (output_0_V_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_87_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
                ap_condition_87 <= ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_iteration_new_0_reg_100 <= "XXXXXXXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_iteration_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, iteration, ap_phi_reg_pp0_iter1_iteration_new_0_reg_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_iteration_load <= ap_phi_reg_pp0_iter1_iteration_new_0_reg_100;
        else 
            ap_sig_allocacmp_iteration_load <= iteration;
        end if; 
    end process;

    icmp_ln67_fu_121_p2 <= "1" when (add_ln66_fu_115_p2 = ap_const_lv8_4) else "0";
    out_r_TDATA <= (((output_3_V_dout & output_2_V_dout) & output_1_V_dout) & output_0_V_dout);

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, out_r_TREADY)
    begin
        if (((icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_r_TDATA_blk_n <= out_r_TREADY;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TKEEP <= ap_const_lv8_FF;
    out_r_TLAST <= tmp_last_V_fu_150_p2;
    out_r_TSTRB <= ap_const_lv8_0;

    out_r_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_r_TVALID <= ap_const_logic_1;
        else 
            out_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, output_0_V_empty_n, icmp_ln67_reg_182)
    begin
        if (((icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_V_blk_n <= output_0_V_empty_n;
        else 
            output_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_V_read <= ap_const_logic_1;
        else 
            output_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    output_1_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, output_1_V_empty_n)
    begin
        if (((icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_1_V_blk_n <= output_1_V_empty_n;
        else 
            output_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_1_V_read <= ap_const_logic_1;
        else 
            output_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    output_2_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, output_2_V_empty_n)
    begin
        if (((icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_2_V_blk_n <= output_2_V_empty_n;
        else 
            output_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_2_V_read <= ap_const_logic_1;
        else 
            output_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    output_3_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, output_3_V_empty_n)
    begin
        if (((icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_3_V_blk_n <= output_3_V_empty_n;
        else 
            output_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln67_reg_182, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_reg_182 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_3_V_read <= ap_const_logic_1;
        else 
            output_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln80_fu_157_p3 <= 
        ap_const_lv16_0 when (tmp_last_V_fu_150_p2(0) = '1') else 
        add_ln79_fu_144_p2;
    tmp_last_V_fu_150_p2 <= "1" when (add_ln79_fu_144_p2 = ap_const_lv16_100) else "0";
end behav;
