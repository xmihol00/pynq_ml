-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_upper_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_upper_0_V_empty_n : IN STD_LOGIC;
    input_upper_0_V_read : OUT STD_LOGIC;
    input_upper_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_upper_1_V_empty_n : IN STD_LOGIC;
    input_upper_1_V_read : OUT STD_LOGIC;
    input_upper_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_upper_2_V_empty_n : IN STD_LOGIC;
    input_upper_2_V_read : OUT STD_LOGIC;
    input_lower_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_lower_0_V_empty_n : IN STD_LOGIC;
    input_lower_0_V_read : OUT STD_LOGIC;
    input_lower_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_lower_1_V_empty_n : IN STD_LOGIC;
    input_lower_1_V_read : OUT STD_LOGIC;
    input_lower_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_lower_2_V_empty_n : IN STD_LOGIC;
    input_lower_2_V_read : OUT STD_LOGIC;
    output_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_0_V_full_n : IN STD_LOGIC;
    output_0_V_write : OUT STD_LOGIC;
    output_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_1_V_full_n : IN STD_LOGIC;
    output_1_V_write : OUT STD_LOGIC;
    output_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_2_V_full_n : IN STD_LOGIC;
    output_2_V_write : OUT STD_LOGIC;
    output_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_3_V_full_n : IN STD_LOGIC;
    output_3_V_write : OUT STD_LOGIC );
end;


architecture behav of kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_1FC : STD_LOGIC_VECTOR (15 downto 0) := "0000000111111100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv13_202 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000010";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv13_404 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000100";
    constant ap_const_lv13_606 : STD_LOGIC_VECTOR (12 downto 0) := "0011000000110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_201 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000001";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal read_odd : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal read_col_index : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    signal compute_odd : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal compute_col_index : STD_LOGIC_VECTOR (15 downto 0) := "0000000111111100";
    signal kernels_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_0_ce0 : STD_LOGIC;
    signal kernels_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal stripes_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_0_ce0 : STD_LOGIC;
    signal stripes_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal stripes_0_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_0_ce1 : STD_LOGIC;
    signal stripes_0_we1 : STD_LOGIC;
    signal stripes_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernels_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_1_ce0 : STD_LOGIC;
    signal kernels_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_2_ce0 : STD_LOGIC;
    signal kernels_2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_3_ce0 : STD_LOGIC;
    signal kernels_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_4_ce0 : STD_LOGIC;
    signal kernels_4_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal stripes_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_1_ce0 : STD_LOGIC;
    signal stripes_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal stripes_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_1_ce1 : STD_LOGIC;
    signal stripes_1_we1 : STD_LOGIC;
    signal stripes_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernels_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_5_ce0 : STD_LOGIC;
    signal kernels_5_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_6_ce0 : STD_LOGIC;
    signal kernels_6_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_7_ce0 : STD_LOGIC;
    signal kernels_7_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_8_ce0 : STD_LOGIC;
    signal kernels_8_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal stripes_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_2_ce0 : STD_LOGIC;
    signal stripes_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal stripes_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_2_ce1 : STD_LOGIC;
    signal stripes_2_we1 : STD_LOGIC;
    signal stripes_2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernels_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_9_ce0 : STD_LOGIC;
    signal kernels_9_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_10_ce0 : STD_LOGIC;
    signal kernels_10_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernels_11_ce0 : STD_LOGIC;
    signal kernels_11_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_upper_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln158_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_reg_826 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln145_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_814 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_upper_1_V_blk_n : STD_LOGIC;
    signal input_upper_2_V_blk_n : STD_LOGIC;
    signal input_lower_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_lower_1_V_blk_n : STD_LOGIC;
    signal input_lower_2_V_blk_n : STD_LOGIC;
    signal output_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal trunc_ln182_reg_2583 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_1_V_blk_n : STD_LOGIC;
    signal output_2_V_blk_n : STD_LOGIC;
    signal output_3_V_blk_n : STD_LOGIC;
    signal partial_sums_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal partial_sums_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal partial_sums_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1098_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_1112_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_odd_load_load_fu_1147_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_odd_load_reg_1920 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal read_col_index_load_reg_1925 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln157_fu_1155_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln157_reg_1930 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_1_fu_1165_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_1939 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_1177_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_1947 : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_odd_load_reg_1952 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln168_fu_1187_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_reg_1957 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_1_fu_1195_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_1_reg_1962 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_2_fu_1203_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_2_reg_1967 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_3_fu_1211_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln168_3_reg_1973 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_fu_1225_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_1982 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op94_read_state3 : BOOLEAN;
    signal ap_predicate_op96_read_state3 : BOOLEAN;
    signal ap_predicate_op98_read_state3 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal stripes_0_addr_3_reg_2002 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_predicate_op124_read_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal stripes_1_addr_3_reg_2007 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_2_addr_3_reg_2012 : STD_LOGIC_VECTOR (11 downto 0);
    signal local_col_index_1_fu_1255_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_fu_1267_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_2040 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_predicate_op143_read_state6 : BOOLEAN;
    signal ap_predicate_op145_read_state6 : BOOLEAN;
    signal ap_predicate_op147_read_state6 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal stripes_0_addr_2_reg_2060 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_predicate_op174_read_state7 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal stripes_1_addr_2_reg_2065 : STD_LOGIC_VECTOR (11 downto 0);
    signal stripes_2_addr_2_reg_2070 : STD_LOGIC_VECTOR (11 downto 0);
    signal local_col_index_fu_1303_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln183_fu_1309_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln183_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_col_index_lo_reg_2118 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_fu_1336_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_2238 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln189_fu_1358_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln189_reg_2243 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_2_fu_1376_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln195_2_reg_2248 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln202_fu_1382_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln202_reg_2253 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln202_fu_1385_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln202_reg_2258 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln204_fu_1388_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln204_reg_2263 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln204_1_fu_1394_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln217_16_fu_1419_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln217_16_reg_2279 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln204_fu_1407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_fu_1413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_fu_1429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_reg_2287 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln207_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln217_fu_1456_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln217_reg_2297 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln217_5_fu_1492_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln217_5_reg_2302 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_fu_1506_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_reg_2310 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln209_fu_1500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernels_0_load_reg_2390 : STD_LOGIC_VECTOR (5 downto 0);
    signal stripes_0_load_reg_2395 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernels_1_load_reg_2400 : STD_LOGIC_VECTOR (5 downto 0);
    signal partial_sums_0_load_1_reg_2405 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernels_2_load_reg_2410 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_3_load_reg_2415 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_4_load_reg_2420 : STD_LOGIC_VECTOR (5 downto 0);
    signal stripes_1_load_reg_2425 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernels_5_load_reg_2430 : STD_LOGIC_VECTOR (5 downto 0);
    signal partial_sums_1_load_1_reg_2435 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernels_6_load_reg_2440 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_7_load_reg_2445 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_8_load_reg_2450 : STD_LOGIC_VECTOR (5 downto 0);
    signal stripes_2_load_reg_2455 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernels_9_load_reg_2460 : STD_LOGIC_VECTOR (5 downto 0);
    signal partial_sums_2_load_1_reg_2465 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernels_10_load_reg_2470 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernels_11_load_reg_2475 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1838_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln217_3_reg_2480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_1846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln217_4_reg_2485 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln217_7_reg_2490 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln217_8_reg_2495 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1904_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln217_11_reg_2500 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1912_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln217_12_reg_2505 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln223_fu_1599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln227_fu_1622_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln227_reg_2521 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_5_fu_1628_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_2526 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln227_fu_1616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_1_fu_1652_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln227_1_reg_2534 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_7_fu_1658_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_2539 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln227_1_fu_1646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_2_fu_1682_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln227_2_reg_2547 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_8_fu_1688_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2552 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln227_2_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_3_fu_1712_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln227_3_reg_2560 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_9_fu_1718_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_2565 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln227_3_fu_1706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1742_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_2573 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal icmp_ln240_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln182_fu_1753_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln245_fu_1757_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln252_fu_1787_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal maxes_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal maxes_ce0 : STD_LOGIC;
    signal maxes_we0 : STD_LOGIC;
    signal maxes_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxes_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxes_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal maxes_ce1 : STD_LOGIC;
    signal maxes_we1 : STD_LOGIC;
    signal maxes_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxes_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_row_indices_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_row_indices_ce0 : STD_LOGIC;
    signal local_row_indices_we0 : STD_LOGIC;
    signal local_row_indices_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_row_indices_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_row_indices_ce1 : STD_LOGIC;
    signal local_row_indices_we1 : STD_LOGIC;
    signal local_row_indices_d1 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_row_indices_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal partial_sums_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal partial_sums_0_ce0 : STD_LOGIC;
    signal partial_sums_0_we0 : STD_LOGIC;
    signal partial_sums_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_0_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal partial_sums_0_ce1 : STD_LOGIC;
    signal partial_sums_0_we1 : STD_LOGIC;
    signal partial_sums_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal partial_sums_1_ce0 : STD_LOGIC;
    signal partial_sums_1_we0 : STD_LOGIC;
    signal partial_sums_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal partial_sums_1_ce1 : STD_LOGIC;
    signal partial_sums_1_we1 : STD_LOGIC;
    signal partial_sums_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal partial_sums_2_ce0 : STD_LOGIC;
    signal partial_sums_2_we0 : STD_LOGIC;
    signal partial_sums_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal partial_sums_2_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal partial_sums_2_ce1 : STD_LOGIC;
    signal partial_sums_2_we1 : STD_LOGIC;
    signal partial_sums_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_sums_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_sums_ce0 : STD_LOGIC;
    signal kernel_sums_we0 : STD_LOGIC;
    signal kernel_sums_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_sums_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_sums_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal kernel_sums_ce1 : STD_LOGIC;
    signal kernel_sums_we1 : STD_LOGIC;
    signal kernel_sums_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_sums_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_838 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_col_index_0_reg_849 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_100_0_reg_859 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_0_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_col_index2_0_reg_887 : STD_LOGIC_VECTOR (16 downto 0);
    signal j3_0_reg_897 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_0_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_0_reg_922 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln183_reg_936 : STD_LOGIC_VECTOR (1 downto 0);
    signal i4_0_reg_947 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal phi_ln204_reg_958 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln204_1_reg_970 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_0_reg_981 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_0_reg_993 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal phi_ln223_reg_1004 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln223_fu_1610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j8_0_0_reg_1015 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal j8_0_1_reg_1026 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal j8_0_2_reg_1037 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal j8_0_3_reg_1048 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal i10_0_reg_1059 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state37 : BOOLEAN;
    signal read_col_index_new_0_reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln246_fu_1762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_col_index_ne_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln253_fu_1792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln147_fu_1231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln148_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln160_fu_1283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln161_fu_1296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln183_fu_1315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln204_fu_1400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln217_fu_1435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln217_12_fu_1521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln217_8_fu_1547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_fu_1605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln242_fu_1748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln249_fu_1768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln256_fu_1804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_57_fu_1779_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln195_fu_1362_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1830_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1887_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1896_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln229_fu_1640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln229_1_fu_1670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln229_2_fu_1700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln157_fu_1155_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln147_fu_1238_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln148_fu_1242_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln160_fu_1273_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln160_fu_1277_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln161_fu_1290_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_56_fu_1342_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal top_offset_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1444_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln217_2_fu_1452_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln217_1_fu_1440_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_1462_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_1474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln217_4_fu_1482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln217_3_fu_1470_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln217_13_fu_1486_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln217_7_fu_1512_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln217_14_fu_1516_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln217_6_fu_1496_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln217_fu_1537_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln217_15_fu_1542_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1821_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln217_9_fu_1557_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1830_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1838_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1846_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1854_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln217_10_fu_1572_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1863_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1871_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1879_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1887_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln217_11_fu_1587_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1896_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1904_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1912_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_condition_1609 : BOOLEAN;
    signal ap_condition_1605 : BOOLEAN;
    signal ap_condition_467 : BOOLEAN;
    signal ap_condition_521 : BOOLEAN;

    component fused_cnn_layer_mfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fused_cnn_layer_mg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_kernels_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_stripes_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component kernel_kernels_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_kernels_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component kernel_maxes IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_local_row_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (1 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    kernels_0_U : component kernel_kernels_0
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_0_address0,
        ce0 => kernels_0_ce0,
        q0 => kernels_0_q0);

    stripes_0_U : component kernel_stripes_0
    generic map (
        DataWidth => 8,
        AddressRange => 2056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stripes_0_address0,
        ce0 => stripes_0_ce0,
        q0 => stripes_0_q0,
        address1 => stripes_0_address1,
        ce1 => stripes_0_ce1,
        we1 => stripes_0_we1,
        d1 => stripes_0_d1);

    kernels_1_U : component kernel_kernels_1
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_1_address0,
        ce0 => kernels_1_ce0,
        q0 => kernels_1_q0);

    kernels_2_U : component kernel_kernels_2
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_2_address0,
        ce0 => kernels_2_ce0,
        q0 => kernels_2_q0);

    kernels_3_U : component kernel_kernels_3
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_3_address0,
        ce0 => kernels_3_ce0,
        q0 => kernels_3_q0);

    kernels_4_U : component kernel_kernels_4
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_4_address0,
        ce0 => kernels_4_ce0,
        q0 => kernels_4_q0);

    stripes_1_U : component kernel_stripes_0
    generic map (
        DataWidth => 8,
        AddressRange => 2056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stripes_1_address0,
        ce0 => stripes_1_ce0,
        q0 => stripes_1_q0,
        address1 => stripes_1_address1,
        ce1 => stripes_1_ce1,
        we1 => stripes_1_we1,
        d1 => stripes_1_d1);

    kernels_5_U : component kernel_kernels_5
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_5_address0,
        ce0 => kernels_5_ce0,
        q0 => kernels_5_q0);

    kernels_6_U : component kernel_kernels_6
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_6_address0,
        ce0 => kernels_6_ce0,
        q0 => kernels_6_q0);

    kernels_7_U : component kernel_kernels_7
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_7_address0,
        ce0 => kernels_7_ce0,
        q0 => kernels_7_q0);

    kernels_8_U : component kernel_kernels_8
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_8_address0,
        ce0 => kernels_8_ce0,
        q0 => kernels_8_q0);

    stripes_2_U : component kernel_stripes_0
    generic map (
        DataWidth => 8,
        AddressRange => 2056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stripes_2_address0,
        ce0 => stripes_2_ce0,
        q0 => stripes_2_q0,
        address1 => stripes_2_address1,
        ce1 => stripes_2_ce1,
        we1 => stripes_2_we1,
        d1 => stripes_2_d1);

    kernels_9_U : component kernel_kernels_9
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_9_address0,
        ce0 => kernels_9_ce0,
        q0 => kernels_9_q0);

    kernels_10_U : component kernel_kernels_10
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_10_address0,
        ce0 => kernels_10_ce0,
        q0 => kernels_10_q0);

    kernels_11_U : component kernel_kernels_11
    generic map (
        DataWidth => 6,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernels_11_address0,
        ce0 => kernels_11_ce0,
        q0 => kernels_11_q0);

    maxes_U : component kernel_maxes
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => maxes_address0,
        ce0 => maxes_ce0,
        we0 => maxes_we0,
        d0 => maxes_d0,
        q0 => maxes_q0,
        address1 => maxes_address1,
        ce1 => maxes_ce1,
        we1 => maxes_we1,
        d1 => maxes_d1,
        q1 => maxes_q1);

    local_row_indices_U : component kernel_local_row_bkb
    generic map (
        DataWidth => 2,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_row_indices_address0,
        ce0 => local_row_indices_ce0,
        we0 => local_row_indices_we0,
        d0 => local_row_indices_d0,
        address1 => local_row_indices_address1,
        ce1 => local_row_indices_ce1,
        we1 => local_row_indices_we1,
        d1 => local_row_indices_d1,
        q1 => local_row_indices_q1);

    partial_sums_0_U : component kernel_maxes
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => partial_sums_0_address0,
        ce0 => partial_sums_0_ce0,
        we0 => partial_sums_0_we0,
        d0 => partial_sums_0_d0,
        q0 => partial_sums_0_q0,
        address1 => partial_sums_0_address1,
        ce1 => partial_sums_0_ce1,
        we1 => partial_sums_0_we1,
        d1 => partial_sums_0_d1,
        q1 => partial_sums_0_q1);

    partial_sums_1_U : component kernel_maxes
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => partial_sums_1_address0,
        ce0 => partial_sums_1_ce0,
        we0 => partial_sums_1_we0,
        d0 => partial_sums_1_d0,
        q0 => partial_sums_1_q0,
        address1 => partial_sums_1_address1,
        ce1 => partial_sums_1_ce1,
        we1 => partial_sums_1_we1,
        d1 => partial_sums_1_d1,
        q1 => partial_sums_1_q1);

    partial_sums_2_U : component kernel_maxes
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => partial_sums_2_address0,
        ce0 => partial_sums_2_ce0,
        we0 => partial_sums_2_we0,
        d0 => partial_sums_2_d0,
        q0 => partial_sums_2_q0,
        address1 => partial_sums_2_address1,
        ce1 => partial_sums_2_ce1,
        we1 => partial_sums_2_we1,
        d1 => partial_sums_2_d1,
        q1 => partial_sums_2_q1);

    kernel_sums_U : component kernel_maxes
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_sums_address0,
        ce0 => kernel_sums_ce0,
        we0 => kernel_sums_we0,
        d0 => kernel_sums_d0,
        q0 => kernel_sums_q0,
        address1 => kernel_sums_address1,
        ce1 => kernel_sums_ce1,
        we1 => kernel_sums_we1,
        d1 => kernel_sums_d1,
        q1 => kernel_sums_q1);

    fused_cnn_layer_mfYi_U16 : component fused_cnn_layer_mfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_1120,
        din1 => reg_1125,
        din2 => reg_1130,
        din3 => j8_0_0_reg_1015,
        dout => tmp_5_fu_1628_p5);

    fused_cnn_layer_mfYi_U17 : component fused_cnn_layer_mfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_1120,
        din1 => reg_1125,
        din2 => reg_1130,
        din3 => j8_0_1_reg_1026,
        dout => tmp_7_fu_1658_p5);

    fused_cnn_layer_mfYi_U18 : component fused_cnn_layer_mfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_1120,
        din1 => reg_1125,
        din2 => reg_1130,
        din3 => j8_0_2_reg_1037,
        dout => tmp_8_fu_1688_p5);

    fused_cnn_layer_mfYi_U19 : component fused_cnn_layer_mfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_1120,
        din1 => reg_1125,
        din2 => reg_1130,
        din3 => j8_0_3_reg_1048,
        dout => tmp_9_fu_1718_p5);

    fused_cnn_layer_mg8j_U20 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1821_p0,
        din1 => kernels_0_load_reg_2390,
        din2 => reg_1120,
        dout => grp_fu_1821_p3);

    fused_cnn_layer_mg8j_U21 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1830_p0,
        din1 => kernels_1_load_reg_2400,
        din2 => partial_sums_0_load_1_reg_2405,
        dout => grp_fu_1830_p3);

    fused_cnn_layer_mg8j_U22 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1838_p0,
        din1 => kernels_2_load_reg_2410,
        din2 => partial_sums_0_q1,
        dout => grp_fu_1838_p3);

    fused_cnn_layer_mg8j_U23 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1846_p0,
        din1 => kernels_3_load_reg_2415,
        din2 => partial_sums_0_q0,
        dout => grp_fu_1846_p3);

    fused_cnn_layer_mg8j_U24 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1854_p0,
        din1 => kernels_4_load_reg_2420,
        din2 => reg_1125,
        dout => grp_fu_1854_p3);

    fused_cnn_layer_mg8j_U25 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1863_p0,
        din1 => kernels_5_load_reg_2430,
        din2 => partial_sums_1_load_1_reg_2435,
        dout => grp_fu_1863_p3);

    fused_cnn_layer_mg8j_U26 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1871_p0,
        din1 => kernels_6_load_reg_2440,
        din2 => partial_sums_1_q1,
        dout => grp_fu_1871_p3);

    fused_cnn_layer_mg8j_U27 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1879_p0,
        din1 => kernels_7_load_reg_2445,
        din2 => partial_sums_1_q0,
        dout => grp_fu_1879_p3);

    fused_cnn_layer_mg8j_U28 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1887_p0,
        din1 => kernels_8_load_reg_2450,
        din2 => reg_1130,
        dout => grp_fu_1887_p3);

    fused_cnn_layer_mg8j_U29 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1896_p0,
        din1 => kernels_9_load_reg_2460,
        din2 => partial_sums_2_load_1_reg_2465,
        dout => grp_fu_1896_p3);

    fused_cnn_layer_mg8j_U30 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1904_p0,
        din1 => kernels_10_load_reg_2470,
        din2 => partial_sums_2_q1,
        dout => grp_fu_1904_p3);

    fused_cnn_layer_mg8j_U31 : component fused_cnn_layer_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1912_p0,
        din1 => kernels_11_load_reg_2475,
        din2 => partial_sums_2_q0,
        dout => grp_fu_1912_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    compute_col_index_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                compute_col_index <= ap_const_lv16_1FC;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    compute_col_index <= compute_col_index_ne_reg_1081;
                end if; 
            end if;
        end if;
    end process;


    read_col_index_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                read_col_index <= ap_const_lv16_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    read_col_index <= read_col_index_new_0_reg_1070;
                end if; 
            end if;
        end if;
    end process;


    read_odd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                read_odd <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln240_fu_1736_p2 = ap_const_lv1_1) and (icmp_ln246_fu_1762_p2 = ap_const_lv1_1))) then 
                    read_odd <= xor_ln249_fu_1768_p2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    compute_col_index_ne_reg_1081_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                if ((icmp_ln253_fu_1792_p2 = ap_const_lv1_0)) then 
                    compute_col_index_ne_reg_1081 <= add_ln252_fu_1787_p2;
                elsif ((icmp_ln253_fu_1792_p2 = ap_const_lv1_1)) then 
                    compute_col_index_ne_reg_1081 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    i10_0_reg_1059_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln184_fu_1330_p2 = ap_const_lv1_1))) then 
                i10_0_reg_1059 <= ap_const_lv3_0;
            elsif ((not((((trunc_ln182_reg_2583 = ap_const_lv2_3) and (output_3_V_full_n = ap_const_logic_0)) or ((trunc_ln182_reg_2583 = ap_const_lv2_2) and (output_2_V_full_n = ap_const_logic_0)) or ((output_1_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_1)) or ((output_0_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i10_0_reg_1059 <= i_2_reg_2573;
            end if; 
        end if;
    end process;

    i1_0_reg_826_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (read_odd_load_load_fu_1147_p1 = ap_const_lv1_1))) then 
                i1_0_reg_826 <= ap_const_lv2_0;
            elsif ((not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_1))) then 
                i1_0_reg_826 <= i_reg_1947;
            end if; 
        end if;
    end process;

    i4_0_reg_947_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i4_0_reg_947 <= i_3_reg_2238;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln183_fu_1320_p2 = ap_const_lv1_1))) then 
                i4_0_reg_947 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_814_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (read_odd_load_load_fu_1147_p1 = ap_const_lv1_0))) then 
                i_0_reg_814 <= ap_const_lv2_0;
            elsif ((not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_1))) then 
                i_0_reg_814 <= i_1_reg_1939;
            end if; 
        end if;
    end process;

    j3_0_reg_897_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (read_odd_load_reg_1920 = ap_const_lv1_1) and (icmp_ln155_fu_1171_p2 = ap_const_lv1_0))) then 
                j3_0_reg_897 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j3_0_reg_897 <= j_reg_2040;
            end if; 
        end if;
    end process;

    j8_0_0_reg_1015_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j8_0_0_reg_1015 <= add_ln227_reg_2521;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                j8_0_0_reg_1015 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j8_0_1_reg_1026_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j8_0_1_reg_1026 <= add_ln227_1_reg_2534;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j8_0_1_reg_1026 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j8_0_2_reg_1037_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j8_0_2_reg_1037 <= add_ln227_2_reg_2547;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j8_0_2_reg_1037 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j8_0_3_reg_1048_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                j8_0_3_reg_1048 <= add_ln227_3_reg_2560;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j8_0_3_reg_1048 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_838_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln142_fu_1159_p2 = ap_const_lv1_0) and (read_odd_load_reg_1920 = ap_const_lv1_0))) then 
                j_0_reg_838 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_838 <= j_1_reg_1982;
            end if; 
        end if;
    end process;

    l_0_reg_981_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln209_fu_1500_p2 = ap_const_lv1_1))) then 
                l_0_reg_981 <= l_reg_2287;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln204_1_fu_1413_p2 = ap_const_lv1_1) and (icmp_ln204_fu_1407_p2 = ap_const_lv1_1))) then 
                l_0_reg_981 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    local_col_index2_0_reg_887_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (read_odd_load_reg_1920 = ap_const_lv1_1) and (icmp_ln155_fu_1171_p2 = ap_const_lv1_0))) then 
                local_col_index2_0_reg_887 <= sext_ln157_reg_1930;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                local_col_index2_0_reg_887 <= local_col_index_fu_1303_p2;
            end if; 
        end if;
    end process;

    local_col_index_0_reg_849_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln142_fu_1159_p2 = ap_const_lv1_0) and (read_odd_load_reg_1920 = ap_const_lv1_0))) then 
                local_col_index_0_reg_849 <= sext_ln157_reg_1930;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                local_col_index_0_reg_849 <= local_col_index_1_fu_1255_p2;
            end if; 
        end if;
    end process;

    m_0_reg_993_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                m_0_reg_993 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                m_0_reg_993 <= m_reg_2310;
            end if; 
        end if;
    end process;

    phi_ln183_reg_936_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln183_fu_1320_p2 = ap_const_lv1_0))) then 
                phi_ln183_reg_936 <= add_ln183_fu_1309_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln155_fu_1171_p2 = ap_const_lv1_1) and (read_odd_load_reg_1920 = ap_const_lv1_1)) or ((icmp_ln142_fu_1159_p2 = ap_const_lv1_1) and (read_odd_load_reg_1920 = ap_const_lv1_0))))) then 
                phi_ln183_reg_936 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln204_1_reg_970_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln204_fu_1407_p2 = ap_const_lv1_0))) then 
                phi_ln204_1_reg_970 <= add_ln204_1_fu_1394_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_ln204_1_reg_970 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln204_reg_958_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln204_fu_1407_p2 = ap_const_lv1_1) and (icmp_ln204_1_fu_1413_p2 = ap_const_lv1_0))) then 
                phi_ln204_reg_958 <= add_ln204_reg_2263;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_ln204_reg_958 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln223_reg_1004_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln207_fu_1423_p2 = ap_const_lv1_1))) then 
                phi_ln223_reg_1004 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln223_fu_1610_p2 = ap_const_lv1_0))) then 
                phi_ln223_reg_1004 <= add_ln223_fu_1599_p2;
            end if; 
        end if;
    end process;

    read_col_index_new_0_reg_1070_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln240_fu_1736_p2 = ap_const_lv1_1))) then
                if ((icmp_ln246_fu_1762_p2 = ap_const_lv1_0)) then 
                    read_col_index_new_0_reg_1070 <= add_ln245_fu_1757_p2;
                elsif ((icmp_ln246_fu_1762_p2 = ap_const_lv1_1)) then 
                    read_col_index_new_0_reg_1070 <= ap_const_lv16_1;
                end if;
            end if; 
        end if;
    end process;

    reg_1120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                reg_1120 <= partial_sums_0_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                reg_1120 <= partial_sums_0_q0;
            end if; 
        end if;
    end process;

    reg_1125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                reg_1125 <= partial_sums_1_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                reg_1125 <= partial_sums_1_q0;
            end if; 
        end if;
    end process;

    reg_1130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                reg_1130 <= partial_sums_2_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                reg_1130 <= partial_sums_2_q0;
            end if; 
        end if;
    end process;

    tmp_0_reg_908_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1609)) then
                if ((i1_0_reg_826 = ap_const_lv2_0)) then 
                    tmp_0_reg_908 <= input_upper_0_V_dout;
                elsif ((i1_0_reg_826 = ap_const_lv2_1)) then 
                    tmp_0_reg_908 <= input_upper_1_V_dout;
                elsif ((not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)))) then 
                    tmp_0_reg_908 <= input_upper_2_V_dout;
                end if;
            end if; 
        end if;
    end process;

    tmp_100_0_reg_859_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1605)) then
                if ((i_0_reg_814 = ap_const_lv2_0)) then 
                    tmp_100_0_reg_859 <= input_upper_0_V_dout;
                elsif ((i_0_reg_814 = ap_const_lv2_1)) then 
                    tmp_100_0_reg_859 <= input_upper_1_V_dout;
                elsif ((not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)))) then 
                    tmp_100_0_reg_859 <= input_upper_2_V_dout;
                end if;
            end if; 
        end if;
    end process;

    tmp_101_0_reg_873_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_467)) then
                if ((i_0_reg_814 = ap_const_lv2_0)) then 
                    tmp_101_0_reg_873 <= input_lower_0_V_dout;
                elsif ((i_0_reg_814 = ap_const_lv2_1)) then 
                    tmp_101_0_reg_873 <= input_lower_1_V_dout;
                elsif ((not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)))) then 
                    tmp_101_0_reg_873 <= input_lower_2_V_dout;
                end if;
            end if; 
        end if;
    end process;

    tmp_99_0_reg_922_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_521)) then
                if ((i1_0_reg_826 = ap_const_lv2_0)) then 
                    tmp_99_0_reg_922 <= input_lower_0_V_dout;
                elsif ((i1_0_reg_826 = ap_const_lv2_1)) then 
                    tmp_99_0_reg_922 <= input_lower_1_V_dout;
                elsif ((not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)))) then 
                    tmp_99_0_reg_922 <= input_lower_2_V_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln204_reg_2263 <= add_ln204_fu_1388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln217_11_reg_2500 <= grp_fu_1904_p3;
                add_ln217_12_reg_2505 <= grp_fu_1912_p3;
                add_ln217_3_reg_2480 <= grp_fu_1838_p3;
                add_ln217_4_reg_2485 <= grp_fu_1846_p3;
                add_ln217_7_reg_2490 <= grp_fu_1871_p3;
                add_ln217_8_reg_2495 <= grp_fu_1879_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln204_1_fu_1413_p2 = ap_const_lv1_1) and (icmp_ln204_fu_1407_p2 = ap_const_lv1_1))) then
                add_ln217_16_reg_2279 <= add_ln217_16_fu_1419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln227_1_reg_2534 <= add_ln227_1_fu_1652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln227_2_reg_2547 <= add_ln227_2_fu_1682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                add_ln227_3_reg_2560 <= add_ln227_3_fu_1712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln227_reg_2521 <= add_ln227_fu_1622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln183_fu_1320_p2 = ap_const_lv1_1))) then
                compute_col_index_lo_reg_2118 <= compute_col_index;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln253_fu_1792_p2 = ap_const_lv1_1))) then
                compute_odd <= xor_ln256_fu_1804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln155_fu_1171_p2 = ap_const_lv1_1) and (read_odd_load_reg_1920 = ap_const_lv1_1)) or ((icmp_ln142_fu_1159_p2 = ap_const_lv1_1) and (read_odd_load_reg_1920 = ap_const_lv1_0))))) then
                compute_odd_load_reg_1952 <= compute_odd;
                    select_ln168_1_reg_1962(1) <= select_ln168_1_fu_1195_p3(1);
                    select_ln168_2_reg_1967(1) <= select_ln168_2_fu_1203_p3(1);
                    select_ln168_3_reg_1973(1) <= select_ln168_3_fu_1211_p3(1);
                    select_ln168_reg_1957(1) <= select_ln168_fu_1187_p3(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (read_odd_load_reg_1920 = ap_const_lv1_0))) then
                i_1_reg_1939 <= i_1_fu_1165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                i_2_reg_2573 <= i_2_fu_1742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_3_reg_2238 <= i_3_fu_1336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (read_odd_load_reg_1920 = ap_const_lv1_1))) then
                i_reg_1947 <= i_fu_1177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_1_reg_1982 <= j_1_fu_1225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                j_reg_2040 <= j_fu_1267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                kernels_0_load_reg_2390 <= kernels_0_q0;
                kernels_10_load_reg_2470 <= kernels_10_q0;
                kernels_11_load_reg_2475 <= kernels_11_q0;
                kernels_1_load_reg_2400 <= kernels_1_q0;
                kernels_2_load_reg_2410 <= kernels_2_q0;
                kernels_3_load_reg_2415 <= kernels_3_q0;
                kernels_4_load_reg_2420 <= kernels_4_q0;
                kernels_5_load_reg_2430 <= kernels_5_q0;
                kernels_6_load_reg_2440 <= kernels_6_q0;
                kernels_7_load_reg_2445 <= kernels_7_q0;
                kernels_8_load_reg_2450 <= kernels_8_q0;
                kernels_9_load_reg_2460 <= kernels_9_q0;
                partial_sums_0_load_1_reg_2405 <= partial_sums_0_q1;
                partial_sums_1_load_1_reg_2435 <= partial_sums_1_q1;
                partial_sums_2_load_1_reg_2465 <= partial_sums_2_q1;
                stripes_0_load_reg_2395 <= stripes_0_q0;
                stripes_1_load_reg_2425 <= stripes_1_q0;
                stripes_2_load_reg_2455 <= stripes_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                l_reg_2287 <= l_fu_1429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                m_reg_2310 <= m_fu_1506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                read_col_index_load_reg_1925 <= read_col_index;
                read_odd_load_reg_1920 <= read_odd;
                sext_ln157_reg_1930 <= sext_ln157_fu_1155_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_1135 <= grp_fu_1098_p3;
                reg_1141 <= grp_fu_1112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln184_fu_1330_p2 = ap_const_lv1_0))) then
                select_ln195_2_reg_2248 <= select_ln195_2_fu_1376_p3;
                trunc_ln189_reg_2243 <= trunc_ln189_fu_1358_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                stripes_0_addr_2_reg_2060 <= sext_ln161_fu_1296_p1(12 - 1 downto 0);
                stripes_1_addr_2_reg_2065 <= sext_ln161_fu_1296_p1(12 - 1 downto 0);
                stripes_2_addr_2_reg_2070 <= sext_ln161_fu_1296_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                stripes_0_addr_3_reg_2002 <= sext_ln148_fu_1248_p1(12 - 1 downto 0);
                stripes_1_addr_3_reg_2007 <= sext_ln148_fu_1248_p1(12 - 1 downto 0);
                stripes_2_addr_3_reg_2012 <= sext_ln148_fu_1248_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sub_ln217_reg_2297 <= sub_ln217_fu_1456_p2;
                    zext_ln217_5_reg_2302(11 downto 1) <= zext_ln217_5_fu_1492_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln227_fu_1616_p2 = ap_const_lv1_0))) then
                tmp_5_reg_2526 <= tmp_5_fu_1628_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln227_1_fu_1646_p2 = ap_const_lv1_0))) then
                tmp_7_reg_2539 <= tmp_7_fu_1658_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln227_2_fu_1676_p2 = ap_const_lv1_0))) then
                tmp_8_reg_2552 <= tmp_8_fu_1688_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln227_3_fu_1706_p2 = ap_const_lv1_0))) then
                tmp_9_reg_2565 <= tmp_9_fu_1718_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln240_fu_1736_p2 = ap_const_lv1_0))) then
                trunc_ln182_reg_2583 <= trunc_ln182_fu_1753_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln202_reg_2258 <= trunc_ln202_fu_1385_p1;
                    zext_ln202_reg_2253(0) <= zext_ln202_fu_1382_p1(0);
            end if;
        end if;
    end process;
    select_ln168_reg_1957(0) <= '0';
    select_ln168_1_reg_1962(0) <= '1';
    select_ln168_2_reg_1967(0) <= '0';
    select_ln168_3_reg_1973(0) <= '1';
    zext_ln202_reg_2253(12 downto 1) <= "000000000000";
    zext_ln217_5_reg_2302(0) <= '0';
    zext_ln217_5_reg_2302(12) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, output_0_V_full_n, output_1_V_full_n, output_2_V_full_n, output_3_V_full_n, ap_CS_fsm_state6, icmp_ln158_fu_1261_p2, i1_0_reg_826, ap_CS_fsm_state3, icmp_ln145_fu_1219_p2, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state37, trunc_ln182_reg_2583, read_odd_load_reg_1920, ap_CS_fsm_state2, icmp_ln155_fu_1171_p2, icmp_ln142_fu_1159_p2, ap_predicate_op94_read_state3, ap_predicate_op96_read_state3, ap_predicate_op98_read_state3, ap_predicate_op124_read_state4, ap_predicate_op143_read_state6, ap_predicate_op145_read_state6, ap_predicate_op147_read_state6, ap_predicate_op174_read_state7, ap_CS_fsm_state9, icmp_ln183_fu_1320_p2, ap_CS_fsm_state10, icmp_ln184_fu_1330_p2, ap_CS_fsm_state13, icmp_ln204_fu_1407_p2, icmp_ln204_1_fu_1413_p2, ap_CS_fsm_state14, icmp_ln207_fu_1423_p2, ap_CS_fsm_state16, icmp_ln209_fu_1500_p2, ap_CS_fsm_state20, ap_CS_fsm_state22, icmp_ln227_fu_1616_p2, ap_CS_fsm_state25, icmp_ln227_1_fu_1646_p2, ap_CS_fsm_state28, icmp_ln227_2_fu_1676_p2, ap_CS_fsm_state31, icmp_ln227_3_fu_1706_p2, ap_CS_fsm_state36, icmp_ln240_fu_1736_p2, icmp_ln223_fu_1610_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln155_fu_1171_p2 = ap_const_lv1_1) and (read_odd_load_reg_1920 = ap_const_lv1_1)) or ((icmp_ln142_fu_1159_p2 = ap_const_lv1_1) and (read_odd_load_reg_1920 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (read_odd_load_reg_1920 = ap_const_lv1_1) and (icmp_ln155_fu_1171_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if ((not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln183_fu_1320_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln184_fu_1330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln204_1_fu_1413_p2 = ap_const_lv1_1) and (icmp_ln204_fu_1407_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln204_fu_1407_p2 = ap_const_lv1_1) and (icmp_ln204_1_fu_1413_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln207_fu_1423_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln209_fu_1500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln223_fu_1610_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln227_fu_1616_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln227_1_fu_1646_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln227_2_fu_1676_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln227_3_fu_1706_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln240_fu_1736_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if ((not((((trunc_ln182_reg_2583 = ap_const_lv2_3) and (output_3_V_full_n = ap_const_logic_0)) or ((trunc_ln182_reg_2583 = ap_const_lv2_2) and (output_2_V_full_n = ap_const_logic_0)) or ((output_1_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_1)) or ((output_0_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln148_fu_1242_p2 <= std_logic_vector(unsigned(ap_const_lv13_202) + unsigned(trunc_ln147_fu_1238_p1));
    add_ln160_fu_1277_p2 <= std_logic_vector(unsigned(ap_const_lv13_404) + unsigned(trunc_ln160_fu_1273_p1));
    add_ln161_fu_1290_p2 <= std_logic_vector(unsigned(ap_const_lv13_606) + unsigned(trunc_ln160_fu_1273_p1));
    add_ln183_fu_1309_p2 <= std_logic_vector(unsigned(phi_ln183_reg_936) + unsigned(ap_const_lv2_1));
    add_ln204_1_fu_1394_p2 <= std_logic_vector(unsigned(phi_ln204_1_reg_970) + unsigned(ap_const_lv2_1));
    add_ln204_fu_1388_p2 <= std_logic_vector(unsigned(phi_ln204_reg_958) + unsigned(ap_const_lv2_1));
    add_ln217_13_fu_1486_p2 <= std_logic_vector(unsigned(zext_ln217_4_fu_1482_p1) + unsigned(zext_ln217_3_fu_1470_p1));
    add_ln217_14_fu_1516_p2 <= std_logic_vector(unsigned(sub_ln217_reg_2297) + unsigned(zext_ln217_7_fu_1512_p1));
    add_ln217_15_fu_1542_p2 <= std_logic_vector(unsigned(zext_ln217_5_reg_2302) + unsigned(add_ln217_fu_1537_p2));
    add_ln217_16_fu_1419_p2 <= std_logic_vector(unsigned(zext_ln202_reg_2253) + unsigned(trunc_ln202_reg_2258));
    add_ln217_fu_1537_p2 <= std_logic_vector(unsigned(zext_ln217_6_fu_1496_p1) + unsigned(add_ln217_16_reg_2279));
    add_ln223_fu_1599_p2 <= std_logic_vector(unsigned(phi_ln223_reg_1004) + unsigned(ap_const_lv2_1));
    add_ln227_1_fu_1652_p2 <= std_logic_vector(unsigned(j8_0_1_reg_1026) + unsigned(ap_const_lv2_1));
    add_ln227_2_fu_1682_p2 <= std_logic_vector(unsigned(j8_0_2_reg_1037) + unsigned(ap_const_lv2_1));
    add_ln227_3_fu_1712_p2 <= std_logic_vector(unsigned(j8_0_3_reg_1048) + unsigned(ap_const_lv2_1));
    add_ln227_fu_1622_p2 <= std_logic_vector(unsigned(j8_0_0_reg_1015) + unsigned(ap_const_lv2_1));
    add_ln229_1_fu_1670_p2 <= std_logic_vector(unsigned(kernel_sums_q0) + unsigned(tmp_7_reg_2539));
    add_ln229_2_fu_1700_p2 <= std_logic_vector(unsigned(kernel_sums_q0) + unsigned(tmp_8_reg_2552));
    add_ln229_fu_1640_p2 <= std_logic_vector(unsigned(kernel_sums_q0) + unsigned(tmp_5_reg_2526));
    add_ln245_fu_1757_p2 <= std_logic_vector(signed(read_col_index_load_reg_1925) + signed(ap_const_lv16_2));
    add_ln252_fu_1787_p2 <= std_logic_vector(unsigned(compute_col_index_lo_reg_2118) + unsigned(ap_const_lv16_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, ap_predicate_op94_read_state3, ap_predicate_op96_read_state3, ap_predicate_op98_read_state3)
    begin
                ap_block_state3 <= (((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state37_assign_proc : process(output_0_V_full_n, output_1_V_full_n, output_2_V_full_n, output_3_V_full_n, trunc_ln182_reg_2583)
    begin
                ap_block_state37 <= (((trunc_ln182_reg_2583 = ap_const_lv2_3) and (output_3_V_full_n = ap_const_logic_0)) or ((trunc_ln182_reg_2583 = ap_const_lv2_2) and (output_2_V_full_n = ap_const_logic_0)) or ((output_1_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_1)) or ((output_0_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_0)));
    end process;


    ap_block_state4_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i_0_reg_814, ap_predicate_op124_read_state4)
    begin
                ap_block_state4 <= (((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)));
    end process;


    ap_block_state6_assign_proc : process(input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, ap_predicate_op143_read_state6, ap_predicate_op145_read_state6, ap_predicate_op147_read_state6)
    begin
                ap_block_state6 <= (((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state7_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, ap_predicate_op174_read_state7)
    begin
                ap_block_state7 <= (((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)));
    end process;


    ap_condition_1605_assign_proc : process(input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, ap_CS_fsm_state3, icmp_ln145_fu_1219_p2, ap_predicate_op94_read_state3, ap_predicate_op96_read_state3, ap_predicate_op98_read_state3)
    begin
                ap_condition_1605 <= (not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1609_assign_proc : process(input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, ap_CS_fsm_state6, icmp_ln158_fu_1261_p2, ap_predicate_op143_read_state6, ap_predicate_op145_read_state6, ap_predicate_op147_read_state6)
    begin
                ap_condition_1609 <= (not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0));
    end process;


    ap_condition_467_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i_0_reg_814, ap_CS_fsm_state4, ap_predicate_op124_read_state4)
    begin
                ap_condition_467 <= (not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4));
    end process;


    ap_condition_521_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, ap_CS_fsm_state7, ap_predicate_op174_read_state7)
    begin
                ap_condition_521 <= (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op124_read_state4_assign_proc : process(i_0_reg_814)
    begin
                ap_predicate_op124_read_state4 <= (not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)));
    end process;


    ap_predicate_op143_read_state6_assign_proc : process(icmp_ln158_fu_1261_p2, i1_0_reg_826)
    begin
                ap_predicate_op143_read_state6 <= ((i1_0_reg_826 = ap_const_lv2_1) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op145_read_state6_assign_proc : process(icmp_ln158_fu_1261_p2, i1_0_reg_826)
    begin
                ap_predicate_op145_read_state6 <= ((i1_0_reg_826 = ap_const_lv2_0) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op147_read_state6_assign_proc : process(icmp_ln158_fu_1261_p2, i1_0_reg_826)
    begin
                ap_predicate_op147_read_state6 <= (not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op174_read_state7_assign_proc : process(i1_0_reg_826)
    begin
                ap_predicate_op174_read_state7 <= (not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)));
    end process;


    ap_predicate_op94_read_state3_assign_proc : process(icmp_ln145_fu_1219_p2, i_0_reg_814)
    begin
                ap_predicate_op94_read_state3 <= ((i_0_reg_814 = ap_const_lv2_1) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op96_read_state3_assign_proc : process(icmp_ln145_fu_1219_p2, i_0_reg_814)
    begin
                ap_predicate_op96_read_state3 <= ((i_0_reg_814 = ap_const_lv2_0) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op98_read_state3_assign_proc : process(icmp_ln145_fu_1219_p2, i_0_reg_814)
    begin
                ap_predicate_op98_read_state3 <= (not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    grp_fu_1092_p2 <= "1" when (signed(kernel_sums_q0) > signed(maxes_q0)) else "0";
    grp_fu_1098_p3 <= 
        kernel_sums_q0 when (grp_fu_1092_p2(0) = '1') else 
        maxes_q0;
    grp_fu_1106_p2 <= "1" when (signed(kernel_sums_q1) > signed(maxes_q1)) else "0";
    grp_fu_1112_p3 <= 
        kernel_sums_q1 when (grp_fu_1106_p2(0) = '1') else 
        maxes_q1;
    grp_fu_1821_p0 <= zext_ln217_9_fu_1557_p1(8 - 1 downto 0);
    grp_fu_1830_p0 <= zext_ln217_9_fu_1557_p1(8 - 1 downto 0);
    grp_fu_1838_p0 <= zext_ln217_9_fu_1557_p1(8 - 1 downto 0);
    grp_fu_1846_p0 <= zext_ln217_9_fu_1557_p1(8 - 1 downto 0);
    grp_fu_1854_p0 <= zext_ln217_10_fu_1572_p1(8 - 1 downto 0);
    grp_fu_1863_p0 <= zext_ln217_10_fu_1572_p1(8 - 1 downto 0);
    grp_fu_1871_p0 <= zext_ln217_10_fu_1572_p1(8 - 1 downto 0);
    grp_fu_1879_p0 <= zext_ln217_10_fu_1572_p1(8 - 1 downto 0);
    grp_fu_1887_p0 <= zext_ln217_11_fu_1587_p1(8 - 1 downto 0);
    grp_fu_1896_p0 <= zext_ln217_11_fu_1587_p1(8 - 1 downto 0);
    grp_fu_1904_p0 <= zext_ln217_11_fu_1587_p1(8 - 1 downto 0);
    grp_fu_1912_p0 <= zext_ln217_11_fu_1587_p1(8 - 1 downto 0);
    i_1_fu_1165_p2 <= std_logic_vector(unsigned(i_0_reg_814) + unsigned(ap_const_lv2_1));
    i_2_fu_1742_p2 <= std_logic_vector(unsigned(i10_0_reg_1059) + unsigned(ap_const_lv3_1));
    i_3_fu_1336_p2 <= std_logic_vector(unsigned(i4_0_reg_947) + unsigned(ap_const_lv3_1));
    i_fu_1177_p2 <= std_logic_vector(unsigned(i1_0_reg_826) + unsigned(ap_const_lv2_1));
    icmp_ln142_fu_1159_p2 <= "1" when (i_0_reg_814 = ap_const_lv2_3) else "0";
    icmp_ln145_fu_1219_p2 <= "1" when (j_0_reg_838 = ap_const_lv2_2) else "0";
    icmp_ln155_fu_1171_p2 <= "1" when (i1_0_reg_826 = ap_const_lv2_3) else "0";
    icmp_ln158_fu_1261_p2 <= "1" when (j3_0_reg_897 = ap_const_lv2_2) else "0";
    icmp_ln183_fu_1320_p2 <= "1" when (phi_ln183_reg_936 = ap_const_lv2_3) else "0";
    icmp_ln184_fu_1330_p2 <= "1" when (i4_0_reg_947 = ap_const_lv3_4) else "0";
    icmp_ln204_1_fu_1413_p2 <= "1" when (phi_ln204_reg_958 = ap_const_lv2_2) else "0";
    icmp_ln204_fu_1407_p2 <= "1" when (phi_ln204_1_reg_970 = ap_const_lv2_3) else "0";
    icmp_ln207_fu_1423_p2 <= "1" when (l_0_reg_981 = ap_const_lv2_3) else "0";
    icmp_ln209_fu_1500_p2 <= "1" when (m_0_reg_993 = ap_const_lv2_3) else "0";
    icmp_ln223_fu_1610_p2 <= "1" when (phi_ln223_reg_1004 = ap_const_lv2_3) else "0";
    icmp_ln227_1_fu_1646_p2 <= "1" when (j8_0_1_reg_1026 = ap_const_lv2_3) else "0";
    icmp_ln227_2_fu_1676_p2 <= "1" when (j8_0_2_reg_1037 = ap_const_lv2_3) else "0";
    icmp_ln227_3_fu_1706_p2 <= "1" when (j8_0_3_reg_1048 = ap_const_lv2_3) else "0";
    icmp_ln227_fu_1616_p2 <= "1" when (j8_0_0_reg_1015 = ap_const_lv2_3) else "0";
    icmp_ln240_fu_1736_p2 <= "1" when (i10_0_reg_1059 = ap_const_lv3_4) else "0";
    icmp_ln246_fu_1762_p2 <= "1" when (add_ln245_fu_1757_p2 = ap_const_lv16_201) else "0";
    icmp_ln253_fu_1792_p2 <= "1" when (add_ln252_fu_1787_p2 = ap_const_lv16_200) else "0";

    input_lower_0_V_blk_n_assign_proc : process(input_lower_0_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if ((((i_0_reg_814 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((i1_0_reg_826 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_lower_0_V_blk_n <= input_lower_0_V_empty_n;
        else 
            input_lower_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_lower_0_V_read_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_predicate_op174_read_state7)
    begin
        if (((not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (i_0_reg_814 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (i1_0_reg_826 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_lower_0_V_read <= ap_const_logic_1;
        else 
            input_lower_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    input_lower_1_V_blk_n_assign_proc : process(input_lower_1_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if ((((i_0_reg_814 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((i1_0_reg_826 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_lower_1_V_blk_n <= input_lower_1_V_empty_n;
        else 
            input_lower_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_lower_1_V_read_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_predicate_op174_read_state7)
    begin
        if (((not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (i_0_reg_814 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (i1_0_reg_826 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_lower_1_V_read <= ap_const_logic_1;
        else 
            input_lower_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    input_lower_2_V_blk_n_assign_proc : process(input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_lower_2_V_blk_n <= input_lower_2_V_empty_n;
        else 
            input_lower_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_lower_2_V_read_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_predicate_op174_read_state7)
    begin
        if (((not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (ap_predicate_op124_read_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (ap_predicate_op174_read_state7 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_lower_2_V_read <= ap_const_logic_1;
        else 
            input_lower_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    input_upper_0_V_blk_n_assign_proc : process(input_upper_0_V_empty_n, ap_CS_fsm_state6, icmp_ln158_fu_1261_p2, i1_0_reg_826, ap_CS_fsm_state3, icmp_ln145_fu_1219_p2, i_0_reg_814)
    begin
        if ((((i_0_reg_814 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0)) or ((i1_0_reg_826 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0)))) then 
            input_upper_0_V_blk_n <= input_upper_0_V_empty_n;
        else 
            input_upper_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_upper_0_V_read_assign_proc : process(input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_predicate_op94_read_state3, ap_predicate_op96_read_state3, ap_predicate_op98_read_state3, ap_predicate_op143_read_state6, ap_predicate_op145_read_state6, ap_predicate_op147_read_state6)
    begin
        if (((not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_predicate_op96_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_predicate_op145_read_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_upper_0_V_read <= ap_const_logic_1;
        else 
            input_upper_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    input_upper_1_V_blk_n_assign_proc : process(input_upper_1_V_empty_n, ap_CS_fsm_state6, icmp_ln158_fu_1261_p2, i1_0_reg_826, ap_CS_fsm_state3, icmp_ln145_fu_1219_p2, i_0_reg_814)
    begin
        if ((((i_0_reg_814 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0)) or ((i1_0_reg_826 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0)))) then 
            input_upper_1_V_blk_n <= input_upper_1_V_empty_n;
        else 
            input_upper_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_upper_1_V_read_assign_proc : process(input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_predicate_op94_read_state3, ap_predicate_op96_read_state3, ap_predicate_op98_read_state3, ap_predicate_op143_read_state6, ap_predicate_op145_read_state6, ap_predicate_op147_read_state6)
    begin
        if (((not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_predicate_op94_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_predicate_op143_read_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_upper_1_V_read <= ap_const_logic_1;
        else 
            input_upper_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    input_upper_2_V_blk_n_assign_proc : process(input_upper_2_V_empty_n, ap_CS_fsm_state6, icmp_ln158_fu_1261_p2, i1_0_reg_826, ap_CS_fsm_state3, icmp_ln145_fu_1219_p2, i_0_reg_814)
    begin
        if (((not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln145_fu_1219_p2 = ap_const_lv1_0)) or (not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln158_fu_1261_p2 = ap_const_lv1_0)))) then 
            input_upper_2_V_blk_n <= input_upper_2_V_empty_n;
        else 
            input_upper_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_upper_2_V_read_assign_proc : process(input_upper_0_V_empty_n, input_upper_1_V_empty_n, input_upper_2_V_empty_n, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_predicate_op94_read_state3, ap_predicate_op96_read_state3, ap_predicate_op98_read_state3, ap_predicate_op143_read_state6, ap_predicate_op145_read_state6, ap_predicate_op147_read_state6)
    begin
        if (((not((((ap_predicate_op98_read_state3 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op96_read_state3 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op94_read_state3 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_predicate_op98_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((ap_predicate_op147_read_state6 = ap_const_boolean_1) and (input_upper_2_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op145_read_state6 = ap_const_boolean_1) and (input_upper_0_V_empty_n = ap_const_logic_0)) or ((ap_predicate_op143_read_state6 = ap_const_boolean_1) and (input_upper_1_V_empty_n = ap_const_logic_0)))) and (ap_predicate_op147_read_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_upper_2_V_read <= ap_const_logic_1;
        else 
            input_upper_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_1225_p2 <= std_logic_vector(unsigned(j_0_reg_838) + unsigned(ap_const_lv2_1));
    j_fu_1267_p2 <= std_logic_vector(unsigned(j3_0_reg_897) + unsigned(ap_const_lv2_1));

    kernel_sums_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state28, ap_CS_fsm_state31, icmp_ln227_3_fu_1706_p2, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, zext_ln223_fu_1605_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln227_3_fu_1706_p2 = ap_const_lv1_0)))) then 
            kernel_sums_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            kernel_sums_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            kernel_sums_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln227_3_fu_1706_p2 = ap_const_lv1_1)))) then 
            kernel_sums_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            kernel_sums_address0 <= zext_ln223_fu_1605_p1(2 - 1 downto 0);
        else 
            kernel_sums_address0 <= "XX";
        end if; 
    end process;


    kernel_sums_address1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            kernel_sums_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            kernel_sums_address1 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            kernel_sums_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            kernel_sums_address1 <= "XX";
        end if; 
    end process;


    kernel_sums_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state28, ap_CS_fsm_state31, icmp_ln227_3_fu_1706_p2, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln227_3_fu_1706_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln227_3_fu_1706_p2 = ap_const_lv1_1)))) then 
            kernel_sums_ce0 <= ap_const_logic_1;
        else 
            kernel_sums_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_sums_ce1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            kernel_sums_ce1 <= ap_const_logic_1;
        else 
            kernel_sums_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_sums_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, add_ln229_fu_1640_p2, add_ln229_1_fu_1670_p2, add_ln229_2_fu_1700_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            kernel_sums_d0 <= add_ln229_2_fu_1700_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            kernel_sums_d0 <= add_ln229_1_fu_1670_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            kernel_sums_d0 <= add_ln229_fu_1640_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            kernel_sums_d0 <= ap_const_lv32_0;
        else 
            kernel_sums_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    kernel_sums_d1 <= std_logic_vector(unsigned(kernel_sums_q0) + unsigned(tmp_9_reg_2565));

    kernel_sums_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            kernel_sums_we0 <= ap_const_logic_1;
        else 
            kernel_sums_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_sums_we1_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            kernel_sums_we1 <= ap_const_logic_1;
        else 
            kernel_sums_we1 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_0_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_0_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_0_ce0 <= ap_const_logic_1;
        else 
            kernels_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_10_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_10_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_10_ce0 <= ap_const_logic_1;
        else 
            kernels_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_11_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_11_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_11_ce0 <= ap_const_logic_1;
        else 
            kernels_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_1_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_1_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_1_ce0 <= ap_const_logic_1;
        else 
            kernels_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_2_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_2_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_2_ce0 <= ap_const_logic_1;
        else 
            kernels_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_3_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_3_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_3_ce0 <= ap_const_logic_1;
        else 
            kernels_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_4_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_4_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_4_ce0 <= ap_const_logic_1;
        else 
            kernels_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_5_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_5_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_5_ce0 <= ap_const_logic_1;
        else 
            kernels_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_6_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_6_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_6_ce0 <= ap_const_logic_1;
        else 
            kernels_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_7_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_7_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_7_ce0 <= ap_const_logic_1;
        else 
            kernels_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_8_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_8_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_8_ce0 <= ap_const_logic_1;
        else 
            kernels_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernels_9_address0 <= sext_ln217_12_fu_1521_p1(4 - 1 downto 0);

    kernels_9_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            kernels_9_ce0 <= ap_const_logic_1;
        else 
            kernels_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_fu_1429_p2 <= std_logic_vector(unsigned(l_0_reg_981) + unsigned(ap_const_lv2_1));
    local_col_index_1_fu_1255_p2 <= std_logic_vector(signed(local_col_index_0_reg_849) + signed(ap_const_lv17_1));
    local_col_index_fu_1303_p2 <= std_logic_vector(unsigned(local_col_index2_0_reg_887) + unsigned(ap_const_lv17_1));

    local_row_indices_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            local_row_indices_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            local_row_indices_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            local_row_indices_address0 <= "XX";
        end if; 
    end process;


    local_row_indices_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, zext_ln217_fu_1435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            local_row_indices_address1 <= zext_ln217_fu_1435_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            local_row_indices_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            local_row_indices_address1 <= "XX";
        end if; 
    end process;


    local_row_indices_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            local_row_indices_ce0 <= ap_const_logic_1;
        else 
            local_row_indices_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_row_indices_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            local_row_indices_ce1 <= ap_const_logic_1;
        else 
            local_row_indices_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_row_indices_d0_assign_proc : process(ap_CS_fsm_state10, select_ln195_2_reg_2248, ap_CS_fsm_state11, select_ln195_fu_1362_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            local_row_indices_d0 <= select_ln195_2_reg_2248;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            local_row_indices_d0 <= select_ln195_fu_1362_p3;
        else 
            local_row_indices_d0 <= "XX";
        end if; 
    end process;

    local_row_indices_d1 <= 
        select_ln168_2_reg_1967 when (top_offset_fu_1352_p2(0) = '1') else 
        select_ln168_3_reg_1973;

    local_row_indices_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln184_fu_1330_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln184_fu_1330_p2 = ap_const_lv1_0)))) then 
            local_row_indices_we0 <= ap_const_logic_1;
        else 
            local_row_indices_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_row_indices_we1_assign_proc : process(ap_CS_fsm_state10, icmp_ln184_fu_1330_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln184_fu_1330_p2 = ap_const_lv1_0))) then 
            local_row_indices_we1 <= ap_const_logic_1;
        else 
            local_row_indices_we1 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_1506_p2 <= std_logic_vector(unsigned(m_0_reg_993) + unsigned(ap_const_lv2_1));

    maxes_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state9, ap_CS_fsm_state31, ap_CS_fsm_state35, zext_ln183_fu_1315_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            maxes_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            maxes_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            maxes_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            maxes_address0 <= zext_ln183_fu_1315_p1(2 - 1 downto 0);
        else 
            maxes_address0 <= "XX";
        end if; 
    end process;


    maxes_address1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state31, ap_CS_fsm_state36, ap_CS_fsm_state35, zext_ln242_fu_1748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            maxes_address1 <= zext_ln242_fu_1748_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            maxes_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            maxes_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            maxes_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            maxes_address1 <= "XX";
        end if; 
    end process;


    maxes_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state9, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            maxes_ce0 <= ap_const_logic_1;
        else 
            maxes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    maxes_ce1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state31, ap_CS_fsm_state36, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            maxes_ce1 <= ap_const_logic_1;
        else 
            maxes_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    maxes_d0_assign_proc : process(reg_1135, ap_CS_fsm_state34, reg_1141, ap_CS_fsm_state9, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            maxes_d0 <= reg_1135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            maxes_d0 <= reg_1141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            maxes_d0 <= ap_const_lv32_0;
        else 
            maxes_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    maxes_d1_assign_proc : process(reg_1135, ap_CS_fsm_state34, reg_1141, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            maxes_d1 <= reg_1141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            maxes_d1 <= reg_1135;
        else 
            maxes_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    maxes_we0_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state9, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            maxes_we0 <= ap_const_logic_1;
        else 
            maxes_we0 <= ap_const_logic_0;
        end if; 
    end process;


    maxes_we1_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            maxes_we1 <= ap_const_logic_1;
        else 
            maxes_we1 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_blk_n_assign_proc : process(output_0_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if (((trunc_ln182_reg_2583 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_0_V_blk_n <= output_0_V_full_n;
        else 
            output_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_0_V_din <= tmp_57_fu_1779_p1;

    output_0_V_write_assign_proc : process(output_0_V_full_n, output_1_V_full_n, output_2_V_full_n, output_3_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if ((not((((trunc_ln182_reg_2583 = ap_const_lv2_3) and (output_3_V_full_n = ap_const_logic_0)) or ((trunc_ln182_reg_2583 = ap_const_lv2_2) and (output_2_V_full_n = ap_const_logic_0)) or ((output_1_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_1)) or ((output_0_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_0)))) and (trunc_ln182_reg_2583 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_0_V_write <= ap_const_logic_1;
        else 
            output_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_1_V_blk_n_assign_proc : process(output_1_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if (((trunc_ln182_reg_2583 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_1_V_blk_n <= output_1_V_full_n;
        else 
            output_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_1_V_din <= tmp_57_fu_1779_p1;

    output_1_V_write_assign_proc : process(output_0_V_full_n, output_1_V_full_n, output_2_V_full_n, output_3_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if ((not((((trunc_ln182_reg_2583 = ap_const_lv2_3) and (output_3_V_full_n = ap_const_logic_0)) or ((trunc_ln182_reg_2583 = ap_const_lv2_2) and (output_2_V_full_n = ap_const_logic_0)) or ((output_1_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_1)) or ((output_0_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_0)))) and (trunc_ln182_reg_2583 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_1_V_write <= ap_const_logic_1;
        else 
            output_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_2_V_blk_n_assign_proc : process(output_2_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if (((trunc_ln182_reg_2583 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_2_V_blk_n <= output_2_V_full_n;
        else 
            output_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_2_V_din <= tmp_57_fu_1779_p1;

    output_2_V_write_assign_proc : process(output_0_V_full_n, output_1_V_full_n, output_2_V_full_n, output_3_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if ((not((((trunc_ln182_reg_2583 = ap_const_lv2_3) and (output_3_V_full_n = ap_const_logic_0)) or ((trunc_ln182_reg_2583 = ap_const_lv2_2) and (output_2_V_full_n = ap_const_logic_0)) or ((output_1_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_1)) or ((output_0_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_0)))) and (trunc_ln182_reg_2583 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_2_V_write <= ap_const_logic_1;
        else 
            output_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_3_V_blk_n_assign_proc : process(output_3_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if (((trunc_ln182_reg_2583 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_3_V_blk_n <= output_3_V_full_n;
        else 
            output_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_3_V_din <= tmp_57_fu_1779_p1;

    output_3_V_write_assign_proc : process(output_0_V_full_n, output_1_V_full_n, output_2_V_full_n, output_3_V_full_n, ap_CS_fsm_state37, trunc_ln182_reg_2583)
    begin
        if ((not((((trunc_ln182_reg_2583 = ap_const_lv2_3) and (output_3_V_full_n = ap_const_logic_0)) or ((trunc_ln182_reg_2583 = ap_const_lv2_2) and (output_2_V_full_n = ap_const_logic_0)) or ((output_1_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_1)) or ((output_0_V_full_n = ap_const_logic_0) and (trunc_ln182_reg_2583 = ap_const_lv2_0)))) and (trunc_ln182_reg_2583 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_3_V_write <= ap_const_logic_1;
        else 
            output_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_0_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state19, zext_ln204_fu_1400_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_0_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            partial_sums_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            partial_sums_0_address0 <= zext_ln204_fu_1400_p1(2 - 1 downto 0);
        else 
            partial_sums_0_address0 <= "XX";
        end if; 
    end process;


    partial_sums_0_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_0_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_0_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            partial_sums_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            partial_sums_0_address1 <= "XX";
        end if; 
    end process;


    partial_sums_0_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_0_ce0 <= ap_const_logic_1;
        else 
            partial_sums_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_0_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_0_ce1 <= ap_const_logic_1;
        else 
            partial_sums_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_0_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, add_ln217_4_reg_2485, ap_CS_fsm_state19, grp_fu_1830_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            partial_sums_0_d0 <= add_ln217_4_reg_2485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            partial_sums_0_d0 <= grp_fu_1830_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            partial_sums_0_d0 <= ap_const_lv32_0;
        else 
            partial_sums_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_sums_0_d1_assign_proc : process(add_ln217_3_reg_2480, ap_CS_fsm_state18, ap_CS_fsm_state19, grp_fu_1821_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            partial_sums_0_d1 <= add_ln217_3_reg_2480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            partial_sums_0_d1 <= grp_fu_1821_p3;
        else 
            partial_sums_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_sums_0_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, phi_ln204_reg_958, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((phi_ln204_reg_958 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            partial_sums_0_we0 <= ap_const_logic_1;
        else 
            partial_sums_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_0_we1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_0_we1 <= ap_const_logic_1;
        else 
            partial_sums_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_1_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state19, zext_ln204_fu_1400_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_1_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            partial_sums_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            partial_sums_1_address0 <= zext_ln204_fu_1400_p1(2 - 1 downto 0);
        else 
            partial_sums_1_address0 <= "XX";
        end if; 
    end process;


    partial_sums_1_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_1_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_1_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            partial_sums_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            partial_sums_1_address1 <= "XX";
        end if; 
    end process;


    partial_sums_1_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_1_ce0 <= ap_const_logic_1;
        else 
            partial_sums_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_1_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_1_ce1 <= ap_const_logic_1;
        else 
            partial_sums_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_1_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, add_ln217_8_reg_2495, ap_CS_fsm_state19, grp_fu_1863_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            partial_sums_1_d0 <= add_ln217_8_reg_2495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            partial_sums_1_d0 <= grp_fu_1863_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            partial_sums_1_d0 <= ap_const_lv32_0;
        else 
            partial_sums_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_sums_1_d1_assign_proc : process(ap_CS_fsm_state18, add_ln217_7_reg_2490, ap_CS_fsm_state19, grp_fu_1854_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            partial_sums_1_d1 <= add_ln217_7_reg_2490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            partial_sums_1_d1 <= grp_fu_1854_p3;
        else 
            partial_sums_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_sums_1_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, phi_ln204_reg_958, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((phi_ln204_reg_958 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            partial_sums_1_we0 <= ap_const_logic_1;
        else 
            partial_sums_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_1_we1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_1_we1 <= ap_const_logic_1;
        else 
            partial_sums_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_2_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state19, zext_ln204_fu_1400_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_2_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_2_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            partial_sums_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            partial_sums_2_address0 <= zext_ln204_fu_1400_p1(2 - 1 downto 0);
        else 
            partial_sums_2_address0 <= "XX";
        end if; 
    end process;


    partial_sums_2_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_2_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_2_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            partial_sums_2_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            partial_sums_2_address1 <= "XX";
        end if; 
    end process;


    partial_sums_2_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_2_ce0 <= ap_const_logic_1;
        else 
            partial_sums_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_2_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            partial_sums_2_ce1 <= ap_const_logic_1;
        else 
            partial_sums_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_2_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, add_ln217_12_reg_2505, ap_CS_fsm_state19, grp_fu_1896_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            partial_sums_2_d0 <= add_ln217_12_reg_2505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            partial_sums_2_d0 <= grp_fu_1896_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            partial_sums_2_d0 <= ap_const_lv32_0;
        else 
            partial_sums_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_sums_2_d1_assign_proc : process(ap_CS_fsm_state18, add_ln217_11_reg_2500, ap_CS_fsm_state19, grp_fu_1887_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            partial_sums_2_d1 <= add_ln217_11_reg_2500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            partial_sums_2_d1 <= grp_fu_1887_p3;
        else 
            partial_sums_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    partial_sums_2_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, phi_ln204_reg_958, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (not((phi_ln204_reg_958 = ap_const_lv2_0)) and not((phi_ln204_reg_958 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            partial_sums_2_we0 <= ap_const_logic_1;
        else 
            partial_sums_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    partial_sums_2_we1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            partial_sums_2_we1 <= ap_const_logic_1;
        else 
            partial_sums_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    read_odd_load_load_fu_1147_p1 <= read_odd;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln168_1_fu_1195_p3 <= 
        ap_const_lv2_3 when (compute_odd(0) = '1') else 
        ap_const_lv2_1;
    select_ln168_2_fu_1203_p3 <= 
        ap_const_lv2_2 when (compute_odd(0) = '1') else 
        ap_const_lv2_0;
    select_ln168_3_fu_1211_p3 <= 
        ap_const_lv2_1 when (compute_odd(0) = '1') else 
        ap_const_lv2_3;
    select_ln168_fu_1187_p3 <= 
        ap_const_lv2_0 when (compute_odd(0) = '1') else 
        ap_const_lv2_2;
    select_ln195_2_fu_1376_p3 <= 
        select_ln168_1_reg_1962 when (top_offset_fu_1352_p2(0) = '1') else 
        select_ln168_2_reg_1967;
    select_ln195_fu_1362_p3 <= 
        select_ln168_3_reg_1973 when (top_offset_fu_1352_p2(0) = '1') else 
        select_ln168_reg_1957;
        sext_ln147_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(local_col_index_0_reg_849),64));

        sext_ln148_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln148_fu_1242_p2),64));

    sext_ln157_fu_1155_p0 <= read_col_index;
        sext_ln157_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln157_fu_1155_p0),17));

        sext_ln160_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln160_fu_1277_p2),64));

        sext_ln161_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln161_fu_1290_p2),64));

        sext_ln217_12_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln217_14_fu_1516_p2),64));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    stripes_0_address0 <= zext_ln217_8_fu_1547_p1(12 - 1 downto 0);

    stripes_0_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, stripes_0_addr_3_reg_2002, ap_CS_fsm_state5, stripes_0_addr_2_reg_2060, ap_CS_fsm_state8, sext_ln147_fu_1231_p1, sext_ln160_fu_1283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stripes_0_address1 <= stripes_0_addr_2_reg_2060;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stripes_0_address1 <= sext_ln160_fu_1283_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stripes_0_address1 <= stripes_0_addr_3_reg_2002;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stripes_0_address1 <= sext_ln147_fu_1231_p1(12 - 1 downto 0);
        else 
            stripes_0_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    stripes_0_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stripes_0_ce0 <= ap_const_logic_1;
        else 
            stripes_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stripes_0_ce1_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_CS_fsm_state5, ap_predicate_op174_read_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            stripes_0_ce1 <= ap_const_logic_1;
        else 
            stripes_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stripes_0_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, tmp_100_0_reg_859, tmp_101_0_reg_873, tmp_0_reg_908, tmp_99_0_reg_922)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stripes_0_d1 <= tmp_99_0_reg_922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stripes_0_d1 <= tmp_0_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stripes_0_d1 <= tmp_101_0_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stripes_0_d1 <= tmp_100_0_reg_859;
        else 
            stripes_0_d1 <= "XXXXXXXX";
        end if; 
    end process;


    stripes_0_we1_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_CS_fsm_state5, ap_predicate_op174_read_state7, ap_CS_fsm_state8)
    begin
        if ((((i_0_reg_814 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (i_0_reg_814 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((i1_0_reg_826 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (i1_0_reg_826 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            stripes_0_we1 <= ap_const_logic_1;
        else 
            stripes_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    stripes_1_address0 <= zext_ln217_8_fu_1547_p1(12 - 1 downto 0);

    stripes_1_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, stripes_1_addr_3_reg_2007, ap_CS_fsm_state5, stripes_1_addr_2_reg_2065, ap_CS_fsm_state8, sext_ln147_fu_1231_p1, sext_ln160_fu_1283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stripes_1_address1 <= stripes_1_addr_2_reg_2065;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stripes_1_address1 <= sext_ln160_fu_1283_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stripes_1_address1 <= stripes_1_addr_3_reg_2007;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stripes_1_address1 <= sext_ln147_fu_1231_p1(12 - 1 downto 0);
        else 
            stripes_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    stripes_1_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stripes_1_ce0 <= ap_const_logic_1;
        else 
            stripes_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stripes_1_ce1_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_CS_fsm_state5, ap_predicate_op174_read_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            stripes_1_ce1 <= ap_const_logic_1;
        else 
            stripes_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stripes_1_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, tmp_100_0_reg_859, tmp_101_0_reg_873, tmp_0_reg_908, tmp_99_0_reg_922)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stripes_1_d1 <= tmp_99_0_reg_922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stripes_1_d1 <= tmp_0_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stripes_1_d1 <= tmp_101_0_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stripes_1_d1 <= tmp_100_0_reg_859;
        else 
            stripes_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    stripes_1_we1_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_CS_fsm_state5, ap_predicate_op174_read_state7, ap_CS_fsm_state8)
    begin
        if ((((i_0_reg_814 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (i_0_reg_814 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((i1_0_reg_826 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (i1_0_reg_826 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            stripes_1_we1 <= ap_const_logic_1;
        else 
            stripes_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    stripes_2_address0 <= zext_ln217_8_fu_1547_p1(12 - 1 downto 0);

    stripes_2_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, stripes_2_addr_3_reg_2012, ap_CS_fsm_state5, stripes_2_addr_2_reg_2070, ap_CS_fsm_state8, sext_ln147_fu_1231_p1, sext_ln160_fu_1283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stripes_2_address1 <= stripes_2_addr_2_reg_2070;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stripes_2_address1 <= sext_ln160_fu_1283_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stripes_2_address1 <= stripes_2_addr_3_reg_2012;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stripes_2_address1 <= sext_ln147_fu_1231_p1(12 - 1 downto 0);
        else 
            stripes_2_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    stripes_2_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stripes_2_ce0 <= ap_const_logic_1;
        else 
            stripes_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stripes_2_ce1_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_CS_fsm_state5, ap_predicate_op174_read_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            stripes_2_ce1 <= ap_const_logic_1;
        else 
            stripes_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stripes_2_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, tmp_100_0_reg_859, tmp_101_0_reg_873, tmp_0_reg_908, tmp_99_0_reg_922)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stripes_2_d1 <= tmp_99_0_reg_922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stripes_2_d1 <= tmp_0_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stripes_2_d1 <= tmp_101_0_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stripes_2_d1 <= tmp_100_0_reg_859;
        else 
            stripes_2_d1 <= "XXXXXXXX";
        end if; 
    end process;


    stripes_2_we1_assign_proc : process(input_lower_0_V_empty_n, input_lower_1_V_empty_n, input_lower_2_V_empty_n, i1_0_reg_826, i_0_reg_814, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_predicate_op124_read_state4, ap_CS_fsm_state5, ap_predicate_op174_read_state7, ap_CS_fsm_state8)
    begin
        if (((not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not((((ap_predicate_op124_read_state4 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i_0_reg_814 = ap_const_lv2_0)))) and not((i_0_reg_814 = ap_const_lv2_1)) and not((i_0_reg_814 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not((((ap_predicate_op174_read_state7 = ap_const_boolean_1) and (input_lower_2_V_empty_n = ap_const_logic_0)) or ((input_lower_1_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_1)) or ((input_lower_0_V_empty_n = ap_const_logic_0) and (i1_0_reg_826 = ap_const_lv2_0)))) and not((i1_0_reg_826 = ap_const_lv2_1)) and not((i1_0_reg_826 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            stripes_2_we1 <= ap_const_logic_1;
        else 
            stripes_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln217_fu_1456_p2 <= std_logic_vector(unsigned(zext_ln217_2_fu_1452_p1) - unsigned(zext_ln217_1_fu_1440_p1));
    tmp_10_fu_1462_p3 <= (local_row_indices_q1 & ap_const_lv9_0);
    tmp_11_fu_1474_p3 <= (local_row_indices_q1 & ap_const_lv1_0);
    tmp_3_fu_1444_p3 <= (l_0_reg_981 & ap_const_lv2_0);
    tmp_56_fu_1342_p4 <= i4_0_reg_947(2 downto 1);
    tmp_57_fu_1779_p1 <= maxes_q1(16 - 1 downto 0);
    top_offset_fu_1352_p2 <= "0" when (tmp_56_fu_1342_p4 = ap_const_lv2_0) else "1";
    trunc_ln147_fu_1238_p1 <= local_col_index_0_reg_849(13 - 1 downto 0);
    trunc_ln160_fu_1273_p1 <= local_col_index2_0_reg_887(13 - 1 downto 0);
    trunc_ln182_fu_1753_p1 <= i10_0_reg_1059(2 - 1 downto 0);
    trunc_ln189_fu_1358_p1 <= i4_0_reg_947(1 - 1 downto 0);
    trunc_ln202_fu_1385_p1 <= compute_col_index_lo_reg_2118(13 - 1 downto 0);
    xor_ln249_fu_1768_p2 <= (read_odd_load_reg_1920 xor ap_const_lv1_1);
    xor_ln256_fu_1804_p2 <= (compute_odd_load_reg_1952 xor ap_const_lv1_1);
    zext_ln183_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln183_reg_936),64));
    zext_ln202_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln189_reg_2243),13));
    zext_ln204_fu_1400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln204_1_reg_970),64));
    zext_ln217_10_fu_1572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stripes_1_load_reg_2425),15));
    zext_ln217_11_fu_1587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stripes_2_load_reg_2455),15));
    zext_ln217_1_fu_1440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_981),5));
    zext_ln217_2_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1444_p3),5));
    zext_ln217_3_fu_1470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1462_p3),12));
    zext_ln217_4_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1474_p3),12));
    zext_ln217_5_fu_1492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln217_13_fu_1486_p2),13));
    zext_ln217_6_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_993),13));
    zext_ln217_7_fu_1512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_993),5));
    zext_ln217_8_fu_1547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln217_15_fu_1542_p2),64));
    zext_ln217_9_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stripes_0_load_reg_2395),15));
    zext_ln217_fu_1435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_981),64));
    zext_ln223_fu_1605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln223_reg_1004),64));
    zext_ln242_fu_1748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i10_0_reg_1059),64));
end behav;
