// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fused_cnn_layer,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.069250,HLS_SYN_LAT=1338,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=12,HLS_SYN_FF=9790,HLS_SYN_LUT=13529,HLS_VERSION=2020_1}" *)

module fused_cnn_layer (
        ap_clk,
        ap_rst_n,
        in_0_TDATA,
        in_0_TVALID,
        in_0_TREADY,
        in_1_TDATA,
        in_1_TVALID,
        in_1_TREADY,
        in_0_TKEEP,
        in_1_TKEEP,
        in_0_TSTRB,
        in_1_TSTRB,
        in_0_TLAST,
        in_1_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input  [63:0] in_0_TDATA;
input   in_0_TVALID;
output   in_0_TREADY;
input  [63:0] in_1_TDATA;
input   in_1_TVALID;
output   in_1_TREADY;
input  [7:0] in_0_TKEEP;
input  [7:0] in_1_TKEEP;
input  [7:0] in_0_TSTRB;
input  [7:0] in_1_TSTRB;
input  [0:0] in_0_TLAST;
input  [0:0] in_1_TLAST;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;

reg in_0_TREADY;
reg in_1_TREADY;

 reg    ap_rst_n_inv;
wire    grp_kernel_fu_172_ap_start;
wire    grp_kernel_fu_172_ap_done;
wire    grp_kernel_fu_172_ap_idle;
wire    grp_kernel_fu_172_ap_ready;
wire    grp_kernel_fu_172_input_upper_0_V_read;
wire    grp_kernel_fu_172_input_upper_1_V_read;
wire    grp_kernel_fu_172_input_upper_2_V_read;
wire    grp_kernel_fu_172_input_lower_0_V_read;
wire    grp_kernel_fu_172_input_lower_1_V_read;
wire    grp_kernel_fu_172_input_lower_2_V_read;
wire   [15:0] grp_kernel_fu_172_output_0_V_din;
wire    grp_kernel_fu_172_output_0_V_write;
wire   [15:0] grp_kernel_fu_172_output_1_V_din;
wire    grp_kernel_fu_172_output_1_V_write;
wire   [15:0] grp_kernel_fu_172_output_2_V_din;
wire    grp_kernel_fu_172_output_2_V_write;
wire   [15:0] grp_kernel_fu_172_output_3_V_din;
wire    grp_kernel_fu_172_output_3_V_write;
wire    grp_read_input_fu_224_ap_start;
wire    grp_read_input_fu_224_ap_done;
wire    grp_read_input_fu_224_ap_idle;
wire    grp_read_input_fu_224_ap_ready;
wire   [7:0] grp_read_input_fu_224_input_upper_0_V_din;
wire    grp_read_input_fu_224_input_upper_0_V_write;
wire   [7:0] grp_read_input_fu_224_input_upper_1_V_din;
wire    grp_read_input_fu_224_input_upper_1_V_write;
wire   [7:0] grp_read_input_fu_224_input_upper_2_V_din;
wire    grp_read_input_fu_224_input_upper_2_V_write;
wire   [7:0] grp_read_input_fu_224_input_lower_0_V_din;
wire    grp_read_input_fu_224_input_lower_0_V_write;
wire   [7:0] grp_read_input_fu_224_input_lower_1_V_din;
wire    grp_read_input_fu_224_input_lower_1_V_write;
wire   [7:0] grp_read_input_fu_224_input_lower_2_V_din;
wire    grp_read_input_fu_224_input_lower_2_V_write;
wire    grp_read_input_fu_224_in_0_TREADY;
wire    grp_read_input_fu_224_in_1_TREADY;
wire    grp_write_output_fu_250_ap_start;
wire    grp_write_output_fu_250_ap_done;
wire    grp_write_output_fu_250_ap_idle;
wire    grp_write_output_fu_250_ap_ready;
wire    grp_write_output_fu_250_output_0_V_read;
wire    grp_write_output_fu_250_output_1_V_read;
wire    grp_write_output_fu_250_output_2_V_read;
wire    grp_write_output_fu_250_output_3_V_read;
wire   [63:0] grp_write_output_fu_250_out_r_TDATA;
wire    grp_write_output_fu_250_out_r_TVALID;
wire    grp_write_output_fu_250_out_r_TREADY;
wire   [7:0] grp_write_output_fu_250_out_r_TKEEP;
wire   [7:0] grp_write_output_fu_250_out_r_TSTRB;
wire   [0:0] grp_write_output_fu_250_out_r_TLAST;
reg    grp_kernel_fu_172_ap_start_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
wire   [7:0] input_upper_0_V_dout;
wire    input_upper_0_V_empty_n;
reg    input_upper_0_V_read;
wire    ap_CS_fsm_state5;
wire   [7:0] input_upper_1_V_dout;
wire    input_upper_1_V_empty_n;
reg    input_upper_1_V_read;
wire   [7:0] input_upper_2_V_dout;
wire    input_upper_2_V_empty_n;
reg    input_upper_2_V_read;
wire   [7:0] input_lower_0_V_dout;
wire    input_lower_0_V_empty_n;
reg    input_lower_0_V_read;
wire   [7:0] input_lower_1_V_dout;
wire    input_lower_1_V_empty_n;
reg    input_lower_1_V_read;
wire   [7:0] input_lower_2_V_dout;
wire    input_lower_2_V_empty_n;
reg    input_lower_2_V_read;
wire    output_0_V_full_n;
reg    output_0_V_write;
wire    output_1_V_full_n;
reg    output_1_V_write;
wire    output_2_V_full_n;
reg    output_2_V_write;
wire    output_3_V_full_n;
reg    output_3_V_write;
reg    grp_read_input_fu_224_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    input_upper_0_V_full_n;
reg    input_upper_0_V_write;
wire    ap_CS_fsm_state3;
wire    input_upper_1_V_full_n;
reg    input_upper_1_V_write;
wire    input_upper_2_V_full_n;
reg    input_upper_2_V_write;
wire    input_lower_0_V_full_n;
reg    input_lower_0_V_write;
wire    input_lower_1_V_full_n;
reg    input_lower_1_V_write;
wire    input_lower_2_V_full_n;
reg    input_lower_2_V_write;
reg    grp_write_output_fu_250_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [15:0] output_0_V_dout;
wire    output_0_V_empty_n;
reg    output_0_V_read;
wire    ap_CS_fsm_state7;
wire   [15:0] output_1_V_dout;
wire    output_1_V_empty_n;
reg    output_1_V_read;
wire   [15:0] output_2_V_dout;
wire    output_2_V_empty_n;
reg    output_2_V_read;
wire   [15:0] output_3_V_dout;
wire    output_3_V_empty_n;
reg    output_3_V_read;
reg   [7:0] ap_NS_fsm;
wire    ap_CS_fsm_state8;
wire    regslice_both_out_V_data_V_U_apdone_blk;
wire    regslice_both_in_0_V_data_V_U_apdone_blk;
wire   [63:0] in_0_TDATA_int;
wire    in_0_TVALID_int;
reg    in_0_TREADY_int;
wire    regslice_both_in_0_V_data_V_U_ack_in;
wire    regslice_both_in_1_V_data_V_U_apdone_blk;
wire   [63:0] in_1_TDATA_int;
wire    in_1_TVALID_int;
reg    in_1_TREADY_int;
wire    regslice_both_in_1_V_data_V_U_ack_in;
wire    regslice_both_in_0_V_keep_V_U_apdone_blk;
wire   [7:0] in_0_TKEEP_int;
wire    regslice_both_in_0_V_keep_V_U_vld_out;
wire    regslice_both_in_0_V_keep_V_U_ack_in;
wire    regslice_both_in_1_V_keep_V_U_apdone_blk;
wire   [7:0] in_1_TKEEP_int;
wire    regslice_both_in_1_V_keep_V_U_vld_out;
wire    regslice_both_in_1_V_keep_V_U_ack_in;
wire    regslice_both_in_0_V_strb_V_U_apdone_blk;
wire   [7:0] in_0_TSTRB_int;
wire    regslice_both_in_0_V_strb_V_U_vld_out;
wire    regslice_both_in_0_V_strb_V_U_ack_in;
wire    regslice_both_in_1_V_strb_V_U_apdone_blk;
wire   [7:0] in_1_TSTRB_int;
wire    regslice_both_in_1_V_strb_V_U_vld_out;
wire    regslice_both_in_1_V_strb_V_U_ack_in;
wire    regslice_both_in_0_V_last_V_U_apdone_blk;
wire   [0:0] in_0_TLAST_int;
wire    regslice_both_in_0_V_last_V_U_vld_out;
wire    regslice_both_in_0_V_last_V_U_ack_in;
wire    regslice_both_in_1_V_last_V_U_apdone_blk;
wire   [0:0] in_1_TLAST_int;
wire    regslice_both_in_1_V_last_V_U_vld_out;
wire    regslice_both_in_1_V_last_V_U_ack_in;
wire    out_r_TREADY_int;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 grp_kernel_fu_172_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 grp_read_input_fu_224_ap_start_reg = 1'b0;
#0 grp_write_output_fu_250_ap_start_reg = 1'b0;
end

kernel grp_kernel_fu_172(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_kernel_fu_172_ap_start),
    .ap_done(grp_kernel_fu_172_ap_done),
    .ap_idle(grp_kernel_fu_172_ap_idle),
    .ap_ready(grp_kernel_fu_172_ap_ready),
    .input_upper_0_V_dout(input_upper_0_V_dout),
    .input_upper_0_V_empty_n(input_upper_0_V_empty_n),
    .input_upper_0_V_read(grp_kernel_fu_172_input_upper_0_V_read),
    .input_upper_1_V_dout(input_upper_1_V_dout),
    .input_upper_1_V_empty_n(input_upper_1_V_empty_n),
    .input_upper_1_V_read(grp_kernel_fu_172_input_upper_1_V_read),
    .input_upper_2_V_dout(input_upper_2_V_dout),
    .input_upper_2_V_empty_n(input_upper_2_V_empty_n),
    .input_upper_2_V_read(grp_kernel_fu_172_input_upper_2_V_read),
    .input_lower_0_V_dout(input_lower_0_V_dout),
    .input_lower_0_V_empty_n(input_lower_0_V_empty_n),
    .input_lower_0_V_read(grp_kernel_fu_172_input_lower_0_V_read),
    .input_lower_1_V_dout(input_lower_1_V_dout),
    .input_lower_1_V_empty_n(input_lower_1_V_empty_n),
    .input_lower_1_V_read(grp_kernel_fu_172_input_lower_1_V_read),
    .input_lower_2_V_dout(input_lower_2_V_dout),
    .input_lower_2_V_empty_n(input_lower_2_V_empty_n),
    .input_lower_2_V_read(grp_kernel_fu_172_input_lower_2_V_read),
    .output_0_V_din(grp_kernel_fu_172_output_0_V_din),
    .output_0_V_full_n(output_0_V_full_n),
    .output_0_V_write(grp_kernel_fu_172_output_0_V_write),
    .output_1_V_din(grp_kernel_fu_172_output_1_V_din),
    .output_1_V_full_n(output_1_V_full_n),
    .output_1_V_write(grp_kernel_fu_172_output_1_V_write),
    .output_2_V_din(grp_kernel_fu_172_output_2_V_din),
    .output_2_V_full_n(output_2_V_full_n),
    .output_2_V_write(grp_kernel_fu_172_output_2_V_write),
    .output_3_V_din(grp_kernel_fu_172_output_3_V_din),
    .output_3_V_full_n(output_3_V_full_n),
    .output_3_V_write(grp_kernel_fu_172_output_3_V_write)
);

read_input grp_read_input_fu_224(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_read_input_fu_224_ap_start),
    .ap_done(grp_read_input_fu_224_ap_done),
    .ap_idle(grp_read_input_fu_224_ap_idle),
    .ap_ready(grp_read_input_fu_224_ap_ready),
    .input_upper_0_V_din(grp_read_input_fu_224_input_upper_0_V_din),
    .input_upper_0_V_full_n(input_upper_0_V_full_n),
    .input_upper_0_V_write(grp_read_input_fu_224_input_upper_0_V_write),
    .input_upper_1_V_din(grp_read_input_fu_224_input_upper_1_V_din),
    .input_upper_1_V_full_n(input_upper_1_V_full_n),
    .input_upper_1_V_write(grp_read_input_fu_224_input_upper_1_V_write),
    .input_upper_2_V_din(grp_read_input_fu_224_input_upper_2_V_din),
    .input_upper_2_V_full_n(input_upper_2_V_full_n),
    .input_upper_2_V_write(grp_read_input_fu_224_input_upper_2_V_write),
    .input_lower_0_V_din(grp_read_input_fu_224_input_lower_0_V_din),
    .input_lower_0_V_full_n(input_lower_0_V_full_n),
    .input_lower_0_V_write(grp_read_input_fu_224_input_lower_0_V_write),
    .input_lower_1_V_din(grp_read_input_fu_224_input_lower_1_V_din),
    .input_lower_1_V_full_n(input_lower_1_V_full_n),
    .input_lower_1_V_write(grp_read_input_fu_224_input_lower_1_V_write),
    .input_lower_2_V_din(grp_read_input_fu_224_input_lower_2_V_din),
    .input_lower_2_V_full_n(input_lower_2_V_full_n),
    .input_lower_2_V_write(grp_read_input_fu_224_input_lower_2_V_write),
    .in_0_TDATA(in_0_TDATA_int),
    .in_0_TVALID(in_0_TVALID_int),
    .in_0_TREADY(grp_read_input_fu_224_in_0_TREADY),
    .in_1_TDATA(in_1_TDATA_int),
    .in_1_TVALID(in_1_TVALID_int),
    .in_1_TREADY(grp_read_input_fu_224_in_1_TREADY),
    .in_0_TKEEP(in_0_TKEEP_int),
    .in_1_TKEEP(in_1_TKEEP_int),
    .in_0_TSTRB(in_0_TSTRB_int),
    .in_1_TSTRB(in_1_TSTRB_int),
    .in_0_TLAST(in_0_TLAST_int),
    .in_1_TLAST(in_1_TLAST_int)
);

write_output grp_write_output_fu_250(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_output_fu_250_ap_start),
    .ap_done(grp_write_output_fu_250_ap_done),
    .ap_idle(grp_write_output_fu_250_ap_idle),
    .ap_ready(grp_write_output_fu_250_ap_ready),
    .output_0_V_dout(output_0_V_dout),
    .output_0_V_empty_n(output_0_V_empty_n),
    .output_0_V_read(grp_write_output_fu_250_output_0_V_read),
    .output_1_V_dout(output_1_V_dout),
    .output_1_V_empty_n(output_1_V_empty_n),
    .output_1_V_read(grp_write_output_fu_250_output_1_V_read),
    .output_2_V_dout(output_2_V_dout),
    .output_2_V_empty_n(output_2_V_empty_n),
    .output_2_V_read(grp_write_output_fu_250_output_2_V_read),
    .output_3_V_dout(output_3_V_dout),
    .output_3_V_empty_n(output_3_V_empty_n),
    .output_3_V_read(grp_write_output_fu_250_output_3_V_read),
    .out_r_TDATA(grp_write_output_fu_250_out_r_TDATA),
    .out_r_TVALID(grp_write_output_fu_250_out_r_TVALID),
    .out_r_TREADY(grp_write_output_fu_250_out_r_TREADY),
    .out_r_TKEEP(grp_write_output_fu_250_out_r_TKEEP),
    .out_r_TSTRB(grp_write_output_fu_250_out_r_TSTRB),
    .out_r_TLAST(grp_write_output_fu_250_out_r_TLAST)
);

fifo_w8_d8_A input_upper_0_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_read_input_fu_224_input_upper_0_V_din),
    .if_full_n(input_upper_0_V_full_n),
    .if_write(input_upper_0_V_write),
    .if_dout(input_upper_0_V_dout),
    .if_empty_n(input_upper_0_V_empty_n),
    .if_read(input_upper_0_V_read)
);

fifo_w8_d8_A input_upper_1_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_read_input_fu_224_input_upper_1_V_din),
    .if_full_n(input_upper_1_V_full_n),
    .if_write(input_upper_1_V_write),
    .if_dout(input_upper_1_V_dout),
    .if_empty_n(input_upper_1_V_empty_n),
    .if_read(input_upper_1_V_read)
);

fifo_w8_d8_A input_upper_2_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_read_input_fu_224_input_upper_2_V_din),
    .if_full_n(input_upper_2_V_full_n),
    .if_write(input_upper_2_V_write),
    .if_dout(input_upper_2_V_dout),
    .if_empty_n(input_upper_2_V_empty_n),
    .if_read(input_upper_2_V_read)
);

fifo_w8_d8_A input_lower_0_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_read_input_fu_224_input_lower_0_V_din),
    .if_full_n(input_lower_0_V_full_n),
    .if_write(input_lower_0_V_write),
    .if_dout(input_lower_0_V_dout),
    .if_empty_n(input_lower_0_V_empty_n),
    .if_read(input_lower_0_V_read)
);

fifo_w8_d8_A input_lower_1_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_read_input_fu_224_input_lower_1_V_din),
    .if_full_n(input_lower_1_V_full_n),
    .if_write(input_lower_1_V_write),
    .if_dout(input_lower_1_V_dout),
    .if_empty_n(input_lower_1_V_empty_n),
    .if_read(input_lower_1_V_read)
);

fifo_w8_d8_A input_lower_2_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_read_input_fu_224_input_lower_2_V_din),
    .if_full_n(input_lower_2_V_full_n),
    .if_write(input_lower_2_V_write),
    .if_dout(input_lower_2_V_dout),
    .if_empty_n(input_lower_2_V_empty_n),
    .if_read(input_lower_2_V_read)
);

fifo_w16_d4_A output_0_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_kernel_fu_172_output_0_V_din),
    .if_full_n(output_0_V_full_n),
    .if_write(output_0_V_write),
    .if_dout(output_0_V_dout),
    .if_empty_n(output_0_V_empty_n),
    .if_read(output_0_V_read)
);

fifo_w16_d4_A output_1_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_kernel_fu_172_output_1_V_din),
    .if_full_n(output_1_V_full_n),
    .if_write(output_1_V_write),
    .if_dout(output_1_V_dout),
    .if_empty_n(output_1_V_empty_n),
    .if_read(output_1_V_read)
);

fifo_w16_d4_A output_2_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_kernel_fu_172_output_2_V_din),
    .if_full_n(output_2_V_full_n),
    .if_write(output_2_V_write),
    .if_dout(output_2_V_dout),
    .if_empty_n(output_2_V_empty_n),
    .if_read(output_2_V_read)
);

fifo_w16_d4_A output_3_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_kernel_fu_172_output_3_V_din),
    .if_full_n(output_3_V_full_n),
    .if_write(output_3_V_write),
    .if_dout(output_3_V_dout),
    .if_empty_n(output_3_V_empty_n),
    .if_read(output_3_V_read)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_0_TDATA),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_data_V_U_ack_in),
    .data_out(in_0_TDATA_int),
    .vld_out(in_0_TVALID_int),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_1_TDATA),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_data_V_U_ack_in),
    .data_out(in_1_TDATA_int),
    .vld_out(in_1_TVALID_int),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_0_TKEEP),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_keep_V_U_ack_in),
    .data_out(in_0_TKEEP_int),
    .vld_out(regslice_both_in_0_V_keep_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_1_TKEEP),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_keep_V_U_ack_in),
    .data_out(in_1_TKEEP_int),
    .vld_out(regslice_both_in_1_V_keep_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_0_TSTRB),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_strb_V_U_ack_in),
    .data_out(in_0_TSTRB_int),
    .vld_out(regslice_both_in_0_V_strb_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_1_TSTRB),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_strb_V_U_ack_in),
    .data_out(in_1_TSTRB_int),
    .vld_out(regslice_both_in_1_V_strb_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_0_TLAST),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_last_V_U_ack_in),
    .data_out(in_0_TLAST_int),
    .vld_out(regslice_both_in_0_V_last_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_1_TLAST),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_last_V_U_ack_in),
    .data_out(in_1_TLAST_int),
    .vld_out(regslice_both_in_1_V_last_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_250_out_r_TDATA),
    .vld_in(grp_write_output_fu_250_out_r_TVALID),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_250_out_r_TKEEP),
    .vld_in(grp_write_output_fu_250_out_r_TVALID),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_250_out_r_TSTRB),
    .vld_in(grp_write_output_fu_250_out_r_TVALID),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_250_out_r_TLAST),
    .vld_in(grp_write_output_fu_250_out_r_TVALID),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_kernel_fu_172_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_kernel_fu_172_ap_start_reg <= 1'b1;
        end else if ((grp_kernel_fu_172_ap_ready == 1'b1)) begin
            grp_kernel_fu_172_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_read_input_fu_224_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_read_input_fu_224_ap_start_reg <= 1'b1;
        end else if ((grp_read_input_fu_224_ap_ready == 1'b1)) begin
            grp_read_input_fu_224_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_output_fu_250_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_write_output_fu_250_ap_start_reg <= 1'b1;
        end else if ((grp_write_output_fu_250_ap_ready == 1'b1)) begin
            grp_write_output_fu_250_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((regslice_both_in_0_V_data_V_U_ack_in == 1'b1) & (in_0_TVALID == 1'b1))) begin
        in_0_TREADY = 1'b1;
    end else begin
        in_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_0_TREADY_int = grp_read_input_fu_224_in_0_TREADY;
    end else begin
        in_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_in_1_V_data_V_U_ack_in == 1'b1) & (in_1_TVALID == 1'b1))) begin
        in_1_TREADY = 1'b1;
    end else begin
        in_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_1_TREADY_int = grp_read_input_fu_224_in_1_TREADY;
    end else begin
        in_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_lower_0_V_read = grp_kernel_fu_172_input_lower_0_V_read;
    end else begin
        input_lower_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_lower_0_V_write = grp_read_input_fu_224_input_lower_0_V_write;
    end else begin
        input_lower_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_lower_1_V_read = grp_kernel_fu_172_input_lower_1_V_read;
    end else begin
        input_lower_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_lower_1_V_write = grp_read_input_fu_224_input_lower_1_V_write;
    end else begin
        input_lower_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_lower_2_V_read = grp_kernel_fu_172_input_lower_2_V_read;
    end else begin
        input_lower_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_lower_2_V_write = grp_read_input_fu_224_input_lower_2_V_write;
    end else begin
        input_lower_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_upper_0_V_read = grp_kernel_fu_172_input_upper_0_V_read;
    end else begin
        input_upper_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_upper_0_V_write = grp_read_input_fu_224_input_upper_0_V_write;
    end else begin
        input_upper_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_upper_1_V_read = grp_kernel_fu_172_input_upper_1_V_read;
    end else begin
        input_upper_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_upper_1_V_write = grp_read_input_fu_224_input_upper_1_V_write;
    end else begin
        input_upper_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_upper_2_V_read = grp_kernel_fu_172_input_upper_2_V_read;
    end else begin
        input_upper_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_upper_2_V_write = grp_read_input_fu_224_input_upper_2_V_write;
    end else begin
        input_upper_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_0_V_read = grp_write_output_fu_250_output_0_V_read;
    end else begin
        output_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_0_V_write = grp_kernel_fu_172_output_0_V_write;
    end else begin
        output_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_1_V_read = grp_write_output_fu_250_output_1_V_read;
    end else begin
        output_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_1_V_write = grp_kernel_fu_172_output_1_V_write;
    end else begin
        output_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_2_V_read = grp_write_output_fu_250_output_2_V_read;
    end else begin
        output_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_2_V_write = grp_kernel_fu_172_output_2_V_write;
    end else begin
        output_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_3_V_read = grp_write_output_fu_250_output_3_V_read;
    end else begin
        output_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_3_V_write = grp_kernel_fu_172_output_3_V_write;
    end else begin
        output_3_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_read_input_fu_224_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_kernel_fu_172_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_write_output_fu_250_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_kernel_fu_172_ap_start = grp_kernel_fu_172_ap_start_reg;

assign grp_read_input_fu_224_ap_start = grp_read_input_fu_224_ap_start_reg;

assign grp_write_output_fu_250_ap_start = grp_write_output_fu_250_ap_start_reg;

assign grp_write_output_fu_250_out_r_TREADY = (out_r_TREADY_int & ap_CS_fsm_state7);

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

endmodule //fused_cnn_layer
