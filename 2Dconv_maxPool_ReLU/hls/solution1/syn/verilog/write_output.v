// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_0_V_dout,
        output_0_V_empty_n,
        output_0_V_read,
        output_1_V_dout,
        output_1_V_empty_n,
        output_1_V_read,
        output_2_V_dout,
        output_2_V_empty_n,
        output_2_V_read,
        output_3_V_dout,
        output_3_V_empty_n,
        output_3_V_read,
        out_r_TREADY,
        ap_ce,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST,
        output_0_V_blk_n,
        output_1_V_blk_n,
        output_2_V_blk_n,
        output_3_V_blk_n,
        out_r_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] output_0_V_dout;
input   output_0_V_empty_n;
output   output_0_V_read;
input  [15:0] output_1_V_dout;
input   output_1_V_empty_n;
output   output_1_V_read;
input  [15:0] output_2_V_dout;
input   output_2_V_empty_n;
output   output_2_V_read;
input  [15:0] output_3_V_dout;
input   output_3_V_empty_n;
output   output_3_V_read;
input   out_r_TREADY;
input   ap_ce;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;
output   output_0_V_blk_n;
output   output_1_V_blk_n;
output   output_2_V_blk_n;
output   output_3_V_blk_n;
output   out_r_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_0_V_read;
reg output_1_V_read;
reg output_2_V_read;
reg output_3_V_read;
reg out_r_TVALID;
reg output_0_V_blk_n;
reg output_1_V_blk_n;
reg output_2_V_blk_n;
reg output_3_V_blk_n;
reg out_r_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln67_reg_182;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] iteration;
reg   [15:0] sent;
wire   [7:0] add_ln66_fu_115_p2;
wire   [0:0] icmp_ln67_fu_121_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [7:0] ap_phi_reg_pp0_iter0_iteration_new_0_reg_100;
reg   [7:0] ap_phi_reg_pp0_iter1_iteration_new_0_reg_100;
reg   [7:0] ap_sig_allocacmp_iteration_load;
wire   [15:0] select_ln80_fu_157_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_last_V_fu_150_p2;
wire   [15:0] add_ln79_fu_144_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_87;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 iteration = 8'd0;
#0 sent = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_87)) begin
        if ((icmp_ln67_fu_121_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 <= add_ln66_fu_115_p2;
        end else if ((icmp_ln67_fu_121_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 <= ap_phi_reg_pp0_iter0_iteration_new_0_reg_100;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln67_reg_182 <= icmp_ln67_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iteration <= ap_phi_reg_pp0_iter1_iteration_new_0_reg_100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln67_reg_182 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sent <= select_ln80_fu_157_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_iteration_load = ap_phi_reg_pp0_iter1_iteration_new_0_reg_100;
    end else begin
        ap_sig_allocacmp_iteration_load = iteration;
    end
end

always @ (*) begin
    if (((icmp_ln67_reg_182 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln67_reg_182 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_reg_182 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_0_V_blk_n = output_0_V_empty_n;
    end else begin
        output_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln67_reg_182 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_0_V_read = 1'b1;
    end else begin
        output_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_reg_182 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_1_V_blk_n = output_1_V_empty_n;
    end else begin
        output_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln67_reg_182 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_1_V_read = 1'b1;
    end else begin
        output_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_reg_182 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_2_V_blk_n = output_2_V_empty_n;
    end else begin
        output_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln67_reg_182 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_2_V_read = 1'b1;
    end else begin
        output_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_reg_182 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_3_V_blk_n = output_3_V_empty_n;
    end else begin
        output_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln67_reg_182 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_3_V_read = 1'b1;
    end else begin
        output_3_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_115_p2 = (ap_sig_allocacmp_iteration_load + 8'd1);

assign add_ln79_fu_144_p2 = (sent + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln67_reg_182 == 1'd1) & (output_3_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_2_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_1_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln67_reg_182 == 1'd1) & (output_3_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_2_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_1_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln67_reg_182 == 1'd1) & (output_3_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_2_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_1_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((icmp_ln67_reg_182 == 1'd1) & (out_r_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((icmp_ln67_reg_182 == 1'd1) & (output_3_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_2_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_1_V_empty_n == 1'b0)) | ((icmp_ln67_reg_182 == 1'd1) & (output_0_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_87 = ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_iteration_new_0_reg_100 = 'bx;

assign icmp_ln67_fu_121_p2 = ((add_ln66_fu_115_p2 == 8'd4) ? 1'b1 : 1'b0);

assign out_r_TDATA = {{{{output_3_V_dout}, {output_2_V_dout}}, {output_1_V_dout}}, {output_0_V_dout}};

assign out_r_TKEEP = 8'd255;

assign out_r_TLAST = tmp_last_V_fu_150_p2;

assign out_r_TSTRB = 8'd0;

assign select_ln80_fu_157_p3 = ((tmp_last_V_fu_150_p2[0:0] === 1'b1) ? 16'd0 : add_ln79_fu_144_p2);

assign tmp_last_V_fu_150_p2 = ((add_ln79_fu_144_p2 == 16'd256) ? 1'b1 : 1'b0);

endmodule //write_output
