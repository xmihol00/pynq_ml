// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_output.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_output::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_output::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> write_output::ap_ST_fsm_pp0_stage0 = "1";
const bool write_output::ap_const_boolean_1 = true;
const sc_lv<32> write_output::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool write_output::ap_const_boolean_0 = false;
const sc_lv<1> write_output::ap_const_lv1_1 = "1";
const sc_lv<8> write_output::ap_const_lv8_0 = "00000000";
const sc_lv<16> write_output::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> write_output::ap_const_lv1_0 = "0";
const sc_lv<8> write_output::ap_const_lv8_FF = "11111111";
const sc_lv<8> write_output::ap_const_lv8_1 = "1";
const sc_lv<8> write_output::ap_const_lv8_4 = "100";
const sc_lv<16> write_output::ap_const_lv16_1 = "1";
const sc_lv<16> write_output::ap_const_lv16_100 = "100000000";

write_output::write_output(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln66_fu_115_p2);
    sensitive << ( ap_sig_allocacmp_iteration_load );

    SC_METHOD(thread_add_ln79_fu_144_p2);
    sensitive << ( sent );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( output_0_V_empty_n );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );

    SC_METHOD(thread_ap_condition_87);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_iteration_new_0_reg_100);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_sig_allocacmp_iteration_load);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( iteration );
    sensitive << ( ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 );

    SC_METHOD(thread_icmp_ln67_fu_121_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( add_ln66_fu_115_p2 );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( output_0_V_dout );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_1_V_dout );
    sensitive << ( output_2_V_dout );
    sensitive << ( output_3_V_dout );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_last_V_fu_150_p2 );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_output_0_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( icmp_ln67_reg_182 );

    SC_METHOD(thread_output_0_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_output_1_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_1_V_empty_n );

    SC_METHOD(thread_output_1_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_output_2_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_2_V_empty_n );

    SC_METHOD(thread_output_2_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_output_3_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( output_3_V_empty_n );

    SC_METHOD(thread_output_3_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_select_ln80_fu_157_p3);
    sensitive << ( tmp_last_V_fu_150_p2 );
    sensitive << ( add_ln79_fu_144_p2 );

    SC_METHOD(thread_tmp_last_V_fu_150_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln67_reg_182 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( add_ln79_fu_144_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    iteration = "00000000";
    sent = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_output_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_0_V_dout, "(port)output_0_V_dout");
    sc_trace(mVcdFile, output_0_V_empty_n, "(port)output_0_V_empty_n");
    sc_trace(mVcdFile, output_0_V_read, "(port)output_0_V_read");
    sc_trace(mVcdFile, output_1_V_dout, "(port)output_1_V_dout");
    sc_trace(mVcdFile, output_1_V_empty_n, "(port)output_1_V_empty_n");
    sc_trace(mVcdFile, output_1_V_read, "(port)output_1_V_read");
    sc_trace(mVcdFile, output_2_V_dout, "(port)output_2_V_dout");
    sc_trace(mVcdFile, output_2_V_empty_n, "(port)output_2_V_empty_n");
    sc_trace(mVcdFile, output_2_V_read, "(port)output_2_V_read");
    sc_trace(mVcdFile, output_3_V_dout, "(port)output_3_V_dout");
    sc_trace(mVcdFile, output_3_V_empty_n, "(port)output_3_V_empty_n");
    sc_trace(mVcdFile, output_3_V_read, "(port)output_3_V_read");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, output_0_V_blk_n, "(port)output_0_V_blk_n");
    sc_trace(mVcdFile, output_1_V_blk_n, "(port)output_1_V_blk_n");
    sc_trace(mVcdFile, output_2_V_blk_n, "(port)output_2_V_blk_n");
    sc_trace(mVcdFile, output_3_V_blk_n, "(port)output_3_V_blk_n");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "(port)out_r_TDATA_blk_n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, icmp_ln67_reg_182, "icmp_ln67_reg_182");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, iteration, "iteration");
    sc_trace(mVcdFile, sent, "sent");
    sc_trace(mVcdFile, add_ln66_fu_115_p2, "add_ln66_fu_115_p2");
    sc_trace(mVcdFile, icmp_ln67_fu_121_p2, "icmp_ln67_fu_121_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_iteration_new_0_reg_100, "ap_phi_reg_pp0_iter0_iteration_new_0_reg_100");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_iteration_new_0_reg_100, "ap_phi_reg_pp0_iter1_iteration_new_0_reg_100");
    sc_trace(mVcdFile, ap_sig_allocacmp_iteration_load, "ap_sig_allocacmp_iteration_load");
    sc_trace(mVcdFile, select_ln80_fu_157_p3, "select_ln80_fu_157_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_last_V_fu_150_p2, "tmp_last_V_fu_150_p2");
    sc_trace(mVcdFile, add_ln79_fu_144_p2, "add_ln79_fu_144_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_87, "ap_condition_87");
#endif

    }
}

write_output::~write_output() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void write_output::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_87.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(icmp_ln67_fu_121_p2.read(), ap_const_lv1_0)) {
            ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 = add_ln66_fu_115_p2.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln67_fu_121_p2.read())) {
            ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 = ap_const_lv8_0;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter1_iteration_new_0_reg_100 = ap_phi_reg_pp0_iter0_iteration_new_0_reg_100.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        icmp_ln67_reg_182 = icmp_ln67_fu_121_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        iteration = ap_phi_reg_pp0_iter1_iteration_new_0_reg_100.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sent = select_ln80_fu_157_p3.read();
    }
}

void write_output::thread_add_ln66_fu_115_p2() {
    add_ln66_fu_115_p2 = (!ap_sig_allocacmp_iteration_load.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(ap_sig_allocacmp_iteration_load.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void write_output::thread_add_ln79_fu_144_p2() {
    add_ln79_fu_144_p2 = (!sent.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(sent.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void write_output::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void write_output::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void write_output::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (((esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) && 
    esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1)) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void write_output::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (((esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) && 
    esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1)) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void write_output::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (((esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) && 
    esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1)) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
    esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void write_output::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void write_output::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY.read()));
}

void write_output::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) && 
  esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1)) || (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read())));
}

void write_output::thread_ap_condition_87() {
    ap_condition_87 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1));
}

void write_output::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void write_output::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void write_output::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void write_output::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_output::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void write_output::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void write_output::thread_ap_phi_reg_pp0_iter0_iteration_new_0_reg_100() {
    ap_phi_reg_pp0_iter0_iteration_new_0_reg_100 =  (sc_lv<8>) ("XXXXXXXX");
}

void write_output::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_output::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void write_output::thread_ap_sig_allocacmp_iteration_load() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        ap_sig_allocacmp_iteration_load = ap_phi_reg_pp0_iter1_iteration_new_0_reg_100.read();
    } else {
        ap_sig_allocacmp_iteration_load = iteration.read();
    }
}

void write_output::thread_icmp_ln67_fu_121_p2() {
    icmp_ln67_fu_121_p2 = (!add_ln66_fu_115_p2.read().is_01() || !ap_const_lv8_4.is_01())? sc_lv<1>(): sc_lv<1>(add_ln66_fu_115_p2.read() == ap_const_lv8_4);
}

void write_output::thread_out_r_TDATA() {
    out_r_TDATA = esl_concat<48,16>(esl_concat<32,16>(esl_concat<16,16>(output_3_V_dout.read(), output_2_V_dout.read()), output_1_V_dout.read()), output_0_V_dout.read());
}

void write_output::thread_out_r_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        out_r_TDATA_blk_n = out_r_TREADY.read();
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_out_r_TKEEP() {
    out_r_TKEEP = ap_const_lv8_FF;
}

void write_output::thread_out_r_TLAST() {
    out_r_TLAST = tmp_last_V_fu_150_p2.read();
}

void write_output::thread_out_r_TSTRB() {
    out_r_TSTRB = ap_const_lv8_0;
}

void write_output::thread_out_r_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        out_r_TVALID = ap_const_logic_1;
    } else {
        out_r_TVALID = ap_const_logic_0;
    }
}

void write_output::thread_output_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        output_0_V_blk_n = output_0_V_empty_n.read();
    } else {
        output_0_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        output_0_V_read = ap_const_logic_1;
    } else {
        output_0_V_read = ap_const_logic_0;
    }
}

void write_output::thread_output_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        output_1_V_blk_n = output_1_V_empty_n.read();
    } else {
        output_1_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        output_1_V_read = ap_const_logic_1;
    } else {
        output_1_V_read = ap_const_logic_0;
    }
}

void write_output::thread_output_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        output_2_V_blk_n = output_2_V_empty_n.read();
    } else {
        output_2_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        output_2_V_read = ap_const_logic_1;
    } else {
        output_2_V_read = ap_const_logic_0;
    }
}

void write_output::thread_output_3_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        output_3_V_blk_n = output_3_V_empty_n.read();
    } else {
        output_3_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_3_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln67_reg_182.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        output_3_V_read = ap_const_logic_1;
    } else {
        output_3_V_read = ap_const_logic_0;
    }
}

void write_output::thread_select_ln80_fu_157_p3() {
    select_ln80_fu_157_p3 = (!tmp_last_V_fu_150_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_last_V_fu_150_p2.read()[0].to_bool())? ap_const_lv16_0: add_ln79_fu_144_p2.read());
}

void write_output::thread_tmp_last_V_fu_150_p2() {
    tmp_last_V_fu_150_p2 = (!add_ln79_fu_144_p2.read().is_01() || !ap_const_lv16_100.is_01())? sc_lv<1>(): sc_lv<1>(add_ln79_fu_144_p2.read() == ap_const_lv16_100);
}

void write_output::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

