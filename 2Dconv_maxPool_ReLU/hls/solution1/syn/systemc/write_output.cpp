// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_output.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_output::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_output::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> write_output::ap_ST_fsm_state1 = "1";
const sc_lv<2> write_output::ap_ST_fsm_state2 = "10";
const sc_lv<32> write_output::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> write_output::ap_const_lv32_1 = "1";
const sc_lv<8> write_output::ap_const_lv8_FF = "11111111";
const sc_lv<8> write_output::ap_const_lv8_0 = "00000000";
const sc_lv<1> write_output::ap_const_lv1_0 = "0";
const sc_lv<64> write_output::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> write_output::ap_const_lv32_1F = "11111";
const bool write_output::ap_const_boolean_1 = true;

write_output::write_output(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_out_V_data_V_U = new regslice_both<64>("regslice_both_out_V_data_V_U");
    regslice_both_out_V_data_V_U->ap_clk(ap_clk);
    regslice_both_out_V_data_V_U->ap_rst(ap_rst);
    regslice_both_out_V_data_V_U->data_in(out_r_TDATA_int);
    regslice_both_out_V_data_V_U->vld_in(out_r_TVALID_int);
    regslice_both_out_V_data_V_U->ack_in(out_r_TREADY_int);
    regslice_both_out_V_data_V_U->data_out(out_r_TDATA);
    regslice_both_out_V_data_V_U->vld_out(regslice_both_out_V_data_V_U_vld_out);
    regslice_both_out_V_data_V_U->ack_out(out_r_TREADY);
    regslice_both_out_V_data_V_U->apdone_blk(regslice_both_out_V_data_V_U_apdone_blk);
    regslice_both_out_V_keep_V_U = new regslice_both<8>("regslice_both_out_V_keep_V_U");
    regslice_both_out_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_out_V_keep_V_U->ap_rst(ap_rst);
    regslice_both_out_V_keep_V_U->data_in(ap_var_for_const0);
    regslice_both_out_V_keep_V_U->vld_in(out_r_TVALID_int);
    regslice_both_out_V_keep_V_U->ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy);
    regslice_both_out_V_keep_V_U->data_out(out_r_TKEEP);
    regslice_both_out_V_keep_V_U->vld_out(regslice_both_out_V_keep_V_U_vld_out);
    regslice_both_out_V_keep_V_U->ack_out(out_r_TREADY);
    regslice_both_out_V_keep_V_U->apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk);
    regslice_both_out_V_strb_V_U = new regslice_both<8>("regslice_both_out_V_strb_V_U");
    regslice_both_out_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_out_V_strb_V_U->ap_rst(ap_rst);
    regslice_both_out_V_strb_V_U->data_in(ap_var_for_const1);
    regslice_both_out_V_strb_V_U->vld_in(out_r_TVALID_int);
    regslice_both_out_V_strb_V_U->ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy);
    regslice_both_out_V_strb_V_U->data_out(out_r_TSTRB);
    regslice_both_out_V_strb_V_U->vld_out(regslice_both_out_V_strb_V_U_vld_out);
    regslice_both_out_V_strb_V_U->ack_out(out_r_TREADY);
    regslice_both_out_V_strb_V_U->apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk);
    regslice_both_out_V_last_V_U = new regslice_both<1>("regslice_both_out_V_last_V_U");
    regslice_both_out_V_last_V_U->ap_clk(ap_clk);
    regslice_both_out_V_last_V_U->ap_rst(ap_rst);
    regslice_both_out_V_last_V_U->data_in(ap_var_for_const2);
    regslice_both_out_V_last_V_U->vld_in(out_r_TVALID_int);
    regslice_both_out_V_last_V_U->ack_in(regslice_both_out_V_last_V_U_ack_in_dummy);
    regslice_both_out_V_last_V_U->data_out(out_r_TLAST);
    regslice_both_out_V_last_V_U->vld_out(regslice_both_out_V_last_V_U_vld_out);
    regslice_both_out_V_last_V_U->ack_out(out_r_TREADY);
    regslice_both_out_V_last_V_U->apdone_blk(regslice_both_out_V_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_out_V_data_V_U_apdone_blk );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_out_V_data_V_U_apdone_blk );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_out_r_TDATA_int);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( tmp_4_fu_111_p5 );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( regslice_both_out_V_data_V_U_vld_out );

    SC_METHOD(thread_out_r_TVALID_int);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_output_0_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );

    SC_METHOD(thread_output_0_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_output_1_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_1_V_empty_n );

    SC_METHOD(thread_output_1_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_output_2_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_2_V_empty_n );

    SC_METHOD(thread_output_2_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_output_3_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_3_V_empty_n );

    SC_METHOD(thread_output_3_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( out_r_TREADY_int );

    SC_METHOD(thread_tmp_4_fu_111_p5);
    sensitive << ( trunc_ln241_3_fu_107_p1 );
    sensitive << ( trunc_ln241_2_fu_103_p1 );
    sensitive << ( trunc_ln241_1_fu_99_p1 );
    sensitive << ( trunc_ln241_fu_95_p1 );

    SC_METHOD(thread_trunc_ln241_1_fu_99_p1);
    sensitive << ( output_1_V_dout );

    SC_METHOD(thread_trunc_ln241_2_fu_103_p1);
    sensitive << ( output_2_V_dout );

    SC_METHOD(thread_trunc_ln241_3_fu_107_p1);
    sensitive << ( output_3_V_dout );

    SC_METHOD(thread_trunc_ln241_fu_95_p1);
    sensitive << ( output_0_V_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_0_V_empty_n );
    sensitive << ( output_1_V_empty_n );
    sensitive << ( output_2_V_empty_n );
    sensitive << ( output_3_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( regslice_both_out_V_data_V_U_apdone_blk );
    sensitive << ( out_r_TREADY_int );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_output_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_0_V_dout, "(port)output_0_V_dout");
    sc_trace(mVcdFile, output_0_V_empty_n, "(port)output_0_V_empty_n");
    sc_trace(mVcdFile, output_0_V_read, "(port)output_0_V_read");
    sc_trace(mVcdFile, output_1_V_dout, "(port)output_1_V_dout");
    sc_trace(mVcdFile, output_1_V_empty_n, "(port)output_1_V_empty_n");
    sc_trace(mVcdFile, output_1_V_read, "(port)output_1_V_read");
    sc_trace(mVcdFile, output_2_V_dout, "(port)output_2_V_dout");
    sc_trace(mVcdFile, output_2_V_empty_n, "(port)output_2_V_empty_n");
    sc_trace(mVcdFile, output_2_V_read, "(port)output_2_V_read");
    sc_trace(mVcdFile, output_3_V_dout, "(port)output_3_V_dout");
    sc_trace(mVcdFile, output_3_V_empty_n, "(port)output_3_V_empty_n");
    sc_trace(mVcdFile, output_3_V_read, "(port)output_3_V_read");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, output_0_V_blk_n, "output_0_V_blk_n");
    sc_trace(mVcdFile, output_1_V_blk_n, "output_1_V_blk_n");
    sc_trace(mVcdFile, output_2_V_blk_n, "output_2_V_blk_n");
    sc_trace(mVcdFile, output_3_V_blk_n, "output_3_V_blk_n");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, trunc_ln241_3_fu_107_p1, "trunc_ln241_3_fu_107_p1");
    sc_trace(mVcdFile, trunc_ln241_2_fu_103_p1, "trunc_ln241_2_fu_103_p1");
    sc_trace(mVcdFile, trunc_ln241_1_fu_99_p1, "trunc_ln241_1_fu_99_p1");
    sc_trace(mVcdFile, trunc_ln241_fu_95_p1, "trunc_ln241_fu_95_p1");
    sc_trace(mVcdFile, tmp_4_fu_111_p5, "tmp_4_fu_111_p5");
    sc_trace(mVcdFile, regslice_both_out_V_data_V_U_apdone_blk, "regslice_both_out_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, out_r_TDATA_int, "out_r_TDATA_int");
    sc_trace(mVcdFile, out_r_TVALID_int, "out_r_TVALID_int");
    sc_trace(mVcdFile, out_r_TREADY_int, "out_r_TREADY_int");
    sc_trace(mVcdFile, regslice_both_out_V_data_V_U_vld_out, "regslice_both_out_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_V_keep_V_U_apdone_blk, "regslice_both_out_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_V_keep_V_U_ack_in_dummy, "regslice_both_out_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_V_keep_V_U_vld_out, "regslice_both_out_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_V_strb_V_U_apdone_blk, "regslice_both_out_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_V_strb_V_U_ack_in_dummy, "regslice_both_out_V_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_V_strb_V_U_vld_out, "regslice_both_out_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_out_V_last_V_U_apdone_blk, "regslice_both_out_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_out_V_last_V_U_ack_in_dummy, "regslice_both_out_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_out_V_last_V_U_vld_out, "regslice_both_out_V_last_V_U_vld_out");
#endif

    }
}

write_output::~write_output() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_out_V_data_V_U;
    delete regslice_both_out_V_keep_V_U;
    delete regslice_both_out_V_strb_V_U;
    delete regslice_both_out_V_last_V_U;
}

void write_output::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv8_FF;
}

void write_output::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv8_0;
}

void write_output::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void write_output::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_out_V_data_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
}

void write_output::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_output::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void write_output::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()));
}

void write_output::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_out_V_data_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void write_output::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_output::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_out_V_data_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_output::thread_out_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        out_r_TDATA_blk_n = out_r_TREADY_int.read();
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_out_r_TDATA_int() {
    out_r_TDATA_int = esl_partset<64,64,32,32,32>(ap_const_lv64_0, tmp_4_fu_111_p5.read(), ap_const_lv32_0, ap_const_lv32_1F);
}

void write_output::thread_out_r_TVALID() {
    out_r_TVALID = regslice_both_out_V_data_V_U_vld_out.read();
}

void write_output::thread_out_r_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
        out_r_TVALID_int = ap_const_logic_1;
    } else {
        out_r_TVALID_int = ap_const_logic_0;
    }
}

void write_output::thread_output_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        output_0_V_blk_n = output_0_V_empty_n.read();
    } else {
        output_0_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
        output_0_V_read = ap_const_logic_1;
    } else {
        output_0_V_read = ap_const_logic_0;
    }
}

void write_output::thread_output_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        output_1_V_blk_n = output_1_V_empty_n.read();
    } else {
        output_1_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
        output_1_V_read = ap_const_logic_1;
    } else {
        output_1_V_read = ap_const_logic_0;
    }
}

void write_output::thread_output_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        output_2_V_blk_n = output_2_V_empty_n.read();
    } else {
        output_2_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
        output_2_V_read = ap_const_logic_1;
    } else {
        output_2_V_read = ap_const_logic_0;
    }
}

void write_output::thread_output_3_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        output_3_V_blk_n = output_3_V_empty_n.read();
    } else {
        output_3_V_blk_n = ap_const_logic_1;
    }
}

void write_output::thread_output_3_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
        output_3_V_read = ap_const_logic_1;
    } else {
        output_3_V_read = ap_const_logic_0;
    }
}

void write_output::thread_tmp_4_fu_111_p5() {
    tmp_4_fu_111_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(trunc_ln241_3_fu_107_p1.read(), trunc_ln241_2_fu_103_p1.read()), trunc_ln241_1_fu_99_p1.read()), trunc_ln241_fu_95_p1.read());
}

void write_output::thread_trunc_ln241_1_fu_99_p1() {
    trunc_ln241_1_fu_99_p1 = output_1_V_dout.read().range(8-1, 0);
}

void write_output::thread_trunc_ln241_2_fu_103_p1() {
    trunc_ln241_2_fu_103_p1 = output_2_V_dout.read().range(8-1, 0);
}

void write_output::thread_trunc_ln241_3_fu_107_p1() {
    trunc_ln241_3_fu_107_p1 = output_3_V_dout.read().range(8-1, 0);
}

void write_output::thread_trunc_ln241_fu_95_p1() {
    trunc_ln241_fu_95_p1 = output_0_V_dout.read().range(8-1, 0);
}

void write_output::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_2_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, output_3_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_out_V_data_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_r_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

