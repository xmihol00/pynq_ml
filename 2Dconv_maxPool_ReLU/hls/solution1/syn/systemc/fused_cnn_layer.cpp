// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fused_cnn_layer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<64> fused_cnn_layer::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> fused_cnn_layer::ap_const_lv8_0 = "00000000";
const sc_lv<1> fused_cnn_layer::ap_const_lv1_0 = "0";
const sc_logic fused_cnn_layer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fused_cnn_layer::ap_const_logic_0 = sc_dt::Log_0;

fused_cnn_layer::fused_cnn_layer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    read_input_U0 = new read_input("read_input_U0");
    read_input_U0->ap_clk(ap_clk);
    read_input_U0->ap_rst(ap_rst_n_inv);
    read_input_U0->ap_start(read_input_U0_ap_start);
    read_input_U0->start_full_n(start_for_kernel_U0_full_n);
    read_input_U0->ap_done(read_input_U0_ap_done);
    read_input_U0->ap_continue(read_input_U0_ap_continue);
    read_input_U0->ap_idle(read_input_U0_ap_idle);
    read_input_U0->ap_ready(read_input_U0_ap_ready);
    read_input_U0->start_out(read_input_U0_start_out);
    read_input_U0->start_write(read_input_U0_start_write);
    read_input_U0->input_upper_0_V_din(read_input_U0_input_upper_0_V_din);
    read_input_U0->input_upper_0_V_full_n(input_upper_0_V_full_n);
    read_input_U0->input_upper_0_V_write(read_input_U0_input_upper_0_V_write);
    read_input_U0->input_upper_1_V_din(read_input_U0_input_upper_1_V_din);
    read_input_U0->input_upper_1_V_full_n(input_upper_1_V_full_n);
    read_input_U0->input_upper_1_V_write(read_input_U0_input_upper_1_V_write);
    read_input_U0->input_upper_2_V_din(read_input_U0_input_upper_2_V_din);
    read_input_U0->input_upper_2_V_full_n(input_upper_2_V_full_n);
    read_input_U0->input_upper_2_V_write(read_input_U0_input_upper_2_V_write);
    read_input_U0->input_lower_0_V_din(read_input_U0_input_lower_0_V_din);
    read_input_U0->input_lower_0_V_full_n(input_lower_0_V_full_n);
    read_input_U0->input_lower_0_V_write(read_input_U0_input_lower_0_V_write);
    read_input_U0->input_lower_1_V_din(read_input_U0_input_lower_1_V_din);
    read_input_U0->input_lower_1_V_full_n(input_lower_1_V_full_n);
    read_input_U0->input_lower_1_V_write(read_input_U0_input_lower_1_V_write);
    read_input_U0->input_lower_2_V_din(read_input_U0_input_lower_2_V_din);
    read_input_U0->input_lower_2_V_full_n(input_lower_2_V_full_n);
    read_input_U0->input_lower_2_V_write(read_input_U0_input_lower_2_V_write);
    read_input_U0->in_0_TDATA(in_0_TDATA);
    read_input_U0->in_0_TVALID(in_0_TVALID);
    read_input_U0->in_0_TREADY(read_input_U0_in_0_TREADY);
    read_input_U0->in_1_TDATA(in_1_TDATA);
    read_input_U0->in_1_TVALID(in_1_TVALID);
    read_input_U0->in_1_TREADY(read_input_U0_in_1_TREADY);
    read_input_U0->in_0_TKEEP(in_0_TKEEP);
    read_input_U0->in_1_TKEEP(in_1_TKEEP);
    read_input_U0->in_0_TSTRB(in_0_TSTRB);
    read_input_U0->in_1_TSTRB(in_1_TSTRB);
    read_input_U0->in_0_TLAST(in_0_TLAST);
    read_input_U0->in_1_TLAST(in_1_TLAST);
    kernel_U0 = new kernel("kernel_U0");
    kernel_U0->ap_clk(ap_clk);
    kernel_U0->ap_rst(ap_rst_n_inv);
    kernel_U0->ap_start(kernel_U0_ap_start);
    kernel_U0->start_full_n(start_for_write_output_U0_full_n);
    kernel_U0->ap_done(kernel_U0_ap_done);
    kernel_U0->ap_continue(kernel_U0_ap_continue);
    kernel_U0->ap_idle(kernel_U0_ap_idle);
    kernel_U0->ap_ready(kernel_U0_ap_ready);
    kernel_U0->start_out(kernel_U0_start_out);
    kernel_U0->start_write(kernel_U0_start_write);
    kernel_U0->input_upper_0_V_dout(input_upper_0_V_dout);
    kernel_U0->input_upper_0_V_empty_n(input_upper_0_V_empty_n);
    kernel_U0->input_upper_0_V_read(kernel_U0_input_upper_0_V_read);
    kernel_U0->input_upper_1_V_dout(input_upper_1_V_dout);
    kernel_U0->input_upper_1_V_empty_n(input_upper_1_V_empty_n);
    kernel_U0->input_upper_1_V_read(kernel_U0_input_upper_1_V_read);
    kernel_U0->input_upper_2_V_dout(input_upper_2_V_dout);
    kernel_U0->input_upper_2_V_empty_n(input_upper_2_V_empty_n);
    kernel_U0->input_upper_2_V_read(kernel_U0_input_upper_2_V_read);
    kernel_U0->input_lower_0_V_dout(input_lower_0_V_dout);
    kernel_U0->input_lower_0_V_empty_n(input_lower_0_V_empty_n);
    kernel_U0->input_lower_0_V_read(kernel_U0_input_lower_0_V_read);
    kernel_U0->input_lower_1_V_dout(input_lower_1_V_dout);
    kernel_U0->input_lower_1_V_empty_n(input_lower_1_V_empty_n);
    kernel_U0->input_lower_1_V_read(kernel_U0_input_lower_1_V_read);
    kernel_U0->input_lower_2_V_dout(input_lower_2_V_dout);
    kernel_U0->input_lower_2_V_empty_n(input_lower_2_V_empty_n);
    kernel_U0->input_lower_2_V_read(kernel_U0_input_lower_2_V_read);
    kernel_U0->output_0_V_din(kernel_U0_output_0_V_din);
    kernel_U0->output_0_V_full_n(output_0_V_full_n);
    kernel_U0->output_0_V_write(kernel_U0_output_0_V_write);
    kernel_U0->output_1_V_din(kernel_U0_output_1_V_din);
    kernel_U0->output_1_V_full_n(output_1_V_full_n);
    kernel_U0->output_1_V_write(kernel_U0_output_1_V_write);
    kernel_U0->output_2_V_din(kernel_U0_output_2_V_din);
    kernel_U0->output_2_V_full_n(output_2_V_full_n);
    kernel_U0->output_2_V_write(kernel_U0_output_2_V_write);
    kernel_U0->output_3_V_din(kernel_U0_output_3_V_din);
    kernel_U0->output_3_V_full_n(output_3_V_full_n);
    kernel_U0->output_3_V_write(kernel_U0_output_3_V_write);
    write_output_U0 = new write_output("write_output_U0");
    write_output_U0->ap_clk(ap_clk);
    write_output_U0->ap_rst(ap_rst_n_inv);
    write_output_U0->ap_start(write_output_U0_ap_start);
    write_output_U0->ap_done(write_output_U0_ap_done);
    write_output_U0->ap_continue(write_output_U0_ap_continue);
    write_output_U0->ap_idle(write_output_U0_ap_idle);
    write_output_U0->ap_ready(write_output_U0_ap_ready);
    write_output_U0->output_0_V_dout(output_0_V_dout);
    write_output_U0->output_0_V_empty_n(output_0_V_empty_n);
    write_output_U0->output_0_V_read(write_output_U0_output_0_V_read);
    write_output_U0->output_1_V_dout(output_1_V_dout);
    write_output_U0->output_1_V_empty_n(output_1_V_empty_n);
    write_output_U0->output_1_V_read(write_output_U0_output_1_V_read);
    write_output_U0->output_2_V_dout(output_2_V_dout);
    write_output_U0->output_2_V_empty_n(output_2_V_empty_n);
    write_output_U0->output_2_V_read(write_output_U0_output_2_V_read);
    write_output_U0->output_3_V_dout(output_3_V_dout);
    write_output_U0->output_3_V_empty_n(output_3_V_empty_n);
    write_output_U0->output_3_V_read(write_output_U0_output_3_V_read);
    write_output_U0->out_r_TDATA(write_output_U0_out_r_TDATA);
    write_output_U0->out_r_TVALID(write_output_U0_out_r_TVALID);
    write_output_U0->out_r_TREADY(out_r_TREADY);
    write_output_U0->out_r_TKEEP(write_output_U0_out_r_TKEEP);
    write_output_U0->out_r_TSTRB(write_output_U0_out_r_TSTRB);
    write_output_U0->out_r_TLAST(write_output_U0_out_r_TLAST);
    input_upper_0_V_U = new fifo_w8_d8_A("input_upper_0_V_U");
    input_upper_0_V_U->clk(ap_clk);
    input_upper_0_V_U->reset(ap_rst_n_inv);
    input_upper_0_V_U->if_read_ce(ap_var_for_const0);
    input_upper_0_V_U->if_write_ce(ap_var_for_const0);
    input_upper_0_V_U->if_din(read_input_U0_input_upper_0_V_din);
    input_upper_0_V_U->if_full_n(input_upper_0_V_full_n);
    input_upper_0_V_U->if_write(read_input_U0_input_upper_0_V_write);
    input_upper_0_V_U->if_dout(input_upper_0_V_dout);
    input_upper_0_V_U->if_empty_n(input_upper_0_V_empty_n);
    input_upper_0_V_U->if_read(kernel_U0_input_upper_0_V_read);
    input_upper_1_V_U = new fifo_w8_d8_A("input_upper_1_V_U");
    input_upper_1_V_U->clk(ap_clk);
    input_upper_1_V_U->reset(ap_rst_n_inv);
    input_upper_1_V_U->if_read_ce(ap_var_for_const0);
    input_upper_1_V_U->if_write_ce(ap_var_for_const0);
    input_upper_1_V_U->if_din(read_input_U0_input_upper_1_V_din);
    input_upper_1_V_U->if_full_n(input_upper_1_V_full_n);
    input_upper_1_V_U->if_write(read_input_U0_input_upper_1_V_write);
    input_upper_1_V_U->if_dout(input_upper_1_V_dout);
    input_upper_1_V_U->if_empty_n(input_upper_1_V_empty_n);
    input_upper_1_V_U->if_read(kernel_U0_input_upper_1_V_read);
    input_upper_2_V_U = new fifo_w8_d8_A("input_upper_2_V_U");
    input_upper_2_V_U->clk(ap_clk);
    input_upper_2_V_U->reset(ap_rst_n_inv);
    input_upper_2_V_U->if_read_ce(ap_var_for_const0);
    input_upper_2_V_U->if_write_ce(ap_var_for_const0);
    input_upper_2_V_U->if_din(read_input_U0_input_upper_2_V_din);
    input_upper_2_V_U->if_full_n(input_upper_2_V_full_n);
    input_upper_2_V_U->if_write(read_input_U0_input_upper_2_V_write);
    input_upper_2_V_U->if_dout(input_upper_2_V_dout);
    input_upper_2_V_U->if_empty_n(input_upper_2_V_empty_n);
    input_upper_2_V_U->if_read(kernel_U0_input_upper_2_V_read);
    input_lower_0_V_U = new fifo_w8_d8_A("input_lower_0_V_U");
    input_lower_0_V_U->clk(ap_clk);
    input_lower_0_V_U->reset(ap_rst_n_inv);
    input_lower_0_V_U->if_read_ce(ap_var_for_const0);
    input_lower_0_V_U->if_write_ce(ap_var_for_const0);
    input_lower_0_V_U->if_din(read_input_U0_input_lower_0_V_din);
    input_lower_0_V_U->if_full_n(input_lower_0_V_full_n);
    input_lower_0_V_U->if_write(read_input_U0_input_lower_0_V_write);
    input_lower_0_V_U->if_dout(input_lower_0_V_dout);
    input_lower_0_V_U->if_empty_n(input_lower_0_V_empty_n);
    input_lower_0_V_U->if_read(kernel_U0_input_lower_0_V_read);
    input_lower_1_V_U = new fifo_w8_d8_A("input_lower_1_V_U");
    input_lower_1_V_U->clk(ap_clk);
    input_lower_1_V_U->reset(ap_rst_n_inv);
    input_lower_1_V_U->if_read_ce(ap_var_for_const0);
    input_lower_1_V_U->if_write_ce(ap_var_for_const0);
    input_lower_1_V_U->if_din(read_input_U0_input_lower_1_V_din);
    input_lower_1_V_U->if_full_n(input_lower_1_V_full_n);
    input_lower_1_V_U->if_write(read_input_U0_input_lower_1_V_write);
    input_lower_1_V_U->if_dout(input_lower_1_V_dout);
    input_lower_1_V_U->if_empty_n(input_lower_1_V_empty_n);
    input_lower_1_V_U->if_read(kernel_U0_input_lower_1_V_read);
    input_lower_2_V_U = new fifo_w8_d8_A("input_lower_2_V_U");
    input_lower_2_V_U->clk(ap_clk);
    input_lower_2_V_U->reset(ap_rst_n_inv);
    input_lower_2_V_U->if_read_ce(ap_var_for_const0);
    input_lower_2_V_U->if_write_ce(ap_var_for_const0);
    input_lower_2_V_U->if_din(read_input_U0_input_lower_2_V_din);
    input_lower_2_V_U->if_full_n(input_lower_2_V_full_n);
    input_lower_2_V_U->if_write(read_input_U0_input_lower_2_V_write);
    input_lower_2_V_U->if_dout(input_lower_2_V_dout);
    input_lower_2_V_U->if_empty_n(input_lower_2_V_empty_n);
    input_lower_2_V_U->if_read(kernel_U0_input_lower_2_V_read);
    output_0_V_U = new fifo_w16_d4_A("output_0_V_U");
    output_0_V_U->clk(ap_clk);
    output_0_V_U->reset(ap_rst_n_inv);
    output_0_V_U->if_read_ce(ap_var_for_const0);
    output_0_V_U->if_write_ce(ap_var_for_const0);
    output_0_V_U->if_din(kernel_U0_output_0_V_din);
    output_0_V_U->if_full_n(output_0_V_full_n);
    output_0_V_U->if_write(kernel_U0_output_0_V_write);
    output_0_V_U->if_dout(output_0_V_dout);
    output_0_V_U->if_empty_n(output_0_V_empty_n);
    output_0_V_U->if_read(write_output_U0_output_0_V_read);
    output_1_V_U = new fifo_w16_d4_A("output_1_V_U");
    output_1_V_U->clk(ap_clk);
    output_1_V_U->reset(ap_rst_n_inv);
    output_1_V_U->if_read_ce(ap_var_for_const0);
    output_1_V_U->if_write_ce(ap_var_for_const0);
    output_1_V_U->if_din(kernel_U0_output_1_V_din);
    output_1_V_U->if_full_n(output_1_V_full_n);
    output_1_V_U->if_write(kernel_U0_output_1_V_write);
    output_1_V_U->if_dout(output_1_V_dout);
    output_1_V_U->if_empty_n(output_1_V_empty_n);
    output_1_V_U->if_read(write_output_U0_output_1_V_read);
    output_2_V_U = new fifo_w16_d4_A("output_2_V_U");
    output_2_V_U->clk(ap_clk);
    output_2_V_U->reset(ap_rst_n_inv);
    output_2_V_U->if_read_ce(ap_var_for_const0);
    output_2_V_U->if_write_ce(ap_var_for_const0);
    output_2_V_U->if_din(kernel_U0_output_2_V_din);
    output_2_V_U->if_full_n(output_2_V_full_n);
    output_2_V_U->if_write(kernel_U0_output_2_V_write);
    output_2_V_U->if_dout(output_2_V_dout);
    output_2_V_U->if_empty_n(output_2_V_empty_n);
    output_2_V_U->if_read(write_output_U0_output_2_V_read);
    output_3_V_U = new fifo_w16_d4_A("output_3_V_U");
    output_3_V_U->clk(ap_clk);
    output_3_V_U->reset(ap_rst_n_inv);
    output_3_V_U->if_read_ce(ap_var_for_const0);
    output_3_V_U->if_write_ce(ap_var_for_const0);
    output_3_V_U->if_din(kernel_U0_output_3_V_din);
    output_3_V_U->if_full_n(output_3_V_full_n);
    output_3_V_U->if_write(kernel_U0_output_3_V_write);
    output_3_V_U->if_dout(output_3_V_dout);
    output_3_V_U->if_empty_n(output_3_V_empty_n);
    output_3_V_U->if_read(write_output_U0_output_3_V_read);
    start_for_kernel_U0_U = new start_for_kernel_U0("start_for_kernel_U0_U");
    start_for_kernel_U0_U->clk(ap_clk);
    start_for_kernel_U0_U->reset(ap_rst_n_inv);
    start_for_kernel_U0_U->if_read_ce(ap_var_for_const0);
    start_for_kernel_U0_U->if_write_ce(ap_var_for_const0);
    start_for_kernel_U0_U->if_din(start_for_kernel_U0_din);
    start_for_kernel_U0_U->if_full_n(start_for_kernel_U0_full_n);
    start_for_kernel_U0_U->if_write(read_input_U0_start_write);
    start_for_kernel_U0_U->if_dout(start_for_kernel_U0_dout);
    start_for_kernel_U0_U->if_empty_n(start_for_kernel_U0_empty_n);
    start_for_kernel_U0_U->if_read(kernel_U0_ap_ready);
    start_for_write_ojbC_U = new start_for_write_ojbC("start_for_write_ojbC_U");
    start_for_write_ojbC_U->clk(ap_clk);
    start_for_write_ojbC_U->reset(ap_rst_n_inv);
    start_for_write_ojbC_U->if_read_ce(ap_var_for_const0);
    start_for_write_ojbC_U->if_write_ce(ap_var_for_const0);
    start_for_write_ojbC_U->if_din(start_for_write_output_U0_din);
    start_for_write_ojbC_U->if_full_n(start_for_write_output_U0_full_n);
    start_for_write_ojbC_U->if_write(kernel_U0_start_write);
    start_for_write_ojbC_U->if_dout(start_for_write_output_U0_dout);
    start_for_write_ojbC_U->if_empty_n(start_for_write_output_U0_empty_n);
    start_for_write_ojbC_U->if_read(write_output_U0_ap_ready);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_in_0_TREADY);
    sensitive << ( read_input_U0_in_0_TREADY );

    SC_METHOD(thread_in_1_TREADY);
    sensitive << ( read_input_U0_in_1_TREADY );

    SC_METHOD(thread_kernel_U0_ap_continue);

    SC_METHOD(thread_kernel_U0_ap_start);
    sensitive << ( start_for_kernel_U0_empty_n );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( write_output_U0_out_r_TDATA );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( write_output_U0_out_r_TKEEP );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( write_output_U0_out_r_TLAST );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( write_output_U0_out_r_TSTRB );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( write_output_U0_out_r_TVALID );

    SC_METHOD(thread_read_input_U0_ap_continue);

    SC_METHOD(thread_read_input_U0_ap_start);

    SC_METHOD(thread_start_for_kernel_U0_din);

    SC_METHOD(thread_start_for_write_output_U0_din);

    SC_METHOD(thread_write_output_U0_ap_continue);

    SC_METHOD(thread_write_output_U0_ap_start);
    sensitive << ( start_for_write_output_U0_empty_n );

    SC_METHOD(thread_write_output_U0_start_full_n);

    SC_METHOD(thread_write_output_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fused_cnn_layer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, in_0_TDATA, "(port)in_0_TDATA");
    sc_trace(mVcdFile, in_1_TDATA, "(port)in_1_TDATA");
    sc_trace(mVcdFile, in_0_TKEEP, "(port)in_0_TKEEP");
    sc_trace(mVcdFile, in_1_TKEEP, "(port)in_1_TKEEP");
    sc_trace(mVcdFile, in_0_TSTRB, "(port)in_0_TSTRB");
    sc_trace(mVcdFile, in_1_TSTRB, "(port)in_1_TSTRB");
    sc_trace(mVcdFile, in_0_TLAST, "(port)in_0_TLAST");
    sc_trace(mVcdFile, in_1_TLAST, "(port)in_1_TLAST");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_0_TVALID, "(port)in_0_TVALID");
    sc_trace(mVcdFile, in_0_TREADY, "(port)in_0_TREADY");
    sc_trace(mVcdFile, in_1_TVALID, "(port)in_1_TVALID");
    sc_trace(mVcdFile, in_1_TREADY, "(port)in_1_TREADY");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, read_input_U0_ap_start, "read_input_U0_ap_start");
    sc_trace(mVcdFile, read_input_U0_ap_done, "read_input_U0_ap_done");
    sc_trace(mVcdFile, read_input_U0_ap_continue, "read_input_U0_ap_continue");
    sc_trace(mVcdFile, read_input_U0_ap_idle, "read_input_U0_ap_idle");
    sc_trace(mVcdFile, read_input_U0_ap_ready, "read_input_U0_ap_ready");
    sc_trace(mVcdFile, read_input_U0_start_out, "read_input_U0_start_out");
    sc_trace(mVcdFile, read_input_U0_start_write, "read_input_U0_start_write");
    sc_trace(mVcdFile, read_input_U0_input_upper_0_V_din, "read_input_U0_input_upper_0_V_din");
    sc_trace(mVcdFile, read_input_U0_input_upper_0_V_write, "read_input_U0_input_upper_0_V_write");
    sc_trace(mVcdFile, read_input_U0_input_upper_1_V_din, "read_input_U0_input_upper_1_V_din");
    sc_trace(mVcdFile, read_input_U0_input_upper_1_V_write, "read_input_U0_input_upper_1_V_write");
    sc_trace(mVcdFile, read_input_U0_input_upper_2_V_din, "read_input_U0_input_upper_2_V_din");
    sc_trace(mVcdFile, read_input_U0_input_upper_2_V_write, "read_input_U0_input_upper_2_V_write");
    sc_trace(mVcdFile, read_input_U0_input_lower_0_V_din, "read_input_U0_input_lower_0_V_din");
    sc_trace(mVcdFile, read_input_U0_input_lower_0_V_write, "read_input_U0_input_lower_0_V_write");
    sc_trace(mVcdFile, read_input_U0_input_lower_1_V_din, "read_input_U0_input_lower_1_V_din");
    sc_trace(mVcdFile, read_input_U0_input_lower_1_V_write, "read_input_U0_input_lower_1_V_write");
    sc_trace(mVcdFile, read_input_U0_input_lower_2_V_din, "read_input_U0_input_lower_2_V_din");
    sc_trace(mVcdFile, read_input_U0_input_lower_2_V_write, "read_input_U0_input_lower_2_V_write");
    sc_trace(mVcdFile, read_input_U0_in_0_TREADY, "read_input_U0_in_0_TREADY");
    sc_trace(mVcdFile, read_input_U0_in_1_TREADY, "read_input_U0_in_1_TREADY");
    sc_trace(mVcdFile, kernel_U0_ap_start, "kernel_U0_ap_start");
    sc_trace(mVcdFile, kernel_U0_ap_done, "kernel_U0_ap_done");
    sc_trace(mVcdFile, kernel_U0_ap_continue, "kernel_U0_ap_continue");
    sc_trace(mVcdFile, kernel_U0_ap_idle, "kernel_U0_ap_idle");
    sc_trace(mVcdFile, kernel_U0_ap_ready, "kernel_U0_ap_ready");
    sc_trace(mVcdFile, kernel_U0_start_out, "kernel_U0_start_out");
    sc_trace(mVcdFile, kernel_U0_start_write, "kernel_U0_start_write");
    sc_trace(mVcdFile, kernel_U0_input_upper_0_V_read, "kernel_U0_input_upper_0_V_read");
    sc_trace(mVcdFile, kernel_U0_input_upper_1_V_read, "kernel_U0_input_upper_1_V_read");
    sc_trace(mVcdFile, kernel_U0_input_upper_2_V_read, "kernel_U0_input_upper_2_V_read");
    sc_trace(mVcdFile, kernel_U0_input_lower_0_V_read, "kernel_U0_input_lower_0_V_read");
    sc_trace(mVcdFile, kernel_U0_input_lower_1_V_read, "kernel_U0_input_lower_1_V_read");
    sc_trace(mVcdFile, kernel_U0_input_lower_2_V_read, "kernel_U0_input_lower_2_V_read");
    sc_trace(mVcdFile, kernel_U0_output_0_V_din, "kernel_U0_output_0_V_din");
    sc_trace(mVcdFile, kernel_U0_output_0_V_write, "kernel_U0_output_0_V_write");
    sc_trace(mVcdFile, kernel_U0_output_1_V_din, "kernel_U0_output_1_V_din");
    sc_trace(mVcdFile, kernel_U0_output_1_V_write, "kernel_U0_output_1_V_write");
    sc_trace(mVcdFile, kernel_U0_output_2_V_din, "kernel_U0_output_2_V_din");
    sc_trace(mVcdFile, kernel_U0_output_2_V_write, "kernel_U0_output_2_V_write");
    sc_trace(mVcdFile, kernel_U0_output_3_V_din, "kernel_U0_output_3_V_din");
    sc_trace(mVcdFile, kernel_U0_output_3_V_write, "kernel_U0_output_3_V_write");
    sc_trace(mVcdFile, write_output_U0_ap_start, "write_output_U0_ap_start");
    sc_trace(mVcdFile, write_output_U0_ap_done, "write_output_U0_ap_done");
    sc_trace(mVcdFile, write_output_U0_ap_continue, "write_output_U0_ap_continue");
    sc_trace(mVcdFile, write_output_U0_ap_idle, "write_output_U0_ap_idle");
    sc_trace(mVcdFile, write_output_U0_ap_ready, "write_output_U0_ap_ready");
    sc_trace(mVcdFile, write_output_U0_output_0_V_read, "write_output_U0_output_0_V_read");
    sc_trace(mVcdFile, write_output_U0_output_1_V_read, "write_output_U0_output_1_V_read");
    sc_trace(mVcdFile, write_output_U0_output_2_V_read, "write_output_U0_output_2_V_read");
    sc_trace(mVcdFile, write_output_U0_output_3_V_read, "write_output_U0_output_3_V_read");
    sc_trace(mVcdFile, write_output_U0_out_r_TDATA, "write_output_U0_out_r_TDATA");
    sc_trace(mVcdFile, write_output_U0_out_r_TVALID, "write_output_U0_out_r_TVALID");
    sc_trace(mVcdFile, write_output_U0_out_r_TKEEP, "write_output_U0_out_r_TKEEP");
    sc_trace(mVcdFile, write_output_U0_out_r_TSTRB, "write_output_U0_out_r_TSTRB");
    sc_trace(mVcdFile, write_output_U0_out_r_TLAST, "write_output_U0_out_r_TLAST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, input_upper_0_V_full_n, "input_upper_0_V_full_n");
    sc_trace(mVcdFile, input_upper_0_V_dout, "input_upper_0_V_dout");
    sc_trace(mVcdFile, input_upper_0_V_empty_n, "input_upper_0_V_empty_n");
    sc_trace(mVcdFile, input_upper_1_V_full_n, "input_upper_1_V_full_n");
    sc_trace(mVcdFile, input_upper_1_V_dout, "input_upper_1_V_dout");
    sc_trace(mVcdFile, input_upper_1_V_empty_n, "input_upper_1_V_empty_n");
    sc_trace(mVcdFile, input_upper_2_V_full_n, "input_upper_2_V_full_n");
    sc_trace(mVcdFile, input_upper_2_V_dout, "input_upper_2_V_dout");
    sc_trace(mVcdFile, input_upper_2_V_empty_n, "input_upper_2_V_empty_n");
    sc_trace(mVcdFile, input_lower_0_V_full_n, "input_lower_0_V_full_n");
    sc_trace(mVcdFile, input_lower_0_V_dout, "input_lower_0_V_dout");
    sc_trace(mVcdFile, input_lower_0_V_empty_n, "input_lower_0_V_empty_n");
    sc_trace(mVcdFile, input_lower_1_V_full_n, "input_lower_1_V_full_n");
    sc_trace(mVcdFile, input_lower_1_V_dout, "input_lower_1_V_dout");
    sc_trace(mVcdFile, input_lower_1_V_empty_n, "input_lower_1_V_empty_n");
    sc_trace(mVcdFile, input_lower_2_V_full_n, "input_lower_2_V_full_n");
    sc_trace(mVcdFile, input_lower_2_V_dout, "input_lower_2_V_dout");
    sc_trace(mVcdFile, input_lower_2_V_empty_n, "input_lower_2_V_empty_n");
    sc_trace(mVcdFile, output_0_V_full_n, "output_0_V_full_n");
    sc_trace(mVcdFile, output_0_V_dout, "output_0_V_dout");
    sc_trace(mVcdFile, output_0_V_empty_n, "output_0_V_empty_n");
    sc_trace(mVcdFile, output_1_V_full_n, "output_1_V_full_n");
    sc_trace(mVcdFile, output_1_V_dout, "output_1_V_dout");
    sc_trace(mVcdFile, output_1_V_empty_n, "output_1_V_empty_n");
    sc_trace(mVcdFile, output_2_V_full_n, "output_2_V_full_n");
    sc_trace(mVcdFile, output_2_V_dout, "output_2_V_dout");
    sc_trace(mVcdFile, output_2_V_empty_n, "output_2_V_empty_n");
    sc_trace(mVcdFile, output_3_V_full_n, "output_3_V_full_n");
    sc_trace(mVcdFile, output_3_V_dout, "output_3_V_dout");
    sc_trace(mVcdFile, output_3_V_empty_n, "output_3_V_empty_n");
    sc_trace(mVcdFile, start_for_kernel_U0_din, "start_for_kernel_U0_din");
    sc_trace(mVcdFile, start_for_kernel_U0_full_n, "start_for_kernel_U0_full_n");
    sc_trace(mVcdFile, start_for_kernel_U0_dout, "start_for_kernel_U0_dout");
    sc_trace(mVcdFile, start_for_kernel_U0_empty_n, "start_for_kernel_U0_empty_n");
    sc_trace(mVcdFile, start_for_write_output_U0_din, "start_for_write_output_U0_din");
    sc_trace(mVcdFile, start_for_write_output_U0_full_n, "start_for_write_output_U0_full_n");
    sc_trace(mVcdFile, start_for_write_output_U0_dout, "start_for_write_output_U0_dout");
    sc_trace(mVcdFile, start_for_write_output_U0_empty_n, "start_for_write_output_U0_empty_n");
    sc_trace(mVcdFile, write_output_U0_start_full_n, "write_output_U0_start_full_n");
    sc_trace(mVcdFile, write_output_U0_start_write, "write_output_U0_start_write");
#endif

    }
    mHdltvinHandle.open("fused_cnn_layer.hdltvin.dat");
    mHdltvoutHandle.open("fused_cnn_layer.hdltvout.dat");
}

fused_cnn_layer::~fused_cnn_layer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete read_input_U0;
    delete kernel_U0;
    delete write_output_U0;
    delete input_upper_0_V_U;
    delete input_upper_1_V_U;
    delete input_upper_2_V_U;
    delete input_lower_0_V_U;
    delete input_lower_1_V_U;
    delete input_lower_2_V_U;
    delete output_0_V_U;
    delete output_1_V_U;
    delete output_2_V_U;
    delete output_3_V_U;
    delete start_for_kernel_U0_U;
    delete start_for_write_ojbC_U;
}

void fused_cnn_layer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fused_cnn_layer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fused_cnn_layer::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void fused_cnn_layer::thread_in_0_TREADY() {
    in_0_TREADY = read_input_U0_in_0_TREADY.read();
}

void fused_cnn_layer::thread_in_1_TREADY() {
    in_1_TREADY = read_input_U0_in_1_TREADY.read();
}

void fused_cnn_layer::thread_kernel_U0_ap_continue() {
    kernel_U0_ap_continue = ap_const_logic_1;
}

void fused_cnn_layer::thread_kernel_U0_ap_start() {
    kernel_U0_ap_start = start_for_kernel_U0_empty_n.read();
}

void fused_cnn_layer::thread_out_r_TDATA() {
    out_r_TDATA = write_output_U0_out_r_TDATA.read();
}

void fused_cnn_layer::thread_out_r_TKEEP() {
    out_r_TKEEP = write_output_U0_out_r_TKEEP.read();
}

void fused_cnn_layer::thread_out_r_TLAST() {
    out_r_TLAST = write_output_U0_out_r_TLAST.read();
}

void fused_cnn_layer::thread_out_r_TSTRB() {
    out_r_TSTRB = write_output_U0_out_r_TSTRB.read();
}

void fused_cnn_layer::thread_out_r_TVALID() {
    out_r_TVALID = write_output_U0_out_r_TVALID.read();
}

void fused_cnn_layer::thread_read_input_U0_ap_continue() {
    read_input_U0_ap_continue = ap_const_logic_1;
}

void fused_cnn_layer::thread_read_input_U0_ap_start() {
    read_input_U0_ap_start = ap_const_logic_1;
}

void fused_cnn_layer::thread_start_for_kernel_U0_din() {
    start_for_kernel_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void fused_cnn_layer::thread_start_for_write_output_U0_din() {
    start_for_write_output_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void fused_cnn_layer::thread_write_output_U0_ap_continue() {
    write_output_U0_ap_continue = ap_const_logic_1;
}

void fused_cnn_layer::thread_write_output_U0_ap_start() {
    write_output_U0_ap_start = start_for_write_output_U0_empty_n.read();
}

void fused_cnn_layer::thread_write_output_U0_start_full_n() {
    write_output_U0_start_full_n = ap_const_logic_1;
}

void fused_cnn_layer::thread_write_output_U0_start_write() {
    write_output_U0_start_write = ap_const_logic_0;
}

void fused_cnn_layer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"in_0_TDATA\" :  \"" << in_0_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_1_TDATA\" :  \"" << in_1_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_0_TKEEP\" :  \"" << in_0_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_1_TKEEP\" :  \"" << in_1_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_0_TSTRB\" :  \"" << in_0_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_1_TSTRB\" :  \"" << in_1_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_0_TLAST\" :  \"" << in_0_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_1_TLAST\" :  \"" << in_1_TLAST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_r_TDATA\" :  \"" << out_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TKEEP\" :  \"" << out_r_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TSTRB\" :  \"" << out_r_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TLAST\" :  \"" << out_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_0_TVALID\" :  \"" << in_0_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_0_TREADY\" :  \"" << in_0_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_1_TVALID\" :  \"" << in_1_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_1_TREADY\" :  \"" << in_1_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TVALID\" :  \"" << out_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_TREADY\" :  \"" << out_r_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

