-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l2_weiGfk_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l2_weiGfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01011001", 1 to 2=> "11111011", 3 => "00011101", 4 => "00100100", 
    5 => "00000010", 6 => "11101010", 7 => "00000101", 8 to 9=> "00000111", 
    10 => "11001110", 11 => "11011101", 12 => "11000100", 13 => "00011011", 
    14 => "00101001", 15 => "00000000", 16 => "11101001", 17 => "11000011", 
    18 => "00000110", 19 => "11110100", 20 => "11110111", 21 => "11011000", 
    22 => "00011010", 23 => "11101100", 24 => "00001111", 25 => "11110110", 
    26 => "00010111", 27 => "00001001", 28 => "11110110", 29 => "10101000", 
    30 => "11111000", 31 => "00000100", 32 => "11100101", 33 => "00111001", 
    34 => "11111010", 35 => "00100000", 36 to 37=> "00100001", 38 => "11111010", 
    39 => "00100100", 40 => "11101010", 41 => "11111011", 42 => "11110111", 
    43 => "11111111", 44 => "00101100", 45 => "00010110", 46 => "11111011", 
    47 => "00011101", 48 => "11101100", 49 => "00001000", 50 => "10100011", 
    51 => "00001111", 52 => "00001000", 53 => "00001010", 54 => "00011111", 
    55 => "11111111", 56 => "11111010", 57 => "11110010", 58 => "11111010", 
    59 => "00100110", 60 => "11100101", 61 => "11101110", 62 => "10011101", 
    63 => "11011010", 64 => "00101001", 65 => "11100111", 66 => "11001001", 
    67 => "00000010", 68 => "11011011", 69 => "11111001", 70 => "00001011", 
    71 to 72=> "00011110", 73 => "11111110", 74 => "00011011", 75 => "11101100", 
    76 => "11111000", 77 => "11111011", 78 => "00011101", 79 => "11011101", 
    80 => "11101100", 81 => "11100001", 82 => "11101010", 83 => "00001001", 
    84 => "11011111", 85 => "11100011", 86 => "11110001", 87 => "11100001", 
    88 => "11111100", 89 => "11110100", 90 => "00010011", 91 => "00001010", 
    92 => "11111011", 93 => "00011011", 94 => "00010101", 95 => "00110111", 
    96 => "00010111", 97 => "00100001", 98 => "00011010", 99 => "11100101", 
    100 => "00010110", 101 => "11001110", 102 => "00100011", 103 => "00011001", 
    104 => "11110101", 105 => "11110100", 106 => "00000000", 107 => "11100000", 
    108 => "11101001", 109 => "00011000", 110 => "00111000", 111 => "00101010", 
    112 => "11110110", 113 => "11101000", 114 => "11100010", 115 => "00011011", 
    116 => "00010001", 117 => "11101011", 118 => "00010111", 119 => "00100100", 
    120 => "00100000", 121 => "11111000", 122 => "11111100", 123 => "00001001", 
    124 => "00100111", 125 => "11101010", 126 => "11101111", 127 => "00000101", 
    128 => "11111110", 129 => "00000101", 130 => "11111000", 131 => "00001101", 
    132 => "00010111", 133 => "11011011", 134 => "00101001", 135 => "00000010", 
    136 => "00000011", 137 => "00101101", 138 => "11111100", 139 => "11010110", 
    140 => "11000000", 141 => "11110011", 142 => "00100010", 143 => "00010111", 
    144 => "11100011", 145 => "10111001", 146 => "00011111", 147 => "00100000", 
    148 => "11100100", 149 => "11101110", 150 => "11100100", 151 => "11010000", 
    152 => "11110101", 153 => "00101011", 154 => "11010001", 155 => "00111010", 
    156 => "00000100", 157 => "11101100", 158 => "00000101", 159 => "11000111", 
    160 => "00000100", 161 => "00101101", 162 => "00100100", 163 => "00010010", 
    164 => "11101011", 165 => "00011110", 166 => "00010111", 167 => "00010011", 
    168 => "00000111", 169 => "00001111", 170 => "00001010", 171 => "00100100", 
    172 => "00010101", 173 => "11101011", 174 => "11001110", 175 => "11110011", 
    176 => "11100010", 177 => "11101000", 178 => "11110001", 179 => "00110100", 
    180 => "00100100", 181 => "00000000", 182 => "11100010", 183 => "00010000", 
    184 => "01000001", 185 => "00010110", 186 to 187=> "00010101", 188 => "00111110", 
    189 => "00100010", 190 => "11100011", 191 => "11011110", 192 => "11101110", 
    193 => "00000000", 194 => "10111111", 195 => "11110010", 196 => "10101111", 
    197 => "00000010", 198 => "11110111", 199 => "11011010", 200 => "00001110", 
    201 => "11111111", 202 => "00001101", 203 => "11111111", 204 => "11111100", 
    205 => "00000001", 206 => "11111100", 207 => "00000101", 208 => "11100101", 
    209 => "11011100", 210 => "11101011", 211 => "11110010", 212 => "11001010", 
    213 => "00001000", 214 => "00000111", 215 => "00000011", 216 => "11011011", 
    217 => "00010011", 218 => "11111111", 219 => "11101101", 220 => "00001010", 
    221 => "00000100", 222 => "00111010", 223 => "00011101", 224 => "00011010", 
    225 => "00110100", 226 => "00100100", 227 => "11101000", 228 => "00011001", 
    229 => "11100101", 230 => "00100001", 231 => "00010111", 232 => "11011010", 
    233 => "00010001", 234 => "11001001", 235 => "11011101", 236 => "00000111", 
    237 => "00011101", 238 => "00011111", 239 => "11111110", 240 => "11100010", 
    241 => "00100010", 242 => "00001011", 243 => "00110010", 244 => "11100100", 
    245 => "00010001", 246 => "00110100", 247 => "11011010", 248 => "00011110", 
    249 => "11100101", 250 => "11111110", 251 => "00000111", 252 => "00010011", 
    253 => "11110101", 254 => "11011101", 255 => "00110000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l2_weiGfk is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l2_weiGfk is
    component mlp_kernel_l2_weiGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l2_weiGfk_rom_U :  component mlp_kernel_l2_weiGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


