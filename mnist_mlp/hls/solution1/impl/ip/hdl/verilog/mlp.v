// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=203632,HLS_SYN_TPT=none,HLS_SYN_MEM=171,HLS_SYN_DSP=212,HLS_SYN_FF=40962,HLS_SYN_LUT=38089,HLS_VERSION=2020_1}" *)

module mlp (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2;
parameter    ap_ST_fsm_pp0_stage1 = 13'd4;
parameter    ap_ST_fsm_pp0_stage2 = 13'd8;
parameter    ap_ST_fsm_pp0_stage3 = 13'd16;
parameter    ap_ST_fsm_pp0_stage4 = 13'd32;
parameter    ap_ST_fsm_pp0_stage5 = 13'd64;
parameter    ap_ST_fsm_pp0_stage6 = 13'd128;
parameter    ap_ST_fsm_pp0_stage7 = 13'd256;
parameter    ap_ST_fsm_state11 = 13'd512;
parameter    ap_ST_fsm_state12 = 13'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 13'd2048;
parameter    ap_ST_fsm_state16 = 13'd4096;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [15:0] in_r_TKEEP;
input  [15:0] in_r_TSTRB;
input  [0:0] in_r_TLAST;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg in_r_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln140_reg_1102;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln162_reg_1251;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln162_reg_1251_pp1_iter1_reg;
reg   [5:0] i_0_reg_490;
reg   [2:0] i1_0_reg_501;
wire   [0:0] icmp_ln140_fu_683_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] i_fu_689_p2;
reg   [5:0] i_reg_1106;
wire   [9:0] shl_ln_fu_695_p3;
reg   [9:0] shl_ln_reg_1111;
reg   [7:0] p_Result_s_reg_1131;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] p_Result_3_reg_1136;
reg   [7:0] p_Result_4_reg_1141;
reg   [7:0] p_Result_5_reg_1146;
reg   [7:0] p_Result_6_reg_1151;
reg   [7:0] p_Result_7_reg_1156;
reg   [7:0] p_Result_8_reg_1161;
reg   [7:0] p_Result_9_reg_1166;
reg   [7:0] p_Result_2_reg_1171;
reg   [7:0] p_Result_10_reg_1176;
reg   [7:0] p_Result_11_reg_1181;
reg   [7:0] p_Result_12_reg_1186;
reg   [7:0] p_Result_13_reg_1191;
reg   [7:0] p_Result_14_reg_1196;
reg   [31:0] prediction_reg_1201;
wire    ap_CS_fsm_state12;
wire    grp_mlp_kernel_fu_538_ap_ready;
wire    grp_mlp_kernel_fu_538_ap_done;
reg   [31:0] prediction_0_1_reg_1206;
reg   [31:0] prediction_1_reg_1211;
reg   [31:0] prediction_1_1_reg_1216;
reg   [31:0] prediction_2_reg_1221;
reg   [31:0] prediction_3_reg_1226;
reg   [31:0] prediction_4_reg_1231;
reg   [31:0] prediction_5_reg_1236;
reg   [31:0] prediction_6_reg_1241;
reg   [31:0] prediction_7_reg_1246;
wire   [0:0] icmp_ln162_fu_1057_p2;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
reg    ap_block_state14_io;
wire    ap_block_state15_pp1_stage0_iter2;
reg    ap_block_state15_io;
reg    ap_block_pp1_stage0_11001;
wire   [2:0] i_3_fu_1063_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [1:0] trunc_ln171_fu_1077_p1;
wire   [31:0] select_ln171_fu_1081_p3;
wire   [31:0] select_ln171_1_fu_1087_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_CS_fsm_pp0_stage7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg   [9:0] sample_address0;
reg    sample_ce0;
reg    sample_we0;
reg   [7:0] sample_d0;
wire   [7:0] sample_q0;
reg   [9:0] sample_address1;
reg    sample_ce1;
reg    sample_we1;
reg   [7:0] sample_d1;
wire    grp_mlp_kernel_fu_538_ap_start;
wire    grp_mlp_kernel_fu_538_ap_idle;
wire   [9:0] grp_mlp_kernel_fu_538_sample_address0;
wire    grp_mlp_kernel_fu_538_sample_ce0;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_0;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_1;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_2;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_3;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_4;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_5;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_6;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_7;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_8;
wire   [31:0] grp_mlp_kernel_fu_538_ap_return_9;
reg   [5:0] ap_phi_mux_i_0_phi_fu_494_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] ap_phi_reg_pp1_iter0_phi_ln171_reg_512;
reg   [31:0] ap_phi_reg_pp1_iter1_phi_ln171_reg_512;
wire   [31:0] ap_phi_reg_pp1_iter0_phi_ln171_1_reg_525;
reg   [31:0] ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525;
reg    grp_mlp_kernel_fu_538_ap_start_reg;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln149_fu_712_p1;
wire   [63:0] zext_ln149_1_fu_732_p1;
wire   [63:0] zext_ln149_2_fu_882_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln149_3_fu_892_p1;
wire   [63:0] zext_ln149_4_fu_902_p1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln149_5_fu_912_p1;
wire   [63:0] zext_ln149_6_fu_922_p1;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln149_7_fu_932_p1;
wire   [63:0] zext_ln149_8_fu_942_p1;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln149_9_fu_952_p1;
wire   [63:0] zext_ln149_10_fu_962_p1;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln149_11_fu_972_p1;
wire   [63:0] zext_ln149_12_fu_982_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln149_13_fu_992_p1;
wire   [63:0] zext_ln149_14_fu_1002_p1;
wire   [63:0] zext_ln149_15_fu_1012_p1;
wire    ap_block_pp1_stage0_01001;
wire   [7:0] trunc_ln681_fu_707_p1;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage7_11001;
wire   [9:0] or_ln149_fu_727_p2;
wire   [9:0] or_ln149_1_fu_877_p2;
wire   [9:0] or_ln149_2_fu_887_p2;
wire   [9:0] or_ln149_3_fu_897_p2;
wire   [9:0] or_ln149_4_fu_907_p2;
wire   [9:0] or_ln149_5_fu_917_p2;
wire   [9:0] or_ln149_6_fu_927_p2;
wire   [9:0] or_ln149_7_fu_937_p2;
wire   [9:0] or_ln149_8_fu_947_p2;
wire   [9:0] or_ln149_9_fu_957_p2;
wire   [9:0] or_ln149_10_fu_967_p2;
wire   [9:0] or_ln149_11_fu_977_p2;
wire   [9:0] or_ln149_12_fu_987_p2;
wire   [9:0] or_ln149_13_fu_997_p2;
wire   [9:0] or_ln149_14_fu_1007_p2;
wire   [0:0] tmp_220_fu_1069_p3;
wire    ap_CS_fsm_state16;
wire    regslice_both_out_V_data_V_U_apdone_blk;
reg   [12:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_in_V_data_V_U_apdone_blk;
wire   [127:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_V_data_V_U_ack_in;
wire    regslice_both_in_V_keep_V_U_apdone_blk;
wire   [15:0] in_r_TKEEP_int;
wire    regslice_both_in_V_keep_V_U_vld_out;
wire    regslice_both_in_V_keep_V_U_ack_in;
wire    regslice_both_in_V_strb_V_U_apdone_blk;
wire   [15:0] in_r_TSTRB_int;
wire    regslice_both_in_V_strb_V_U_vld_out;
wire    regslice_both_in_V_strb_V_U_ack_in;
wire    regslice_both_in_V_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    regslice_both_in_V_last_V_U_vld_out;
wire    regslice_both_in_V_last_V_U_ack_in;
wire   [63:0] out_r_TDATA_int;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;
reg    ap_condition_243;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_mlp_kernel_fu_538_ap_start_reg = 1'b0;
end

mlp_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
mlp_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mlp_sample #(
    .DataWidth( 8 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
sample_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_address0),
    .ce0(sample_ce0),
    .we0(sample_we0),
    .d0(sample_d0),
    .q0(sample_q0),
    .address1(sample_address1),
    .ce1(sample_ce1),
    .we1(sample_we1),
    .d1(sample_d1)
);

mlp_kernel grp_mlp_kernel_fu_538(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mlp_kernel_fu_538_ap_start),
    .ap_done(grp_mlp_kernel_fu_538_ap_done),
    .ap_idle(grp_mlp_kernel_fu_538_ap_idle),
    .ap_ready(grp_mlp_kernel_fu_538_ap_ready),
    .sample_address0(grp_mlp_kernel_fu_538_sample_address0),
    .sample_ce0(grp_mlp_kernel_fu_538_sample_ce0),
    .sample_q0(sample_q0),
    .ap_return_0(grp_mlp_kernel_fu_538_ap_return_0),
    .ap_return_1(grp_mlp_kernel_fu_538_ap_return_1),
    .ap_return_2(grp_mlp_kernel_fu_538_ap_return_2),
    .ap_return_3(grp_mlp_kernel_fu_538_ap_return_3),
    .ap_return_4(grp_mlp_kernel_fu_538_ap_return_4),
    .ap_return_5(grp_mlp_kernel_fu_538_ap_return_5),
    .ap_return_6(grp_mlp_kernel_fu_538_ap_return_6),
    .ap_return_7(grp_mlp_kernel_fu_538_ap_return_7),
    .ap_return_8(grp_mlp_kernel_fu_538_ap_return_8),
    .ap_return_9(grp_mlp_kernel_fu_538_ap_return_9)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_data_V_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TKEEP),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_keep_V_U_ack_in),
    .data_out(in_r_TKEEP_int),
    .vld_out(regslice_both_in_V_keep_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TSTRB),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_strb_V_U_ack_in),
    .data_out(in_r_TSTRB_int),
    .vld_out(regslice_both_in_V_strb_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_in_V_last_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd255),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (grp_mlp_kernel_fu_538_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state12) & (grp_mlp_kernel_fu_538_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mlp_kernel_fu_538_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_mlp_kernel_fu_538_ap_start_reg <= 1'b1;
        end else if ((grp_mlp_kernel_fu_538_ap_ready == 1'b1)) begin
            grp_mlp_kernel_fu_538_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_243)) begin
        if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd1))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= prediction_3_reg_1226;
        end else if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd3))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= prediction_7_reg_1246;
        end else if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd2))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= prediction_5_reg_1236;
        end else if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd0))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= select_ln171_1_fu_1087_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= ap_phi_reg_pp1_iter0_phi_ln171_1_reg_525;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_243)) begin
        if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd1))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= prediction_2_reg_1221;
        end else if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd3))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= prediction_6_reg_1241;
        end else if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd2))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= prediction_4_reg_1231;
        end else if (((icmp_ln162_fu_1057_p2 == 1'd0) & (trunc_ln171_fu_1077_p1 == 2'd0))) begin
            ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= select_ln171_fu_1081_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= ap_phi_reg_pp1_iter0_phi_ln171_reg_512;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln162_fu_1057_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i1_0_reg_501 <= i_3_fu_1063_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (grp_mlp_kernel_fu_538_ap_done == 1'b1))) begin
        i1_0_reg_501 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_490 <= i_reg_1106;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_490 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_1106 <= i_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln140_reg_1102 <= icmp_ln140_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln162_reg_1251 <= icmp_ln162_fu_1057_p2;
        icmp_ln162_reg_1251_pp1_iter1_reg <= icmp_ln162_reg_1251;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln140_reg_1102 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_Result_10_reg_1176 <= {{in_r_TDATA_int[95:88]}};
        p_Result_11_reg_1181 <= {{in_r_TDATA_int[103:96]}};
        p_Result_12_reg_1186 <= {{in_r_TDATA_int[111:104]}};
        p_Result_13_reg_1191 <= {{in_r_TDATA_int[119:112]}};
        p_Result_14_reg_1196 <= {{in_r_TDATA_int[127:120]}};
        p_Result_2_reg_1171 <= {{in_r_TDATA_int[87:80]}};
        p_Result_3_reg_1136 <= {{in_r_TDATA_int[31:24]}};
        p_Result_4_reg_1141 <= {{in_r_TDATA_int[39:32]}};
        p_Result_5_reg_1146 <= {{in_r_TDATA_int[47:40]}};
        p_Result_6_reg_1151 <= {{in_r_TDATA_int[55:48]}};
        p_Result_7_reg_1156 <= {{in_r_TDATA_int[63:56]}};
        p_Result_8_reg_1161 <= {{in_r_TDATA_int[71:64]}};
        p_Result_9_reg_1166 <= {{in_r_TDATA_int[79:72]}};
        p_Result_s_reg_1131 <= {{in_r_TDATA_int[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_mlp_kernel_fu_538_ap_done == 1'b1))) begin
        prediction_0_1_reg_1206 <= grp_mlp_kernel_fu_538_ap_return_1;
        prediction_1_1_reg_1216 <= grp_mlp_kernel_fu_538_ap_return_3;
        prediction_1_reg_1211 <= grp_mlp_kernel_fu_538_ap_return_2;
        prediction_2_reg_1221 <= grp_mlp_kernel_fu_538_ap_return_4;
        prediction_3_reg_1226 <= grp_mlp_kernel_fu_538_ap_return_5;
        prediction_4_reg_1231 <= grp_mlp_kernel_fu_538_ap_return_6;
        prediction_5_reg_1236 <= grp_mlp_kernel_fu_538_ap_return_7;
        prediction_6_reg_1241 <= grp_mlp_kernel_fu_538_ap_return_8;
        prediction_7_reg_1246 <= grp_mlp_kernel_fu_538_ap_return_9;
        prediction_reg_1201 <= grp_mlp_kernel_fu_538_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln140_fu_683_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shl_ln_reg_1111[9 : 4] <= shl_ln_fu_695_p3[9 : 4];
    end
end

always @ (*) begin
    if ((icmp_ln140_fu_683_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln162_fu_1057_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln140_reg_1102 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_494_p4 = i_reg_1106;
    end else begin
        ap_phi_mux_i_0_phi_fu_494_p4 = i_0_reg_490;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln140_reg_1102 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_r_TVALID == 1'b1) & (regslice_both_in_V_data_V_U_ack_in == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (icmp_ln162_reg_1251_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln162_reg_1251 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln162_reg_1251 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_address0 = zext_ln149_14_fu_1002_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        sample_address0 = zext_ln149_12_fu_982_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        sample_address0 = zext_ln149_10_fu_962_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        sample_address0 = zext_ln149_8_fu_942_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        sample_address0 = zext_ln149_6_fu_922_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        sample_address0 = zext_ln149_4_fu_902_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        sample_address0 = zext_ln149_2_fu_882_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sample_address0 = zext_ln149_fu_712_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_address0 = grp_mlp_kernel_fu_538_sample_address0;
    end else begin
        sample_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_address1 = zext_ln149_15_fu_1012_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        sample_address1 = zext_ln149_13_fu_992_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        sample_address1 = zext_ln149_11_fu_972_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        sample_address1 = zext_ln149_9_fu_952_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        sample_address1 = zext_ln149_7_fu_932_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        sample_address1 = zext_ln149_5_fu_912_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        sample_address1 = zext_ln149_3_fu_892_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sample_address1 = zext_ln149_1_fu_732_p1;
    end else begin
        sample_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sample_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_ce0 = grp_mlp_kernel_fu_538_sample_ce0;
    end else begin
        sample_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        sample_ce1 = 1'b1;
    end else begin
        sample_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_d0 = p_Result_13_reg_1191;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        sample_d0 = p_Result_11_reg_1181;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        sample_d0 = p_Result_2_reg_1171;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        sample_d0 = p_Result_8_reg_1161;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        sample_d0 = p_Result_6_reg_1151;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        sample_d0 = p_Result_4_reg_1141;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        sample_d0 = p_Result_s_reg_1131;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sample_d0 = trunc_ln681_fu_707_p1;
    end else begin
        sample_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_d1 = p_Result_14_reg_1196;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        sample_d1 = p_Result_12_reg_1186;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        sample_d1 = p_Result_10_reg_1176;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        sample_d1 = p_Result_9_reg_1166;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        sample_d1 = p_Result_7_reg_1156;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        sample_d1 = p_Result_5_reg_1146;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        sample_d1 = p_Result_3_reg_1136;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sample_d1 = {{in_r_TDATA_int[15:8]}};
    end else begin
        sample_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        sample_we0 = 1'b1;
    end else begin
        sample_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln140_reg_1102 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        sample_we1 = 1'b1;
    end else begin
        sample_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln140_fu_683_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln140_fu_683_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_mlp_kernel_fu_538_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln162_fu_1057_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln162_fu_1057_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln140_reg_1102 == 1'd0) & (in_r_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln140_reg_1102 == 1'd0) & (in_r_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((icmp_ln162_reg_1251 == 1'd0) & (out_r_TREADY_int == 1'b0));
end

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((icmp_ln162_reg_1251_pp1_iter1_reg == 1'd0) & (out_r_TREADY_int == 1'b0));
end

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln140_reg_1102 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_243 = ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp1_iter0_phi_ln171_1_reg_525 = 'bx;

assign ap_phi_reg_pp1_iter0_phi_ln171_reg_512 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_mlp_kernel_fu_538_ap_start = grp_mlp_kernel_fu_538_ap_start_reg;

assign i_3_fu_1063_p2 = (i1_0_reg_501 + 3'd1);

assign i_fu_689_p2 = (ap_phi_mux_i_0_phi_fu_494_p4 + 6'd1);

assign icmp_ln140_fu_683_p2 = ((ap_phi_mux_i_0_phi_fu_494_p4 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_1057_p2 = ((i1_0_reg_501 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln149_10_fu_967_p2 = (shl_ln_reg_1111 | 10'd11);

assign or_ln149_11_fu_977_p2 = (shl_ln_reg_1111 | 10'd12);

assign or_ln149_12_fu_987_p2 = (shl_ln_reg_1111 | 10'd13);

assign or_ln149_13_fu_997_p2 = (shl_ln_reg_1111 | 10'd14);

assign or_ln149_14_fu_1007_p2 = (shl_ln_reg_1111 | 10'd15);

assign or_ln149_1_fu_877_p2 = (shl_ln_reg_1111 | 10'd2);

assign or_ln149_2_fu_887_p2 = (shl_ln_reg_1111 | 10'd3);

assign or_ln149_3_fu_897_p2 = (shl_ln_reg_1111 | 10'd4);

assign or_ln149_4_fu_907_p2 = (shl_ln_reg_1111 | 10'd5);

assign or_ln149_5_fu_917_p2 = (shl_ln_reg_1111 | 10'd6);

assign or_ln149_6_fu_927_p2 = (shl_ln_reg_1111 | 10'd7);

assign or_ln149_7_fu_937_p2 = (shl_ln_reg_1111 | 10'd8);

assign or_ln149_8_fu_947_p2 = (shl_ln_reg_1111 | 10'd9);

assign or_ln149_9_fu_957_p2 = (shl_ln_reg_1111 | 10'd10);

assign or_ln149_fu_727_p2 = (shl_ln_reg_1111 | 10'd1);

assign out_r_TDATA_int = {{ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525}, {ap_phi_reg_pp1_iter1_phi_ln171_reg_512}};

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

assign select_ln171_1_fu_1087_p3 = ((tmp_220_fu_1069_p3[0:0] === 1'b1) ? prediction_1_1_reg_1216 : prediction_1_reg_1211);

assign select_ln171_fu_1081_p3 = ((tmp_220_fu_1069_p3[0:0] === 1'b1) ? prediction_0_1_reg_1206 : prediction_reg_1201);

assign shl_ln_fu_695_p3 = {{ap_phi_mux_i_0_phi_fu_494_p4}, {4'd0}};

assign tmp_220_fu_1069_p3 = i1_0_reg_501[32'd2];

assign trunc_ln171_fu_1077_p1 = i1_0_reg_501[1:0];

assign trunc_ln681_fu_707_p1 = in_r_TDATA_int[7:0];

assign zext_ln149_10_fu_962_p1 = or_ln149_9_fu_957_p2;

assign zext_ln149_11_fu_972_p1 = or_ln149_10_fu_967_p2;

assign zext_ln149_12_fu_982_p1 = or_ln149_11_fu_977_p2;

assign zext_ln149_13_fu_992_p1 = or_ln149_12_fu_987_p2;

assign zext_ln149_14_fu_1002_p1 = or_ln149_13_fu_997_p2;

assign zext_ln149_15_fu_1012_p1 = or_ln149_14_fu_1007_p2;

assign zext_ln149_1_fu_732_p1 = or_ln149_fu_727_p2;

assign zext_ln149_2_fu_882_p1 = or_ln149_1_fu_877_p2;

assign zext_ln149_3_fu_892_p1 = or_ln149_2_fu_887_p2;

assign zext_ln149_4_fu_902_p1 = or_ln149_3_fu_897_p2;

assign zext_ln149_5_fu_912_p1 = or_ln149_4_fu_907_p2;

assign zext_ln149_6_fu_922_p1 = or_ln149_5_fu_917_p2;

assign zext_ln149_7_fu_932_p1 = or_ln149_6_fu_927_p2;

assign zext_ln149_8_fu_942_p1 = or_ln149_7_fu_937_p2;

assign zext_ln149_9_fu_952_p1 = or_ln149_8_fu_947_p2;

assign zext_ln149_fu_712_p1 = shl_ln_reg_1111;

always @ (posedge ap_clk) begin
    shl_ln_reg_1111[3:0] <= 4'b0000;
end

endmodule //mlp
