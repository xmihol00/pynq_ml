-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mlp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=203632,HLS_SYN_TPT=none,HLS_SYN_MEM=171,HLS_SYN_DSP=212,HLS_SYN_FF=40962,HLS_SYN_LUT=38089,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv10_E : STD_LOGIC_VECTOR (9 downto 0) := "0000001110";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln140_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln162_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal icmp_ln162_reg_1251_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_490 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_0_reg_501 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln140_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_689_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1106 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_695_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_1111 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_reg_1131 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Result_3_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_reg_1141 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_reg_1151 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_reg_1166 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_reg_1171 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_reg_1176 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_11_reg_1181 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_reg_1186 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_reg_1191 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_reg_1196 : STD_LOGIC_VECTOR (7 downto 0);
    signal prediction_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_mlp_kernel_fu_538_ap_ready : STD_LOGIC;
    signal grp_mlp_kernel_fu_538_ap_done : STD_LOGIC;
    signal prediction_0_1_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_1_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_1_1_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_2_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_3_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_4_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_5_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_6_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_7_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln162_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_3_fu_1063_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal trunc_ln171_fu_1077_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln171_fu_1081_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln171_1_fu_1087_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal sample_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sample_ce0 : STD_LOGIC;
    signal sample_we0 : STD_LOGIC;
    signal sample_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sample_ce1 : STD_LOGIC;
    signal sample_we1 : STD_LOGIC;
    signal sample_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mlp_kernel_fu_538_ap_start : STD_LOGIC;
    signal grp_mlp_kernel_fu_538_ap_idle : STD_LOGIC;
    signal grp_mlp_kernel_fu_538_sample_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mlp_kernel_fu_538_sample_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_538_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_494_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_reg_pp1_iter0_phi_ln171_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter1_phi_ln171_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_phi_ln171_1_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_538_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln149_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_1_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_2_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln149_3_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_4_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln149_5_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_6_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln149_7_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_8_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln149_9_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_10_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln149_11_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_12_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln149_13_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_14_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_15_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal trunc_ln681_fu_707_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal or_ln149_fu_727_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_1_fu_877_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_2_fu_887_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_3_fu_897_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_4_fu_907_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_5_fu_917_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_6_fu_927_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_7_fu_937_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_8_fu_947_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_9_fu_957_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_10_fu_967_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_11_fu_977_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_12_fu_987_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_13_fu_997_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln149_14_fu_1007_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_220_fu_1069_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_243 : BOOLEAN;

    component mlp_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sample_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sample_ce0 : OUT STD_LOGIC;
        sample_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sample IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mlp_control_s_axi_U : component mlp_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    sample_U : component mlp_sample
    generic map (
        DataWidth => 8,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_address0,
        ce0 => sample_ce0,
        we0 => sample_we0,
        d0 => sample_d0,
        q0 => sample_q0,
        address1 => sample_address1,
        ce1 => sample_ce1,
        we1 => sample_we1,
        d1 => sample_d1);

    grp_mlp_kernel_fu_538 : component mlp_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mlp_kernel_fu_538_ap_start,
        ap_done => grp_mlp_kernel_fu_538_ap_done,
        ap_idle => grp_mlp_kernel_fu_538_ap_idle,
        ap_ready => grp_mlp_kernel_fu_538_ap_ready,
        sample_address0 => grp_mlp_kernel_fu_538_sample_address0,
        sample_ce0 => grp_mlp_kernel_fu_538_sample_ce0,
        sample_q0 => sample_q0,
        ap_return_0 => grp_mlp_kernel_fu_538_ap_return_0,
        ap_return_1 => grp_mlp_kernel_fu_538_ap_return_1,
        ap_return_2 => grp_mlp_kernel_fu_538_ap_return_2,
        ap_return_3 => grp_mlp_kernel_fu_538_ap_return_3,
        ap_return_4 => grp_mlp_kernel_fu_538_ap_return_4,
        ap_return_5 => grp_mlp_kernel_fu_538_ap_return_5,
        ap_return_6 => grp_mlp_kernel_fu_538_ap_return_6,
        ap_return_7 => grp_mlp_kernel_fu_538_ap_return_7,
        ap_return_8 => grp_mlp_kernel_fu_538_ap_return_8,
        ap_return_9 => grp_mlp_kernel_fu_538_ap_return_9);

    regslice_both_in_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_data_V_U_apdone_blk);

    regslice_both_in_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int,
        vld_out => regslice_both_in_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_keep_V_U_apdone_blk);

    regslice_both_in_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int,
        vld_out => regslice_both_in_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_strb_V_U_apdone_blk);

    regslice_both_in_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_last_V_U_apdone_blk);

    regslice_both_out_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_FF,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_mlp_kernel_fu_538_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_mlp_kernel_fu_538_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mlp_kernel_fu_538_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mlp_kernel_fu_538_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_mlp_kernel_fu_538_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mlp_kernel_fu_538_ap_ready = ap_const_logic_1)) then 
                    grp_mlp_kernel_fu_538_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_243)) then
                if (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_1))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= prediction_3_reg_1226;
                elsif (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_3))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= prediction_7_reg_1246;
                elsif (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_2))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= prediction_5_reg_1236;
                elsif (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_0))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= select_ln171_1_fu_1087_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 <= ap_phi_reg_pp1_iter0_phi_ln171_1_reg_525;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp1_iter1_phi_ln171_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_243)) then
                if (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_1))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= prediction_2_reg_1221;
                elsif (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_3))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= prediction_6_reg_1241;
                elsif (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_2))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= prediction_4_reg_1231;
                elsif (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (trunc_ln171_fu_1077_p1 = ap_const_lv2_0))) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= select_ln171_fu_1081_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter1_phi_ln171_reg_512 <= ap_phi_reg_pp1_iter0_phi_ln171_reg_512;
                end if;
            end if; 
        end if;
    end process;

    i1_0_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln162_fu_1057_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                i1_0_reg_501 <= i_3_fu_1063_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_mlp_kernel_fu_538_ap_done = ap_const_logic_1))) then 
                i1_0_reg_501 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_490 <= i_reg_1106;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_490 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_1106 <= i_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln140_reg_1102 <= icmp_ln140_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln162_reg_1251 <= icmp_ln162_fu_1057_p2;
                icmp_ln162_reg_1251_pp1_iter1_reg <= icmp_ln162_reg_1251;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                p_Result_10_reg_1176 <= in_r_TDATA_int(95 downto 88);
                p_Result_11_reg_1181 <= in_r_TDATA_int(103 downto 96);
                p_Result_12_reg_1186 <= in_r_TDATA_int(111 downto 104);
                p_Result_13_reg_1191 <= in_r_TDATA_int(119 downto 112);
                p_Result_14_reg_1196 <= in_r_TDATA_int(127 downto 120);
                p_Result_2_reg_1171 <= in_r_TDATA_int(87 downto 80);
                p_Result_3_reg_1136 <= in_r_TDATA_int(31 downto 24);
                p_Result_4_reg_1141 <= in_r_TDATA_int(39 downto 32);
                p_Result_5_reg_1146 <= in_r_TDATA_int(47 downto 40);
                p_Result_6_reg_1151 <= in_r_TDATA_int(55 downto 48);
                p_Result_7_reg_1156 <= in_r_TDATA_int(63 downto 56);
                p_Result_8_reg_1161 <= in_r_TDATA_int(71 downto 64);
                p_Result_9_reg_1166 <= in_r_TDATA_int(79 downto 72);
                p_Result_s_reg_1131 <= in_r_TDATA_int(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_mlp_kernel_fu_538_ap_done = ap_const_logic_1))) then
                prediction_0_1_reg_1206 <= grp_mlp_kernel_fu_538_ap_return_1;
                prediction_1_1_reg_1216 <= grp_mlp_kernel_fu_538_ap_return_3;
                prediction_1_reg_1211 <= grp_mlp_kernel_fu_538_ap_return_2;
                prediction_2_reg_1221 <= grp_mlp_kernel_fu_538_ap_return_4;
                prediction_3_reg_1226 <= grp_mlp_kernel_fu_538_ap_return_5;
                prediction_4_reg_1231 <= grp_mlp_kernel_fu_538_ap_return_6;
                prediction_5_reg_1236 <= grp_mlp_kernel_fu_538_ap_return_7;
                prediction_6_reg_1241 <= grp_mlp_kernel_fu_538_ap_return_8;
                prediction_7_reg_1246 <= grp_mlp_kernel_fu_538_ap_return_9;
                prediction_reg_1201 <= grp_mlp_kernel_fu_538_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_683_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    shl_ln_reg_1111(9 downto 4) <= shl_ln_fu_695_p3(9 downto 4);
            end if;
        end if;
    end process;
    shl_ln_reg_1111(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, icmp_ln140_fu_683_p2, ap_CS_fsm_state12, grp_mlp_kernel_fu_538_ap_done, icmp_ln162_fu_1057_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp1_stage0_subdone, ap_CS_fsm_state16, regslice_both_out_V_data_V_U_apdone_blk, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln140_fu_683_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln140_fu_683_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_mlp_kernel_fu_538_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln162_fu_1057_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln162_fu_1057_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln140_reg_1102, in_r_TVALID_int)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln140_reg_1102, in_r_TVALID_int)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(icmp_ln162_reg_1251, out_r_TREADY_int)
    begin
                ap_block_state14_io <= ((icmp_ln162_reg_1251 = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(icmp_ln162_reg_1251_pp1_iter1_reg, out_r_TREADY_int)
    begin
                ap_block_state15_io <= ((icmp_ln162_reg_1251_pp1_iter1_reg = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln140_reg_1102, in_r_TVALID_int)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_243_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
                ap_condition_243 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln140_fu_683_p2)
    begin
        if ((icmp_ln140_fu_683_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln162_fu_1057_p2)
    begin
        if ((icmp_ln162_fu_1057_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state16, regslice_both_out_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_494_p4_assign_proc : process(icmp_ln140_reg_1102, i_0_reg_490, ap_CS_fsm_pp0_stage0, i_reg_1106, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_494_p4 <= i_reg_1106;
        else 
            ap_phi_mux_i_0_phi_fu_494_p4 <= i_0_reg_490;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_phi_ln171_1_reg_525 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter0_phi_ln171_reg_512 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state16, regslice_both_out_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_mlp_kernel_fu_538_ap_start <= grp_mlp_kernel_fu_538_ap_start_reg;
    i_3_fu_1063_p2 <= std_logic_vector(unsigned(i1_0_reg_501) + unsigned(ap_const_lv3_1));
    i_fu_689_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_494_p4) + unsigned(ap_const_lv6_1));
    icmp_ln140_fu_683_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_494_p4 = ap_const_lv6_31) else "0";
    icmp_ln162_fu_1057_p2 <= "1" when (i1_0_reg_501 = ap_const_lv3_5) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln140_reg_1102, in_r_TVALID_int)
    begin
        if (((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_V_data_V_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_V_data_V_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln140_reg_1102, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    or_ln149_10_fu_967_p2 <= (shl_ln_reg_1111 or ap_const_lv10_B);
    or_ln149_11_fu_977_p2 <= (shl_ln_reg_1111 or ap_const_lv10_C);
    or_ln149_12_fu_987_p2 <= (shl_ln_reg_1111 or ap_const_lv10_D);
    or_ln149_13_fu_997_p2 <= (shl_ln_reg_1111 or ap_const_lv10_E);
    or_ln149_14_fu_1007_p2 <= (shl_ln_reg_1111 or ap_const_lv10_F);
    or_ln149_1_fu_877_p2 <= (shl_ln_reg_1111 or ap_const_lv10_2);
    or_ln149_2_fu_887_p2 <= (shl_ln_reg_1111 or ap_const_lv10_3);
    or_ln149_3_fu_897_p2 <= (shl_ln_reg_1111 or ap_const_lv10_4);
    or_ln149_4_fu_907_p2 <= (shl_ln_reg_1111 or ap_const_lv10_5);
    or_ln149_5_fu_917_p2 <= (shl_ln_reg_1111 or ap_const_lv10_6);
    or_ln149_6_fu_927_p2 <= (shl_ln_reg_1111 or ap_const_lv10_7);
    or_ln149_7_fu_937_p2 <= (shl_ln_reg_1111 or ap_const_lv10_8);
    or_ln149_8_fu_947_p2 <= (shl_ln_reg_1111 or ap_const_lv10_9);
    or_ln149_9_fu_957_p2 <= (shl_ln_reg_1111 or ap_const_lv10_A);
    or_ln149_fu_727_p2 <= (shl_ln_reg_1111 or ap_const_lv10_1);

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln162_reg_1251, ap_enable_reg_pp1_iter2, icmp_ln162_reg_1251_pp1_iter1_reg, out_r_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln162_reg_1251_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln162_reg_1251 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int <= (ap_phi_reg_pp1_iter1_phi_ln171_1_reg_525 & ap_phi_reg_pp1_iter1_phi_ln171_reg_512);
    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln162_reg_1251, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln162_reg_1251 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    sample_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state12, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, grp_mlp_kernel_fu_538_sample_address0, ap_block_pp0_stage0, zext_ln149_fu_712_p1, zext_ln149_2_fu_882_p1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, zext_ln149_4_fu_902_p1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, zext_ln149_6_fu_922_p1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, zext_ln149_8_fu_942_p1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, zext_ln149_10_fu_962_p1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, zext_ln149_12_fu_982_p1, ap_block_pp0_stage7, zext_ln149_14_fu_1002_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_address0 <= zext_ln149_14_fu_1002_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            sample_address0 <= zext_ln149_12_fu_982_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            sample_address0 <= zext_ln149_10_fu_962_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            sample_address0 <= zext_ln149_8_fu_942_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            sample_address0 <= zext_ln149_6_fu_922_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            sample_address0 <= zext_ln149_4_fu_902_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            sample_address0 <= zext_ln149_2_fu_882_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sample_address0 <= zext_ln149_fu_712_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_address0 <= grp_mlp_kernel_fu_538_sample_address0;
        else 
            sample_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sample_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, zext_ln149_1_fu_732_p1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, zext_ln149_3_fu_892_p1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, zext_ln149_5_fu_912_p1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, zext_ln149_7_fu_932_p1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, zext_ln149_9_fu_952_p1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, zext_ln149_11_fu_972_p1, ap_block_pp0_stage7, zext_ln149_13_fu_992_p1, zext_ln149_15_fu_1012_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_address1 <= zext_ln149_15_fu_1012_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            sample_address1 <= zext_ln149_13_fu_992_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            sample_address1 <= zext_ln149_11_fu_972_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            sample_address1 <= zext_ln149_9_fu_952_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            sample_address1 <= zext_ln149_7_fu_932_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            sample_address1 <= zext_ln149_5_fu_912_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            sample_address1 <= zext_ln149_3_fu_892_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sample_address1 <= zext_ln149_1_fu_732_p1(10 - 1 downto 0);
        else 
            sample_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    sample_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_state12, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, grp_mlp_kernel_fu_538_sample_ce0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sample_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_ce0 <= grp_mlp_kernel_fu_538_sample_ce0;
        else 
            sample_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            sample_ce1 <= ap_const_logic_1;
        else 
            sample_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, p_Result_s_reg_1131, p_Result_4_reg_1141, p_Result_6_reg_1151, p_Result_8_reg_1161, p_Result_2_reg_1171, p_Result_11_reg_1181, p_Result_13_reg_1191, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage7, trunc_ln681_fu_707_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_d0 <= p_Result_13_reg_1191;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            sample_d0 <= p_Result_11_reg_1181;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            sample_d0 <= p_Result_2_reg_1171;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            sample_d0 <= p_Result_8_reg_1161;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            sample_d0 <= p_Result_6_reg_1151;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            sample_d0 <= p_Result_4_reg_1141;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            sample_d0 <= p_Result_s_reg_1131;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sample_d0 <= trunc_ln681_fu_707_p1;
        else 
            sample_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_d1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, p_Result_3_reg_1136, p_Result_5_reg_1146, p_Result_7_reg_1156, p_Result_9_reg_1166, p_Result_10_reg_1176, p_Result_12_reg_1186, p_Result_14_reg_1196, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage7, in_r_TDATA_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_d1 <= p_Result_14_reg_1196;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7))) then 
            sample_d1 <= p_Result_12_reg_1186;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            sample_d1 <= p_Result_10_reg_1176;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            sample_d1 <= p_Result_9_reg_1166;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            sample_d1 <= p_Result_7_reg_1156;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            sample_d1 <= p_Result_5_reg_1146;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            sample_d1 <= p_Result_3_reg_1136;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sample_d1 <= in_r_TDATA_int(15 downto 8);
        else 
            sample_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sample_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln140_reg_1102, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            sample_we0 <= ap_const_logic_1;
        else 
            sample_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln140_reg_1102, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln140_reg_1102 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            sample_we1 <= ap_const_logic_1;
        else 
            sample_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln171_1_fu_1087_p3 <= 
        prediction_1_1_reg_1216 when (tmp_220_fu_1069_p3(0) = '1') else 
        prediction_1_reg_1211;
    select_ln171_fu_1081_p3 <= 
        prediction_0_1_reg_1206 when (tmp_220_fu_1069_p3(0) = '1') else 
        prediction_reg_1201;
    shl_ln_fu_695_p3 <= (ap_phi_mux_i_0_phi_fu_494_p4 & ap_const_lv4_0);
    tmp_220_fu_1069_p3 <= i1_0_reg_501(2 downto 2);
    trunc_ln171_fu_1077_p1 <= i1_0_reg_501(2 - 1 downto 0);
    trunc_ln681_fu_707_p1 <= in_r_TDATA_int(8 - 1 downto 0);
    zext_ln149_10_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_9_fu_957_p2),64));
    zext_ln149_11_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_10_fu_967_p2),64));
    zext_ln149_12_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_11_fu_977_p2),64));
    zext_ln149_13_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_12_fu_987_p2),64));
    zext_ln149_14_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_13_fu_997_p2),64));
    zext_ln149_15_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_14_fu_1007_p2),64));
    zext_ln149_1_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_fu_727_p2),64));
    zext_ln149_2_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_1_fu_877_p2),64));
    zext_ln149_3_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_2_fu_887_p2),64));
    zext_ln149_4_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_3_fu_897_p2),64));
    zext_ln149_5_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_4_fu_907_p2),64));
    zext_ln149_6_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_5_fu_917_p2),64));
    zext_ln149_7_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_6_fu_927_p2),64));
    zext_ln149_8_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_7_fu_937_p2),64));
    zext_ln149_9_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln149_8_fu_947_p2),64));
    zext_ln149_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_1111),64));
end behav;
