-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l2_weiJfO_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l2_weiJfO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01001111", 1 => "00001110", 2 => "00101111", 3 => "11011111", 
    4 => "00001001", 5 => "11001000", 6 => "00110100", 7 => "00010110", 
    8 => "00000111", 9 => "11101010", 10 => "00011111", 11 => "00010100", 
    12 => "00000010", 13 => "11000110", 14 => "00011110", 15 => "11100001", 
    16 => "00100001", 17 => "00101011", 18 => "00000010", 19 => "11011010", 
    20 => "11101000", 21 => "11101111", 22 => "00100000", 23 => "11001100", 
    24 => "00010110", 25 => "01000011", 26 => "11110110", 27 => "00101011", 
    28 => "00101100", 29 => "00010110", 30 => "00010100", 31 => "00000000", 
    32 => "00101100", 33 to 34=> "00010111", 35 => "00100111", 36 => "11110001", 
    37 => "11111000", 38 => "11010111", 39 to 40=> "11101111", 41 => "11110000", 
    42 => "00111111", 43 => "00001011", 44 => "11110100", 45 => "00011011", 
    46 => "00010100", 47 => "00100110", 48 => "11011101", 49 => "11010000", 
    50 => "11010011", 51 => "00011011", 52 => "00010011", 53 => "00000000", 
    54 => "11100011", 55 => "00101000", 56 => "00011001", 57 => "11111000", 
    58 => "11110001", 59 => "00010100", 60 => "00111000", 61 => "00010010", 
    62 => "00000111", 63 => "11011010", 64 => "01110111", 65 => "11010011", 
    66 => "00101011", 67 => "00100100", 68 => "11101100", 69 => "00000100", 
    70 => "11101011", 71 => "11101111", 72 => "00100001", 73 => "00011110", 
    74 => "11110110", 75 => "00011111", 76 => "11101111", 77 => "01000010", 
    78 => "00010110", 79 => "11100001", 80 => "01000001", 81 => "00010101", 
    82 => "00100010", 83 => "00010101", 84 => "11010101", 85 => "00010111", 
    86 => "00011110", 87 => "11101111", 88 => "11111100", 89 => "00011111", 
    90 => "00100110", 91 => "11001100", 92 => "00000101", 93 => "11111000", 
    94 => "00010100", 95 => "00001010", 96 => "00111010", 97 => "11011010", 
    98 => "11111001", 99 => "00100000", 100 => "00001110", 101 => "00111010", 
    102 => "10111101", 103 => "11000001", 104 => "00111001", 105 => "00010111", 
    106 => "00010110", 107 => "00010111", 108 => "00101111", 109 => "11100101", 
    110 => "11111111", 111 => "11100011", 112 => "00000001", 113 => "11111100", 
    114 => "11101111", 115 => "00011001", 116 => "11101100", 117 => "11010100", 
    118 => "00001100", 119 => "00001000", 120 => "00110100", 121 => "11111101", 
    122 => "10101111", 123 => "00000000", 124 => "11110011", 125 => "00000011", 
    126 => "11100001", 127 => "00101000", 128 => "00011011", 129 => "11111110", 
    130 => "00000001", 131 => "11101101", 132 => "00000011", 133 => "11101001", 
    134 => "00011100", 135 => "11110001", 136 => "00000111", 137 => "00000100", 
    138 => "00110100", 139 => "11110100", 140 => "11010110", 141 => "00010111", 
    142 => "11110010", 143 => "10111101", 144 => "00001001", 145 => "01000000", 
    146 => "11111011", 147 => "11101110", 148 => "00100000", 149 => "00010010", 
    150 => "11110111", 151 => "00010100", 152 => "00000001", 153 => "00011011", 
    154 => "00101101", 155 => "00110000", 156 => "11111011", 157 => "00011001", 
    158 => "00101111", 159 => "00000111", 160 => "00100111", 161 => "11100000", 
    162 => "00010011", 163 => "11100111", 164 => "11110110", 165 => "11011100", 
    166 => "11011011", 167 => "11111110", 168 => "11011011", 169 => "00000000", 
    170 => "00110001", 171 => "00010010", 172 => "00100000", 173 => "00001000", 
    174 => "11111111", 175 => "00101100", 176 => "00000110", 177 => "00000111", 
    178 => "11011111", 179 => "00000000", 180 => "11100100", 181 => "00000000", 
    182 => "11011011", 183 => "00100001", 184 => "00000100", 185 => "11111001", 
    186 => "10111111", 187 => "00100111", 188 => "00110110", 189 => "00001110", 
    190 => "00011001", 191 => "11100010", 192 => "00100010", 193 => "11100110", 
    194 => "11110011", 195 => "11001100", 196 => "00101110", 197 => "10101101", 
    198 => "00010101", 199 => "00010100", 200 => "00011011", 201 to 202=> "11010101", 
    203 => "11001110", 204 => "00001001", 205 => "00110010", 206 => "11010101", 
    207 => "11010100", 208 => "00100000", 209 => "00010010", 210 => "11011110", 
    211 => "00010001", 212 => "11011000", 213 => "00010101", 214 => "00010110", 
    215 => "11101010", 216 => "11110010", 217 => "00110101", 218 => "11010100", 
    219 => "00110100", 220 => "00001101", 221 => "11110101", 222 => "10111101", 
    223 => "11111000", 224 => "00011100", 225 => "00001011", 226 => "11011111", 
    227 => "11010001", 228 => "11111111", 229 => "01010111", 230 => "00010110", 
    231 => "00000000", 232 => "00100010", 233 => "00000000", 234 => "00011001", 
    235 => "11100100", 236 => "11010101", 237 => "11100011", 238 => "00101110", 
    239 => "11011110", 240 => "11011010", 241 => "11110110", 242 => "11000101", 
    243 => "00001000", 244 => "11111111", 245 => "00100111", 246 => "00010001", 
    247 => "11001100", 248 => "00100111", 249 => "00010011", 250 => "00101000", 
    251 => "11001001", 252 => "11111001", 253 => "00010111", 254 => "11100101", 
    255 => "11000100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l2_weiJfO is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l2_weiJfO is
    component mlp_kernel_l2_weiJfO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l2_weiJfO_rom_U :  component mlp_kernel_l2_weiJfO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


