-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mlp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=286796,HLS_SYN_TPT=none,HLS_SYN_MEM=171,HLS_SYN_DSP=212,HLS_SYN_FF=41476,HLS_SYN_LUT=44485,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv12_961 : STD_LOGIC_VECTOR (11 downto 0) := "100101100001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln134_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln161_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_fu_607_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_1026 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_data_V_3_reg_1031 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln_fu_617_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_1037 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_635_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1051 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln681_3_fu_697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln681_3_reg_1056 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln140_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_fu_707_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln681_reg_1061 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln142_fu_713_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln142_reg_1066 : STD_LOGIC_VECTOR (15 downto 0);
    signal low_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_reg_1076 : STD_LOGIC_VECTOR (7 downto 0);
    signal prediction_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_mlp_kernel_fu_452_ap_ready : STD_LOGIC;
    signal grp_mlp_kernel_fu_452_ap_done : STD_LOGIC;
    signal prediction_0_1_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_1_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_1_1_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_2_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_3_reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_4_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_5_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_6_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal prediction_7_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_799_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1134 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal shl_ln1_fu_805_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_reg_1139 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln155_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_817_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln_reg_1144 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_fu_835_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_1152 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal select_ln163_1_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln163_1_fu_850_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln163_fu_869_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal low_1_fu_1006_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal high_1_fu_1012_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sample_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sample_ce0 : STD_LOGIC;
    signal sample_we0 : STD_LOGIC;
    signal sample_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mlp_kernel_fu_452_ap_start : STD_LOGIC;
    signal grp_mlp_kernel_fu_452_ap_idle : STD_LOGIC;
    signal grp_mlp_kernel_fu_452_sample_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mlp_kernel_fu_452_sample_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_452_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_340 : STD_LOGIC_VECTOR (11 downto 0);
    signal Lo_assign_reg_351 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Hi_assign_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_373 : STD_LOGIC_VECTOR (4 downto 0);
    signal i1_0_reg_384 : STD_LOGIC_VECTOR (4 downto 0);
    signal Lo_assign_1_reg_396 : STD_LOGIC_VECTOR (6 downto 0);
    signal Hi_assign_1_reg_408 : STD_LOGIC_VECTOR (6 downto 0);
    signal j3_0_reg_420 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln163_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mlp_kernel_fu_452_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call1 : BOOLEAN;
    signal zext_ln142_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_fu_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_1000_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln681_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln681_2_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_218_fu_647_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln681_1_fu_662_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_fu_674_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_2_fu_689_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_1_fu_682_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln681_fu_703_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln140_fu_625_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln681_1_fu_730_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln681_1_fu_733_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_739_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln163_fu_813_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln161_fu_825_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln163_fu_841_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln163_fu_845_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_219_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln391_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln391_fu_892_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln391_fu_898_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln391_2_fu_914_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln391_1_fu_906_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln391_1_fu_922_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_fu_928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln391_fu_940_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_220_fu_946_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_1_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_2_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln391_1_fu_964_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln391_fu_970_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln391_fu_976_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln391_fu_982_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln391_3_fu_956_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln391_1_fu_988_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln391_2_fu_994_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal regslice_both_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_ack_in : STD_LOGIC;
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal out_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_1513 : BOOLEAN;

    component mlp_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sample_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sample_ce0 : OUT STD_LOGIC;
        sample_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_sample IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mlp_control_s_axi_U : component mlp_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    sample_U : component mlp_sample
    generic map (
        DataWidth => 8,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_address0,
        ce0 => sample_ce0,
        we0 => sample_we0,
        d0 => sample_d0,
        q0 => sample_q0);

    grp_mlp_kernel_fu_452 : component mlp_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mlp_kernel_fu_452_ap_start,
        ap_done => grp_mlp_kernel_fu_452_ap_done,
        ap_idle => grp_mlp_kernel_fu_452_ap_idle,
        ap_ready => grp_mlp_kernel_fu_452_ap_ready,
        sample_address0 => grp_mlp_kernel_fu_452_sample_address0,
        sample_ce0 => grp_mlp_kernel_fu_452_sample_ce0,
        sample_q0 => sample_q0,
        ap_return_0 => grp_mlp_kernel_fu_452_ap_return_0,
        ap_return_1 => grp_mlp_kernel_fu_452_ap_return_1,
        ap_return_2 => grp_mlp_kernel_fu_452_ap_return_2,
        ap_return_3 => grp_mlp_kernel_fu_452_ap_return_3,
        ap_return_4 => grp_mlp_kernel_fu_452_ap_return_4,
        ap_return_5 => grp_mlp_kernel_fu_452_ap_return_5,
        ap_return_6 => grp_mlp_kernel_fu_452_ap_return_6,
        ap_return_7 => grp_mlp_kernel_fu_452_ap_return_7,
        ap_return_8 => grp_mlp_kernel_fu_452_ap_return_8,
        ap_return_9 => grp_mlp_kernel_fu_452_ap_return_9);

    regslice_both_in_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_data_V_U_apdone_blk);

    regslice_both_in_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int,
        vld_out => regslice_both_in_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_keep_V_U_apdone_blk);

    regslice_both_in_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int,
        vld_out => regslice_both_in_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_strb_V_U_apdone_blk);

    regslice_both_in_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_last_V_U_apdone_blk);

    regslice_both_out_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_data_V_fu_294,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_FF,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TLAST_int,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mlp_kernel_fu_452_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mlp_kernel_fu_452_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_mlp_kernel_fu_452_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mlp_kernel_fu_452_ap_ready = ap_const_logic_1)) then 
                    grp_mlp_kernel_fu_452_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Hi_assign_1_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                Hi_assign_1_reg_408 <= high_1_fu_1012_p2;
            elsif (((icmp_ln155_fu_793_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                Hi_assign_1_reg_408 <= ap_const_lv7_1F;
            end if; 
        end if;
    end process;

    Hi_assign_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                Hi_assign_reg_362 <= high_reg_1076;
            elsif ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Hi_assign_reg_362 <= ap_const_lv8_7;
            end if; 
        end if;
    end process;

    Lo_assign_1_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                Lo_assign_1_reg_396 <= low_1_fu_1006_p2;
            elsif (((icmp_ln155_fu_793_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                Lo_assign_1_reg_396 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    Lo_assign_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                Lo_assign_reg_351 <= low_reg_1071;
            elsif ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Lo_assign_reg_351 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i1_0_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (out_r_TREADY_int = ap_const_logic_1))) then 
                i1_0_reg_384 <= i_3_reg_1134;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_mlp_kernel_fu_452_ap_done = ap_const_logic_1))) then 
                i1_0_reg_384 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_340 <= i_reg_1026;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_340 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j3_0_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j3_0_reg_420 <= j_1_reg_1152;
            elsif (((icmp_ln155_fu_793_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                j3_0_reg_420 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_373 <= j_reg_1051;
            elsif ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_373 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_ln163_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1513)) then
                if ((ap_const_lv3_2 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= prediction_2_reg_1101;
                elsif ((ap_const_lv3_7 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= prediction_7_reg_1126;
                elsif ((ap_const_lv3_6 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= prediction_6_reg_1121;
                elsif ((ap_const_lv3_5 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= prediction_5_reg_1116;
                elsif ((ap_const_lv3_4 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= prediction_4_reg_1111;
                elsif ((ap_const_lv3_3 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= prediction_3_reg_1106;
                elsif ((ap_const_lv3_1 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= select_ln163_1_fu_863_p3;
                elsif ((ap_const_lv3_0 = add_ln163_1_fu_850_p2)) then 
                    phi_ln163_reg_431 <= select_ln163_fu_869_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_629_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln142_reg_1066 <= add_ln142_fu_713_p2;
                high_reg_1076 <= high_fu_724_p2;
                low_reg_1071 <= low_fu_718_p2;
                lshr_ln681_reg_1061 <= lshr_ln681_fu_707_p2;
                sub_ln681_3_reg_1056 <= sub_ln681_3_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                i_3_reg_1134 <= i_3_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_1026 <= i_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then
                j_1_reg_1152 <= j_1_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1051 <= j_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_mlp_kernel_fu_452_ap_done = ap_const_logic_1))) then
                prediction_0_1_reg_1086 <= grp_mlp_kernel_fu_452_ap_return_1;
                prediction_1_1_reg_1096 <= grp_mlp_kernel_fu_452_ap_return_3;
                prediction_1_reg_1091 <= grp_mlp_kernel_fu_452_ap_return_2;
                prediction_2_reg_1101 <= grp_mlp_kernel_fu_452_ap_return_4;
                prediction_3_reg_1106 <= grp_mlp_kernel_fu_452_ap_return_5;
                prediction_4_reg_1111 <= grp_mlp_kernel_fu_452_ap_return_6;
                prediction_5_reg_1116 <= grp_mlp_kernel_fu_452_ap_return_7;
                prediction_6_reg_1121 <= grp_mlp_kernel_fu_452_ap_return_8;
                prediction_7_reg_1126 <= grp_mlp_kernel_fu_452_ap_return_9;
                prediction_reg_1081 <= grp_mlp_kernel_fu_452_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln155_fu_793_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    shl_ln1_reg_1139(5 downto 1) <= shl_ln1_fu_805_p3(5 downto 1);
                    trunc_ln_reg_1144(2 downto 1) <= trunc_ln_fu_817_p3(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1037(15 downto 4) <= shl_ln_fu_617_p3(15 downto 4);
                tmp_data_V_3_reg_1031 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_data_V_fu_294 <= p_Result_2_fu_1000_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1037(3 downto 0) <= "0000";
    shl_ln1_reg_1139(0) <= '0';
    trunc_ln_reg_1144(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln134_fu_601_p2, ap_CS_fsm_state7, icmp_ln161_fu_829_p2, ap_CS_fsm_state9, ap_CS_fsm_state3, icmp_ln140_fu_629_p2, ap_CS_fsm_state5, grp_mlp_kernel_fu_452_ap_done, ap_CS_fsm_state6, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln155_fu_793_p2, ap_block_state7_io, in_r_TVALID_int, out_r_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln140_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_mlp_kernel_fu_452_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln155_fu_793_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln155_fu_793_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln161_fu_829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((icmp_ln161_fu_829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (out_r_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln142_fu_713_p2 <= std_logic_vector(unsigned(shl_ln_reg_1037) + unsigned(zext_ln140_fu_625_p1));
    add_ln163_1_fu_850_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1144) + unsigned(zext_ln163_fu_841_p1));
    add_ln163_fu_845_p2 <= std_logic_vector(unsigned(zext_ln161_fu_825_p1) + unsigned(shl_ln1_reg_1139));
    and_ln391_1_fu_988_p2 <= (xor_ln391_fu_982_p2 and tmp_data_V_fu_294);
    and_ln391_2_fu_994_p2 <= (select_ln391_3_fu_956_p3 and and_ln391_fu_976_p2);
    and_ln391_fu_976_p2 <= (shl_ln391_1_fu_964_p2 and lshr_ln391_fu_970_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(icmp_ln134_fu_601_p2, in_r_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call1_assign_proc : process(icmp_ln134_fu_601_p2, in_r_TVALID_int)
    begin
                ap_block_state2_ignore_call1 <= ((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(icmp_ln161_fu_829_p2, out_r_TREADY_int)
    begin
                ap_block_state7_io <= ((icmp_ln161_fu_829_p2 = ap_const_lv1_1) and (out_r_TREADY_int = ap_const_logic_0));
    end process;


    ap_condition_1513_assign_proc : process(ap_CS_fsm_state7, icmp_ln161_fu_829_p2, ap_block_state7_io)
    begin
                ap_condition_1513 <= ((icmp_ln161_fu_829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln155_fu_793_p2)
    begin
        if (((icmp_ln155_fu_793_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln155_fu_793_p2)
    begin
        if (((icmp_ln155_fu_793_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_mlp_kernel_fu_452_ap_start <= grp_mlp_kernel_fu_452_ap_start_reg;
    high_1_fu_1012_p2 <= std_logic_vector(unsigned(Hi_assign_1_reg_408) + unsigned(ap_const_lv7_20));
    high_fu_724_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(Hi_assign_reg_362));
    i_3_fu_799_p2 <= std_logic_vector(unsigned(i1_0_reg_384) + unsigned(ap_const_lv5_1));
    i_fu_607_p2 <= std_logic_vector(unsigned(i_0_reg_340) + unsigned(ap_const_lv12_1));
    icmp_ln134_fu_601_p2 <= "1" when (i_0_reg_340 = ap_const_lv12_961) else "0";
    icmp_ln140_fu_629_p2 <= "1" when (j_0_reg_373 = ap_const_lv5_10) else "0";
    icmp_ln155_fu_793_p2 <= "1" when (i1_0_reg_384 = ap_const_lv5_19) else "0";
    icmp_ln161_fu_829_p2 <= "1" when (j3_0_reg_420 = ap_const_lv2_2) else "0";
    icmp_ln391_fu_886_p2 <= "1" when (unsigned(Lo_assign_1_reg_396) > unsigned(Hi_assign_1_reg_408)) else "0";
    icmp_ln681_fu_641_p2 <= "1" when (unsigned(Lo_assign_reg_351) > unsigned(Hi_assign_reg_362)) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln134_fu_601_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_V_data_V_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_V_data_V_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln134_fu_601_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln134_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_835_p2 <= std_logic_vector(unsigned(j3_0_reg_420) + unsigned(ap_const_lv2_1));
    j_fu_635_p2 <= std_logic_vector(unsigned(j_0_reg_373) + unsigned(ap_const_lv5_1));
    low_1_fu_1006_p2 <= std_logic_vector(unsigned(Lo_assign_1_reg_396) + unsigned(ap_const_lv7_20));
    low_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(Lo_assign_reg_351));
    lshr_ln391_fu_970_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln391_2_fu_936_p1(31-1 downto 0)))));
    lshr_ln681_1_fu_733_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln681_1_fu_730_p1(31-1 downto 0)))));
    lshr_ln681_fu_707_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_1_fu_682_p3),to_integer(unsigned('0' & zext_ln681_fu_703_p1(31-1 downto 0)))));

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state7, icmp_ln161_fu_829_p2, ap_CS_fsm_state9, out_r_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln161_fu_829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST_int <= "1" when (i1_0_reg_384 = ap_const_lv5_18) else "0";
    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_CS_fsm_state7, icmp_ln161_fu_829_p2, ap_block_state7_io)
    begin
        if (((icmp_ln161_fu_829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_2_fu_1000_p2 <= (and_ln391_2_fu_994_p2 or and_ln391_1_fu_988_p2);
    p_Result_s_fu_739_p2 <= (lshr_ln681_reg_1061 and lshr_ln681_1_fu_733_p2);

    sample_address0_assign_proc : process(ap_CS_fsm_state5, grp_mlp_kernel_fu_452_sample_address0, ap_CS_fsm_state4, zext_ln142_fu_749_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_address0 <= zext_ln142_fu_749_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_address0 <= grp_mlp_kernel_fu_452_sample_address0;
        else 
            sample_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sample_ce0_assign_proc : process(ap_CS_fsm_state5, grp_mlp_kernel_fu_452_sample_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_ce0 <= grp_mlp_kernel_fu_452_sample_ce0;
        else 
            sample_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_d0 <= p_Result_s_fu_739_p2(8 - 1 downto 0);

    sample_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_we0 <= ap_const_logic_1;
        else 
            sample_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln163_1_fu_863_p3 <= 
        prediction_1_1_reg_1096 when (tmp_219_fu_855_p3(0) = '1') else 
        prediction_1_reg_1091;
    select_ln163_fu_869_p3 <= 
        prediction_0_1_reg_1086 when (tmp_219_fu_855_p3(0) = '1') else 
        prediction_reg_1081;
    select_ln391_1_fu_906_p3 <= 
        Hi_assign_1_reg_408 when (icmp_ln391_fu_886_p2(0) = '1') else 
        Lo_assign_1_reg_396;
    select_ln391_2_fu_914_p3 <= 
        sub_ln391_fu_892_p2 when (icmp_ln391_fu_886_p2(0) = '1') else 
        Lo_assign_1_reg_396;
    select_ln391_3_fu_956_p3 <= 
        tmp_220_fu_946_p4 when (icmp_ln391_fu_886_p2(0) = '1') else 
        shl_ln391_fu_940_p2;
    select_ln391_fu_898_p3 <= 
        Lo_assign_1_reg_396 when (icmp_ln391_fu_886_p2(0) = '1') else 
        Hi_assign_1_reg_408;
    select_ln681_1_fu_682_p3 <= 
        tmp_218_fu_647_p4 when (icmp_ln681_fu_641_p2(0) = '1') else 
        tmp_data_V_3_reg_1031;
    select_ln681_2_fu_689_p3 <= 
        sub_ln681_1_fu_662_p2 when (icmp_ln681_fu_641_p2(0) = '1') else 
        Lo_assign_reg_351;
    select_ln681_fu_674_p3 <= 
        sub_ln681_fu_656_p2 when (icmp_ln681_fu_641_p2(0) = '1') else 
        sub_ln681_2_fu_668_p2;
    shl_ln1_fu_805_p3 <= (i1_0_reg_384 & ap_const_lv1_0);
    shl_ln391_1_fu_964_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln391_1_fu_932_p1(31-1 downto 0)))));
    shl_ln391_fu_940_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_882_p1),to_integer(unsigned('0' & zext_ln391_fu_928_p1(31-1 downto 0)))));
    shl_ln_fu_617_p3 <= (i_0_reg_340 & ap_const_lv4_0);
    sub_ln391_1_fu_922_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln391_fu_898_p3));
    sub_ln391_fu_892_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(Lo_assign_1_reg_396));
    sub_ln681_1_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(Lo_assign_reg_351));
    sub_ln681_2_fu_668_p2 <= std_logic_vector(unsigned(Hi_assign_reg_362) - unsigned(Lo_assign_reg_351));
    sub_ln681_3_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln681_fu_674_p3));
    sub_ln681_fu_656_p2 <= std_logic_vector(unsigned(Lo_assign_reg_351) - unsigned(Hi_assign_reg_362));
    
    tmp_218_fu_647_p4_proc : process(tmp_data_V_3_reg_1031)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_218_fu_647_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_data_V_3_reg_1031;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_218_fu_647_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_218_fu_647_p4_i) := tmp_data_V_3_reg_1031(128-1-tmp_218_fu_647_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_218_fu_647_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_219_fu_855_p3 <= add_ln163_fu_845_p2(3 downto 3);
    
    tmp_220_fu_946_p4_proc : process(shl_ln391_fu_940_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_220_fu_946_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := shl_ln391_fu_940_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_220_fu_946_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_220_fu_946_p4_i) := shl_ln391_fu_940_p2(64-1-tmp_220_fu_946_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_220_fu_946_p4 <= resvalue(64-1 downto 0);
    end process;

        tmp_V_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_ln163_reg_431),64));

    trunc_ln163_fu_813_p1 <= i1_0_reg_384(2 - 1 downto 0);
    trunc_ln_fu_817_p3 <= (trunc_ln163_fu_813_p1 & ap_const_lv1_0);
    xor_ln391_fu_982_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor and_ln391_fu_976_p2);
    zext_ln140_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_373),16));
    zext_ln142_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_reg_1066),64));
    zext_ln161_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_0_reg_420),6));
    zext_ln163_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_0_reg_420),3));
    zext_ln391_1_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln391_1_fu_906_p3),64));
    zext_ln391_2_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln391_1_fu_922_p2),64));
    zext_ln391_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln391_2_fu_914_p3),64));
    zext_ln681_1_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_3_reg_1056),128));
    zext_ln681_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_2_fu_689_p3),128));
end behav;
