-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weihbi_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weihbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10000111", 1 => "11010110", 2 => "01011100", 3 => "10011000", 
    4 => "10100100", 5 => "11000000", 6 => "00101101", 7 => "01100011", 
    8 => "00110001", 9 => "01110000", 10 => "00011010", 11 => "01110001", 
    12 => "10011110", 13 => "01101101", 14 => "10010011", 15 => "10011011", 
    16 => "10001110", 17 => "10011010", 18 => "01000110", 19 => "10100000", 
    20 => "10011111", 21 => "01000101", 22 => "10100100", 23 => "00010110", 
    24 => "00000000", 25 => "00010000", 26 => "11011101", 27 => "11111001", 
    28 => "00010011", 29 => "10101010", 30 => "00100010", 31 => "00000110", 
    32 => "10101111", 33 => "10001000", 34 => "00011001", 35 => "00110100", 
    36 => "01101110", 37 => "11100001", 38 => "00101100", 39 => "11010100", 
    40 => "10100010", 41 => "01101110", 42 => "01110110", 43 => "00101110", 
    44 => "11010011", 45 => "00100111", 46 => "10001001", 47 => "11001100", 
    48 => "01110000", 49 => "01001111", 50 => "00010101", 51 => "00101010", 
    52 => "10101101", 53 => "10101001", 54 => "11111001", 55 => "01010110", 
    56 => "01010010", 57 => "11001010", 58 => "10010111", 59 => "11100111", 
    60 => "00100010", 61 => "00101011", 62 to 63=> "10101101", 64 => "01000101", 
    65 => "10011100", 66 => "00001111", 67 => "01100011", 68 => "00110011", 
    69 => "11100111", 70 => "10001110", 71 => "10101101", 72 => "00111111", 
    73 => "10101000", 74 => "01111001", 75 => "00100001", 76 => "10001101", 
    77 => "01111011", 78 => "00001101", 79 => "01100101", 80 => "00110011", 
    81 => "11111011", 82 => "11000101", 83 => "10101111", 84 => "11010100", 
    85 => "11001011", 86 => "11010111", 87 => "00010100", 88 => "10011010", 
    89 => "00001001", 90 => "01110001", 91 => "10101001", 92 => "00011000", 
    93 => "00111010", 94 => "10101111", 95 => "01110010", 96 => "01101010", 
    97 => "01011010", 98 => "00000111", 99 => "11000010", 100 => "01111101", 
    101 => "10101101", 102 => "00111111", 103 => "01111010", 104 => "10011011", 
    105 => "00011110", 106 => "00011000", 107 => "00011010", 108 => "01110110", 
    109 => "11001101", 110 => "10111110", 111 => "00110100", 112 => "01111001", 
    113 => "11101000", 114 => "11011101", 115 => "01100001", 116 => "10001011", 
    117 => "01100101", 118 => "11100010", 119 => "01010101", 120 => "11011110", 
    121 => "00010001", 122 => "10111011", 123 => "00111010", 124 => "10100101", 
    125 => "10101010", 126 => "00010111", 127 => "01101101", 128 => "01000111", 
    129 => "00001111", 130 => "10000011", 131 => "10111111", 132 => "00100100", 
    133 => "10111001", 134 => "11011100", 135 => "01010001", 136 => "10110000", 
    137 => "10111010", 138 => "11011110", 139 => "00111100", 140 => "11011101", 
    141 => "01011111", 142 => "01101111", 143 => "00100010", 144 => "10110001", 
    145 => "10011100", 146 => "10001111", 147 => "10100110", 148 => "01011101", 
    149 => "00101111", 150 => "00001000", 151 => "01010000", 152 => "00011000", 
    153 => "10100100", 154 => "10010110", 155 => "10100110", 156 => "11010010", 
    157 => "10000111", 158 => "10110000", 159 => "01110100", 160 => "10010001", 
    161 => "10101110", 162 => "01101111", 163 => "10001010", 164 => "11001010", 
    165 => "00001000", 166 => "01011011", 167 => "01001000", 168 => "10101010", 
    169 => "11101001", 170 => "01110100", 171 => "11000100", 172 => "10001111", 
    173 => "11101111", 174 => "10111011", 175 => "10010111", 176 => "11010100", 
    177 => "11011010", 178 => "10110001", 179 => "11000001", 180 => "01001000", 
    181 => "11001111", 182 => "00101000", 183 => "10010011", 184 => "01001110", 
    185 => "11001110", 186 => "01100100", 187 => "00000010", 188 => "01001101", 
    189 => "01011100", 190 => "01000111", 191 => "01101011", 192 => "11001100", 
    193 => "11100001", 194 => "11101000", 195 => "00010110", 196 => "00111100", 
    197 => "00100001", 198 => "00111101", 199 => "01100101", 200 => "10001101", 
    201 => "01000101", 202 => "11000001", 203 to 204=> "00000111", 205 => "10101001", 
    206 => "11010011", 207 => "00111100", 208 => "01010100", 209 => "10011100", 
    210 => "00111001", 211 => "11000101", 212 to 213=> "01111001", 214 => "00010101", 
    215 => "00110100", 216 => "01110000", 217 => "11100111", 218 => "10011001", 
    219 => "01000110", 220 => "11101110", 221 => "00001101", 222 => "10010001", 
    223 => "00010100", 224 => "00111010", 225 => "11111100", 226 => "11101000", 
    227 => "10011100", 228 => "10110001", 229 => "11100100", 230 => "00010000", 
    231 => "01011010", 232 => "01100001", 233 => "01100010", 234 => "10110100", 
    235 => "01010110", 236 => "01001010", 237 => "00011101", 238 => "01100100", 
    239 => "01110111", 240 => "00010010", 241 => "11101010", 242 => "01110011", 
    243 => "01001010", 244 => "01100001", 245 => "01110001", 246 => "10111011", 
    247 => "10111001", 248 => "10110000", 249 => "11001010", 250 => "10000100", 
    251 => "11100100", 252 => "01000110", 253 => "00001001", 254 => "01010001", 
    255 => "10010011" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weihbi is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weihbi is
    component mlp_kernel_l1_weihbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weihbi_rom_U :  component mlp_kernel_l1_weihbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


