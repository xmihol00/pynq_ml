-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weincg_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weincg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01110000", 1 => "00010010", 2 => "10011111", 3 => "01010011", 
    4 => "00000010", 5 => "11101111", 6 => "11000001", 7 => "10111100", 
    8 => "01111000", 9 => "11000001", 10 => "00111001", 11 => "11110011", 
    12 => "11001110", 13 => "01001110", 14 => "10101011", 15 => "11010010", 
    16 => "00101011", 17 => "01101000", 18 => "10000011", 19 => "01101110", 
    20 => "00000001", 21 => "10100010", 22 => "00100101", 23 => "01110100", 
    24 => "10101101", 25 => "11000111", 26 => "11010110", 27 => "01110011", 
    28 => "00010111", 29 => "11000010", 30 => "01000101", 31 => "11011011", 
    32 => "00010011", 33 => "10011010", 34 => "10111111", 35 => "01001001", 
    36 => "00110111", 37 => "00001110", 38 => "10110010", 39 => "00111100", 
    40 => "11000111", 41 => "10011100", 42 to 43=> "01011111", 44 => "01100000", 
    45 => "00001111", 46 => "10110101", 47 => "11110100", 48 => "10010011", 
    49 => "00011001", 50 => "10100110", 51 => "00101001", 52 => "10110011", 
    53 => "01100100", 54 => "00110100", 55 => "01000001", 56 => "00110110", 
    57 => "11010000", 58 => "01110110", 59 => "01110000", 60 => "00101101", 
    61 => "01000001", 62 => "00011101", 63 => "00010010", 64 => "01101110", 
    65 => "11111010", 66 => "01110101", 67 => "01110000", 68 => "11001001", 
    69 => "00011111", 70 => "00110001", 71 => "10001010", 72 => "00101000", 
    73 => "11011011", 74 => "10010010", 75 => "01010110", 76 => "00110100", 
    77 => "11000000", 78 => "10001000", 79 => "10110101", 80 => "01111000", 
    81 => "11100110", 82 => "11111011", 83 => "11100010", 84 => "10000111", 
    85 => "01011101", 86 => "01001101", 87 => "00010000", 88 => "10001011", 
    89 => "11101100", 90 => "01011100", 91 => "01111010", 92 => "11011111", 
    93 => "10101111", 94 => "00100000", 95 => "01100001", 96 => "01100011", 
    97 => "01100001", 98 => "01101111", 99 => "10000111", 100 => "00010101", 
    101 => "11100110", 102 => "10001010", 103 => "10011101", 104 => "10110010", 
    105 => "00011100", 106 => "00011101", 107 => "10010100", 108 => "00000010", 
    109 => "01000110", 110 => "01011010", 111 => "00000100", 112 => "00011011", 
    113 => "11011111", 114 => "10111000", 115 => "01101000", 116 => "00101010", 
    117 => "00011010", 118 => "00000010", 119 => "01100011", 120 => "10010000", 
    121 => "11011101", 122 => "00001111", 123 => "00001100", 124 => "01010101", 
    125 => "00000000", 126 => "00010010", 127 => "00101010", 128 => "01110100", 
    129 => "10110100", 130 => "01111001", 131 => "00111000", 132 => "10100001", 
    133 => "00111100", 134 => "11111010", 135 => "00110101", 136 => "11110010", 
    137 => "10011001", 138 => "01011110", 139 => "00101010", 140 => "11101010", 
    141 => "10111110", 142 => "00011001", 143 => "11110000", 144 => "11101111", 
    145 => "01010000", 146 => "11011100", 147 => "01111101", 148 => "01110001", 
    149 => "01001101", 150 => "00000110", 151 => "10101000", 152 => "10001011", 
    153 => "01111101", 154 => "01000010", 155 => "01101110", 156 => "10110101", 
    157 => "11010011", 158 => "10101111", 159 => "10110010", 160 => "00100001", 
    161 => "10110100", 162 => "11011100", 163 => "10010011", 164 => "10101100", 
    165 => "11011010", 166 => "01010100", 167 => "00100011", 168 => "00010100", 
    169 => "00111011", 170 => "10111011", 171 => "10111110", 172 => "10111010", 
    173 => "01101010", 174 => "00110111", 175 => "11011010", 176 => "01110101", 
    177 => "11100110", 178 => "11110101", 179 => "11111010", 180 => "01001110", 
    181 => "00000010", 182 => "11000101", 183 => "00011000", 184 => "10110010", 
    185 => "00010000", 186 => "00001110", 187 => "01000000", 188 => "10011100", 
    189 => "11100111", 190 => "10100010", 191 => "11011111", 192 => "11010011", 
    193 => "11010100", 194 => "11111000", 195 => "11101110", 196 => "01111000", 
    197 => "11010010", 198 => "10110011", 199 => "00101010", 200 => "00011000", 
    201 => "11010010", 202 => "00001011", 203 => "10100100", 204 => "11111111", 
    205 => "01110001", 206 => "01101001", 207 => "01000001", 208 => "01100100", 
    209 => "00100110", 210 => "01011011", 211 => "00011000", 212 => "01001100", 
    213 => "01010110", 214 => "11001000", 215 => "01010100", 216 => "01011011", 
    217 => "10011000", 218 => "00110011", 219 => "00110000", 220 => "01001001", 
    221 => "10001010", 222 => "00110010", 223 => "11001000", 224 => "01101011", 
    225 => "00010010", 226 => "11111011", 227 => "11100110", 228 => "01011001", 
    229 => "01110110", 230 => "00011001", 231 => "00101000", 232 => "10000011", 
    233 => "00011001", 234 => "11101100", 235 => "11110000", 236 => "11111100", 
    237 => "11101011", 238 => "01010110", 239 => "01001010", 240 => "10101001", 
    241 => "11110101", 242 => "00101001", 243 => "00100011", 244 => "10111011", 
    245 => "00010011", 246 => "10110001", 247 => "11001100", 248 => "00010101", 
    249 => "00001011", 250 => "00000000", 251 => "01010001", 252 => "11011010", 
    253 => "10110100", 254 => "10001001", 255 => "01111101" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weincg is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weincg is
    component mlp_kernel_l1_weincg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weincg_rom_U :  component mlp_kernel_l1_weincg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


