-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sample_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_0_ce0 : OUT STD_LOGIC;
    sample_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_1_ce0 : OUT STD_LOGIC;
    sample_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_2_ce0 : OUT STD_LOGIC;
    sample_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_3_ce0 : OUT STD_LOGIC;
    sample_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_4_ce0 : OUT STD_LOGIC;
    sample_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_5_ce0 : OUT STD_LOGIC;
    sample_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_6_ce0 : OUT STD_LOGIC;
    sample_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sample_7_ce0 : OUT STD_LOGIC;
    sample_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    prediction_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_0_ce0 : OUT STD_LOGIC;
    prediction_0_we0 : OUT STD_LOGIC;
    prediction_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_1_ce0 : OUT STD_LOGIC;
    prediction_1_we0 : OUT STD_LOGIC;
    prediction_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_2_ce0 : OUT STD_LOGIC;
    prediction_2_we0 : OUT STD_LOGIC;
    prediction_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_3_ce0 : OUT STD_LOGIC;
    prediction_3_we0 : OUT STD_LOGIC;
    prediction_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_4_ce0 : OUT STD_LOGIC;
    prediction_4_we0 : OUT STD_LOGIC;
    prediction_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_5_ce0 : OUT STD_LOGIC;
    prediction_5_we0 : OUT STD_LOGIC;
    prediction_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_6_ce0 : OUT STD_LOGIC;
    prediction_6_we0 : OUT STD_LOGIC;
    prediction_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_7_ce0 : OUT STD_LOGIC;
    prediction_7_we0 : OUT STD_LOGIC;
    prediction_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mlp_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal l1_weights_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal l1_weights_0_ce0 : STD_LOGIC;
    signal l1_weights_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_weights_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal l1_weights_1_ce0 : STD_LOGIC;
    signal l1_weights_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_biases_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_biases_1_ce0 : STD_LOGIC;
    signal l1_biases_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_biases_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_biases_0_ce0 : STD_LOGIC;
    signal l1_biases_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal l2_weights_0_ce0 : STD_LOGIC;
    signal l2_weights_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal l2_weights_1_ce0 : STD_LOGIC;
    signal l2_weights_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_biases_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal l2_biases_1_ce0 : STD_LOGIC;
    signal l2_biases_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_biases_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal l2_biases_0_ce0 : STD_LOGIC;
    signal l2_biases_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sums_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sums_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1068 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal reg_1084 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_1094_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_2145 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln345_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln347_fu_1100_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln351_fu_1117_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln351_reg_2200 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln347_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_1121_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_reg_2205 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln348_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_weights_0_load_reg_2228 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sums_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_load_reg_2238 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_load_8_reg_2248 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_fu_1187_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_17_reg_2283 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln348_fu_1213_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln348_reg_2293 : STD_LOGIC_VECTOR (6 downto 0);
    signal sample_0_load_reg_2298 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sample_1_load_reg_2303 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_2_load_reg_2308 : STD_LOGIC_VECTOR (7 downto 0);
    signal sums_load_9_reg_2313 : STD_LOGIC_VECTOR (15 downto 0);
    signal sample_3_load_reg_2318 : STD_LOGIC_VECTOR (7 downto 0);
    signal sums_load_10_reg_2323 : STD_LOGIC_VECTOR (15 downto 0);
    signal sample_4_load_reg_2328 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_5_load_reg_2333 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_6_load_reg_2338 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_7_load_reg_2343 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_weights_1_load_reg_2348 : STD_LOGIC_VECTOR (7 downto 0);
    signal sums_load_11_reg_2393 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sums_load_12_reg_2398 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1924_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_reg_2403 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1932_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_2_reg_2408 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1940_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_4_reg_2413 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1948_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_6_reg_2418 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1956_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_8_reg_2423 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1964_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_10_reg_2428 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1972_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_12_reg_2433 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1980_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_14_reg_2438 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_5_fu_1356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln355_5_fu_1356_p2 : signal is "no";
    signal add_ln355_5_reg_2443 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln355_7_fu_1360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln355_7_fu_1360_p2 : signal is "no";
    signal add_ln355_7_reg_2448 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_9_fu_1364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln355_9_fu_1364_p2 : signal is "no";
    signal add_ln355_9_reg_2453 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_11_fu_1368_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln355_11_fu_1368_p2 : signal is "no";
    signal add_ln355_11_reg_2458 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_13_fu_1372_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln355_13_fu_1372_p2 : signal is "no";
    signal add_ln355_13_reg_2463 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln355_15_fu_1377_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln355_15_fu_1377_p2 : signal is "no";
    signal add_ln355_15_reg_2468 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln362_fu_1386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln362_reg_2473 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sext_ln362_fu_1394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln362_reg_2478 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln362_1_fu_1400_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_1_reg_2484 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1043_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_2489 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln362_2_fu_1404_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_2_reg_2494 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_2499 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln362_3_fu_1408_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_3_reg_2504 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_6_reg_2509 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln362_4_fu_1412_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_4_reg_2514 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_2519 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln362_5_fu_1416_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_5_reg_2524 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_8_reg_2529 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln362_6_fu_1420_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_6_reg_2534 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_reg_2539 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln363_2_fu_1480_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_2_reg_2544 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal select_ln363_3_fu_1493_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_3_reg_2549 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_4_fu_1506_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_4_reg_2554 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_5_fu_1519_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_5_reg_2559 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_6_fu_1537_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_6_reg_2564 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_7_fu_1556_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_7_reg_2569 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_fu_1595_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_2577 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln371_fu_1601_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal shl_ln1_fu_1618_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1_reg_2590 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln371_fu_1612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln372_fu_1630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l2_weights_0_load_reg_2603 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_weights_1_load_reg_2653 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln372_fu_1713_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln372_reg_2698 : STD_LOGIC_VECTOR (6 downto 0);
    signal l1_out_0_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_0_load_reg_2703 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_1_load_reg_2708 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_2_load_reg_2713 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_3_load_reg_2718 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_4_load_reg_2723 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_5_load_reg_2728 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_6_load_reg_2733 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_7_load_reg_2738 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_8_fu_1988_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_8_reg_2743 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_9_fu_1994_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_9_reg_2748 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_10_fu_2000_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_10_reg_2753 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_11_fu_2006_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_11_reg_2758 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_12_fu_2012_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_12_reg_2763 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_13_fu_2018_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_13_reg_2768 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_14_fu_2024_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_14_reg_2773 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_15_fu_2030_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_15_reg_2778 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln379_5_fu_1793_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_5_fu_1793_p2 : signal is "no";
    signal add_ln379_5_reg_2783 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln379_7_fu_1798_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_7_fu_1798_p2 : signal is "no";
    signal add_ln379_7_reg_2788 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln379_9_fu_1803_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_9_fu_1803_p2 : signal is "no";
    signal add_ln379_9_reg_2793 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln379_11_fu_1808_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_11_fu_1808_p2 : signal is "no";
    signal add_ln379_11_reg_2798 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln379_13_fu_1813_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_13_fu_1813_p2 : signal is "no";
    signal add_ln379_13_reg_2803 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln379_15_fu_1818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_15_fu_1818_p2 : signal is "no";
    signal add_ln379_15_reg_2808 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln386_fu_1843_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln386_reg_2823 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln386_2_fu_1882_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_2_reg_2828 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln386_3_fu_1889_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_3_reg_2833 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_4_fu_1896_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_4_reg_2838 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_5_fu_1903_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_5_reg_2843 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_6_fu_1910_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_6_reg_2848 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_7_fu_1917_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_7_reg_2853 : STD_LOGIC_VECTOR (15 downto 0);
    signal l1_out_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_0_ce0 : STD_LOGIC;
    signal l1_out_0_we0 : STD_LOGIC;
    signal l1_out_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_0_ce1 : STD_LOGIC;
    signal l1_out_0_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_1_ce0 : STD_LOGIC;
    signal l1_out_1_we0 : STD_LOGIC;
    signal l1_out_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_1_ce1 : STD_LOGIC;
    signal l1_out_1_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_2_ce0 : STD_LOGIC;
    signal l1_out_2_we0 : STD_LOGIC;
    signal l1_out_2_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_2_ce1 : STD_LOGIC;
    signal l1_out_2_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_3_ce0 : STD_LOGIC;
    signal l1_out_3_we0 : STD_LOGIC;
    signal l1_out_3_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_3_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_3_ce1 : STD_LOGIC;
    signal l1_out_3_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_4_ce0 : STD_LOGIC;
    signal l1_out_4_we0 : STD_LOGIC;
    signal l1_out_4_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_4_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_4_ce1 : STD_LOGIC;
    signal l1_out_4_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_5_ce0 : STD_LOGIC;
    signal l1_out_5_we0 : STD_LOGIC;
    signal l1_out_5_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_5_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_5_ce1 : STD_LOGIC;
    signal l1_out_5_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_6_ce0 : STD_LOGIC;
    signal l1_out_6_we0 : STD_LOGIC;
    signal l1_out_6_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_6_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_6_ce1 : STD_LOGIC;
    signal l1_out_6_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_7_ce0 : STD_LOGIC;
    signal l1_out_7_we0 : STD_LOGIC;
    signal l1_out_7_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_7_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal l1_out_7_ce1 : STD_LOGIC;
    signal l1_out_7_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sums_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sums_ce0 : STD_LOGIC;
    signal sums_we0 : STD_LOGIC;
    signal sums_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sums_ce1 : STD_LOGIC;
    signal sums_we1 : STD_LOGIC;
    signal sums_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sums_1_ce0 : STD_LOGIC;
    signal sums_1_we0 : STD_LOGIC;
    signal sums_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sums_1_ce1 : STD_LOGIC;
    signal sums_1_we1 : STD_LOGIC;
    signal sums_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_968 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal phi_ln347_reg_980 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_0_reg_991 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i2_0_reg_1003 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal phi_ln371_reg_1015 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln369_fu_1589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j4_0_0_reg_1026 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln347_fu_1106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln351_fu_1154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_1_fu_1169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln355_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln351_1_fu_1208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln355_1_fu_1224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_fu_1424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln371_fu_1607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln375_fu_1651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln375_1_fu_1674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln379_fu_1679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln379_1_fu_1701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln386_1_fu_1833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln386_fu_1851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln355_1_fu_1346_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln355_1_fu_1346_p2 : signal is "no";
    signal add_ln355_3_fu_1351_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln355_3_fu_1351_p2 : signal is "no";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln363_fu_1452_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln363_1_fu_1470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln363_2_fu_1565_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln363_3_fu_1569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln363_4_fu_1573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln363_5_fu_1577_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln363_6_fu_1581_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln363_7_fu_1585_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln363_fu_1444_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln363_1_fu_1462_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln379_1_fu_1781_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_1_fu_1781_p2 : signal is "no";
    signal add_ln379_3_fu_1787_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln379_3_fu_1787_p2 : signal is "no";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln386_fu_1866_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln386_1_fu_1874_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_1038_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1038_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1051_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1051_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_0_cast22_fu_1129_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln351_fu_1139_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln1_fu_1144_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln_fu_1159_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_1191_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln351_1_fu_1201_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln348_fu_1219_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln355_fu_1242_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln355_fu_1236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln355_fu_1242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_1_fu_1251_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_1_fu_1251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_2_fu_1260_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_2_fu_1260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_3_fu_1269_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_3_fu_1269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_4_fu_1278_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_4_fu_1278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_5_fu_1287_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_5_fu_1287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_6_fu_1296_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_6_fu_1296_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_7_fu_1305_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln355_7_fu_1305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln362_fu_1382_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln362_1_fu_1436_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_fu_1439_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_1_fu_1457_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_2_fu_1475_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_3_fu_1488_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_4_fu_1501_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_5_fu_1514_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_7_fu_1527_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_6_fu_1531_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln362_8_fu_1546_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln363_7_fu_1550_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal j4_0_0_cast18_fu_1626_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln375_fu_1636_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln3_fu_1641_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_1656_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln375_1_fu_1666_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_22_fu_1691_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln372_fu_1695_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2036_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2044_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2052_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2060_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2068_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2076_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2084_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2092_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln2_fu_1823_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln386_fu_1839_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln386_fu_1863_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1924_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln355_9_fu_1311_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1924_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1932_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1940_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1940_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1948_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1948_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1956_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1964_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1964_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1972_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1972_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1980_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_8_fu_1988_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln379_1_fu_1719_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_8_fu_1988_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_9_fu_1994_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln379_9_fu_1994_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_10_fu_2000_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln379_10_fu_2000_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_11_fu_2006_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln379_11_fu_2006_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_12_fu_2012_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln379_12_fu_2012_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_13_fu_2018_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln379_13_fu_2018_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_14_fu_2024_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln379_14_fu_2024_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln379_15_fu_2030_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln379_15_fu_2030_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2036_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln379_fu_1754_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2036_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2044_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2044_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2052_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2052_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2060_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2060_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2068_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2068_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2076_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2076_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2084_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2084_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2092_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2092_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_2036_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2044_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2052_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2060_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2068_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2076_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2084_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2092_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_10_fu_2000_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_11_fu_2006_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_12_fu_2012_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_13_fu_2018_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_14_fu_2024_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_15_fu_2030_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_8_fu_1988_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln379_9_fu_1994_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component mlp_mac_muladd_8sjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mlp_mul_mul_8s_15kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mlp_mac_muladd_8slbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mlp_kernel_l1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_biadEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_biaeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_biahbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_biaibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_out_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component mlp_kernel_sums IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    l1_weights_0_U : component mlp_kernel_l1_weibkb
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_weights_0_address0,
        ce0 => l1_weights_0_ce0,
        q0 => l1_weights_0_q0);

    l1_weights_1_U : component mlp_kernel_l1_weicud
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_weights_1_address0,
        ce0 => l1_weights_1_ce0,
        q0 => l1_weights_1_q0);

    l1_biases_1_U : component mlp_kernel_l1_biadEe
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_biases_1_address0,
        ce0 => l1_biases_1_ce0,
        q0 => l1_biases_1_q0);

    l1_biases_0_U : component mlp_kernel_l1_biaeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_biases_0_address0,
        ce0 => l1_biases_0_ce0,
        q0 => l1_biases_0_q0);

    l2_weights_0_U : component mlp_kernel_l2_weifYi
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_weights_0_address0,
        ce0 => l2_weights_0_ce0,
        q0 => l2_weights_0_q0);

    l2_weights_1_U : component mlp_kernel_l2_weig8j
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_weights_1_address0,
        ce0 => l2_weights_1_ce0,
        q0 => l2_weights_1_q0);

    l2_biases_1_U : component mlp_kernel_l2_biahbi
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_biases_1_address0,
        ce0 => l2_biases_1_ce0,
        q0 => l2_biases_1_q0);

    l2_biases_0_U : component mlp_kernel_l2_biaibs
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_biases_0_address0,
        ce0 => l2_biases_0_ce0,
        q0 => l2_biases_0_q0);

    l1_out_0_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_0_address0,
        ce0 => l1_out_0_ce0,
        we0 => l1_out_0_we0,
        d0 => select_ln363_fu_1444_p3,
        q0 => l1_out_0_q0,
        address1 => l1_out_0_address1,
        ce1 => l1_out_0_ce1,
        q1 => l1_out_0_q1);

    l1_out_1_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_1_address0,
        ce0 => l1_out_1_ce0,
        we0 => l1_out_1_we0,
        d0 => select_ln363_1_fu_1462_p3,
        q0 => l1_out_1_q0,
        address1 => l1_out_1_address1,
        ce1 => l1_out_1_ce1,
        q1 => l1_out_1_q1);

    l1_out_2_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_2_address0,
        ce0 => l1_out_2_ce0,
        we0 => l1_out_2_we0,
        d0 => l1_out_2_d0,
        q0 => l1_out_2_q0,
        address1 => l1_out_2_address1,
        ce1 => l1_out_2_ce1,
        q1 => l1_out_2_q1);

    l1_out_3_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_3_address0,
        ce0 => l1_out_3_ce0,
        we0 => l1_out_3_we0,
        d0 => l1_out_3_d0,
        q0 => l1_out_3_q0,
        address1 => l1_out_3_address1,
        ce1 => l1_out_3_ce1,
        q1 => l1_out_3_q1);

    l1_out_4_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_4_address0,
        ce0 => l1_out_4_ce0,
        we0 => l1_out_4_we0,
        d0 => l1_out_4_d0,
        q0 => l1_out_4_q0,
        address1 => l1_out_4_address1,
        ce1 => l1_out_4_ce1,
        q1 => l1_out_4_q1);

    l1_out_5_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_5_address0,
        ce0 => l1_out_5_ce0,
        we0 => l1_out_5_we0,
        d0 => l1_out_5_d0,
        q0 => l1_out_5_q0,
        address1 => l1_out_5_address1,
        ce1 => l1_out_5_ce1,
        q1 => l1_out_5_q1);

    l1_out_6_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_6_address0,
        ce0 => l1_out_6_ce0,
        we0 => l1_out_6_we0,
        d0 => l1_out_6_d0,
        q0 => l1_out_6_q0,
        address1 => l1_out_6_address1,
        ce1 => l1_out_6_ce1,
        q1 => l1_out_6_q1);

    l1_out_7_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_7_address0,
        ce0 => l1_out_7_ce0,
        we0 => l1_out_7_we0,
        d0 => l1_out_7_d0,
        q0 => l1_out_7_q0,
        address1 => l1_out_7_address1,
        ce1 => l1_out_7_ce1,
        q1 => l1_out_7_q1);

    sums_U : component mlp_kernel_sums
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sums_address0,
        ce0 => sums_ce0,
        we0 => sums_we0,
        d0 => sums_d0,
        q0 => sums_q0,
        address1 => sums_address1,
        ce1 => sums_ce1,
        we1 => sums_we1,
        d1 => sums_d1,
        q1 => sums_q1);

    sums_1_U : component mlp_kernel_sums
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sums_1_address0,
        ce0 => sums_1_ce0,
        we0 => sums_1_we0,
        d0 => sums_1_d0,
        q0 => sums_1_q0,
        address1 => sums_1_address1,
        ce1 => sums_1_ce1,
        we1 => sums_1_we1,
        d1 => sums_1_d1,
        q1 => sums_1_q1);

    mlp_mac_muladd_8sjbC_U1 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1924_p0,
        din1 => sample_0_q0,
        din2 => grp_fu_1924_p2,
        dout => grp_fu_1924_p3);

    mlp_mac_muladd_8sjbC_U2 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1932_p0,
        din1 => sample_1_q0,
        din2 => grp_fu_1932_p2,
        dout => grp_fu_1932_p3);

    mlp_mac_muladd_8sjbC_U3 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1940_p0,
        din1 => sample_2_q0,
        din2 => grp_fu_1940_p2,
        dout => grp_fu_1940_p3);

    mlp_mac_muladd_8sjbC_U4 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1948_p0,
        din1 => sample_3_q0,
        din2 => grp_fu_1948_p2,
        dout => grp_fu_1948_p3);

    mlp_mac_muladd_8sjbC_U5 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1956_p0,
        din1 => sample_4_q0,
        din2 => grp_fu_1956_p2,
        dout => grp_fu_1956_p3);

    mlp_mac_muladd_8sjbC_U6 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1964_p0,
        din1 => sample_5_q0,
        din2 => grp_fu_1964_p2,
        dout => grp_fu_1964_p3);

    mlp_mac_muladd_8sjbC_U7 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1972_p0,
        din1 => sample_6_q0,
        din2 => grp_fu_1972_p2,
        dout => grp_fu_1972_p3);

    mlp_mac_muladd_8sjbC_U8 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1980_p0,
        din1 => sample_7_q0,
        din2 => grp_fu_1980_p2,
        dout => grp_fu_1980_p3);

    mlp_mul_mul_8s_15kbM_U9 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_8_fu_1988_p0,
        din1 => mul_ln379_8_fu_1988_p1,
        dout => mul_ln379_8_fu_1988_p2);

    mlp_mul_mul_8s_15kbM_U10 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_9_fu_1994_p0,
        din1 => mul_ln379_9_fu_1994_p1,
        dout => mul_ln379_9_fu_1994_p2);

    mlp_mul_mul_8s_15kbM_U11 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_10_fu_2000_p0,
        din1 => mul_ln379_10_fu_2000_p1,
        dout => mul_ln379_10_fu_2000_p2);

    mlp_mul_mul_8s_15kbM_U12 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_11_fu_2006_p0,
        din1 => mul_ln379_11_fu_2006_p1,
        dout => mul_ln379_11_fu_2006_p2);

    mlp_mul_mul_8s_15kbM_U13 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_12_fu_2012_p0,
        din1 => mul_ln379_12_fu_2012_p1,
        dout => mul_ln379_12_fu_2012_p2);

    mlp_mul_mul_8s_15kbM_U14 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_13_fu_2018_p0,
        din1 => mul_ln379_13_fu_2018_p1,
        dout => mul_ln379_13_fu_2018_p2);

    mlp_mul_mul_8s_15kbM_U15 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_14_fu_2024_p0,
        din1 => mul_ln379_14_fu_2024_p1,
        dout => mul_ln379_14_fu_2024_p2);

    mlp_mul_mul_8s_15kbM_U16 : component mlp_mul_mul_8s_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln379_15_fu_2030_p0,
        din1 => mul_ln379_15_fu_2030_p1,
        dout => mul_ln379_15_fu_2030_p2);

    mlp_mac_muladd_8slbW_U17 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2036_p0,
        din1 => grp_fu_2036_p1,
        din2 => mul_ln379_8_reg_2743,
        dout => grp_fu_2036_p3);

    mlp_mac_muladd_8slbW_U18 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2044_p0,
        din1 => grp_fu_2044_p1,
        din2 => mul_ln379_9_reg_2748,
        dout => grp_fu_2044_p3);

    mlp_mac_muladd_8slbW_U19 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2052_p0,
        din1 => grp_fu_2052_p1,
        din2 => mul_ln379_10_reg_2753,
        dout => grp_fu_2052_p3);

    mlp_mac_muladd_8slbW_U20 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2060_p0,
        din1 => grp_fu_2060_p1,
        din2 => mul_ln379_11_reg_2758,
        dout => grp_fu_2060_p3);

    mlp_mac_muladd_8slbW_U21 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2068_p0,
        din1 => grp_fu_2068_p1,
        din2 => mul_ln379_12_reg_2763,
        dout => grp_fu_2068_p3);

    mlp_mac_muladd_8slbW_U22 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2076_p0,
        din1 => grp_fu_2076_p1,
        din2 => mul_ln379_13_reg_2768,
        dout => grp_fu_2076_p3);

    mlp_mac_muladd_8slbW_U23 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2084_p0,
        din1 => grp_fu_2084_p1,
        din2 => mul_ln379_14_reg_2773,
        dout => grp_fu_2084_p3);

    mlp_mac_muladd_8slbW_U24 : component mlp_mac_muladd_8slbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_2092_p0,
        din1 => grp_fu_2092_p1,
        din2 => mul_ln379_15_reg_2778,
        dout => grp_fu_2092_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i2_0_reg_1003_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln345_fu_1088_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_0_reg_1003 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i2_0_reg_1003 <= i_1_reg_2577;
            end if; 
        end if;
    end process;

    i_0_reg_968_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_0_reg_968 <= i_reg_2145;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_968 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j4_0_0_reg_1026_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                j4_0_0_reg_1026 <= add_ln372_reg_2698;
            elsif (((icmp_ln371_fu_1612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                j4_0_0_reg_1026 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_991_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_0_0_reg_991 <= add_ln348_reg_2293;
            elsif (((icmp_ln347_fu_1111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_0_reg_991 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_ln347_reg_980_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln347_fu_1111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln347_reg_980 <= add_ln347_fu_1100_p2;
            elsif (((icmp_ln345_fu_1088_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln347_reg_980 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln371_reg_1015_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln371_fu_1612_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_ln371_reg_1015 <= add_ln371_fu_1601_p2;
            elsif (((icmp_ln369_fu_1589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                phi_ln371_reg_1015 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln348_reg_2293 <= add_ln348_fu_1213_p2;
                empty_17_reg_2283 <= empty_17_fu_1187_p1;
                l1_weights_0_load_reg_2228 <= l1_weights_0_q0;
                sums_load_8_reg_2248 <= sums_q1;
                sums_load_reg_2238 <= sums_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln355_10_reg_2428 <= grp_fu_1964_p3;
                add_ln355_12_reg_2433 <= grp_fu_1972_p3;
                add_ln355_14_reg_2438 <= grp_fu_1980_p3;
                add_ln355_2_reg_2408 <= grp_fu_1932_p3;
                add_ln355_4_reg_2413 <= grp_fu_1940_p3;
                add_ln355_6_reg_2418 <= grp_fu_1948_p3;
                add_ln355_8_reg_2423 <= grp_fu_1956_p3;
                add_ln355_reg_2403 <= grp_fu_1924_p3;
                sums_load_11_reg_2393 <= sums_q1;
                sums_load_12_reg_2398 <= sums_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln355_11_reg_2458 <= add_ln355_11_fu_1368_p2;
                add_ln355_13_reg_2463 <= add_ln355_13_fu_1372_p2;
                add_ln355_15_reg_2468 <= add_ln355_15_fu_1377_p2;
                add_ln355_5_reg_2443 <= add_ln355_5_fu_1356_p2;
                add_ln355_7_reg_2448 <= add_ln355_7_fu_1360_p2;
                add_ln355_9_reg_2453 <= add_ln355_9_fu_1364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln372_reg_2698 <= add_ln372_fu_1713_p2;
                l2_weights_1_load_reg_2653 <= l2_weights_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln379_11_reg_2798 <= add_ln379_11_fu_1808_p2;
                add_ln379_13_reg_2803 <= add_ln379_13_fu_1813_p2;
                add_ln379_15_reg_2808 <= add_ln379_15_fu_1818_p2;
                add_ln379_5_reg_2783 <= add_ln379_5_fu_1793_p2;
                add_ln379_7_reg_2788 <= add_ln379_7_fu_1798_p2;
                add_ln379_9_reg_2793 <= add_ln379_9_fu_1803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln386_2_reg_2828 <= add_ln386_2_fu_1882_p2;
                add_ln386_3_reg_2833 <= add_ln386_3_fu_1889_p2;
                add_ln386_4_reg_2838 <= add_ln386_4_fu_1896_p2;
                add_ln386_5_reg_2843 <= add_ln386_5_fu_1903_p2;
                add_ln386_6_reg_2848 <= add_ln386_6_fu_1910_p2;
                add_ln386_7_reg_2853 <= add_ln386_7_fu_1917_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_1_reg_2577 <= i_1_fu_1595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2145 <= i_fu_1094_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                l1_out_0_load_reg_2703 <= l1_out_0_q0;
                l1_out_1_load_reg_2708 <= l1_out_1_q0;
                l1_out_2_load_reg_2713 <= l1_out_2_q0;
                l1_out_3_load_reg_2718 <= l1_out_3_q0;
                l1_out_4_load_reg_2723 <= l1_out_4_q0;
                l1_out_5_load_reg_2728 <= l1_out_5_q0;
                l1_out_6_load_reg_2733 <= l1_out_6_q0;
                l1_out_7_load_reg_2738 <= l1_out_7_q0;
                mul_ln379_10_reg_2753 <= mul_ln379_10_fu_2000_p2;
                mul_ln379_11_reg_2758 <= mul_ln379_11_fu_2006_p2;
                mul_ln379_12_reg_2763 <= mul_ln379_12_fu_2012_p2;
                mul_ln379_13_reg_2768 <= mul_ln379_13_fu_2018_p2;
                mul_ln379_14_reg_2773 <= mul_ln379_14_fu_2024_p2;
                mul_ln379_15_reg_2778 <= mul_ln379_15_fu_2030_p2;
                mul_ln379_8_reg_2743 <= mul_ln379_8_fu_1988_p2;
                mul_ln379_9_reg_2748 <= mul_ln379_9_fu_1994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                l1_weights_1_load_reg_2348 <= l1_weights_1_q0;
                sample_0_load_reg_2298 <= sample_0_q0;
                sample_1_load_reg_2303 <= sample_1_q0;
                sample_2_load_reg_2308 <= sample_2_q0;
                sample_3_load_reg_2318 <= sample_3_q0;
                sample_4_load_reg_2328 <= sample_4_q0;
                sample_5_load_reg_2333 <= sample_5_q0;
                sample_6_load_reg_2338 <= sample_6_q0;
                sample_7_load_reg_2343 <= sample_7_q0;
                sums_load_10_reg_2323 <= sums_q0;
                sums_load_9_reg_2313 <= sums_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                l2_weights_0_load_reg_2603 <= l2_weights_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_1064 <= sums_1_q0;
                reg_1068 <= sums_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_1072 <= sums_1_q1;
                reg_1076 <= sums_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_1080 <= sums_1_q1;
                reg_1084 <= sums_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                select_ln362_reg_2473 <= select_ln362_fu_1386_p3;
                sext_ln362_reg_2478 <= sext_ln362_fu_1394_p1;
                tmp_2_reg_2489 <= grp_fu_1038_p2(15 downto 15);
                tmp_3_reg_2499 <= grp_fu_1051_p2(15 downto 15);
                trunc_ln362_1_reg_2484 <= trunc_ln362_1_fu_1400_p1;
                trunc_ln362_2_reg_2494 <= trunc_ln362_2_fu_1404_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                select_ln363_2_reg_2544 <= select_ln363_2_fu_1480_p3;
                select_ln363_3_reg_2549 <= select_ln363_3_fu_1493_p3;
                select_ln363_4_reg_2554 <= select_ln363_4_fu_1506_p3;
                select_ln363_5_reg_2559 <= select_ln363_5_fu_1519_p3;
                select_ln363_6_reg_2564 <= select_ln363_6_fu_1537_p3;
                select_ln363_7_reg_2569 <= select_ln363_7_fu_1556_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                select_ln386_reg_2823 <= select_ln386_fu_1843_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln371_fu_1612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    shl_ln1_reg_2590(9 downto 6) <= shl_ln1_fu_1618_p3(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln347_fu_1111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_2205(11 downto 6) <= shl_ln_fu_1121_p3(11 downto 6);
                trunc_ln351_reg_2200 <= trunc_ln351_fu_1117_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_6_reg_2509 <= grp_fu_1051_p2(15 downto 15);
                tmp_7_reg_2519 <= grp_fu_1038_p2(15 downto 15);
                trunc_ln362_3_reg_2504 <= trunc_ln362_3_fu_1408_p1;
                trunc_ln362_4_reg_2514 <= trunc_ln362_4_fu_1412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_8_reg_2529 <= grp_fu_1051_p2(15 downto 15);
                tmp_9_reg_2539 <= grp_fu_1038_p2(15 downto 15);
                trunc_ln362_5_reg_2524 <= trunc_ln362_5_fu_1416_p1;
                trunc_ln362_6_reg_2534 <= trunc_ln362_6_fu_1420_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_2205(5 downto 0) <= "000000";
    shl_ln1_reg_2590(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln345_fu_1088_p2, ap_CS_fsm_state3, icmp_ln347_fu_1111_p2, ap_CS_fsm_state4, icmp_ln348_fu_1133_p2, ap_CS_fsm_state19, ap_CS_fsm_state20, icmp_ln371_fu_1612_p2, ap_CS_fsm_state21, icmp_ln372_fu_1630_p2, icmp_ln369_fu_1589_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln345_fu_1088_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln347_fu_1111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln348_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln369_fu_1589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln371_fu_1612_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln372_fu_1630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln347_fu_1100_p2 <= std_logic_vector(unsigned(phi_ln347_reg_980) + unsigned(ap_const_lv3_1));
    add_ln348_fu_1213_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(j_0_0_reg_991));
    add_ln351_fu_1139_p2 <= std_logic_vector(unsigned(shl_ln_reg_2205) + unsigned(j_0_0_cast22_fu_1129_p1));
    add_ln355_11_fu_1368_p2 <= std_logic_vector(signed(add_ln355_10_reg_2428) + signed(sums_load_12_reg_2398));
    add_ln355_13_fu_1372_p2 <= std_logic_vector(signed(add_ln355_12_reg_2433) + signed(sums_q1));
    add_ln355_15_fu_1377_p2 <= std_logic_vector(signed(add_ln355_14_reg_2438) + signed(sums_q0));
    add_ln355_1_fu_1346_p2 <= std_logic_vector(signed(add_ln355_reg_2403) + signed(sums_load_reg_2238));
    add_ln355_3_fu_1351_p2 <= std_logic_vector(signed(add_ln355_2_reg_2408) + signed(sums_load_8_reg_2248));
    add_ln355_5_fu_1356_p2 <= std_logic_vector(signed(add_ln355_4_reg_2413) + signed(sums_load_9_reg_2313));
    add_ln355_7_fu_1360_p2 <= std_logic_vector(signed(add_ln355_6_reg_2418) + signed(sums_load_10_reg_2323));
    add_ln355_9_fu_1364_p2 <= std_logic_vector(signed(add_ln355_8_reg_2423) + signed(sums_load_11_reg_2393));
    add_ln363_1_fu_1457_p2 <= std_logic_vector(unsigned(trunc_ln362_2_reg_2494) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln363_2_fu_1475_p2 <= std_logic_vector(unsigned(trunc_ln362_3_reg_2504) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln363_3_fu_1488_p2 <= std_logic_vector(unsigned(trunc_ln362_4_reg_2514) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln363_4_fu_1501_p2 <= std_logic_vector(unsigned(trunc_ln362_5_reg_2524) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln363_5_fu_1514_p2 <= std_logic_vector(unsigned(trunc_ln362_6_reg_2534) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln363_6_fu_1531_p2 <= std_logic_vector(unsigned(trunc_ln362_7_fu_1527_p1) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln363_7_fu_1550_p2 <= std_logic_vector(unsigned(trunc_ln362_8_fu_1546_p1) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln363_fu_1439_p2 <= std_logic_vector(unsigned(trunc_ln362_1_reg_2484) + unsigned(sext_ln362_1_fu_1436_p1));
    add_ln371_fu_1601_p2 <= std_logic_vector(unsigned(phi_ln371_reg_1015) + unsigned(ap_const_lv3_1));
    add_ln372_fu_1713_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(j4_0_0_reg_1026));
    add_ln375_fu_1636_p2 <= std_logic_vector(unsigned(j4_0_0_cast18_fu_1626_p1) + unsigned(shl_ln1_reg_2590));
    add_ln379_11_fu_1808_p2 <= std_logic_vector(unsigned(reg_1084) + unsigned(grp_fu_2076_p3));
    add_ln379_13_fu_1813_p2 <= std_logic_vector(unsigned(sums_1_q1) + unsigned(grp_fu_2084_p3));
    add_ln379_15_fu_1818_p2 <= std_logic_vector(unsigned(sums_1_q0) + unsigned(grp_fu_2092_p3));
    add_ln379_1_fu_1781_p2 <= std_logic_vector(unsigned(reg_1064) + unsigned(grp_fu_2036_p3));
    add_ln379_3_fu_1787_p2 <= std_logic_vector(unsigned(reg_1068) + unsigned(grp_fu_2044_p3));
    add_ln379_5_fu_1793_p2 <= std_logic_vector(unsigned(reg_1072) + unsigned(grp_fu_2052_p3));
    add_ln379_7_fu_1798_p2 <= std_logic_vector(unsigned(reg_1076) + unsigned(grp_fu_2060_p3));
    add_ln379_9_fu_1803_p2 <= std_logic_vector(unsigned(reg_1080) + unsigned(grp_fu_2068_p3));
    add_ln386_1_fu_1874_p2 <= std_logic_vector(unsigned(reg_1068) + unsigned(sext_ln386_fu_1863_p1));
    add_ln386_2_fu_1882_p2 <= std_logic_vector(unsigned(reg_1072) + unsigned(sext_ln386_fu_1863_p1));
    add_ln386_3_fu_1889_p2 <= std_logic_vector(unsigned(reg_1076) + unsigned(sext_ln386_fu_1863_p1));
    add_ln386_4_fu_1896_p2 <= std_logic_vector(unsigned(reg_1080) + unsigned(sext_ln386_fu_1863_p1));
    add_ln386_5_fu_1903_p2 <= std_logic_vector(unsigned(reg_1084) + unsigned(sext_ln386_fu_1863_p1));
    add_ln386_6_fu_1910_p2 <= std_logic_vector(unsigned(sums_1_q1) + unsigned(sext_ln386_fu_1863_p1));
    add_ln386_7_fu_1917_p2 <= std_logic_vector(unsigned(sums_1_q0) + unsigned(sext_ln386_fu_1863_p1));
    add_ln386_fu_1866_p2 <= std_logic_vector(unsigned(reg_1064) + unsigned(sext_ln386_fu_1863_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19, icmp_ln369_fu_1589_p2)
    begin
        if ((((icmp_ln369_fu_1589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, icmp_ln369_fu_1589_p2)
    begin
        if (((icmp_ln369_fu_1589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_17_fu_1187_p1 <= j_0_0_reg_991(6 - 1 downto 0);
    empty_22_fu_1691_p1 <= j4_0_0_reg_1026(6 - 1 downto 0);

    grp_fu_1038_p0_assign_proc : process(ap_CS_fsm_state12, sext_ln362_fu_1394_p1, sext_ln362_reg_2478, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_1038_p0 <= sext_ln362_reg_2478;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1038_p0 <= sext_ln362_fu_1394_p1;
        else 
            grp_fu_1038_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1038_p2 <= std_logic_vector(signed(grp_fu_1038_p0) + signed(sums_q0));
    grp_fu_1043_p3 <= grp_fu_1038_p2(15 downto 15);

    grp_fu_1051_p0_assign_proc : process(ap_CS_fsm_state12, sext_ln362_fu_1394_p1, sext_ln362_reg_2478, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_1051_p0 <= sext_ln362_reg_2478;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1051_p0 <= sext_ln362_fu_1394_p1;
        else 
            grp_fu_1051_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1051_p2 <= std_logic_vector(signed(grp_fu_1051_p0) + signed(sums_q1));
    grp_fu_1056_p3 <= grp_fu_1051_p2(15 downto 15);
    grp_fu_1924_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1924_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_fu_1242_p0) * signed(mul_ln355_fu_1242_p1))), 16));
    grp_fu_1932_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1932_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_1_fu_1251_p0) * signed(mul_ln355_1_fu_1251_p1))), 16));
    grp_fu_1940_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1940_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_2_fu_1260_p0) * signed(mul_ln355_2_fu_1260_p1))), 16));
    grp_fu_1948_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1948_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_3_fu_1269_p0) * signed(mul_ln355_3_fu_1269_p1))), 16));
    grp_fu_1956_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1956_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_4_fu_1278_p0) * signed(mul_ln355_4_fu_1278_p1))), 16));
    grp_fu_1964_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1964_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_5_fu_1287_p0) * signed(mul_ln355_5_fu_1287_p1))), 16));
    grp_fu_1972_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1972_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_6_fu_1296_p0) * signed(mul_ln355_6_fu_1296_p1))), 16));
    grp_fu_1980_p0 <= sext_ln355_9_fu_1311_p1(8 - 1 downto 0);
    grp_fu_1980_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln355_7_fu_1305_p0) * signed(mul_ln355_7_fu_1305_p1))), 16));
    grp_fu_2036_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2036_p1 <= grp_fu_2036_p10(15 - 1 downto 0);
    grp_fu_2036_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_0_load_reg_2703),16));
    grp_fu_2044_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2044_p1 <= grp_fu_2044_p10(15 - 1 downto 0);
    grp_fu_2044_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_1_load_reg_2708),16));
    grp_fu_2052_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2052_p1 <= grp_fu_2052_p10(15 - 1 downto 0);
    grp_fu_2052_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_2_load_reg_2713),16));
    grp_fu_2060_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2060_p1 <= grp_fu_2060_p10(15 - 1 downto 0);
    grp_fu_2060_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_3_load_reg_2718),16));
    grp_fu_2068_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2068_p1 <= grp_fu_2068_p10(15 - 1 downto 0);
    grp_fu_2068_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_4_load_reg_2723),16));
    grp_fu_2076_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2076_p1 <= grp_fu_2076_p10(15 - 1 downto 0);
    grp_fu_2076_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_5_load_reg_2728),16));
    grp_fu_2084_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2084_p1 <= grp_fu_2084_p10(15 - 1 downto 0);
    grp_fu_2084_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_6_load_reg_2733),16));
    grp_fu_2092_p0 <= sext_ln379_fu_1754_p1(8 - 1 downto 0);
    grp_fu_2092_p1 <= grp_fu_2092_p10(15 - 1 downto 0);
    grp_fu_2092_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_7_load_reg_2738),16));
    i_1_fu_1595_p2 <= std_logic_vector(unsigned(i2_0_reg_1003) + unsigned(ap_const_lv4_1));
    i_fu_1094_p2 <= std_logic_vector(unsigned(i_0_reg_968) + unsigned(ap_const_lv7_1));
    icmp_ln345_fu_1088_p2 <= "1" when (i_0_reg_968 = ap_const_lv7_40) else "0";
    icmp_ln347_fu_1111_p2 <= "1" when (phi_ln347_reg_980 = ap_const_lv3_7) else "0";
    icmp_ln348_fu_1133_p2 <= "1" when (j_0_0_reg_991 = ap_const_lv7_40) else "0";
    icmp_ln369_fu_1589_p2 <= "1" when (i2_0_reg_1003 = ap_const_lv4_A) else "0";
    icmp_ln371_fu_1612_p2 <= "1" when (phi_ln371_reg_1015 = ap_const_lv3_7) else "0";
    icmp_ln372_fu_1630_p2 <= "1" when (j4_0_0_reg_1026 = ap_const_lv7_40) else "0";
    j4_0_0_cast18_fu_1626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_0_reg_1026),10));
    j_0_0_cast22_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_991),12));
    l1_biases_0_address0 <= zext_ln362_1_fu_1169_p1(5 - 1 downto 0);

    l1_biases_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_biases_0_ce0 <= ap_const_logic_1;
        else 
            l1_biases_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l1_biases_1_address0 <= zext_ln362_1_fu_1169_p1(5 - 1 downto 0);

    l1_biases_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_biases_1_ce0 <= ap_const_logic_1;
        else 
            l1_biases_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_0_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_0_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_0_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_0_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_0_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_0_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_0_ce0 <= ap_const_logic_1;
        else 
            l1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_0_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_0_ce1 <= ap_const_logic_1;
        else 
            l1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_0_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_0_we0 <= ap_const_logic_1;
        else 
            l1_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_1_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_1_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_1_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_1_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_1_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_1_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_1_ce0 <= ap_const_logic_1;
        else 
            l1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_1_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_1_ce1 <= ap_const_logic_1;
        else 
            l1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_1_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_1_we0 <= ap_const_logic_1;
        else 
            l1_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_2_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_2_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_2_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_2_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_2_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_2_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_2_ce0 <= ap_const_logic_1;
        else 
            l1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_2_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_2_ce1 <= ap_const_logic_1;
        else 
            l1_out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    l1_out_2_d0 <= 
        ap_const_lv15_0 when (tmp_6_reg_2509(0) = '1') else 
        add_ln363_2_fu_1475_p2;

    l1_out_2_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_2_we0 <= ap_const_logic_1;
        else 
            l1_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_3_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_3_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_3_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_3_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_3_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_3_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_3_ce0 <= ap_const_logic_1;
        else 
            l1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_3_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_3_ce1 <= ap_const_logic_1;
        else 
            l1_out_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    l1_out_3_d0 <= 
        ap_const_lv15_0 when (tmp_7_reg_2519(0) = '1') else 
        add_ln363_3_fu_1488_p2;

    l1_out_3_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_3_we0 <= ap_const_logic_1;
        else 
            l1_out_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_4_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_4_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_4_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_4_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_4_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_4_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_4_ce0 <= ap_const_logic_1;
        else 
            l1_out_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_4_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_4_ce1 <= ap_const_logic_1;
        else 
            l1_out_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    l1_out_4_d0 <= 
        ap_const_lv15_0 when (tmp_8_reg_2529(0) = '1') else 
        add_ln363_4_fu_1501_p2;

    l1_out_4_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_4_we0 <= ap_const_logic_1;
        else 
            l1_out_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_5_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_5_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_5_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_5_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_5_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_5_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_5_ce0 <= ap_const_logic_1;
        else 
            l1_out_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_5_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_5_ce1 <= ap_const_logic_1;
        else 
            l1_out_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    l1_out_5_d0 <= 
        ap_const_lv15_0 when (tmp_9_reg_2539(0) = '1') else 
        add_ln363_5_fu_1514_p2;

    l1_out_5_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_5_we0 <= ap_const_logic_1;
        else 
            l1_out_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_6_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_6_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_6_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_6_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_6_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_6_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_6_ce0 <= ap_const_logic_1;
        else 
            l1_out_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_6_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_6_ce1 <= ap_const_logic_1;
        else 
            l1_out_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    l1_out_6_d0 <= 
        ap_const_lv15_0 when (grp_fu_1056_p3(0) = '1') else 
        add_ln363_6_fu_1531_p2;

    l1_out_6_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_6_we0 <= ap_const_logic_1;
        else 
            l1_out_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_7_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15, zext_ln362_fu_1424_p1, zext_ln379_fu_1679_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_7_address0 <= zext_ln379_fu_1679_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_7_address0 <= zext_ln362_fu_1424_p1(6 - 1 downto 0);
        else 
            l1_out_7_address0 <= "XXXXXX";
        end if; 
    end process;

    l1_out_7_address1 <= zext_ln379_1_fu_1701_p1(6 - 1 downto 0);

    l1_out_7_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            l1_out_7_ce0 <= ap_const_logic_1;
        else 
            l1_out_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_7_ce1_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            l1_out_7_ce1 <= ap_const_logic_1;
        else 
            l1_out_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    l1_out_7_d0 <= 
        ap_const_lv15_0 when (grp_fu_1043_p3(0) = '1') else 
        add_ln363_7_fu_1550_p2;

    l1_out_7_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            l1_out_7_we0 <= ap_const_logic_1;
        else 
            l1_out_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    l1_weights_0_address0 <= zext_ln351_fu_1154_p1(11 - 1 downto 0);

    l1_weights_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_weights_0_ce0 <= ap_const_logic_1;
        else 
            l1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l1_weights_1_address0 <= zext_ln351_1_fu_1208_p1(11 - 1 downto 0);

    l1_weights_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            l1_weights_1_ce0 <= ap_const_logic_1;
        else 
            l1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_biases_0_address0 <= zext_ln386_1_fu_1833_p1(3 - 1 downto 0);

    l2_biases_0_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            l2_biases_0_ce0 <= ap_const_logic_1;
        else 
            l2_biases_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_biases_1_address0 <= zext_ln386_1_fu_1833_p1(3 - 1 downto 0);

    l2_biases_1_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            l2_biases_1_ce0 <= ap_const_logic_1;
        else 
            l2_biases_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_weights_0_address0 <= zext_ln375_fu_1651_p1(9 - 1 downto 0);

    l2_weights_0_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            l2_weights_0_ce0 <= ap_const_logic_1;
        else 
            l2_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_weights_1_address0 <= zext_ln375_1_fu_1674_p1(9 - 1 downto 0);

    l2_weights_1_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            l2_weights_1_ce0 <= ap_const_logic_1;
        else 
            l2_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_1144_p4 <= add_ln351_fu_1139_p2(11 downto 1);
    lshr_ln2_fu_1823_p4 <= i2_0_reg_1003(3 downto 1);
    lshr_ln351_1_fu_1201_p3 <= (trunc_ln351_reg_2200 & tmp_4_fu_1191_p4);
    lshr_ln375_1_fu_1666_p3 <= (i2_0_reg_1003 & tmp_5_fu_1656_p4);
    lshr_ln3_fu_1641_p4 <= add_ln375_fu_1636_p2(9 downto 1);
    lshr_ln_fu_1159_p4 <= i_0_reg_968(6 downto 1);
    mul_ln355_1_fu_1251_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_1_fu_1251_p1 <= sample_1_load_reg_2303;
    mul_ln355_2_fu_1260_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_2_fu_1260_p1 <= sample_2_load_reg_2308;
    mul_ln355_3_fu_1269_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_3_fu_1269_p1 <= sample_3_load_reg_2318;
    mul_ln355_4_fu_1278_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_4_fu_1278_p1 <= sample_4_load_reg_2328;
    mul_ln355_5_fu_1287_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_5_fu_1287_p1 <= sample_5_load_reg_2333;
    mul_ln355_6_fu_1296_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_6_fu_1296_p1 <= sample_6_load_reg_2338;
    mul_ln355_7_fu_1305_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_7_fu_1305_p1 <= sample_7_load_reg_2343;
    mul_ln355_fu_1242_p0 <= sext_ln355_fu_1236_p1(8 - 1 downto 0);
    mul_ln355_fu_1242_p1 <= sample_0_load_reg_2298;
    mul_ln379_10_fu_2000_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_10_fu_2000_p1 <= mul_ln379_10_fu_2000_p10(15 - 1 downto 0);
    mul_ln379_10_fu_2000_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_2_q1),16));
    mul_ln379_11_fu_2006_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_11_fu_2006_p1 <= mul_ln379_11_fu_2006_p10(15 - 1 downto 0);
    mul_ln379_11_fu_2006_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_3_q1),16));
    mul_ln379_12_fu_2012_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_12_fu_2012_p1 <= mul_ln379_12_fu_2012_p10(15 - 1 downto 0);
    mul_ln379_12_fu_2012_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_4_q1),16));
    mul_ln379_13_fu_2018_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_13_fu_2018_p1 <= mul_ln379_13_fu_2018_p10(15 - 1 downto 0);
    mul_ln379_13_fu_2018_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_5_q1),16));
    mul_ln379_14_fu_2024_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_14_fu_2024_p1 <= mul_ln379_14_fu_2024_p10(15 - 1 downto 0);
    mul_ln379_14_fu_2024_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_6_q1),16));
    mul_ln379_15_fu_2030_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_15_fu_2030_p1 <= mul_ln379_15_fu_2030_p10(15 - 1 downto 0);
    mul_ln379_15_fu_2030_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_7_q1),16));
    mul_ln379_8_fu_1988_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_8_fu_1988_p1 <= mul_ln379_8_fu_1988_p10(15 - 1 downto 0);
    mul_ln379_8_fu_1988_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_0_q1),16));
    mul_ln379_9_fu_1994_p0 <= sext_ln379_1_fu_1719_p1(8 - 1 downto 0);
    mul_ln379_9_fu_1994_p1 <= mul_ln379_9_fu_1994_p10(15 - 1 downto 0);
    mul_ln379_9_fu_1994_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_out_1_q1),16));
    or_ln348_fu_1219_p2 <= (empty_17_reg_2283 or ap_const_lv6_1);
    or_ln372_fu_1695_p2 <= (empty_22_fu_1691_p1 or ap_const_lv6_1);
    prediction_0_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_0_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_0_ce0 <= ap_const_logic_1;
        else 
            prediction_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_0_d0 <= std_logic_vector(unsigned(reg_1064) + unsigned(sext_ln386_fu_1863_p1));

    prediction_0_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_0_we0 <= ap_const_logic_1;
        else 
            prediction_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_1_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_1_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_1_ce0 <= ap_const_logic_1;
        else 
            prediction_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_1_d0 <= std_logic_vector(unsigned(reg_1068) + unsigned(sext_ln386_fu_1863_p1));

    prediction_1_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_1_we0 <= ap_const_logic_1;
        else 
            prediction_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_2_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_2_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_2_ce0 <= ap_const_logic_1;
        else 
            prediction_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_2_d0 <= std_logic_vector(unsigned(reg_1072) + unsigned(sext_ln386_fu_1863_p1));

    prediction_2_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_2_we0 <= ap_const_logic_1;
        else 
            prediction_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_3_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_3_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_3_ce0 <= ap_const_logic_1;
        else 
            prediction_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_3_d0 <= std_logic_vector(unsigned(reg_1076) + unsigned(sext_ln386_fu_1863_p1));

    prediction_3_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_3_we0 <= ap_const_logic_1;
        else 
            prediction_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_4_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_4_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_4_ce0 <= ap_const_logic_1;
        else 
            prediction_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_4_d0 <= std_logic_vector(unsigned(reg_1080) + unsigned(sext_ln386_fu_1863_p1));

    prediction_4_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_4_we0 <= ap_const_logic_1;
        else 
            prediction_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_5_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_5_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_5_ce0 <= ap_const_logic_1;
        else 
            prediction_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_5_d0 <= std_logic_vector(unsigned(reg_1084) + unsigned(sext_ln386_fu_1863_p1));

    prediction_5_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_5_we0 <= ap_const_logic_1;
        else 
            prediction_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_6_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_6_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_6_ce0 <= ap_const_logic_1;
        else 
            prediction_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_6_d0 <= std_logic_vector(unsigned(sums_1_q1) + unsigned(sext_ln386_fu_1863_p1));

    prediction_6_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_6_we0 <= ap_const_logic_1;
        else 
            prediction_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_7_address0 <= zext_ln386_fu_1851_p1(4 - 1 downto 0);

    prediction_7_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_7_ce0 <= ap_const_logic_1;
        else 
            prediction_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_7_d0 <= std_logic_vector(unsigned(sums_1_q0) + unsigned(sext_ln386_fu_1863_p1));

    prediction_7_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_7_we0 <= ap_const_logic_1;
        else 
            prediction_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_0_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_0_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_0_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_0_ce0 <= ap_const_logic_1;
        else 
            sample_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_1_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_1_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_1_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_1_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_1_ce0 <= ap_const_logic_1;
        else 
            sample_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_2_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_2_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_2_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_2_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_2_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_2_ce0 <= ap_const_logic_1;
        else 
            sample_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_3_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_3_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_3_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_3_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_3_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_3_ce0 <= ap_const_logic_1;
        else 
            sample_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_4_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_4_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_4_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_4_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_4_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_4_ce0 <= ap_const_logic_1;
        else 
            sample_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_5_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_5_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_5_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_5_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_5_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_5_ce0 <= ap_const_logic_1;
        else 
            sample_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_6_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_6_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_6_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_6_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_6_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_6_ce0 <= ap_const_logic_1;
        else 
            sample_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_7_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln355_fu_1175_p1, zext_ln355_1_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_7_address0 <= zext_ln355_1_fu_1224_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_7_address0 <= zext_ln355_fu_1175_p1(6 - 1 downto 0);
        else 
            sample_7_address0 <= "XXXXXX";
        end if; 
    end process;


    sample_7_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_7_ce0 <= ap_const_logic_1;
        else 
            sample_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln362_fu_1386_p3 <= 
        l1_biases_1_q0 when (trunc_ln362_fu_1382_p1(0) = '1') else 
        l1_biases_0_q0;
    select_ln363_1_fu_1462_p3 <= 
        ap_const_lv15_0 when (tmp_3_reg_2499(0) = '1') else 
        add_ln363_1_fu_1457_p2;
    select_ln363_2_fu_1480_p3 <= 
        ap_const_lv15_0 when (tmp_6_reg_2509(0) = '1') else 
        add_ln363_2_fu_1475_p2;
    select_ln363_3_fu_1493_p3 <= 
        ap_const_lv15_0 when (tmp_7_reg_2519(0) = '1') else 
        add_ln363_3_fu_1488_p2;
    select_ln363_4_fu_1506_p3 <= 
        ap_const_lv15_0 when (tmp_8_reg_2529(0) = '1') else 
        add_ln363_4_fu_1501_p2;
    select_ln363_5_fu_1519_p3 <= 
        ap_const_lv15_0 when (tmp_9_reg_2539(0) = '1') else 
        add_ln363_5_fu_1514_p2;
    select_ln363_6_fu_1537_p3 <= 
        ap_const_lv15_0 when (grp_fu_1056_p3(0) = '1') else 
        add_ln363_6_fu_1531_p2;
    select_ln363_7_fu_1556_p3 <= 
        ap_const_lv15_0 when (grp_fu_1043_p3(0) = '1') else 
        add_ln363_7_fu_1550_p2;
    select_ln363_fu_1444_p3 <= 
        ap_const_lv15_0 when (tmp_2_reg_2489(0) = '1') else 
        add_ln363_fu_1439_p2;
    select_ln386_fu_1843_p3 <= 
        l2_biases_1_q0 when (trunc_ln386_fu_1839_p1(0) = '1') else 
        l2_biases_0_q0;
        sext_ln355_9_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l1_weights_1_load_reg_2348),16));

        sext_ln355_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l1_weights_0_load_reg_2228),16));

        sext_ln362_1_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln362_reg_2473),15));

        sext_ln362_fu_1394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln362_fu_1386_p3),16));

        sext_ln379_1_fu_1719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l2_weights_1_load_reg_2653),16));

        sext_ln379_fu_1754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l2_weights_0_load_reg_2603),16));

        sext_ln386_fu_1863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln386_reg_2823),16));

    shl_ln1_fu_1618_p3 <= (i2_0_reg_1003 & ap_const_lv6_0);
    shl_ln_fu_1121_p3 <= (trunc_ln351_fu_1117_p1 & ap_const_lv6_0);

    sums_1_address0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln372_fu_1630_p2, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state28, zext_ln371_fu_1607_p1, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            sums_1_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            sums_1_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            sums_1_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            sums_1_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((((icmp_ln372_fu_1630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln372_fu_1630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            sums_1_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sums_1_address0 <= zext_ln371_fu_1607_p1(3 - 1 downto 0);
        else 
            sums_1_address0 <= "XXX";
        end if; 
    end process;


    sums_1_address1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state31, ap_CS_fsm_state21, icmp_ln372_fu_1630_p2, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            sums_1_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            sums_1_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            sums_1_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            sums_1_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((((icmp_ln372_fu_1630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln372_fu_1630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            sums_1_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sums_1_address1 <= "XXX";
        end if; 
    end process;


    sums_1_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln372_fu_1630_p2, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln372_fu_1630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln372_fu_1630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            sums_1_ce0 <= ap_const_logic_1;
        else 
            sums_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sums_1_ce1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state31, ap_CS_fsm_state21, icmp_ln372_fu_1630_p2, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln372_fu_1630_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln372_fu_1630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            sums_1_ce1 <= ap_const_logic_1;
        else 
            sums_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sums_1_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state25, add_ln379_7_reg_2788, add_ln379_11_reg_2798, add_ln379_15_reg_2808, ap_CS_fsm_state32, add_ln386_3_reg_2833, add_ln386_5_reg_2843, add_ln386_7_reg_2853, ap_CS_fsm_state35, ap_CS_fsm_state28, add_ln379_3_fu_1787_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, add_ln386_1_fu_1874_p2, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sums_1_d0 <= add_ln386_7_reg_2853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sums_1_d0 <= add_ln386_5_reg_2843;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sums_1_d0 <= add_ln386_3_reg_2833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sums_1_d0 <= add_ln386_1_fu_1874_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sums_1_d0 <= add_ln379_15_reg_2808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sums_1_d0 <= add_ln379_11_reg_2798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sums_1_d0 <= add_ln379_7_reg_2788;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sums_1_d0 <= add_ln379_3_fu_1787_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sums_1_d0 <= ap_const_lv16_0;
        else 
            sums_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sums_1_d1_assign_proc : process(add_ln379_5_reg_2783, ap_CS_fsm_state25, add_ln379_9_reg_2793, add_ln379_13_reg_2803, add_ln386_2_reg_2828, ap_CS_fsm_state32, add_ln386_4_reg_2838, add_ln386_6_reg_2848, ap_CS_fsm_state35, ap_CS_fsm_state28, add_ln379_1_fu_1781_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, add_ln386_fu_1866_p2, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sums_1_d1 <= add_ln386_6_reg_2848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sums_1_d1 <= add_ln386_4_reg_2838;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sums_1_d1 <= add_ln386_2_reg_2828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sums_1_d1 <= add_ln386_fu_1866_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sums_1_d1 <= add_ln379_13_reg_2803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sums_1_d1 <= add_ln379_9_reg_2793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sums_1_d1 <= add_ln379_5_reg_2783;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sums_1_d1 <= add_ln379_1_fu_1781_p2;
        else 
            sums_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sums_1_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            sums_1_we0 <= ap_const_logic_1;
        else 
            sums_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sums_1_we1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state28, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            sums_1_we1 <= ap_const_logic_1;
        else 
            sums_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sums_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln348_fu_1133_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, zext_ln347_fu_1106_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sums_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sums_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sums_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sums_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((((icmp_ln348_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln348_fu_1133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            sums_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sums_address0 <= zext_ln347_fu_1106_p1(3 - 1 downto 0);
        else 
            sums_address0 <= "XXX";
        end if; 
    end process;


    sums_address1_assign_proc : process(ap_CS_fsm_state4, icmp_ln348_fu_1133_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sums_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sums_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sums_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sums_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((((icmp_ln348_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln348_fu_1133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            sums_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sums_address1 <= "XXX";
        end if; 
    end process;


    sums_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln348_fu_1133_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln348_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln348_fu_1133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            sums_ce0 <= ap_const_logic_1;
        else 
            sums_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sums_ce1_assign_proc : process(ap_CS_fsm_state4, icmp_ln348_fu_1133_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln348_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln348_fu_1133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            sums_ce1 <= ap_const_logic_1;
        else 
            sums_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sums_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, add_ln355_7_reg_2448, add_ln355_11_reg_2458, add_ln355_15_reg_2468, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, add_ln355_3_fu_1351_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln363_1_fu_1470_p1, ap_CS_fsm_state16, zext_ln363_3_fu_1569_p1, ap_CS_fsm_state17, zext_ln363_5_fu_1577_p1, zext_ln363_7_fu_1585_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sums_d0 <= zext_ln363_7_fu_1585_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sums_d0 <= zext_ln363_5_fu_1577_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sums_d0 <= zext_ln363_3_fu_1569_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sums_d0 <= zext_ln363_1_fu_1470_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sums_d0 <= add_ln355_15_reg_2468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sums_d0 <= add_ln355_11_reg_2458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sums_d0 <= add_ln355_7_reg_2448;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sums_d0 <= add_ln355_3_fu_1351_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sums_d0 <= ap_const_lv16_0;
        else 
            sums_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sums_d1_assign_proc : process(add_ln355_5_reg_2443, ap_CS_fsm_state8, add_ln355_9_reg_2453, add_ln355_13_reg_2463, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, add_ln355_1_fu_1346_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln363_fu_1452_p1, ap_CS_fsm_state16, zext_ln363_2_fu_1565_p1, ap_CS_fsm_state17, zext_ln363_4_fu_1573_p1, zext_ln363_6_fu_1581_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sums_d1 <= zext_ln363_6_fu_1581_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sums_d1 <= zext_ln363_4_fu_1573_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sums_d1 <= zext_ln363_2_fu_1565_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sums_d1 <= zext_ln363_fu_1452_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sums_d1 <= add_ln355_13_reg_2463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sums_d1 <= add_ln355_9_reg_2453;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sums_d1 <= add_ln355_5_reg_2443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sums_d1 <= add_ln355_1_fu_1346_p2;
        else 
            sums_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sums_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sums_we0 <= ap_const_logic_1;
        else 
            sums_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sums_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sums_we1 <= ap_const_logic_1;
        else 
            sums_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_1191_p4 <= j_0_0_reg_991(5 downto 1);
    tmp_5_fu_1656_p4 <= j4_0_0_reg_1026(5 downto 1);
    trunc_ln351_fu_1117_p1 <= i_0_reg_968(6 - 1 downto 0);
    trunc_ln362_1_fu_1400_p1 <= sums_q0(15 - 1 downto 0);
    trunc_ln362_2_fu_1404_p1 <= sums_q1(15 - 1 downto 0);
    trunc_ln362_3_fu_1408_p1 <= sums_q1(15 - 1 downto 0);
    trunc_ln362_4_fu_1412_p1 <= sums_q0(15 - 1 downto 0);
    trunc_ln362_5_fu_1416_p1 <= sums_q1(15 - 1 downto 0);
    trunc_ln362_6_fu_1420_p1 <= sums_q0(15 - 1 downto 0);
    trunc_ln362_7_fu_1527_p1 <= sums_q1(15 - 1 downto 0);
    trunc_ln362_8_fu_1546_p1 <= sums_q0(15 - 1 downto 0);
    trunc_ln362_fu_1382_p1 <= i_0_reg_968(1 - 1 downto 0);
    trunc_ln386_fu_1839_p1 <= i2_0_reg_1003(1 - 1 downto 0);
    zext_ln347_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln347_reg_980),64));
    zext_ln351_1_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln351_1_fu_1201_p3),64));
    zext_ln351_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_1144_p4),64));
    zext_ln355_1_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln348_fu_1219_p2),64));
    zext_ln355_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_991),64));
    zext_ln362_1_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_1159_p4),64));
    zext_ln362_fu_1424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_968),64));
    zext_ln363_1_fu_1470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_1_fu_1462_p3),16));
    zext_ln363_2_fu_1565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_2_reg_2544),16));
    zext_ln363_3_fu_1569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_3_reg_2549),16));
    zext_ln363_4_fu_1573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_4_reg_2554),16));
    zext_ln363_5_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_5_reg_2559),16));
    zext_ln363_6_fu_1581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_6_reg_2564),16));
    zext_ln363_7_fu_1585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_7_reg_2569),16));
    zext_ln363_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln363_fu_1444_p3),16));
    zext_ln371_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln371_reg_1015),64));
    zext_ln375_1_fu_1674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln375_1_fu_1666_p3),64));
    zext_ln375_fu_1651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_1641_p4),64));
    zext_ln379_1_fu_1701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln372_fu_1695_p2),64));
    zext_ln379_fu_1679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_0_reg_1026),64));
    zext_ln386_1_fu_1833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_1823_p4),64));
    zext_ln386_fu_1851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_1003),64));
end behav;
