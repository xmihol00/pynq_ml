-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weipcA_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weipcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110010", 1 => "11101011", 2 => "11100010", 3 => "01001011", 
    4 => "00001001", 5 => "11110101", 6 => "10111010", 7 => "11001101", 
    8 => "11100000", 9 => "01011110", 10 => "11100000", 11 => "00011011", 
    12 => "00000111", 13 => "10100111", 14 => "01000110", 15 => "00110010", 
    16 => "10101110", 17 => "11101111", 18 => "10101101", 19 => "10001100", 
    20 => "10000011", 21 => "01011100", 22 => "10101100", 23 => "10110100", 
    24 => "11010110", 25 => "10100011", 26 => "11111110", 27 => "10101011", 
    28 => "10001001", 29 => "10001011", 30 => "01111111", 31 => "01000101", 
    32 => "01010011", 33 => "10110001", 34 => "00100010", 35 => "10101110", 
    36 => "01101100", 37 => "01010100", 38 => "01101101", 39 => "00011100", 
    40 => "01000111", 41 => "11011111", 42 => "10110111", 43 => "00010011", 
    44 => "01001111", 45 => "00011000", 46 => "11110010", 47 => "11001001", 
    48 => "00000101", 49 => "10101100", 50 => "10001011", 51 => "01010000", 
    52 => "01011001", 53 => "01000111", 54 => "11010011", 55 => "11101000", 
    56 => "00101101", 57 => "00000001", 58 => "10011110", 59 => "01010100", 
    60 => "10111000", 61 => "00111010", 62 => "01101101", 63 => "10010011", 
    64 => "00001101", 65 => "11000101", 66 => "10010011", 67 => "11111100", 
    68 => "11101000", 69 => "01100010", 70 => "11100010", 71 => "01011001", 
    72 => "10110001", 73 => "11011010", 74 => "01111001", 75 => "00101101", 
    76 => "11001011", 77 => "00000000", 78 => "01001111", 79 => "10111001", 
    80 => "11110001", 81 => "10001010", 82 => "10111111", 83 => "00110011", 
    84 => "00001100", 85 => "11000011", 86 => "10100001", 87 => "10011011", 
    88 => "01111000", 89 => "10010010", 90 => "01110011", 91 => "00111011", 
    92 => "00011001", 93 => "01000110", 94 => "10011011", 95 => "01000001", 
    96 => "00101011", 97 => "00000101", 98 => "00000000", 99 => "10110010", 
    100 => "10101010", 101 => "10000001", 102 => "11110100", 103 to 104=> "01101000", 
    105 => "11110011", 106 => "01010110", 107 => "01010111", 108 => "01101000", 
    109 => "10011011", 110 => "11111001", 111 => "01000100", 112 => "01110101", 
    113 => "10000111", 114 => "11100101", 115 => "11011111", 116 => "10000111", 
    117 => "01000010", 118 => "10100101", 119 => "01000001", 120 => "00101000", 
    121 => "10001001", 122 => "00111111", 123 => "10111001", 124 => "01010000", 
    125 => "10100000", 126 => "01000011", 127 => "00101000", 128 => "11001011", 
    129 => "10011110", 130 => "00100001", 131 => "01000101", 132 => "00011001", 
    133 => "00101011", 134 => "01000001", 135 => "11100000", 136 => "10011000", 
    137 => "10110001", 138 => "10110000", 139 => "11101101", 140 => "10001011", 
    141 => "01000110", 142 => "00110001", 143 => "10011111", 144 => "00101001", 
    145 => "00011101", 146 => "00100011", 147 => "00111000", 148 => "11110010", 
    149 => "11011010", 150 => "00010101", 151 => "01100000", 152 => "11100111", 
    153 => "11001111", 154 => "01100000", 155 => "10001000", 156 => "11100101", 
    157 => "01110111", 158 => "01101010", 159 => "11111010", 160 => "00001010", 
    161 => "10100011", 162 => "11000011", 163 => "00111000", 164 => "00011011", 
    165 => "00111101", 166 => "10001011", 167 => "10011010", 168 => "01000001", 
    169 => "11110011", 170 => "11011001", 171 => "10011000", 172 => "00001000", 
    173 => "00010101", 174 => "00111111", 175 => "10100010", 176 => "01111000", 
    177 => "00011100", 178 => "11100110", 179 => "01111101", 180 => "00001111", 
    181 => "01111110", 182 => "00110010", 183 => "00110000", 184 => "10110110", 
    185 => "11011111", 186 => "01100111", 187 => "01110010", 188 => "00001101", 
    189 => "10000110", 190 => "00111011", 191 => "10100011", 192 => "10011111", 
    193 => "10010100", 194 => "00000100", 195 => "01100001", 196 => "10111010", 
    197 => "01100011", 198 => "01010110", 199 => "00011110", 200 => "00011100", 
    201 => "01110101", 202 => "01010111", 203 => "01101001", 204 => "01001001", 
    205 => "00011011", 206 => "11111010", 207 => "11000011", 208 => "01000010", 
    209 => "00110001", 210 => "00011001", 211 => "11100100", 212 => "10000100", 
    213 => "01010101", 214 => "01011010", 215 => "00101110", 216 => "01000001", 
    217 => "11100010", 218 => "01101001", 219 => "11011000", 220 => "01110011", 
    221 => "00101000", 222 => "10010111", 223 => "01111001", 224 => "01001011", 
    225 => "10011111", 226 to 227=> "10101101", 228 => "11110001", 229 => "11100000", 
    230 => "10110100", 231 => "10101011", 232 => "00111011", 233 => "11001011", 
    234 => "01010000", 235 => "11111101", 236 => "10111010", 237 => "01110101", 
    238 => "00100001", 239 => "00010111", 240 => "10111011", 241 => "00000000", 
    242 => "00101010", 243 => "10001110", 244 => "00111101", 245 => "01100000", 
    246 => "11101111", 247 => "00001000", 248 => "01100101", 249 to 250=> "00000100", 
    251 => "11010011", 252 => "11100101", 253 => "10010100", 254 => "01111101", 
    255 => "01000110" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weipcA is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weipcA is
    component mlp_kernel_l1_weipcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weipcA_rom_U :  component mlp_kernel_l1_weipcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


