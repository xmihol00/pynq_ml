-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weikbM_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weikbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000100", 1 => "11100101", 2 => "11011110", 3 => "01011100", 
    4 => "01000100", 5 => "11011110", 6 => "11101111", 7 => "10111010", 
    8 => "00001010", 9 => "10101100", 10 => "11011001", 11 => "10111110", 
    12 => "11001010", 13 => "10110010", 14 => "11010011", 15 => "10110010", 
    16 => "00001011", 17 => "10110010", 18 => "01011100", 19 => "10111101", 
    20 => "01100110", 21 => "00101001", 22 => "01000111", 23 => "11001111", 
    24 => "01011101", 25 => "01010100", 26 => "10010010", 27 => "01110101", 
    28 => "00010011", 29 => "10010011", 30 => "00011000", 31 => "11100001", 
    32 => "01111011", 33 => "00100100", 34 => "11011111", 35 => "11001011", 
    36 => "00100110", 37 => "11000101", 38 => "10001100", 39 => "10101000", 
    40 => "00010110", 41 => "11011011", 42 => "11101110", 43 => "01100111", 
    44 => "01111001", 45 => "01000110", 46 => "10111110", 47 => "01101010", 
    48 => "00101100", 49 => "00110011", 50 => "10000001", 51 => "11000100", 
    52 => "10100110", 53 => "01110010", 54 => "11000011", 55 => "01100101", 
    56 => "01111011", 57 => "01010111", 58 => "00001100", 59 => "01011011", 
    60 => "00101110", 61 => "00110110", 62 => "10101100", 63 => "00001100", 
    64 => "01000100", 65 => "01001001", 66 => "00100000", 67 => "11100010", 
    68 => "10110101", 69 => "01100100", 70 => "00111100", 71 => "10000100", 
    72 => "01101000", 73 => "10100111", 74 => "01000100", 75 => "10100110", 
    76 => "01000011", 77 => "11011010", 78 => "00111100", 79 => "00000011", 
    80 => "01001110", 81 => "10100001", 82 => "10001001", 83 => "10101001", 
    84 => "00101010", 85 => "01011100", 86 => "11010101", 87 => "00000100", 
    88 => "11110001", 89 => "11001111", 90 => "11111011", 91 => "01100110", 
    92 => "11100110", 93 => "00111101", 94 => "10110100", 95 to 96=> "00111000", 
    97 => "01110000", 98 => "10101011", 99 => "01001011", 100 => "01111001", 
    101 => "11010111", 102 => "10001110", 103 => "11110000", 104 => "10011000", 
    105 => "10100100", 106 => "11010001", 107 => "11011110", 108 => "10110000", 
    109 => "11100101", 110 => "10000101", 111 => "10011100", 112 => "10111011", 
    113 => "10111010", 114 => "01110000", 115 => "00000101", 116 => "10110011", 
    117 => "11000011", 118 => "11101011", 119 => "10011000", 120 => "00111101", 
    121 => "10011001", 122 => "11100001", 123 => "11011100", 124 => "11101111", 
    125 => "11111101", 126 => "00110000", 127 => "01001100", 128 => "00110100", 
    129 => "10111100", 130 => "10101001", 131 => "11110010", 132 => "10110100", 
    133 => "11101001", 134 => "01110011", 135 => "00100010", 136 => "00011010", 
    137 => "10000010", 138 => "01110001", 139 => "10001110", 140 => "01011110", 
    141 => "00101110", 142 => "00010101", 143 => "11001000", 144 => "11010100", 
    145 => "01111000", 146 => "00011100", 147 => "10100010", 148 => "00011000", 
    149 => "01111101", 150 => "10111011", 151 => "11001000", 152 => "01111111", 
    153 => "01101011", 154 => "01001111", 155 => "11000000", 156 => "01111011", 
    157 => "00100100", 158 => "10101000", 159 => "01001010", 160 => "01111100", 
    161 => "10010110", 162 => "11001000", 163 => "01100111", 164 => "00001110", 
    165 => "11001011", 166 => "11011010", 167 => "00110111", 168 => "11010010", 
    169 => "10101100", 170 => "10111011", 171 => "10101100", 172 => "01000111", 
    173 => "11001010", 174 => "01111110", 175 => "10111110", 176 => "00000100", 
    177 => "01101101", 178 => "11011011", 179 => "10000111", 180 => "01010111", 
    181 => "10011100", 182 => "10100111", 183 => "11111001", 184 => "01110111", 
    185 => "00101010", 186 => "00111011", 187 => "10101110", 188 => "10110010", 
    189 => "10110000", 190 => "10010010", 191 => "11110000", 192 => "01110001", 
    193 => "00110010", 194 => "00100101", 195 => "00111011", 196 => "01100010", 
    197 => "00000111", 198 => "00000010", 199 => "00111010", 200 => "11011010", 
    201 => "01011110", 202 => "11011110", 203 => "11100100", 204 => "10001100", 
    205 => "11011111", 206 => "01100001", 207 => "11100100", 208 => "11001000", 
    209 => "11010001", 210 => "11101001", 211 => "00011110", 212 => "01010101", 
    213 => "01111001", 214 => "00010110", 215 => "10110111", 216 => "10101101", 
    217 => "11001101", 218 => "01001010", 219 => "10001110", 220 => "00111111", 
    221 => "01111000", 222 => "11111011", 223 => "10101111", 224 => "01110000", 
    225 => "01100011", 226 => "01111010", 227 => "01000111", 228 => "10100010", 
    229 => "01100110", 230 => "01110111", 231 => "10001111", 232 => "01110101", 
    233 => "01111010", 234 => "00010100", 235 => "11100011", 236 => "11011101", 
    237 => "10001000", 238 => "01000110", 239 => "01001101", 240 => "01000010", 
    241 => "10010011", 242 => "10111100", 243 => "10111111", 244 => "11001100", 
    245 => "10111111", 246 => "10100010", 247 => "01101001", 248 => "01110100", 
    249 => "00110111", 250 => "10000100", 251 => "11000001", 252 => "00101110", 
    253 => "01010000", 254 => "01000000", 255 => "01000010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weikbM is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weikbM is
    component mlp_kernel_l1_weikbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weikbM_rom_U :  component mlp_kernel_l1_weikbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


