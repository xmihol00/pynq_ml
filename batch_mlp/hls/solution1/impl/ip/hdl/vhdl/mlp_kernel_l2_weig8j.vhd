-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l2_weig8j_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 320
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l2_weig8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000110", 1 => "00110010", 2 => "00000000", 3 => "00011011", 
    4 => "01111110", 5 => "01101111", 6 => "11101010", 7 => "11100011", 
    8 => "01000110", 9 => "10111110", 10 => "01001000", 11 => "01000001", 
    12 => "00010100", 13 => "01110001", 14 => "00101100", 15 => "00100110", 
    16 => "10100101", 17 => "11101000", 18 => "01000111", 19 => "11101111", 
    20 => "01101111", 21 => "01111101", 22 => "00010101", 23 => "00001000", 
    24 => "00010110", 25 => "00100000", 26 => "10101101", 27 => "00111110", 
    28 => "00111000", 29 => "01000110", 30 => "11000101", 31 => "11101111", 
    32 => "10011110", 33 => "11101001", 34 => "00011111", 35 => "10001100", 
    36 => "11011110", 37 => "00110001", 38 => "11101101", 39 => "00011100", 
    40 => "10001111", 41 => "11100111", 42 => "10111011", 43 => "10001100", 
    44 => "01110111", 45 => "10011000", 46 => "11000111", 47 => "11110000", 
    48 => "01001110", 49 => "11001000", 50 => "01110101", 51 => "10010001", 
    52 => "10100111", 53 => "11100010", 54 => "01101110", 55 => "01000101", 
    56 => "11010001", 57 => "10001010", 58 => "11101101", 59 => "01100101", 
    60 => "11011000", 61 => "11001101", 62 => "11111000", 63 => "11010111", 
    64 => "11001001", 65 => "00010100", 66 => "10111110", 67 => "00011110", 
    68 => "00010000", 69 => "11000100", 70 => "11011011", 71 => "00000100", 
    72 => "10010010", 73 => "11011001", 74 => "00000101", 75 => "00101000", 
    76 => "10100000", 77 => "00010001", 78 => "01011101", 79 => "11100001", 
    80 => "10010110", 81 => "11110111", 82 => "00000100", 83 => "11100010", 
    84 => "11110101", 85 => "11001111", 86 => "00101100", 87 => "00110000", 
    88 => "00101101", 89 => "00101011", 90 => "10000101", 91 => "11010110", 
    92 => "01010101", 93 => "01110001", 94 => "10001011", 95 => "11110100", 
    96 => "11101101", 97 => "01110011", 98 => "01001111", 99 => "10010010", 
    100 => "11100011", 101 => "00011010", 102 => "01100010", 103 => "01100110", 
    104 => "00000000", 105 => "10001000", 106 => "11100111", 107 => "01110000", 
    108 => "01100000", 109 => "10100011", 110 => "00101100", 111 => "10010010", 
    112 => "11111000", 113 => "01110001", 114 => "00010101", 115 => "11110011", 
    116 => "10011111", 117 => "11100010", 118 => "10111011", 119 => "00111001", 
    120 => "00011111", 121 => "00111001", 122 => "10101010", 123 => "10100111", 
    124 => "00011011", 125 => "10100111", 126 => "11111110", 127 => "00000110", 
    128 => "10011101", 129 => "10110011", 130 => "10110001", 131 => "10010100", 
    132 => "10110010", 133 => "11011011", 134 => "01001110", 135 => "11110000", 
    136 => "10101101", 137 => "11101111", 138 => "00011100", 139 => "10011001", 
    140 => "00100111", 141 => "11010111", 142 => "10100011", 143 => "10000001", 
    144 => "11001001", 145 => "11111100", 146 => "01001100", 147 => "10011111", 
    148 => "01111110", 149 => "01000111", 150 => "01011001", 151 => "00000001", 
    152 => "01010010", 153 => "01110010", 154 => "11110001", 155 => "01111000", 
    156 => "00101100", 157 => "11101011", 158 => "10011001", 159 => "01010100", 
    160 => "00001011", 161 => "11111110", 162 => "01101011", 163 => "11010101", 
    164 => "01011110", 165 => "10001100", 166 => "00110100", 167 => "00011101", 
    168 => "11010100", 169 => "10111101", 170 => "00001011", 171 => "00100010", 
    172 => "11111110", 173 => "01011010", 174 => "00100110", 175 => "10110010", 
    176 => "11001000", 177 => "01100011", 178 => "11011001", 179 => "00001110", 
    180 => "10010011", 181 => "10000101", 182 => "01001100", 183 => "01111001", 
    184 => "00100010", 185 => "00000111", 186 => "01011001", 187 => "01110011", 
    188 => "10000001", 189 => "00010110", 190 => "11001101", 191 => "10110101", 
    192 => "01000111", 193 => "11111010", 194 => "01011000", 195 => "11000111", 
    196 => "10010100", 197 => "00111111", 198 => "10101110", 199 => "11110010", 
    200 => "00111011", 201 => "10000011", 202 => "10011000", 203 => "01011100", 
    204 => "00000101", 205 => "00110101", 206 => "10010011", 207 => "11111011", 
    208 => "11011010", 209 => "11010111", 210 => "00000011", 211 => "00110110", 
    212 => "01111000", 213 => "01001111", 214 => "10111100", 215 => "01000101", 
    216 => "10110011", 217 => "00001111", 218 => "11101001", 219 => "00101011", 
    220 => "01110000", 221 => "11000010", 222 => "11101010", 223 => "11011001", 
    224 => "00000000", 225 => "01000111", 226 => "11100100", 227 => "00000000", 
    228 => "00001000", 229 => "11011101", 230 => "01110001", 231 => "11000010", 
    232 => "00000100", 233 => "00111101", 234 => "10011100", 235 => "01000001", 
    236 => "00001100", 237 => "10111100", 238 => "00000000", 239 => "01101111", 
    240 => "01000010", 241 => "11111000", 242 => "00010111", 243 => "00010101", 
    244 => "01110100", 245 => "11100111", 246 => "00110010", 247 => "01000111", 
    248 => "01011010", 249 => "11111100", 250 => "10011010", 251 => "10110010", 
    252 => "00100100", 253 => "01011110", 254 => "01110100", 255 => "00011011", 
    256 => "00110111", 257 => "10011000", 258 => "11100100", 259 => "11101111", 
    260 => "10000100", 261 => "11110100", 262 => "11100110", 263 => "00011110", 
    264 => "10010101", 265 => "11001101", 266 => "00001001", 267 => "11100100", 
    268 => "11000000", 269 => "01010101", 270 => "11010110", 271 => "11010011", 
    272 => "11100101", 273 => "11111110", 274 => "00010101", 275 => "00110100", 
    276 => "00101100", 277 => "01010010", 278 => "01010001", 279 => "00011110", 
    280 => "01010101", 281 => "00010010", 282 => "01011111", 283 => "01101001", 
    284 => "01000111", 285 => "10100101", 286 => "00010011", 287 => "01110000", 
    288 => "10010001", 289 => "11110100", 290 => "01001000", 291 => "01001010", 
    292 => "00101001", 293 => "11000011", 294 => "10010010", 295 => "00101101", 
    296 => "11010110", 297 => "01100100", 298 => "11010101", 299 => "01111011", 
    300 => "01101110", 301 => "11011101", 302 => "10111010", 303 => "00100110", 
    304 => "01101000", 305 => "10110000", 306 => "10110011", 307 => "00010010", 
    308 => "11011101", 309 => "00111000", 310 => "11100100", 311 => "00011100", 
    312 => "00010101", 313 => "00101001", 314 => "00110111", 315 => "01000000", 
    316 => "01100001", 317 => "00100001", 318 => "11001110", 319 => "01001010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l2_weig8j is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 320;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l2_weig8j is
    component mlp_kernel_l2_weig8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l2_weig8j_rom_U :  component mlp_kernel_l2_weig8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


