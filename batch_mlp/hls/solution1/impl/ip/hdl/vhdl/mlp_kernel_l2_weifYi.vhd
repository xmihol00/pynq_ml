-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l2_weifYi_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 320
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l2_weifYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01101001", 1 => "01101010", 2 => "10001111", 3 => "11101111", 
    4 => "00111101", 5 => "11111011", 6 => "01001111", 7 => "10110010", 
    8 => "00011100", 9 => "01110001", 10 => "01000001", 11 => "10101011", 
    12 => "10100110", 13 => "11011001", 14 => "00101001", 15 => "01011100", 
    16 => "01010111", 17 => "10100001", 18 => "00001010", 19 => "10000110", 
    20 => "10110101", 21 => "00101010", 22 => "10100001", 23 => "01110010", 
    24 => "11001000", 25 => "00100000", 26 => "00000010", 27 => "01100100", 
    28 => "11000110", 29 => "01100101", 30 => "00110101", 31 => "11111100", 
    32 => "10100110", 33 => "00101001", 34 => "01011110", 35 => "10100100", 
    36 => "00100011", 37 => "00111001", 38 => "10100000", 39 => "01100110", 
    40 => "00011110", 41 => "01001101", 42 => "10100111", 43 => "10111110", 
    44 => "11001101", 45 => "10000011", 46 => "00110100", 47 => "00011100", 
    48 => "11110110", 49 => "10110101", 50 => "11101100", 51 => "11011001", 
    52 => "11001000", 53 => "10011101", 54 => "11011011", 55 => "01100010", 
    56 => "11110010", 57 => "01011000", 58 => "01001011", 59 => "00000100", 
    60 => "10011011", 61 => "01110011", 62 => "00000110", 63 => "00110101", 
    64 => "00100100", 65 => "11110000", 66 => "10010010", 67 => "11111110", 
    68 => "10000001", 69 => "10001100", 70 => "00011111", 71 => "11011001", 
    72 => "01100101", 73 => "11111110", 74 => "11000001", 75 => "01100011", 
    76 => "00100101", 77 => "01011010", 78 => "11100111", 79 => "10101000", 
    80 => "11001101", 81 => "01000101", 82 => "11010100", 83 => "10110100", 
    84 => "11000101", 85 => "01111100", 86 => "00101101", 87 => "11001011", 
    88 => "00010010", 89 => "11100011", 90 => "11000000", 91 => "00000110", 
    92 => "11111000", 93 => "11010111", 94 => "11100111", 95 => "01010000", 
    96 => "01000101", 97 => "00010001", 98 => "01000001", 99 => "10101010", 
    100 => "01001000", 101 => "01010111", 102 => "00100010", 103 => "11110000", 
    104 => "00001111", 105 => "00110010", 106 => "11101001", 107 => "01111110", 
    108 => "10111100", 109 => "10000101", 110 => "01000110", 111 => "10110101", 
    112 => "01111001", 113 to 114=> "11111101", 115 => "11101000", 116 => "11100001", 
    117 => "10110111", 118 => "00000000", 119 => "10111011", 120 => "11011010", 
    121 => "01100110", 122 => "10110100", 123 => "10000010", 124 => "00011000", 
    125 => "11111010", 126 => "00011110", 127 => "10011111", 128 => "11001011", 
    129 => "11101100", 130 => "01110000", 131 => "10101110", 132 => "00000111", 
    133 => "00001110", 134 => "11111111", 135 => "00100100", 136 => "10010011", 
    137 => "10101001", 138 => "11111101", 139 => "00000111", 140 => "10010110", 
    141 => "11111000", 142 => "00101011", 143 => "01000110", 144 => "10110100", 
    145 => "10001100", 146 => "11000100", 147 => "00110111", 148 => "10100010", 
    149 => "11101100", 150 => "01100011", 151 => "10110000", 152 => "11001010", 
    153 => "10101000", 154 => "01101001", 155 => "00000110", 156 => "10110111", 
    157 => "10100101", 158 => "11011110", 159 => "10000110", 160 => "11111101", 
    161 => "01101101", 162 => "11100001", 163 => "01111011", 164 => "00010101", 
    165 => "11000000", 166 => "11001110", 167 => "11010110", 168 => "01101110", 
    169 => "00011011", 170 => "01010000", 171 => "01100100", 172 => "11011000", 
    173 => "10100011", 174 => "10000011", 175 => "11011111", 176 => "00101101", 
    177 => "01011000", 178 => "01100011", 179 => "01001101", 180 => "11010010", 
    181 => "01001011", 182 => "01100100", 183 => "01001100", 184 => "00110111", 
    185 => "11001101", 186 => "11101110", 187 => "00011011", 188 => "11001011", 
    189 => "01011011", 190 => "10101111", 191 => "01100000", 192 => "01101111", 
    193 => "11101100", 194 => "00000101", 195 => "01001011", 196 => "00000000", 
    197 => "00000010", 198 => "01110101", 199 => "00100000", 200 => "00010001", 
    201 => "00110100", 202 => "10110111", 203 => "01001100", 204 => "01111001", 
    205 => "01001000", 206 => "11000111", 207 => "11010001", 208 => "01110100", 
    209 => "10001100", 210 to 211=> "00101101", 212 => "00000010", 213 => "01000101", 
    214 => "01001100", 215 => "00001001", 216 => "01100110", 217 => "11110111", 
    218 => "11100011", 219 => "01011000", 220 => "01001110", 221 => "01100011", 
    222 => "00011001", 223 => "11010100", 224 => "11011011", 225 => "00010100", 
    226 => "11011010", 227 => "11000011", 228 => "01011010", 229 => "01100111", 
    230 => "00010101", 231 => "00000010", 232 => "00101001", 233 => "10011110", 
    234 => "00101011", 235 => "11001110", 236 => "00000100", 237 => "11000101", 
    238 => "11000111", 239 => "01001001", 240 to 241=> "01000011", 242 => "11010000", 
    243 => "00000011", 244 => "10100111", 245 => "11111011", 246 => "00111100", 
    247 => "10100010", 248 => "00000010", 249 => "01101101", 250 => "10101100", 
    251 => "01001110", 252 => "11001011", 253 => "00010011", 254 => "00101010", 
    255 => "01110001", 256 => "01100001", 257 => "10101111", 258 => "00011000", 
    259 => "01110100", 260 => "01111101", 261 => "11101000", 262 => "11111100", 
    263 => "11011011", 264 => "00000100", 265 => "01100101", 266 => "00111101", 
    267 => "10010001", 268 => "10110011", 269 => "10110001", 270 => "00001001", 
    271 => "00111000", 272 => "11000100", 273 => "01000001", 274 => "00010001", 
    275 => "00011110", 276 => "01010011", 277 => "11110010", 278 => "10110001", 
    279 => "11101010", 280 => "00101111", 281 => "11000111", 282 => "10110110", 
    283 => "01010000", 284 => "01111001", 285 => "10111111", 286 => "00110110", 
    287 => "00010000", 288 => "11000100", 289 => "11111111", 290 => "00010010", 
    291 => "10110011", 292 => "11110001", 293 => "11000111", 294 => "11010001", 
    295 => "00001110", 296 => "00011001", 297 => "10000100", 298 => "10100001", 
    299 => "11110010", 300 => "11001111", 301 => "00110001", 302 => "11110000", 
    303 => "11001010", 304 => "01101011", 305 => "01111101", 306 => "00010010", 
    307 => "00011100", 308 => "10100101", 309 => "10011010", 310 => "10001110", 
    311 => "11101110", 312 => "11101100", 313 => "11110101", 314 => "10001000", 
    315 => "10010101", 316 => "01011110", 317 => "10001011", 318 => "00101010", 
    319 => "00110101" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l2_weifYi is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 320;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l2_weifYi is
    component mlp_kernel_l2_weifYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l2_weifYi_rom_U :  component mlp_kernel_l2_weifYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


