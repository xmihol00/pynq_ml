// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.283000,HLS_SYN_LAT=8758,HLS_SYN_TPT=none,HLS_SYN_MEM=33,HLS_SYN_DSP=272,HLS_SYN_FF=26401,HLS_SYN_LUT=33126,HLS_VERSION=2020_1}" *)

module mlp (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [511:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [63:0] in_r_TKEEP;
input  [63:0] in_r_TSTRB;
input  [0:0] in_r_TLAST;
output  [127:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [15:0] out_r_TKEEP;
output  [15:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg in_r_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln417_fu_668_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln449_fu_1039_p2;
wire    ap_CS_fsm_state11;
reg   [0:0] icmp_ln449_reg_1246;
wire   [3:0] i_fu_674_p2;
reg   [3:0] i_reg_1067;
reg    ap_block_state2;
reg   [511:0] tmp_data_V_1_reg_1072;
wire   [2:0] trunc_ln425_fu_684_p1;
reg   [2:0] trunc_ln425_reg_1078;
wire   [6:0] j_1_fu_694_p2;
reg   [6:0] j_1_reg_1112;
wire    ap_CS_fsm_state3;
wire   [9:0] sub_ln681_3_fu_756_p2;
reg   [9:0] sub_ln681_3_reg_1117;
wire   [0:0] icmp_ln423_fu_688_p2;
wire   [511:0] lshr_ln681_fu_766_p2;
reg   [511:0] lshr_ln681_reg_1122;
wire   [9:0] low_fu_810_p2;
wire    ap_CS_fsm_state5;
wire   [9:0] high_fu_816_p2;
wire   [3:0] i_2_fu_828_p2;
reg   [3:0] i_2_reg_1140;
wire    ap_CS_fsm_state7;
wire    regslice_both_out_V_data_V_U_apdone_blk;
wire   [0:0] tmp_last_V_fu_834_p2;
reg   [0:0] tmp_last_V_reg_1145;
wire   [0:0] icmp_ln440_fu_822_p2;
wire   [2:0] trunc_ln444_fu_840_p1;
reg   [2:0] trunc_ln444_reg_1150;
wire   [3:0] j_fu_850_p2;
reg   [3:0] j_reg_1158;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln442_fu_844_p2;
wire    ap_CS_fsm_state9;
wire   [15:0] val_assign_fu_874_p10;
reg   [15:0] val_assign_reg_1213;
wire   [0:0] icmp_ln389_fu_895_p2;
reg   [0:0] icmp_ln389_reg_1218;
wire   [7:0] trunc_ln389_fu_901_p1;
reg   [7:0] trunc_ln389_reg_1226;
wire   [7:0] trunc_ln389_1_fu_905_p1;
reg   [7:0] trunc_ln389_1_reg_1234;
wire   [127:0] p_Result_2_fu_1016_p2;
reg   [127:0] p_Result_2_reg_1240;
reg    ap_block_state10_io;
reg   [5:0] sample_0_address0;
reg    sample_0_ce0;
reg    sample_0_we0;
wire   [7:0] sample_0_q0;
reg    sample_0_ce1;
wire   [7:0] sample_0_q1;
reg   [5:0] sample_1_address0;
reg    sample_1_ce0;
reg    sample_1_we0;
wire   [7:0] sample_1_q0;
reg    sample_1_ce1;
wire   [7:0] sample_1_q1;
reg   [5:0] sample_2_address0;
reg    sample_2_ce0;
reg    sample_2_we0;
wire   [7:0] sample_2_q0;
reg    sample_2_ce1;
wire   [7:0] sample_2_q1;
reg   [5:0] sample_3_address0;
reg    sample_3_ce0;
reg    sample_3_we0;
wire   [7:0] sample_3_q0;
reg    sample_3_ce1;
wire   [7:0] sample_3_q1;
reg   [5:0] sample_4_address0;
reg    sample_4_ce0;
reg    sample_4_we0;
wire   [7:0] sample_4_q0;
reg    sample_4_ce1;
wire   [7:0] sample_4_q1;
reg   [5:0] sample_5_address0;
reg    sample_5_ce0;
reg    sample_5_we0;
wire   [7:0] sample_5_q0;
reg    sample_5_ce1;
wire   [7:0] sample_5_q1;
reg   [5:0] sample_6_address0;
reg    sample_6_ce0;
reg    sample_6_we0;
wire   [7:0] sample_6_q0;
reg    sample_6_ce1;
wire   [7:0] sample_6_q1;
reg   [5:0] sample_7_address0;
reg    sample_7_ce0;
reg    sample_7_we0;
wire   [7:0] sample_7_q0;
reg    sample_7_ce1;
wire   [7:0] sample_7_q1;
reg   [3:0] prediction_0_address0;
reg    prediction_0_ce0;
reg    prediction_0_we0;
wire   [15:0] prediction_0_q0;
reg   [3:0] prediction_1_address0;
reg    prediction_1_ce0;
reg    prediction_1_we0;
wire   [15:0] prediction_1_q0;
reg   [3:0] prediction_2_address0;
reg    prediction_2_ce0;
reg    prediction_2_we0;
wire   [15:0] prediction_2_q0;
reg   [3:0] prediction_3_address0;
reg    prediction_3_ce0;
reg    prediction_3_we0;
wire   [15:0] prediction_3_q0;
reg   [3:0] prediction_4_address0;
reg    prediction_4_ce0;
reg    prediction_4_we0;
wire   [15:0] prediction_4_q0;
reg   [3:0] prediction_5_address0;
reg    prediction_5_ce0;
reg    prediction_5_we0;
wire   [15:0] prediction_5_q0;
reg   [3:0] prediction_6_address0;
reg    prediction_6_ce0;
reg    prediction_6_we0;
wire   [15:0] prediction_6_q0;
reg   [3:0] prediction_7_address0;
reg    prediction_7_ce0;
reg    prediction_7_we0;
wire   [15:0] prediction_7_q0;
wire    grp_mlp_kernel_fu_569_ap_start;
wire    grp_mlp_kernel_fu_569_ap_done;
wire    grp_mlp_kernel_fu_569_ap_idle;
wire    grp_mlp_kernel_fu_569_ap_ready;
wire   [5:0] grp_mlp_kernel_fu_569_sample_0_address0;
wire    grp_mlp_kernel_fu_569_sample_0_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_0_address1;
wire    grp_mlp_kernel_fu_569_sample_0_ce1;
wire   [5:0] grp_mlp_kernel_fu_569_sample_1_address0;
wire    grp_mlp_kernel_fu_569_sample_1_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_1_address1;
wire    grp_mlp_kernel_fu_569_sample_1_ce1;
wire   [5:0] grp_mlp_kernel_fu_569_sample_2_address0;
wire    grp_mlp_kernel_fu_569_sample_2_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_2_address1;
wire    grp_mlp_kernel_fu_569_sample_2_ce1;
wire   [5:0] grp_mlp_kernel_fu_569_sample_3_address0;
wire    grp_mlp_kernel_fu_569_sample_3_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_3_address1;
wire    grp_mlp_kernel_fu_569_sample_3_ce1;
wire   [5:0] grp_mlp_kernel_fu_569_sample_4_address0;
wire    grp_mlp_kernel_fu_569_sample_4_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_4_address1;
wire    grp_mlp_kernel_fu_569_sample_4_ce1;
wire   [5:0] grp_mlp_kernel_fu_569_sample_5_address0;
wire    grp_mlp_kernel_fu_569_sample_5_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_5_address1;
wire    grp_mlp_kernel_fu_569_sample_5_ce1;
wire   [5:0] grp_mlp_kernel_fu_569_sample_6_address0;
wire    grp_mlp_kernel_fu_569_sample_6_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_6_address1;
wire    grp_mlp_kernel_fu_569_sample_6_ce1;
wire   [5:0] grp_mlp_kernel_fu_569_sample_7_address0;
wire    grp_mlp_kernel_fu_569_sample_7_ce0;
wire   [5:0] grp_mlp_kernel_fu_569_sample_7_address1;
wire    grp_mlp_kernel_fu_569_sample_7_ce1;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_0_address0;
wire    grp_mlp_kernel_fu_569_prediction_0_ce0;
wire    grp_mlp_kernel_fu_569_prediction_0_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_0_d0;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_1_address0;
wire    grp_mlp_kernel_fu_569_prediction_1_ce0;
wire    grp_mlp_kernel_fu_569_prediction_1_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_1_d0;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_2_address0;
wire    grp_mlp_kernel_fu_569_prediction_2_ce0;
wire    grp_mlp_kernel_fu_569_prediction_2_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_2_d0;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_3_address0;
wire    grp_mlp_kernel_fu_569_prediction_3_ce0;
wire    grp_mlp_kernel_fu_569_prediction_3_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_3_d0;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_4_address0;
wire    grp_mlp_kernel_fu_569_prediction_4_ce0;
wire    grp_mlp_kernel_fu_569_prediction_4_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_4_d0;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_5_address0;
wire    grp_mlp_kernel_fu_569_prediction_5_ce0;
wire    grp_mlp_kernel_fu_569_prediction_5_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_5_d0;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_6_address0;
wire    grp_mlp_kernel_fu_569_prediction_6_ce0;
wire    grp_mlp_kernel_fu_569_prediction_6_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_6_d0;
wire   [3:0] grp_mlp_kernel_fu_569_prediction_7_address0;
wire    grp_mlp_kernel_fu_569_prediction_7_ce0;
wire    grp_mlp_kernel_fu_569_prediction_7_we0;
wire   [15:0] grp_mlp_kernel_fu_569_prediction_7_d0;
reg   [3:0] i_0_reg_500;
reg   [9:0] Lo_assign_reg_511;
reg   [9:0] Hi_assign_reg_523;
reg   [6:0] j_0_reg_535;
reg   [3:0] i2_0_reg_547;
wire    ap_CS_fsm_state6;
reg   [3:0] j3_0_reg_558;
reg    ap_block_state11_io;
reg    grp_mlp_kernel_fu_569_ap_start_reg;
reg    ap_block_state2_ignore_call4;
wire   [63:0] zext_ln425_fu_798_p1;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln444_fu_856_p1;
reg   [7:0] count_1_fu_262;
wire   [7:0] count_fu_1033_p2;
reg   [31:0] high_1_fu_266;
wire   [31:0] high_2_fu_1028_p2;
reg   [31:0] low_1_fu_270;
wire   [31:0] low_2_fu_1023_p2;
reg   [127:0] p_Val2_s_fu_274;
wire   [7:0] trunc_ln425_1_fu_786_p1;
wire   [0:0] icmp_ln681_fu_700_p2;
wire   [9:0] sub_ln681_fu_715_p2;
wire   [9:0] sub_ln681_2_fu_727_p2;
reg   [511:0] tmp_19_fu_706_p4;
wire   [9:0] sub_ln681_1_fu_721_p2;
wire   [9:0] select_ln681_fu_733_p3;
wire   [9:0] select_ln681_2_fu_748_p3;
wire   [511:0] select_ln681_1_fu_741_p3;
wire   [511:0] zext_ln681_fu_762_p1;
wire   [511:0] zext_ln681_1_fu_772_p1;
wire   [511:0] lshr_ln681_1_fu_775_p2;
wire   [511:0] p_Result_s_fu_781_p2;
wire   [7:0] sub_ln389_fu_918_p2;
wire   [7:0] select_ln389_fu_923_p3;
wire   [7:0] select_ln389_2_fu_933_p3;
wire   [7:0] select_ln389_1_fu_928_p3;
wire   [7:0] sub_ln389_1_fu_939_p2;
wire  signed [127:0] tmp_V_fu_915_p1;
wire   [127:0] zext_ln389_fu_945_p1;
wire   [127:0] shl_ln389_fu_957_p2;
reg   [127:0] tmp_20_fu_963_p4;
wire   [127:0] zext_ln389_1_fu_949_p1;
wire   [127:0] zext_ln389_2_fu_953_p1;
wire   [127:0] shl_ln389_1_fu_980_p2;
wire   [127:0] lshr_ln389_fu_986_p2;
wire   [127:0] and_ln389_fu_992_p2;
wire   [127:0] xor_ln389_fu_998_p2;
wire   [127:0] select_ln389_3_fu_973_p3;
wire   [127:0] and_ln389_1_fu_1004_p2;
wire   [127:0] and_ln389_2_fu_1010_p2;
reg   [10:0] ap_NS_fsm;
wire    regslice_both_in_V_data_V_U_apdone_blk;
wire   [511:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_V_data_V_U_ack_in;
wire    regslice_both_in_V_keep_V_U_apdone_blk;
wire   [63:0] in_r_TKEEP_int;
wire    regslice_both_in_V_keep_V_U_vld_out;
wire    regslice_both_in_V_keep_V_U_ack_in;
wire    regslice_both_in_V_strb_V_U_apdone_blk;
wire   [63:0] in_r_TSTRB_int;
wire    regslice_both_in_V_strb_V_U_vld_out;
wire    regslice_both_in_V_strb_V_U_ack_in;
wire    regslice_both_in_V_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    regslice_both_in_V_last_V_U_vld_out;
wire    regslice_both_in_V_last_V_U_ack_in;
wire   [127:0] out_r_TDATA_int;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_mlp_kernel_fu_569_ap_start_reg = 1'b0;
end

mlp_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
mlp_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_0_address0),
    .ce0(sample_0_ce0),
    .we0(sample_0_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_0_q0),
    .address1(grp_mlp_kernel_fu_569_sample_0_address1),
    .ce1(sample_0_ce1),
    .q1(sample_0_q1)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_1_address0),
    .ce0(sample_1_ce0),
    .we0(sample_1_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_1_q0),
    .address1(grp_mlp_kernel_fu_569_sample_1_address1),
    .ce1(sample_1_ce1),
    .q1(sample_1_q1)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_2_address0),
    .ce0(sample_2_ce0),
    .we0(sample_2_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_2_q0),
    .address1(grp_mlp_kernel_fu_569_sample_2_address1),
    .ce1(sample_2_ce1),
    .q1(sample_2_q1)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_3_address0),
    .ce0(sample_3_ce0),
    .we0(sample_3_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_3_q0),
    .address1(grp_mlp_kernel_fu_569_sample_3_address1),
    .ce1(sample_3_ce1),
    .q1(sample_3_q1)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_4_address0),
    .ce0(sample_4_ce0),
    .we0(sample_4_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_4_q0),
    .address1(grp_mlp_kernel_fu_569_sample_4_address1),
    .ce1(sample_4_ce1),
    .q1(sample_4_q1)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_5_address0),
    .ce0(sample_5_ce0),
    .we0(sample_5_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_5_q0),
    .address1(grp_mlp_kernel_fu_569_sample_5_address1),
    .ce1(sample_5_ce1),
    .q1(sample_5_q1)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_6_address0),
    .ce0(sample_6_ce0),
    .we0(sample_6_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_6_q0),
    .address1(grp_mlp_kernel_fu_569_sample_6_address1),
    .ce1(sample_6_ce1),
    .q1(sample_6_q1)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sample_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_7_address0),
    .ce0(sample_7_ce0),
    .we0(sample_7_we0),
    .d0(trunc_ln425_1_fu_786_p1),
    .q0(sample_7_q0),
    .address1(grp_mlp_kernel_fu_569_sample_7_address1),
    .ce1(sample_7_ce1),
    .q1(sample_7_q1)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_0_address0),
    .ce0(prediction_0_ce0),
    .we0(prediction_0_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_0_d0),
    .q0(prediction_0_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_1_address0),
    .ce0(prediction_1_ce0),
    .we0(prediction_1_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_1_d0),
    .q0(prediction_1_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_2_address0),
    .ce0(prediction_2_ce0),
    .we0(prediction_2_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_2_d0),
    .q0(prediction_2_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_3_address0),
    .ce0(prediction_3_ce0),
    .we0(prediction_3_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_3_d0),
    .q0(prediction_3_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_4_address0),
    .ce0(prediction_4_ce0),
    .we0(prediction_4_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_4_d0),
    .q0(prediction_4_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_5_address0),
    .ce0(prediction_5_ce0),
    .we0(prediction_5_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_5_d0),
    .q0(prediction_5_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_6_address0),
    .ce0(prediction_6_ce0),
    .we0(prediction_6_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_6_d0),
    .q0(prediction_6_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_7_address0),
    .ce0(prediction_7_ce0),
    .we0(prediction_7_we0),
    .d0(grp_mlp_kernel_fu_569_prediction_7_d0),
    .q0(prediction_7_q0)
);

mlp_kernel grp_mlp_kernel_fu_569(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mlp_kernel_fu_569_ap_start),
    .ap_done(grp_mlp_kernel_fu_569_ap_done),
    .ap_idle(grp_mlp_kernel_fu_569_ap_idle),
    .ap_ready(grp_mlp_kernel_fu_569_ap_ready),
    .sample_0_address0(grp_mlp_kernel_fu_569_sample_0_address0),
    .sample_0_ce0(grp_mlp_kernel_fu_569_sample_0_ce0),
    .sample_0_q0(sample_0_q0),
    .sample_0_address1(grp_mlp_kernel_fu_569_sample_0_address1),
    .sample_0_ce1(grp_mlp_kernel_fu_569_sample_0_ce1),
    .sample_0_q1(sample_0_q1),
    .sample_1_address0(grp_mlp_kernel_fu_569_sample_1_address0),
    .sample_1_ce0(grp_mlp_kernel_fu_569_sample_1_ce0),
    .sample_1_q0(sample_1_q0),
    .sample_1_address1(grp_mlp_kernel_fu_569_sample_1_address1),
    .sample_1_ce1(grp_mlp_kernel_fu_569_sample_1_ce1),
    .sample_1_q1(sample_1_q1),
    .sample_2_address0(grp_mlp_kernel_fu_569_sample_2_address0),
    .sample_2_ce0(grp_mlp_kernel_fu_569_sample_2_ce0),
    .sample_2_q0(sample_2_q0),
    .sample_2_address1(grp_mlp_kernel_fu_569_sample_2_address1),
    .sample_2_ce1(grp_mlp_kernel_fu_569_sample_2_ce1),
    .sample_2_q1(sample_2_q1),
    .sample_3_address0(grp_mlp_kernel_fu_569_sample_3_address0),
    .sample_3_ce0(grp_mlp_kernel_fu_569_sample_3_ce0),
    .sample_3_q0(sample_3_q0),
    .sample_3_address1(grp_mlp_kernel_fu_569_sample_3_address1),
    .sample_3_ce1(grp_mlp_kernel_fu_569_sample_3_ce1),
    .sample_3_q1(sample_3_q1),
    .sample_4_address0(grp_mlp_kernel_fu_569_sample_4_address0),
    .sample_4_ce0(grp_mlp_kernel_fu_569_sample_4_ce0),
    .sample_4_q0(sample_4_q0),
    .sample_4_address1(grp_mlp_kernel_fu_569_sample_4_address1),
    .sample_4_ce1(grp_mlp_kernel_fu_569_sample_4_ce1),
    .sample_4_q1(sample_4_q1),
    .sample_5_address0(grp_mlp_kernel_fu_569_sample_5_address0),
    .sample_5_ce0(grp_mlp_kernel_fu_569_sample_5_ce0),
    .sample_5_q0(sample_5_q0),
    .sample_5_address1(grp_mlp_kernel_fu_569_sample_5_address1),
    .sample_5_ce1(grp_mlp_kernel_fu_569_sample_5_ce1),
    .sample_5_q1(sample_5_q1),
    .sample_6_address0(grp_mlp_kernel_fu_569_sample_6_address0),
    .sample_6_ce0(grp_mlp_kernel_fu_569_sample_6_ce0),
    .sample_6_q0(sample_6_q0),
    .sample_6_address1(grp_mlp_kernel_fu_569_sample_6_address1),
    .sample_6_ce1(grp_mlp_kernel_fu_569_sample_6_ce1),
    .sample_6_q1(sample_6_q1),
    .sample_7_address0(grp_mlp_kernel_fu_569_sample_7_address0),
    .sample_7_ce0(grp_mlp_kernel_fu_569_sample_7_ce0),
    .sample_7_q0(sample_7_q0),
    .sample_7_address1(grp_mlp_kernel_fu_569_sample_7_address1),
    .sample_7_ce1(grp_mlp_kernel_fu_569_sample_7_ce1),
    .sample_7_q1(sample_7_q1),
    .prediction_0_address0(grp_mlp_kernel_fu_569_prediction_0_address0),
    .prediction_0_ce0(grp_mlp_kernel_fu_569_prediction_0_ce0),
    .prediction_0_we0(grp_mlp_kernel_fu_569_prediction_0_we0),
    .prediction_0_d0(grp_mlp_kernel_fu_569_prediction_0_d0),
    .prediction_1_address0(grp_mlp_kernel_fu_569_prediction_1_address0),
    .prediction_1_ce0(grp_mlp_kernel_fu_569_prediction_1_ce0),
    .prediction_1_we0(grp_mlp_kernel_fu_569_prediction_1_we0),
    .prediction_1_d0(grp_mlp_kernel_fu_569_prediction_1_d0),
    .prediction_2_address0(grp_mlp_kernel_fu_569_prediction_2_address0),
    .prediction_2_ce0(grp_mlp_kernel_fu_569_prediction_2_ce0),
    .prediction_2_we0(grp_mlp_kernel_fu_569_prediction_2_we0),
    .prediction_2_d0(grp_mlp_kernel_fu_569_prediction_2_d0),
    .prediction_3_address0(grp_mlp_kernel_fu_569_prediction_3_address0),
    .prediction_3_ce0(grp_mlp_kernel_fu_569_prediction_3_ce0),
    .prediction_3_we0(grp_mlp_kernel_fu_569_prediction_3_we0),
    .prediction_3_d0(grp_mlp_kernel_fu_569_prediction_3_d0),
    .prediction_4_address0(grp_mlp_kernel_fu_569_prediction_4_address0),
    .prediction_4_ce0(grp_mlp_kernel_fu_569_prediction_4_ce0),
    .prediction_4_we0(grp_mlp_kernel_fu_569_prediction_4_we0),
    .prediction_4_d0(grp_mlp_kernel_fu_569_prediction_4_d0),
    .prediction_5_address0(grp_mlp_kernel_fu_569_prediction_5_address0),
    .prediction_5_ce0(grp_mlp_kernel_fu_569_prediction_5_ce0),
    .prediction_5_we0(grp_mlp_kernel_fu_569_prediction_5_we0),
    .prediction_5_d0(grp_mlp_kernel_fu_569_prediction_5_d0),
    .prediction_6_address0(grp_mlp_kernel_fu_569_prediction_6_address0),
    .prediction_6_ce0(grp_mlp_kernel_fu_569_prediction_6_ce0),
    .prediction_6_we0(grp_mlp_kernel_fu_569_prediction_6_we0),
    .prediction_6_d0(grp_mlp_kernel_fu_569_prediction_6_d0),
    .prediction_7_address0(grp_mlp_kernel_fu_569_prediction_7_address0),
    .prediction_7_ce0(grp_mlp_kernel_fu_569_prediction_7_ce0),
    .prediction_7_we0(grp_mlp_kernel_fu_569_prediction_7_we0),
    .prediction_7_d0(grp_mlp_kernel_fu_569_prediction_7_d0)
);

mlp_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mlp_mux_83_16_1_1_U330(
    .din0(prediction_0_q0),
    .din1(prediction_1_q0),
    .din2(prediction_2_q0),
    .din3(prediction_3_q0),
    .din4(prediction_4_q0),
    .din5(prediction_5_q0),
    .din6(prediction_6_q0),
    .din7(prediction_7_q0),
    .din8(trunc_ln444_reg_1150),
    .dout(val_assign_fu_874_p10)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_data_V_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TKEEP),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_keep_V_U_ack_in),
    .data_out(in_r_TKEEP_int),
    .vld_out(regslice_both_in_V_keep_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TSTRB),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_strb_V_U_ack_in),
    .data_out(in_r_TSTRB_int),
    .vld_out(regslice_both_in_V_strb_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_in_V_last_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd65535),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_1145),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mlp_kernel_fu_569_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mlp_kernel_fu_569_ap_start_reg <= 1'b1;
        end else if ((grp_mlp_kernel_fu_569_ap_ready == 1'b1)) begin
            grp_mlp_kernel_fu_569_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Hi_assign_reg_523 <= high_fu_816_p2;
    end else if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_reg_523 <= 10'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Lo_assign_reg_511 <= low_fu_810_p2;
    end else if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Lo_assign_reg_511 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln449_fu_1039_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        count_1_fu_262 <= count_fu_1033_p2;
    end else if ((((icmp_ln449_fu_1039_p2 == 1'd1) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10)) | (~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        count_1_fu_262 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln449_fu_1039_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        high_1_fu_266 <= high_2_fu_1028_p2;
    end else if ((((icmp_ln449_fu_1039_p2 == 1'd1) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10)) | (~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        high_1_fu_266 <= 32'd15;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_fu_844_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i2_0_reg_547 <= i_2_reg_1140;
    end else if (((grp_mlp_kernel_fu_569_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        i2_0_reg_547 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln423_fu_688_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_500 <= i_reg_1067;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_500 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        j3_0_reg_558 <= j_reg_1158;
    end else if (((icmp_ln440_fu_822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
        j3_0_reg_558 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_535 <= j_1_reg_1112;
    end else if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_535 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln449_fu_1039_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        low_1_fu_270 <= low_2_fu_1023_p2;
    end else if ((((icmp_ln449_fu_1039_p2 == 1'd1) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10)) | (~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        low_1_fu_270 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
        i_2_reg_1140 <= i_2_fu_828_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_1067 <= i_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln389_reg_1218 <= icmp_ln389_fu_895_p2;
        trunc_ln389_1_reg_1234 <= trunc_ln389_1_fu_905_p1;
        trunc_ln389_reg_1226 <= trunc_ln389_fu_901_p1;
        val_assign_reg_1213 <= val_assign_fu_874_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        icmp_ln449_reg_1246 <= icmp_ln449_fu_1039_p2;
        p_Result_2_reg_1240 <= p_Result_2_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_1112 <= j_1_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_1158 <= j_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln423_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        lshr_ln681_reg_1122 <= lshr_ln681_fu_766_p2;
        sub_ln681_3_reg_1117 <= sub_ln681_3_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        p_Val2_s_fu_274 <= p_Result_2_reg_1240;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_1_reg_1072 <= in_r_TDATA_int;
        trunc_ln425_reg_1078 <= trunc_ln425_fu_684_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln440_fu_822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
        tmp_last_V_reg_1145 <= tmp_last_V_fu_834_p2;
        trunc_ln444_reg_1150 <= trunc_ln444_fu_840_p1;
    end
end

always @ (*) begin
    if (((icmp_ln440_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln440_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln417_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_r_TVALID == 1'b1) & (regslice_both_in_V_data_V_U_ack_in == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln449_reg_1246 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln449_fu_1039_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln449_fu_1039_p2 == 1'd1) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_0_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_0_address0 = grp_mlp_kernel_fu_569_prediction_0_address0;
    end else begin
        prediction_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_0_ce0 = grp_mlp_kernel_fu_569_prediction_0_ce0;
    end else begin
        prediction_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_0_we0 = grp_mlp_kernel_fu_569_prediction_0_we0;
    end else begin
        prediction_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_1_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_1_address0 = grp_mlp_kernel_fu_569_prediction_1_address0;
    end else begin
        prediction_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_1_ce0 = grp_mlp_kernel_fu_569_prediction_1_ce0;
    end else begin
        prediction_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_1_we0 = grp_mlp_kernel_fu_569_prediction_1_we0;
    end else begin
        prediction_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_2_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_2_address0 = grp_mlp_kernel_fu_569_prediction_2_address0;
    end else begin
        prediction_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_2_ce0 = grp_mlp_kernel_fu_569_prediction_2_ce0;
    end else begin
        prediction_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_2_we0 = grp_mlp_kernel_fu_569_prediction_2_we0;
    end else begin
        prediction_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_3_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_3_address0 = grp_mlp_kernel_fu_569_prediction_3_address0;
    end else begin
        prediction_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_3_ce0 = grp_mlp_kernel_fu_569_prediction_3_ce0;
    end else begin
        prediction_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_3_we0 = grp_mlp_kernel_fu_569_prediction_3_we0;
    end else begin
        prediction_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_4_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_4_address0 = grp_mlp_kernel_fu_569_prediction_4_address0;
    end else begin
        prediction_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_4_ce0 = grp_mlp_kernel_fu_569_prediction_4_ce0;
    end else begin
        prediction_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_4_we0 = grp_mlp_kernel_fu_569_prediction_4_we0;
    end else begin
        prediction_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_5_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_5_address0 = grp_mlp_kernel_fu_569_prediction_5_address0;
    end else begin
        prediction_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_5_ce0 = grp_mlp_kernel_fu_569_prediction_5_ce0;
    end else begin
        prediction_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_5_we0 = grp_mlp_kernel_fu_569_prediction_5_we0;
    end else begin
        prediction_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_6_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_6_address0 = grp_mlp_kernel_fu_569_prediction_6_address0;
    end else begin
        prediction_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_6_ce0 = grp_mlp_kernel_fu_569_prediction_6_ce0;
    end else begin
        prediction_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_6_we0 = grp_mlp_kernel_fu_569_prediction_6_we0;
    end else begin
        prediction_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_7_address0 = zext_ln444_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_7_address0 = grp_mlp_kernel_fu_569_prediction_7_address0;
    end else begin
        prediction_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        prediction_7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_7_ce0 = grp_mlp_kernel_fu_569_prediction_7_ce0;
    end else begin
        prediction_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prediction_7_we0 = grp_mlp_kernel_fu_569_prediction_7_we0;
    end else begin
        prediction_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_0_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_0_address0 = grp_mlp_kernel_fu_569_sample_0_address0;
    end else begin
        sample_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_0_ce0 = grp_mlp_kernel_fu_569_sample_0_ce0;
    end else begin
        sample_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_0_ce1 = grp_mlp_kernel_fu_569_sample_0_ce1;
    end else begin
        sample_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd0))) begin
        sample_0_we0 = 1'b1;
    end else begin
        sample_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_1_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_1_address0 = grp_mlp_kernel_fu_569_sample_1_address0;
    end else begin
        sample_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_1_ce0 = grp_mlp_kernel_fu_569_sample_1_ce0;
    end else begin
        sample_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_1_ce1 = grp_mlp_kernel_fu_569_sample_1_ce1;
    end else begin
        sample_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd1))) begin
        sample_1_we0 = 1'b1;
    end else begin
        sample_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_2_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_2_address0 = grp_mlp_kernel_fu_569_sample_2_address0;
    end else begin
        sample_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_2_ce0 = grp_mlp_kernel_fu_569_sample_2_ce0;
    end else begin
        sample_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_2_ce1 = grp_mlp_kernel_fu_569_sample_2_ce1;
    end else begin
        sample_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd2))) begin
        sample_2_we0 = 1'b1;
    end else begin
        sample_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_3_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_3_address0 = grp_mlp_kernel_fu_569_sample_3_address0;
    end else begin
        sample_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_3_ce0 = grp_mlp_kernel_fu_569_sample_3_ce0;
    end else begin
        sample_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_3_ce1 = grp_mlp_kernel_fu_569_sample_3_ce1;
    end else begin
        sample_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd3))) begin
        sample_3_we0 = 1'b1;
    end else begin
        sample_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_4_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_4_address0 = grp_mlp_kernel_fu_569_sample_4_address0;
    end else begin
        sample_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_4_ce0 = grp_mlp_kernel_fu_569_sample_4_ce0;
    end else begin
        sample_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_4_ce1 = grp_mlp_kernel_fu_569_sample_4_ce1;
    end else begin
        sample_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd4))) begin
        sample_4_we0 = 1'b1;
    end else begin
        sample_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_5_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_5_address0 = grp_mlp_kernel_fu_569_sample_5_address0;
    end else begin
        sample_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_5_ce0 = grp_mlp_kernel_fu_569_sample_5_ce0;
    end else begin
        sample_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_5_ce1 = grp_mlp_kernel_fu_569_sample_5_ce1;
    end else begin
        sample_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd5))) begin
        sample_5_we0 = 1'b1;
    end else begin
        sample_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_6_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_6_address0 = grp_mlp_kernel_fu_569_sample_6_address0;
    end else begin
        sample_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_6_ce0 = grp_mlp_kernel_fu_569_sample_6_ce0;
    end else begin
        sample_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_6_ce1 = grp_mlp_kernel_fu_569_sample_6_ce1;
    end else begin
        sample_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd6))) begin
        sample_6_we0 = 1'b1;
    end else begin
        sample_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_7_address0 = zext_ln425_fu_798_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_7_address0 = grp_mlp_kernel_fu_569_sample_7_address0;
    end else begin
        sample_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_7_ce0 = grp_mlp_kernel_fu_569_sample_7_ce0;
    end else begin
        sample_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_7_ce1 = grp_mlp_kernel_fu_569_sample_7_ce1;
    end else begin
        sample_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln425_reg_1078 == 3'd7))) begin
        sample_7_we0 = 1'b1;
    end else begin
        sample_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln417_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln423_fu_688_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_mlp_kernel_fu_569_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln440_fu_822_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln440_fu_822_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln442_fu_844_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln389_1_fu_1004_p2 = (xor_ln389_fu_998_p2 & p_Val2_s_fu_274);

assign and_ln389_2_fu_1010_p2 = (select_ln389_3_fu_973_p3 & and_ln389_fu_992_p2);

assign and_ln389_fu_992_p2 = (shl_ln389_1_fu_980_p2 & lshr_ln389_fu_986_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_io = ((icmp_ln449_fu_1039_p2 == 1'd1) & (out_r_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state11_io = ((icmp_ln449_reg_1246 == 1'd1) & (out_r_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call4 = ((icmp_ln417_fu_668_p2 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign count_fu_1033_p2 = (8'd1 + count_1_fu_262);

assign grp_mlp_kernel_fu_569_ap_start = grp_mlp_kernel_fu_569_ap_start_reg;

assign high_2_fu_1028_p2 = (32'd16 + high_1_fu_266);

assign high_fu_816_p2 = (Hi_assign_reg_523 + 10'd8);

assign i_2_fu_828_p2 = (i2_0_reg_547 + 4'd1);

assign i_fu_674_p2 = (i_0_reg_500 + 4'd1);

assign icmp_ln389_fu_895_p2 = ((low_1_fu_270 > high_1_fu_266) ? 1'b1 : 1'b0);

assign icmp_ln417_fu_668_p2 = ((i_0_reg_500 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln423_fu_688_p2 = ((j_0_reg_535 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln440_fu_822_p2 = ((i2_0_reg_547 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln442_fu_844_p2 = ((j3_0_reg_558 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln449_fu_1039_p2 = ((count_fu_1033_p2 == 8'd8) ? 1'b1 : 1'b0);

assign icmp_ln681_fu_700_p2 = ((Lo_assign_reg_511 > Hi_assign_reg_523) ? 1'b1 : 1'b0);

assign j_1_fu_694_p2 = (j_0_reg_535 + 7'd1);

assign j_fu_850_p2 = (j3_0_reg_558 + 4'd1);

assign low_2_fu_1023_p2 = (32'd16 + low_1_fu_270);

assign low_fu_810_p2 = (Lo_assign_reg_511 + 10'd8);

assign lshr_ln389_fu_986_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln389_2_fu_953_p1;

assign lshr_ln681_1_fu_775_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln681_1_fu_772_p1;

assign lshr_ln681_fu_766_p2 = select_ln681_1_fu_741_p3 >> zext_ln681_fu_762_p1;

assign out_r_TDATA_int = (and_ln389_2_fu_1010_p2 | and_ln389_1_fu_1004_p2);

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

assign p_Result_2_fu_1016_p2 = (and_ln389_2_fu_1010_p2 | and_ln389_1_fu_1004_p2);

assign p_Result_s_fu_781_p2 = (lshr_ln681_reg_1122 & lshr_ln681_1_fu_775_p2);

assign select_ln389_1_fu_928_p3 = ((icmp_ln389_reg_1218[0:0] === 1'b1) ? trunc_ln389_1_reg_1234 : trunc_ln389_reg_1226);

assign select_ln389_2_fu_933_p3 = ((icmp_ln389_reg_1218[0:0] === 1'b1) ? sub_ln389_fu_918_p2 : trunc_ln389_reg_1226);

assign select_ln389_3_fu_973_p3 = ((icmp_ln389_reg_1218[0:0] === 1'b1) ? tmp_20_fu_963_p4 : shl_ln389_fu_957_p2);

assign select_ln389_fu_923_p3 = ((icmp_ln389_reg_1218[0:0] === 1'b1) ? trunc_ln389_reg_1226 : trunc_ln389_1_reg_1234);

assign select_ln681_1_fu_741_p3 = ((icmp_ln681_fu_700_p2[0:0] === 1'b1) ? tmp_19_fu_706_p4 : tmp_data_V_1_reg_1072);

assign select_ln681_2_fu_748_p3 = ((icmp_ln681_fu_700_p2[0:0] === 1'b1) ? sub_ln681_1_fu_721_p2 : Lo_assign_reg_511);

assign select_ln681_fu_733_p3 = ((icmp_ln681_fu_700_p2[0:0] === 1'b1) ? sub_ln681_fu_715_p2 : sub_ln681_2_fu_727_p2);

assign shl_ln389_1_fu_980_p2 = 128'd340282366920938463463374607431768211455 << zext_ln389_1_fu_949_p1;

assign shl_ln389_fu_957_p2 = tmp_V_fu_915_p1 << zext_ln389_fu_945_p1;

assign sub_ln389_1_fu_939_p2 = (8'd127 - select_ln389_fu_923_p3);

assign sub_ln389_fu_918_p2 = (8'd127 - trunc_ln389_reg_1226);

assign sub_ln681_1_fu_721_p2 = (10'd511 - Lo_assign_reg_511);

assign sub_ln681_2_fu_727_p2 = (Hi_assign_reg_523 - Lo_assign_reg_511);

assign sub_ln681_3_fu_756_p2 = (10'd511 - select_ln681_fu_733_p3);

assign sub_ln681_fu_715_p2 = (Lo_assign_reg_511 - Hi_assign_reg_523);

integer ap_tvar_int_0;

always @ (tmp_data_V_1_reg_1072) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_19_fu_706_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_19_fu_706_p4[ap_tvar_int_0] = tmp_data_V_1_reg_1072[511 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln389_fu_957_p2) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_20_fu_963_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_20_fu_963_p4[ap_tvar_int_1] = shl_ln389_fu_957_p2[127 - ap_tvar_int_1];
        end
    end
end

assign tmp_V_fu_915_p1 = $signed(val_assign_reg_1213);

assign tmp_last_V_fu_834_p2 = ((i2_0_reg_547 == 4'd7) ? 1'b1 : 1'b0);

assign trunc_ln389_1_fu_905_p1 = high_1_fu_266[7:0];

assign trunc_ln389_fu_901_p1 = low_1_fu_270[7:0];

assign trunc_ln425_1_fu_786_p1 = p_Result_s_fu_781_p2[7:0];

assign trunc_ln425_fu_684_p1 = i_0_reg_500[2:0];

assign trunc_ln444_fu_840_p1 = i2_0_reg_547[2:0];

assign xor_ln389_fu_998_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln389_fu_992_p2);

assign zext_ln389_1_fu_949_p1 = select_ln389_1_fu_928_p3;

assign zext_ln389_2_fu_953_p1 = sub_ln389_1_fu_939_p2;

assign zext_ln389_fu_945_p1 = select_ln389_2_fu_933_p3;

assign zext_ln425_fu_798_p1 = j_0_reg_535;

assign zext_ln444_fu_856_p1 = j3_0_reg_558;

assign zext_ln681_1_fu_772_p1 = sub_ln681_3_reg_1117;

assign zext_ln681_fu_762_p1 = select_ln681_2_fu_748_p3;

endmodule //mlp
