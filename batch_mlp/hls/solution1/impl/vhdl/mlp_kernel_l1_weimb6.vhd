-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weimb6_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weimb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11010000", 1 => "00101100", 2 => "00100001", 3 => "10100000", 
    4 => "10110111", 5 => "10011110", 6 => "01010101", 7 => "00000000", 
    8 => "10000011", 9 => "10110111", 10 => "11110110", 11 => "10000101", 
    12 => "01010110", 13 => "01010000", 14 => "10011011", 15 => "10001111", 
    16 => "11111001", 17 => "00011001", 18 => "01100110", 19 => "10010001", 
    20 => "10110101", 21 => "01011000", 22 => "00010010", 23 => "00101011", 
    24 => "11111101", 25 => "00111010", 26 => "00101100", 27 => "00000010", 
    28 => "00110111", 29 => "11101110", 30 => "11101101", 31 => "10110000", 
    32 => "11100011", 33 => "00011000", 34 => "01000011", 35 => "11101010", 
    36 => "10101010", 37 => "10001011", 38 => "10101101", 39 => "11110101", 
    40 => "11011110", 41 => "01010101", 42 => "10111110", 43 => "10000110", 
    44 => "11001110", 45 => "11111000", 46 => "10010010", 47 => "00000000", 
    48 => "01101000", 49 => "11100011", 50 => "10111101", 51 => "01111010", 
    52 => "00010110", 53 => "00101111", 54 => "01100011", 55 => "00010010", 
    56 => "11010010", 57 => "00011110", 58 => "10100010", 59 => "00101001", 
    60 => "01001000", 61 => "01100101", 62 => "11110111", 63 => "11111111", 
    64 => "00010101", 65 => "11101011", 66 => "01111001", 67 => "11100011", 
    68 => "01111111", 69 => "01000001", 70 => "01000011", 71 => "00100000", 
    72 => "10110111", 73 => "11000101", 74 => "11111010", 75 => "11010110", 
    76 => "11010000", 77 => "10001110", 78 => "01000011", 79 => "00011101", 
    80 => "11100111", 81 => "11101000", 82 => "00101111", 83 => "00111010", 
    84 => "10001110", 85 => "11001010", 86 => "00110110", 87 => "10001101", 
    88 => "01110111", 89 => "10100000", 90 => "00110010", 91 => "00001000", 
    92 => "11001111", 93 => "00100111", 94 => "00101010", 95 => "11000110", 
    96 => "01110100", 97 => "01110101", 98 => "10001001", 99 => "00111001", 
    100 => "10110100", 101 => "11111100", 102 => "00101100", 103 => "01011111", 
    104 => "00101000", 105 => "01111111", 106 => "00010100", 107 => "10011100", 
    108 => "00100010", 109 => "01010010", 110 => "01001010", 111 => "11001101", 
    112 => "11100110", 113 => "10110011", 114 => "00101111", 115 => "00001101", 
    116 => "00101111", 117 => "10100110", 118 => "10100100", 119 => "10111011", 
    120 => "10100001", 121 => "11000011", 122 => "00100100", 123 => "11110101", 
    124 => "11011010", 125 => "11111011", 126 => "01101001", 127 => "10101010", 
    128 => "01000000", 129 => "11000111", 130 => "10010011", 131 => "01101101", 
    132 to 133=> "10110111", 134 => "10001110", 135 => "01101110", 136 => "10101110", 
    137 => "00001101", 138 => "00001110", 139 => "00111001", 140 => "10111101", 
    141 to 142=> "01000110", 143 => "00000100", 144 => "11010100", 145 => "11011000", 
    146 => "10110011", 147 => "00011011", 148 => "11001001", 149 => "00011101", 
    150 => "10000010", 151 => "11101110", 152 => "00010110", 153 => "10001111", 
    154 => "11010101", 155 => "10011111", 156 => "00101101", 157 => "11111001", 
    158 => "10100110", 159 => "01001010", 160 => "10000010", 161 => "00111101", 
    162 => "00000110", 163 => "00001111", 164 => "11011111", 165 => "00100110", 
    166 => "01101101", 167 => "10111010", 168 => "10111000", 169 => "00111111", 
    170 => "01000001", 171 => "11010011", 172 => "01101000", 173 => "10110000", 
    174 => "10111011", 175 => "00000000", 176 => "00001111", 177 => "00000110", 
    178 => "11000001", 179 => "11110111", 180 => "00111101", 181 => "11010101", 
    182 => "01001111", 183 => "00110111", 184 => "00000000", 185 => "01100001", 
    186 => "01101001", 187 => "11010011", 188 => "00000111", 189 => "11110001", 
    190 => "01110011", 191 => "11100110", 192 => "10100100", 193 => "01101100", 
    194 => "11000001", 195 => "11111011", 196 => "01011001", 197 => "01100100", 
    198 => "10111110", 199 => "10111000", 200 => "01110111", 201 => "00011100", 
    202 => "00100111", 203 => "01100001", 204 => "01011011", 205 => "11101011", 
    206 => "10111111", 207 => "01001100", 208 => "01011000", 209 => "10100111", 
    210 => "00001101", 211 => "11010110", 212 => "00111101", 213 => "10100100", 
    214 => "10110111", 215 => "00110111", 216 => "11010000", 217 => "01100011", 
    218 => "01111011", 219 => "00010100", 220 => "11110000", 221 => "00011100", 
    222 => "00111010", 223 => "01101011", 224 => "00001100", 225 => "11001010", 
    226 => "00000000", 227 => "10000111", 228 => "00101011", 229 => "00000010", 
    230 => "01100001", 231 => "00011100", 232 => "00111101", 233 => "11100110", 
    234 => "01111110", 235 => "01100000", 236 => "10110001", 237 => "11001001", 
    238 => "00111101", 239 => "00101100", 240 => "11000011", 241 => "01000001", 
    242 => "01110100", 243 => "10011011", 244 => "11010000", 245 => "00011000", 
    246 => "01011001", 247 => "10110100", 248 => "01011110", 249 => "00111011", 
    250 => "00101111", 251 => "00000111", 252 => "11011101", 253 => "11000000", 
    254 => "01111000", 255 => "11111010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weimb6 is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weimb6 is
    component mlp_kernel_l1_weimb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weimb6_rom_U :  component mlp_kernel_l1_weimb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


