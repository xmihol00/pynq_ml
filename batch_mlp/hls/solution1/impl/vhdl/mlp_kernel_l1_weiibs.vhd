-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weiibs_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weiibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00101111", 1 => "11100110", 2 => "01100100", 3 => "11101011", 
    4 => "01011110", 5 => "11011001", 6 => "00011100", 7 => "10001001", 
    8 => "00111100", 9 => "10010001", 10 => "11100011", 11 => "10110011", 
    12 => "01011100", 13 => "11010000", 14 => "00111111", 15 => "10111110", 
    16 => "00100101", 17 => "00110110", 18 => "10011110", 19 => "01000011", 
    20 => "00011101", 21 => "10101001", 22 => "10100001", 23 => "11000100", 
    24 => "10010110", 25 => "00001101", 26 => "10100011", 27 => "10010011", 
    28 => "11011011", 29 => "01101010", 30 => "10101100", 31 => "00111001", 
    32 => "11000110", 33 => "10111010", 34 => "11000010", 35 => "11000111", 
    36 => "01000110", 37 => "01111101", 38 => "01010011", 39 => "10100000", 
    40 => "11101111", 41 => "01000101", 42 => "11101110", 43 => "00110111", 
    44 => "01110011", 45 => "11000101", 46 => "10110001", 47 => "01101111", 
    48 => "11011101", 49 => "11000011", 50 => "01010011", 51 => "11000001", 
    52 => "01101010", 53 => "00000111", 54 => "10011001", 55 => "01001010", 
    56 => "11101111", 57 => "00100000", 58 => "01010110", 59 => "00001111", 
    60 => "10111100", 61 => "10110001", 62 => "11000000", 63 => "11110110", 
    64 => "01111001", 65 => "11110100", 66 => "10111010", 67 => "11111000", 
    68 => "00011101", 69 => "01110011", 70 => "01010000", 71 => "10101001", 
    72 => "00000010", 73 => "01111010", 74 => "11010001", 75 => "00100101", 
    76 => "00000100", 77 => "00000001", 78 => "10111101", 79 => "11011110", 
    80 => "01000000", 81 => "10110011", 82 => "00101101", 83 => "01110110", 
    84 => "00100100", 85 => "10011001", 86 => "11100010", 87 => "00110000", 
    88 => "11100111", 89 => "10001100", 90 => "01101011", 91 => "10001001", 
    92 => "01100010", 93 => "10111010", 94 => "10001110", 95 => "10001111", 
    96 => "00110101", 97 => "01011001", 98 => "10111010", 99 => "10011001", 
    100 => "11011000", 101 => "01101101", 102 => "01101100", 103 => "01111010", 
    104 => "00110000", 105 => "10101000", 106 => "01111101", 107 => "11111101", 
    108 => "00000000", 109 => "10101010", 110 => "00100111", 111 => "10100010", 
    112 => "00100111", 113 => "00100101", 114 => "10101001", 115 => "01000110", 
    116 => "01101001", 117 => "10011011", 118 => "10001011", 119 => "10111011", 
    120 => "10100000", 121 => "01101000", 122 => "01101111", 123 => "00110101", 
    124 => "00100011", 125 => "10010010", 126 => "10100011", 127 => "01111010", 
    128 => "01011000", 129 => "01011110", 130 => "01011011", 131 => "00010101", 
    132 => "10110111", 133 => "01011101", 134 => "01111001", 135 => "01100001", 
    136 => "11100011", 137 => "10110000", 138 => "00000010", 139 => "01101010", 
    140 => "11101100", 141 => "01100111", 142 => "01111010", 143 => "01111110", 
    144 => "10001010", 145 => "10010111", 146 => "01011011", 147 => "11010010", 
    148 => "10001100", 149 => "01011000", 150 => "01110000", 151 => "11001110", 
    152 => "11011101", 153 => "00110000", 154 => "00101111", 155 => "01101111", 
    156 => "00000000", 157 => "11011000", 158 => "01011111", 159 => "00010010", 
    160 => "00010100", 161 => "00011001", 162 => "10111110", 163 => "01010000", 
    164 => "10111100", 165 => "11111111", 166 => "00101110", 167 => "10001111", 
    168 => "00010011", 169 => "10100011", 170 => "00111111", 171 => "00111100", 
    172 => "01010010", 173 => "01000000", 174 => "01001011", 175 => "01110010", 
    176 => "00000010", 177 => "10001110", 178 => "01101100", 179 => "00011011", 
    180 => "11110100", 181 => "11100001", 182 => "10100000", 183 => "10111110", 
    184 => "00011000", 185 => "10100111", 186 => "10001001", 187 => "00101000", 
    188 => "11011011", 189 => "00101100", 190 => "11111010", 191 => "00111110", 
    192 => "00111001", 193 => "00101010", 194 => "11111111", 195 => "10010110", 
    196 => "10010111", 197 => "10100000", 198 => "01000111", 199 => "11011000", 
    200 => "00001011", 201 => "10010010", 202 => "11001000", 203 => "10101011", 
    204 => "00010110", 205 => "01101001", 206 => "10011110", 207 => "01011101", 
    208 => "00110101", 209 => "10010000", 210 => "00111000", 211 => "00010111", 
    212 => "01011011", 213 => "01111001", 214 => "11011000", 215 => "00001011", 
    216 => "10010011", 217 => "01100100", 218 => "10110101", 219 => "11111001", 
    220 => "01101001", 221 => "01001011", 222 => "11000010", 223 => "01000011", 
    224 => "10111011", 225 => "00001010", 226 => "01000001", 227 => "11111111", 
    228 => "10100110", 229 => "11110111", 230 => "11010101", 231 => "00111001", 
    232 => "11010001", 233 => "10111000", 234 => "11001111", 235 => "10010111", 
    236 => "11101111", 237 => "01111000", 238 => "11111010", 239 => "00010100", 
    240 => "11110111", 241 => "00001010", 242 => "11101110", 243 => "01000010", 
    244 => "11110000", 245 => "00111110", 246 => "01100011", 247 => "11100100", 
    248 => "01001011", 249 => "01110100", 250 => "11110001", 251 => "01101011", 
    252 => "00101000", 253 => "10011110", 254 => "01101111", 255 => "11000010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weiibs is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weiibs is
    component mlp_kernel_l1_weiibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weiibs_rom_U :  component mlp_kernel_l1_weiibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


