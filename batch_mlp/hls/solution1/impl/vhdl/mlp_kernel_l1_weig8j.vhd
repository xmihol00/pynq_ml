-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weig8j_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weig8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01000011", 1 => "00100010", 2 => "00001001", 3 => "01111110", 
    4 => "11111001", 5 => "01011010", 6 => "00011010", 7 => "01101110", 
    8 => "10111001", 9 => "10010110", 10 => "01000100", 11 => "01010101", 
    12 => "01010011", 13 => "10110010", 14 => "11010000", 15 => "10000111", 
    16 => "11111011", 17 => "11010001", 18 => "01011010", 19 => "01011011", 
    20 => "01010000", 21 => "10110101", 22 => "01101001", 23 => "00111101", 
    24 => "01100101", 25 => "11000111", 26 => "01010111", 27 => "10110100", 
    28 to 29=> "11101101", 30 => "01001010", 31 => "00011001", 32 => "11111000", 
    33 => "10100110", 34 => "00000111", 35 => "11100000", 36 => "01011111", 
    37 => "00111001", 38 => "00011000", 39 => "10000010", 40 => "00111111", 
    41 => "00001001", 42 => "01000111", 43 => "11010010", 44 => "11011000", 
    45 => "10100100", 46 => "01001011", 47 => "10100011", 48 => "11110100", 
    49 => "01100110", 50 => "00010110", 51 => "10110000", 52 => "00111011", 
    53 => "01000111", 54 => "11111111", 55 => "10110100", 56 => "01011010", 
    57 => "11110100", 58 => "10101111", 59 => "11010011", 60 => "00001000", 
    61 => "10011100", 62 => "11001100", 63 => "11111101", 64 => "01111001", 
    65 => "11101010", 66 => "10100001", 67 => "01111000", 68 => "11101010", 
    69 => "11011100", 70 => "00100000", 71 => "01100010", 72 => "00100000", 
    73 => "10011011", 74 => "11110001", 75 => "10011110", 76 => "01001000", 
    77 => "11010001", 78 => "11010101", 79 => "00100110", 80 => "10010011", 
    81 => "01011101", 82 => "10001010", 83 => "01001110", 84 => "00000001", 
    85 => "10010101", 86 => "10110100", 87 => "10100101", 88 => "00110010", 
    89 => "01101111", 90 => "10000011", 91 => "11010001", 92 => "01110001", 
    93 => "11010111", 94 => "11010101", 95 => "11101001", 96 => "10010100", 
    97 => "00001100", 98 => "00001111", 99 => "00011001", 100 => "00000111", 
    101 => "01000101", 102 => "11110000", 103 => "01000110", 104 => "11110111", 
    105 => "01111010", 106 => "01100111", 107 => "01110001", 108 => "01111010", 
    109 => "01000011", 110 => "01110000", 111 => "10001000", 112 => "11110011", 
    113 => "01111100", 114 => "01000000", 115 => "00011000", 116 => "10000011", 
    117 => "11101101", 118 => "00011101", 119 => "01110101", 120 => "11001110", 
    121 => "00011001", 122 => "10001001", 123 => "00100100", 124 => "01001001", 
    125 => "01111110", 126 => "11110001", 127 => "10111100", 128 => "11001100", 
    129 => "10001101", 130 => "11001000", 131 => "00000000", 132 => "01100110", 
    133 => "01100010", 134 => "10011000", 135 => "00110111", 136 => "10000100", 
    137 => "11000101", 138 => "11101000", 139 => "11101100", 140 => "01110010", 
    141 => "10001010", 142 => "01001101", 143 => "11110000", 144 => "01100101", 
    145 => "11101111", 146 => "11111010", 147 => "11001001", 148 => "10111101", 
    149 => "11100011", 150 => "01110100", 151 => "11101001", 152 => "00010100", 
    153 => "11110011", 154 => "11001100", 155 => "00011000", 156 => "11100101", 
    157 => "01100000", 158 => "00111110", 159 => "01010111", 160 => "11011001", 
    161 => "01011100", 162 => "10110010", 163 => "00000101", 164 => "00110001", 
    165 => "00000000", 166 => "11111100", 167 => "10011011", 168 => "10000110", 
    169 => "00011100", 170 => "10011110", 171 => "00000100", 172 => "00111101", 
    173 => "10010011", 174 => "01110000", 175 => "10110011", 176 => "01100011", 
    177 => "10100000", 178 => "01001110", 179 => "11011111", 180 => "11101100", 
    181 => "11000110", 182 => "10011011", 183 => "10001100", 184 => "10001011", 
    185 => "01001000", 186 => "00110000", 187 => "11111011", 188 => "00001100", 
    189 => "01101011", 190 => "10101001", 191 => "10111010", 192 => "11101110", 
    193 => "10100110", 194 => "11000011", 195 => "10011011", 196 => "00010100", 
    197 to 198=> "11101101", 199 => "10001010", 200 => "11011110", 201 => "01110111", 
    202 => "00001001", 203 => "11110100", 204 => "11110001", 205 => "00110010", 
    206 => "00101111", 207 => "10000110", 208 => "11101101", 209 => "00111111", 
    210 => "00010111", 211 => "11111100", 212 => "01001111", 213 => "01110110", 
    214 => "11010001", 215 => "00010000", 216 => "11101100", 217 => "01101000", 
    218 => "01101111", 219 => "10011111", 220 => "10111101", 221 => "01100010", 
    222 => "01100011", 223 => "10101101", 224 => "10100011", 225 => "11100000", 
    226 => "11001101", 227 => "11110111", 228 => "01011011", 229 => "10010100", 
    230 => "01010010", 231 => "11000111", 232 => "00110001", 233 => "11010001", 
    234 => "11011010", 235 => "01000000", 236 => "10010101", 237 => "10000111", 
    238 => "10101111", 239 => "00001101", 240 => "10001000", 241 => "00000001", 
    242 => "00100101", 243 => "00110101", 244 => "00111101", 245 => "00011011", 
    246 => "11001001", 247 => "11010110", 248 => "11100101", 249 => "10101100", 
    250 => "01010111", 251 => "01110110", 252 => "00000010", 253 to 254=> "11110111", 
    255 => "01001000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weig8j is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weig8j is
    component mlp_kernel_l1_weig8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weig8j_rom_U :  component mlp_kernel_l1_weig8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


