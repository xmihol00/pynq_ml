-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l1_weicud_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l1_weicud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00001001", 1 => "10100100", 2 => "10010100", 3 => "01001111", 
    4 => "01101111", 5 => "00010101", 6 => "10100100", 7 => "10111000", 
    8 => "10110100", 9 => "10001001", 10 => "11011111", 11 => "01010010", 
    12 => "11100100", 13 => "00111111", 14 => "10101110", 15 => "11001011", 
    16 => "01110011", 17 => "10010110", 18 => "01100111", 19 => "11100011", 
    20 => "11110111", 21 => "10011111", 22 => "10101110", 23 => "11101111", 
    24 => "11010011", 25 => "10010110", 26 => "11110101", 27 => "01011001", 
    28 => "11011001", 29 => "00101110", 30 => "00010010", 31 => "01011010", 
    32 => "10100011", 33 => "11011100", 34 => "01011110", 35 => "00011000", 
    36 => "11110000", 37 => "11001011", 38 => "01110011", 39 => "11010011", 
    40 => "01100110", 41 => "10100000", 42 => "11101110", 43 => "00101000", 
    44 => "00100101", 45 => "01000111", 46 => "11111110", 47 => "10000100", 
    48 => "01001101", 49 => "00100001", 50 => "11111101", 51 => "10100100", 
    52 => "10011100", 53 => "10001111", 54 => "11001101", 55 => "10101000", 
    56 => "10100111", 57 => "01000000", 58 => "10000100", 59 => "00001010", 
    60 => "01101000", 61 => "01011101", 62 => "00101001", 63 => "01111011", 
    64 => "11110101", 65 => "10010110", 66 => "11011010", 67 => "10011011", 
    68 => "00100011", 69 => "00011001", 70 => "01010000", 71 => "10101011", 
    72 => "01111100", 73 => "10001110", 74 => "10101100", 75 => "10100101", 
    76 => "01011001", 77 => "10111110", 78 => "11000100", 79 => "00010010", 
    80 => "01110111", 81 => "10011000", 82 => "11010101", 83 => "10111000", 
    84 => "01101011", 85 => "00101000", 86 => "10111001", 87 => "00110100", 
    88 => "11011110", 89 => "10011000", 90 => "11111010", 91 => "11011010", 
    92 => "10101101", 93 => "00110111", 94 => "10001001", 95 => "10010111", 
    96 => "01111100", 97 => "11001101", 98 => "00100000", 99 => "11001001", 
    100 => "11010100", 101 => "00100110", 102 => "00011000", 103 => "11110101", 
    104 => "00100000", 105 => "10001100", 106 => "10001111", 107 => "00101111", 
    108 => "01100011", 109 => "11011000", 110 => "10110100", 111 => "00010100", 
    112 to 113=> "11000111", 114 => "11010100", 115 => "00111111", 116 => "11111110", 
    117 to 118=> "10101100", 119 => "01001111", 120 => "01011101", 121 => "11111010", 
    122 => "10000110", 123 => "10011010", 124 => "11001111", 125 => "11010001", 
    126 => "10100101", 127 => "00111101", 128 => "00000000", 129 => "10001000", 
    130 => "10011011", 131 => "00000111", 132 => "00000001", 133 => "01110100", 
    134 => "01010101", 135 => "01101011", 136 => "01011101", 137 => "11111000", 
    138 => "01000001", 139 => "00100100", 140 => "01001101", 141 => "01100100", 
    142 => "11100100", 143 => "11010111", 144 => "01111110", 145 => "01100111", 
    146 => "01001101", 147 => "00100101", 148 => "10001000", 149 => "10100100", 
    150 => "01010001", 151 => "11111101", 152 => "11101100", 153 => "01101000", 
    154 => "01010010", 155 => "00100101", 156 => "01011101", 157 => "01011001", 
    158 => "00010100", 159 => "10100001", 160 => "01111000", 161 => "11110110", 
    162 => "01010100", 163 => "10000101", 164 => "01100100", 165 => "00111000", 
    166 => "10010101", 167 => "11011001", 168 => "11011011", 169 => "00100111", 
    170 => "01001011", 171 => "01000000", 172 => "01001111", 173 => "11100010", 
    174 => "00010100", 175 => "01100110", 176 => "10011100", 177 => "00110100", 
    178 => "11001110", 179 => "00110101", 180 => "00101101", 181 => "00111001", 
    182 => "10111110", 183 => "11000111", 184 => "01110000", 185 => "11101011", 
    186 => "00010001", 187 => "11100001", 188 => "01011011", 189 => "11100000", 
    190 => "01101111", 191 => "01010011", 192 => "11011100", 193 => "00100011", 
    194 => "10110000", 195 => "10010100", 196 => "11010111", 197 => "11010001", 
    198 => "00001101", 199 => "00000001", 200 => "01100110", 201 => "10010000", 
    202 => "01110111", 203 => "01001111", 204 => "01011110", 205 => "01101100", 
    206 => "00111111", 207 => "01011011", 208 => "00101101", 209 => "10011010", 
    210 => "11111000", 211 => "00101101", 212 => "00100001", 213 => "01101011", 
    214 => "10101101", 215 => "10101011", 216 => "01110100", 217 => "10011000", 
    218 => "10101100", 219 => "11000000", 220 => "10011001", 221 => "11101101", 
    222 => "01001110", 223 => "00001100", 224 => "10010110", 225 => "10101110", 
    226 => "00111101", 227 => "10010010", 228 => "00011001", 229 => "11101111", 
    230 => "00011110", 231 => "00100111", 232 => "10011100", 233 => "11101001", 
    234 => "10111001", 235 => "01111111", 236 => "01000010", 237 => "00000110", 
    238 => "00001011", 239 => "10010001", 240 => "00000010", 241 => "01010000", 
    242 => "11110001", 243 => "11101101", 244 => "11101010", 245 => "01011011", 
    246 => "10100110", 247 => "01110001", 248 => "00110110", 249 => "10010000", 
    250 => "01100011", 251 => "10000001", 252 => "00010010", 253 => "11101100", 
    254 => "00110001", 255 => "01100001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l1_weicud is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l1_weicud is
    component mlp_kernel_l1_weicud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l1_weicud_rom_U :  component mlp_kernel_l1_weicud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


