# 1 "pipelined_mlp.cpp"
# 1 "pipelined_mlp.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    void _ssdm_SetStreamDepth(...) __attribute__ ((nothrow));

    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "pipelined_mlp.cpp" 2

# 1 "./pipelined_mlp.h" 1



# 1 "/usr/include/inttypes.h" 1 3 4
# 25 "/usr/include/inttypes.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 464 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 465 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/inttypes.h" 2 3 4

# 1 "/mnt/sdc3/david/Xilinx/Vivado/2020.1/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 1 3 4
# 33 "/mnt/sdc3/david/Xilinx/Vivado/2020.1/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 34 "/mnt/sdc3/david/Xilinx/Vivado/2020.1/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 2 3 4
# 28 "/usr/include/inttypes.h" 2 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();

}
# 5 "./pipelined_mlp.h" 2
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_axi_sdata.h" 1
# 86 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_axi_sdata.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 1
# 54 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h" 1
# 57 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_decl.h" 1
# 100 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h" 2
# 157 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h" 2
# 562 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 2
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h" 1
# 80 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 391 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 482 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 586 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 699 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 717 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 828 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 877 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 986 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1053 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1293 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1352 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1371 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1399 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1427 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1461 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1500 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1524 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1555 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1592 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1629 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1659 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1722 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1741 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1768 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1799 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1831 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1850 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1958 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 2
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h" 1
# 73 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 733 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 772 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 810 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 832 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1030 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1089 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1112 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1140 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1189 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1336 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1360 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }
# 95 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }
# 236 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 359 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_special.h" 1
# 61 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 360 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 2







# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h" 1
# 55 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h" 1
# 62 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 1
# 63 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h" 2
# 133 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1192 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2213 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2301 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h" 2
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h" 1
# 70 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 257 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 287 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 299 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
  }
# 311 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 633 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 696 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 742 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 145 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 276 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 307 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 398 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_special.h" 1
# 61 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 399 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_fixed.h" 2
# 368 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 2
# 87 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_axi_sdata.h" 2

template<int D,int U,int TI,int TD>
  struct ap_axis{
    ap_int<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<U> user;
    ap_uint<1> last;
    ap_uint<TI> id;
    ap_uint<TD> dest;
  };

template<int D>
  struct ap_axis <D, 0, 0, 0>{
    ap_int<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<1> last;
  };

template<int D,int U,int TI,int TD>
  struct ap_axiu{
    ap_uint<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<U> user;
    ap_uint<1> last;
    ap_uint<TI> id;
    ap_uint<TD> dest;
  };

template<int D>
  struct ap_axiu <D, 0, 0, 0>{
    ap_uint<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<1> last;
  };


template<int D,int U,int TI,int TD> struct qdma_axis;

template<int D>
  struct qdma_axis <D, 0, 0, 0>{

    ap_uint<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<1> last;

    ap_uint<D> get_data() const { return data; }
    ap_uint<(D+7)/8> get_keep() const { return keep; }
    ap_uint<1> get_last() const { return last; }

    void set_data(const ap_uint<D> &d) { data = d; }
    void set_keep(const ap_uint<(D+7)/8> &k) { keep = k; }
    void set_last(const ap_uint<1> &l) { last = l; }
    void keep_all() {
       ap_uint<(D+7)/8> k = 0;
       keep = ~k;
     }

    qdma_axis(ap_uint<D> d = ap_uint<D>(), ap_uint<(D+7)/8> k = ap_uint<(D+7)/8>(), ap_uint<1> l = ap_uint<1>()) : data(d), keep(k), last(l) {}
    qdma_axis(const qdma_axis<D, 0, 0, 0> &d) : data(d.data), keep(d.keep), last(d.last) {}
  };
# 6 "./pipelined_mlp.h" 2
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/ap_int.h" 1
# 7 "./pipelined_mlp.h" 2
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/hls_stream.h" 1
# 66 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/hls_stream.h"
# 1 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/hls_stream.h" 2


namespace hls {
# 88 "/home/david/Xilinx/Vivado/2020.1/common/technology/autopilot/hls_stream.h"
template<typename __STREAM_T__, int DEPTH=0>
class stream;
template<typename __STREAM_T__>
class stream<__STREAM_T__, 0>
{
  public:

    inline __attribute__((always_inline)) stream() {
      _ssdm_SetStreamDepth(this, 0);
    }


    inline __attribute__((always_inline)) stream(const char* name) {
      _ssdm_SetStreamDepth(this, 0);
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) bool empty() const {

        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;



    }

    inline __attribute__((always_inline)) bool full() const {

        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;



    }


    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {
        __STREAM_T__ tmp;

        _ssdm_StreamRead(&V, &tmp);



        return tmp;
    }


    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;



    }


    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }


    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;



    }



    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }


  public:
    __STREAM_T__ V ;
};

template<typename __STREAM_T__, int DEPTH>
class stream : public stream<__STREAM_T__, 0> {
public:
  inline __attribute__((always_inline)) stream() {
      _ssdm_SetStreamDepth(this, DEPTH);
  }
};

}
# 8 "./pipelined_mlp.h" 2
# 1 "./weights_biases.h" 1
# 9 "./pipelined_mlp.h" 2
# 22 "./pipelined_mlp.h"
typedef ap_axiu<128, 0, 0, 0> axis_in_t;
typedef ap_axiu<64, 0, 0, 0> axis_out_t;

void mlp(hls::stream<axis_in_t> &in, hls::stream<axis_out_t> &out);
# 3 "pipelined_mlp.cpp" 2

void read_input(hls::stream<axis_in_t> &in, hls::stream<uint8_t> l1_in[2])
{_ssdm_SpecArrayDimSize(l1_in, 2);
    int j_limit = 128 / 8;
    int i_limit = 784 / j_limit;

    int low;
    int high;

load_sample:
    for (int i = 0; i < i_limit; i++)
    {
#pragma HLS PIPELINE
 low = 0;
        high = 8 - 1;

        axis_in_t temp = in.read();
        for (int j = 0; j < j_limit; j++)
        {
            l1_in[0].write(temp.data.range(high, low));
            l1_in[1].write(temp.data.range(high, low));

            low += 8;
            high += 8;
        }
    }
}

void write_output(hls::stream<int32_t> &l3_out, hls::stream<axis_out_t> &out)
{
    int j_limit = 64 / 32;
    int i_limit = 10 / j_limit;

write_prediction:
    for (int i = 0; i < i_limit; i++)
    {
#pragma HLS PIPELINE
 axis_out_t temp;
        int low = 0;
        int high = 32 - 1;

        for (int j = 0; j < j_limit; j++)
        {
            temp.data.range(high, low) = l3_out.read();

            low += 32;
            high += 32;
        }

        ap_uint<1> last = 0;
        if (i == i_limit * 5 - 1)
        {
            last = 1;
        }

        temp.last = last;
        temp.keep = -1;

        out.write(temp);
    }
}

void mlp_l1(const int8_t l1_weights[128][784], const int8_t l1_biases[128], hls::stream<uint8_t> l1_in[2], hls::stream<int16_t> &l1_out)
{_ssdm_SpecArrayDimSize(l1_weights, 128);_ssdm_SpecArrayDimSize(l1_biases, 128);_ssdm_SpecArrayDimSize(l1_in, 2);
#pragma HLS PIPELINE off

 int32_t l1_out_buffer[128 / 2];
#pragma HLS ARRAY_PARTITION variable=&l1_out_buffer factor=64 cyclic dim=1

l1:
    for (int k = 0; k < 2; k++)
    {
    l1_output_reset:
        for (int i = 0; i < 128 / 2; i++)
        {
#pragma HLS PIPELINE
 l1_out_buffer[i] = 0;
        }

    l1_mat_mul_outer:
        for (int i = 0; i < 784; i++)
        {
#pragma HLS PIPELINE
 uint8_t input = l1_in[k].read();
        l1_mat_mul_inner:
            for (int j = 0; j < 128 / 2; j++)
            {
#pragma HLS UNROLL
 l1_out_buffer[j] += l1_weights[k * (128 / 2) + j][i] * input;
            }
        }

    l1_bias_relu_write:
        for (int i = 0; i < 128 / 2; i++)
        {
#pragma HLS PIPELINE
 l1_out_buffer[i] += l1_biases[k * (128 / 2) + i];
            l1_out_buffer[i] = l1_out_buffer[i] >> 8;
            l1_out_buffer[i] = l1_out_buffer[i] < 0 ? 0 : l1_out_buffer[i];
            l1_out.write((int16_t)l1_out_buffer[i]);
        }
    }
}

void mlp_l2(const int8_t l2_weights[64][128], const int8_t l2_biases[64], hls::stream<int16_t> &l2_in, hls::stream<int16_t> &l2_out)
{_ssdm_SpecArrayDimSize(l2_weights, 64);_ssdm_SpecArrayDimSize(l2_biases, 64);
#pragma HLS PIPELINE off
 int32_t l2_out_buffer[64];
#pragma HLS ARRAY_PARTITION variable=&l2_out_buffer factor=64 cyclic dim=1

l2_output_reset:
    for (int i = 0; i < 64; i++)
    {
#pragma HLS PIPELINE
 l2_out_buffer[i] = 0;
    }

l2_mat_mul_outer:
    for (int i = 0; i < 128; i++)
    {
#pragma HLS PIPELINE
 int16_t input = l2_in.read();
    l2_mat_mul_inner:
        for (int j = 0; j < 64; j++)
        {
#pragma HLS UNROLL
 l2_out_buffer[j] += l2_weights[j][i] * input;
        }
    }

l2_bias_relu_write:
    for (int i = 0; i < 64; i++)
    {
#pragma HLS PIPELINE
 l2_out_buffer[i] += l2_biases[i];
        l2_out_buffer[i] = l2_out_buffer[i] >> 8;
        l2_out_buffer[i] = l2_out_buffer[i] < 0 ? 0 : l2_out_buffer[i];
        l2_out.write((int16_t)l2_out_buffer[i]);
    }
}

void mlp_l3(const int8_t l3_weights[10][64], const int8_t l3_biases[10], hls::stream<int16_t> &l3_in, hls::stream<int32_t> &l3_out)
{_ssdm_SpecArrayDimSize(l3_weights, 10);_ssdm_SpecArrayDimSize(l3_biases, 10);
#pragma HLS PIPELINE off
 int32_t l3_out_buffer[10 + 6];
#pragma HLS ARRAY_PARTITION variable=&l3_out_buffer factor=16 cyclic dim=1

l3_output_set:
    for (int i = 0; i < 10; i++)
    {
#pragma HLS PIPELINE
 l3_out_buffer[i] = l3_biases[i];
    }

l3_mat_mul_outer:
    for (int i = 0; i < 64; i++)
    {
#pragma HLS PIPELINE
 int16_t input = l3_in.read();
    l3_mat_mul_inner:
        for (int j = 0; j < 10; j++)
        {
#pragma HLS UNROLL
 l3_out_buffer[j] += l3_weights[j][i] * input;
        }
    }

l3_write:
    for (int i = 0; i < 10; i++)
    {
#pragma HLS PIPELINE
 l3_out.write(l3_out_buffer[i]);
    }
}

void mlp(hls::stream<axis_in_t> &in, hls::stream<axis_out_t> &out)
{
#pragma HLS INTERFACE s_axilite port=return bundle=control
#pragma HLS INTERFACE axis port=&in
#pragma HLS INTERFACE axis port=&out
#pragma HLS DATAFLOW

 const int8_t l1_weights[128][784] = { { -6, 18, 8, -18, 6, -13, -6, -8, 14, 9, 10, 3, 10, 3, 10, 18, 10, 17, -7, 15, -16, -5, 9, -2, -14, 16, -18, -17, 11, -17, 11, -3, 0, 4, -18, -27, -40, -20, -22, 12, -11, -43, -37, -37, -61, -49, -33, -20, -12, -25, -16, -17, 13, 15, 4, -12, 5, -5, -9, -22, -26, -25, -6, -38, -54, -32, -18, -38, -9, 16, -23, -18, -14, 26, 17, 21, 35, 30, -7, -35, -1, -17, -1, -8, 15, -7, 9, -40, -7, -11, -22, -48, -52, -28, 4, -34, -41, -31, -37, 10, -12, 27, 29, 15, 21, 41, 22, 44, 12, 18, -16, 12, -4, -11, 3, -22, -16, 15, -6, -32, -39, -9, 2, -60, -22, -27, -23, -11, -32, 3, 9, 10, -2, 36, 35, 43, 29, 33, -31, -13, 3, -8, -33, 24, -12, -25, 20, -26, 3, -3, 1, -11, -9, -24, -8, -22, -18, -28, 5, 17, 11, -8, -1, 52, 49, 28, -43, 12, -11, -2, 45, 11, -5, -8, 8, 8, 17, 36, 16, 1, -3, -10, 26, -9, -34, -12, 14, 42, 16, 20, 27, 26, -10, -30, -41, -48, 2, 16, 32, 25, 12, 27, 13, -19, -3, 14, 14, 22, 4, 33, 16, -13, -21, -53, -15, 40, 27, 8, 21, -26, 8, -7, -10, -17, 1, 32, 38, -8, -4, 7, 7, -22, -16, 5, 4, -7, -1, 9, -27, -29, -59, -38, 18, 40, 0, -7, -8, -17, 18, 2, -11, -1, 15, 25, -34, -1, -1, 30, 11, -30, -15, 1, 0, -10, -24, 14, 1, -70, -39, 15, 56, 42, 9, -6, -34, -16, 34, 10, 0, -2, -4, 15, -1, -15, 15, 17, -17, 10, 17, 4, 4, 28, -3, 5, -25, -92, -47, 18, 54, 43, -8, 0, -17, -10, 13, 25, -29, -11, 26, 25, -7, 10, -22, 0, 22, 29, 20, 6, 13, 27, 6, 19, -28, -71, -28, 31, 20, 22, 4, -3, -31, -13, 15, 16, -25, 1, -2, 14, 3, 42, -4, -20, 24, 6, 11, 8, 15, 1, 20, 31, -25, -50, -24, 7, 45, 42, 0, 0, -29, -54, -2, 25, 1, -16, 10, -13, 8, 21, -6, -12, -9, 3, 24, 20, 9, -6, -6, -29, -25, -32, -4, 24, 0, 28, -4, -33, -29, -30, -3, 32, 8, -19, -3, 9, -4, -3, 23, 7, -3, 19, 11, 12, -18, -3, -30, -15, 20, -10, -17, -6, -12, 33, -23, -62, -52, -39, -38, 20, 23, -9, 16, 0, 1, 29, 8, -3, 27, 20, 4, 1, -40, -17, -12, -13, 6, -3, 2, -2, 24, 9, -27, -37, -8, -6, -28, -12, -23, 14, 27, -2, -21, -26, 6, 19, 1, -17, -22, -54, -33, -29, -12, 0, 5, 5, -12, 26, 8, 20, 3, 44, 11, 25, 16, 3, 19, 1, 10, 4, 5, 5, 3, 15, -9, -18, -13, -46, -27, -11, 14, 32, 3, 6, 18, 22, 26, 9, -8, 40, 1, 12, 13, 30, 34, 11, -25, 11, -5, 23, 8, 20, 3, -37, -18, -30, -23, 16, 28, 21, 19, 11, 4, 10, 17, 16, -17, -5, -13, 5, 30, -3, 57, 13, 13, 0, -24, -13, -12, -7, -31, -27, -24, -15, 4, 33, 22, 21, 23, -18, 18, -9, -6, -4, -38, 2, -28, 11, 7, -5, 18, -9, 10, -2, 13, 11, -57, -45, -12, -50, -4, -1, 13, 22, 37, -11, -29, -28, 14, 10, 31, 8, -12, -13, -3, 3, 2, -18, 4, -14, -7, 14, 16, 5, -34, -32, -44, -53, -20, 12, 13, 30, 7, -9, -12, -13, -12, -3, 31, 43, 3, -6, -12, 25, 9, 27, -48, 17, -13, -16, 19, 2, -27, -48, -8, -8, -3, 3, 15, 30, -4, 1, -37, -27, -12, -18, -5, 3, 32, 24, 7, 23, 38, 9, -20, -7, -2, -15, -29, -19, -1, -1, 6, -11, 4, 2, 30, 34, 6, 12, 4, -40, -53, -45, -5, -7, 11, 6, -3, 24, 29, 20, 3, 14, -6, 4, 3, -52, -20, 21, 5, -4, 10, 24, 23, 42, 31, 0, 5, -23, -29, -33, -11, -13, -13, 9, 27, 23, 8, 32, -12, 3, -18, -8, -20, 25, 45, 23, -3, -1, 10, -18, 20, 29, 22, 14, -19, -8, 5, 32, -5, -30, 7, 32, -5, 10, -14, -2, 13, -5, 7, 10, -17, -19, -23, -18, 5, 7, 10, -14, -22, -45, -9, -8, -45, -15, -21, 4, -11, -6, 15, -14, 27, 14, -6, -7, 3, -12, -8, 15, -18, 17, 26, 58, 5, -3, 7, 40, 23, -6, 15, 80, 63, 97, 48, 38, 14, 2, 51, 75, 32, 12, -9, 14, 15, 12}, { -6, -18, 3, 13, 8, -14, 13, -12, 11, 6, -4, 14, -22, -13, 2, 3, -8, 13, -12, 7, 15, 11, -2, 7, 13, -16, 18, -15, 14, -8, 4, -8, -5, 11, -11, -11, -34, -14, -3, -33, 5, -13, -22, -4, -4, -13, -28, -8, -33, -4, -5, -28, -1, 16, 15, 10, -2, 4, -12, 32, 11, -24, -28, -32, -41, -41, -52, -50, -27, -20, -40, 0, -15, -17, -16, -25, -27, -7, -15, -13, -19, 15, -18, 17, 5, -2, -8, 22, -20, 3, -27, -30, -5, -26, -23, -10, 4, -10, 6, 14, 19, 7, -17, -6, 18, 1, -4, -25, -26, 32, -13, -18, 8, 8, 15, -4, -5, -37, -37, -11, -40, -10, -10, 20, -1, 21, 19, 15, 5, 14, 7, -10, -18, 13, 19, 4, 2, 7, -12, -42, 10, 17, 12, -4, -31, -28, -25, -19, -16, 10, 15, 24, 6, 1, 14, 1, -14, 14, -14, -38, -13, 9, 26, -15, 6, 4, -8, -28, -17, 11, 6, 13, -5, 26, 25, 4, 11, 9, 11, -8, 13, 2, -10, -16, -12, -5, -11, -2, -33, 5, 25, 25, 25, 2, 2, -19, 1, 17, 15, 33, -14, 14, 22, 13, 3, 18, 20, 19, -5, 8, -19, -41, -31, -1, 9, 8, -10, -14, 20, 35, 11, 20, -1, 1, 16, -14, 35, 8, 4, -10, -6, -26, -6, -7, 2, -21, 0, 14, -1, -12, -5, 6, -1, 11, 8, -15, 2, 19, 23, 40, -9, 20, -11, -13, 9, -19, -23, -12, -1, -10, -15, -27, -26, -14, 8, 0, 28, 21, 48, 24, 7, 16, -9, -12, 23, 10, 19, 19, 27, 18, 16, 0, 14, -17, -5, -7, -8, -13, 0, 0, -15, 0, 21, 22, 12, 46, 45, 16, 20, 26, 0, 20, 29, 21, 6, 56, 21, -15, 18, 21, 27, 6, -19, -31, 6, -36, 15, -11, 22, 11, -5, -10, -17, 1, -8, 4, -7, 6, 16, 3, 6, 6, -2, 16, 53, -9, 14, 17, 31, 21, 11, -15, -5, -18, 23, 2, 23, 15, 14, -10, -47, -31, -30, -26, 15, 7, 15, -4, 4, -19, -4, 34, 26, -12, -9, 22, -5, 29, 12, -5, 14, 5, 35, 30, 30, 21, 6, -8, -28, -35, -33, -14, 8, 29, 23, -4, -1, -22, -15, 44, 7, -17, -13, 12, -11, 7, 21, 48, 16, 19, 31, 19, 14, 22, 1, -3, -39, 12, -10, 13, 18, 20, 23, -4, -10, 2, 22, 22, 2, -4, 17, 4, 46, 47, 53, 25, 32, 11, 25, 20, 4, -3, 20, -28, -2, -13, -25, 7, 0, 3, -18, 14, -10, 20, 13, -8, 5, -17, -10, 5, 12, 52, 39, 27, 5, 14, 10, -22, -19, -11, 2, 11, -22, -4, -6, -13, 13, 2, 20, 1, 2, -14, -11, -14, 16, 21, -3, -13, 19, 16, 55, 30, 13, 2, 15, -5, 8, -9, 18, -6, 18, 17, -12, 3, -1, 9, -11, 3, -8, 6, 2, -34, 2, 25, -26, -9, 26, 17, 29, 40, 12, -8, -19, -3, 19, 13, 19, -4, 4, -10, -8, 7, 12, -3, 1, -8, 3, 1, 8, -18, -12, -15, 10, 21, 33, 20, 10, 51, 0, -15, -33, -32, -5, -19, -2, 17, 7, -20, 9, 0, 8, 3, 21, 4, -22, -9, 18, 3, 7, 2, -13, 36, 22, 10, 19, 31, 31, -4, -27, -21, -20, -19, -5, -10, -12, -8, -17, 14, 24, 8, -9, 7, -22, 9, -8, -7, -17, 1, 1, -15, 11, 4, -10, 11, 24, 12, 5, 1, -39, -19, -29, -28, 1, 14, 17, -7, -8, -12, -2, 0, 21, 16, 20, 10, 13, 1, -16, -14, -2, 11, -35, -25, 12, -11, -13, 2, -11, -25, -19, -12, 10, 3, 8, 13, -1, 1, -5, 40, 23, 39, 28, 0, 24, 7, -9, 4, -2, 16, -28, -45, -26, 2, -4, 1, 9, 35, 20, 38, 9, 20, 5, 14, 2, 13, 20, 10, 9, 25, 41, 4, -3, 10, -17, -9, 9, 18, -26, -30, -54, -39, -1, 0, -11, -4, 11, 31, 34, 11, 19, 13, 28, 25, -1, -6, 21, 28, 42, -12, -34, -9, 5, 14, 18, 4, -13, -33, 1, -2, -12, -33, -26, -34, -41, 23, 5, 4, -2, 3, 24, 2, -19, -14, 28, 17, 16, -14, 2, -8, 4, -16, 3, 7, -12, -14, -25, -34, -1, -43, -53, -33, 3, -6, -31, -8, -10, -26, -23, -27, -23, -28, -9, -2, 6, -17, 17, 15, -10, -8, -9, 10, -4, -11, -23, -10, -27, 6, -18, -20, 14, 1, -23, -60, -32, -27, -37, -21, -19, -17, -45, -29, -17, -19, 3, -18}, { 11, 4, -15, 15, 16, 0, 12, -17, -15, -9, 7, 12, 9, 17, 17, 2, 17, 10, -15, -10, 3, -10, 17, -11, -3, 13, 12, 3, 18, -15, 5, -12, -5, 19, -1, 21, -2, 1, 6, 6, 10, 31, 27, 30, 31, 20, 24, 34, 31, 8, 6, 6, -4, 1, 7, 18, 16, -5, 9, -9, 18, 26, 25, 20, -6, -16, 0, -8, 1, 11, 21, 42, 66, 51, 12, 19, 11, 6, -4, 6, 1, -9, 15, 17, 7, -11, -8, -15, -9, 11, 31, 2, -21, -38, -4, 4, -15, 30, 32, 48, 70, 34, 12, 14, -5, -8, -16, -6, -28, -39, -3, 12, 18, 9, 3, 2, 23, 3, 13, 10, -12, 22, 22, -11, -21, 13, -6, 30, 10, -24, -14, 20, -13, -21, -3, -28, -18, -24, -35, -15, -19, 12, 8, 25, 33, 11, -3, 8, 24, -14, 13, -21, 13, 29, 28, 3, -2, -32, -37, -23, -15, -26, -18, 12, 16, -13, -4, -20, -10, -11, 7, 29, 38, 10, -9, 2, -24, -17, -14, -19, 9, 33, 32, 9, -27, -5, -11, -17, -10, -23, 14, 18, 24, 10, 21, 15, 17, 13, -31, -19, 0, 5, 4, -1, -15, -10, 2, 7, 32, 38, 17, -12, -8, -34, -9, -28, -19, -10, -8, 2, 4, 9, 38, -13, -6, 2, -27, -31, -23, -33, -22, -20, -10, -17, -28, -9, 9, 52, 44, 6, -49, -12, -17, -16, -6, -8, -18, -10, 25, 23, 3, -17, -16, 25, -25, 19, -11, -17, -8, -3, -19, -30, -14, -23, 27, 49, 32, -14, -36, -17, -4, 13, -11, 27, 16, 15, 20, 33, -2, -4, 0, 19, -7, -5, -19, -52, -54, -31, -40, -24, -20, 13, 18, 64, 19, -14, -40, 12, -11, 27, -12, 18, 3, 26, 13, 8, 22, -2, -16, -5, -30, 1, -12, -23, -21, -34, -11, -2, 24, 42, 60, 16, -22, -11, -39, -2, -2, -6, -12, -15, 7, -5, -4, 1, 0, 5, -5, -4, -29, -13, -31, -6, -15, 11, 22, 35, 33, 46, 37, 8, -22, -6, -7, -19, 2, -7, -1, -14, 16, -1, 20, -20, 12, 1, -9, 20, -7, 1, -13, -3, 17, 7, 23, 65, 37, 32, 17, -15, -31, -23, -13, -7, -37, -8, -9, -3, -1, 33, 31, 8, 16, -15, 2, 15, 19, 20, -19, 26, 10, 11, 42, 61, 38, 5, -10, -34, -6, -18, -13, -35, -9, -23, -17, -4, 9, -5, 42, -41, -9, -6, -8, -1, 35, 45, 21, -4, 8, 15, 6, 32, 0, -2, -23, -11, -26, -2, 6, -9, -27, -15, -4, 19, -15, 6, -7, -41, -53, -6, -9, 21, 1, 11, 0, -2, -11, -24, 1, -14, -6, -24, -19, -8, -6, -3, 0, -28, -13, -20, -19, 5, -13, 0, -6, -31, -60, 5, -14, 20, 2, 15, 3, -8, -54, -32, 0, -38, -33, -21, -36, -13, -5, -36, -26, -8, 3, 9, -2, 15, 5, -12, -15, -20, -34, -38, -12, 8, 1, 7, 2, 3, -12, -17, -26, -24, -28, -20, -28, -47, -5, -14, -5, -18, -12, -15, -5, 26, -8, -22, -45, -5, -44, -43, 10, 21, 3, 9, 19, -10, -35, -6, -39, 5, -11, 0, -25, -2, 1, -5, -3, 7, 11, -3, 1, -7, -2, 7, -27, -19, -18, -7, 8, -4, 0, 7, 19, 20, 8, -12, -5, 19, -17, 5, 23, 21, -3, 18, -2, 3, 16, 11, 25, 2, -3, 13, -3, -3, -8, 4, 1, 19, -23, 8, 1, -13, -2, 12, 3, 23, 19, 24, 18, -14, -8, 7, -13, 0, 30, 7, 26, 16, -3, 6, 6, -15, -21, -9, 18, 18, -15, -15, -14, 13, 0, 22, 29, 8, 24, 3, 1, 20, 3, 14, 18, 21, 18, 22, 24, 6, 11, 5, -3, -8, -7, 11, 2, 8, 10, 34, 3, -17, -9, 2, -11, 28, 28, 37, 7, 8, 28, 32, 0, 16, 4, 32, 8, 11, 1, -3, -13, -23, 4, -6, -16, -11, 21, 10, -15, 30, 11, 33, 6, 30, 15, 18, -1, 4, 30, 15, 23, 22, 1, 3, -8, -16, 18, -27, -20, -14, 27, 15, 9, 12, -10, -6, 30, 20, 7, 11, 7, 18, 26, -2, -5, 30, 1, -1, -20, -19, 11, 20, -10, 8, 20, 13, -7, -2, -9, -1, -15, 18, 6, -7, -38, -27, -24, -44, -50, -30, -11, -9, 4, 3, -12, 1, -15, -48, -27, 8, -15, 25, 32, -6, -10, 12, 16, 7, -15, -14, 12, -16, 15, 16, -22, 12, 4, -16, -42, -30, -26, -36, -43, -33, -51, -13, -23, 5, 1, -3, 8, 22, 6, -10, -4, -15}, { -1, -3, -14, -8, -16, -7, -6, -15, -12, -12, 15, -13, 7, 19, 20, 3, -2, 10, 16, 18, -4, 2, -5, 10, 4, -15, 11, 10, 11, -11, -11, 4, 18, 10, 1, -11, 29, 12, 29, 5, 13, 23, 3, 48, 25, 25, 14, 17, 19, 21, 16, 18, 4, 10, -12, 10, -18, 1, 3, 33, 29, 4, 17, -3, 7, -4, 6, 12, 44, -4, 0, 27, 31, 11, 0, -21, 2, 38, 11, 43, 16, 0, -4, 9, -15, -10, -8, 29, 20, -2, 18, 6, 34, 6, 15, 41, 42, 31, -8, -11, 29, 10, 35, -6, -31, -12, 11, 5, 30, 24, 8, 1, 2, -18, 40, 23, 32, -14, -5, -1, -2, 14, -1, 26, 54, 2, 21, 10, 23, 8, 13, -2, -26, -24, -28, -30, -34, -16, -8, 20, -10, 2, 11, 17, -8, -8, -16, -13, -7, 14, -13, 25, -6, -11, -31, -11, -5, -10, -3, -2, -7, -31, -27, -43, -47, -16, 4, -9, -2, 2, 13, -2, -5, -49, -26, -14, -5, -7, 3, 7, -19, -24, 9, -1, 19, 34, 37, 6, -1, -26, -8, -35, -38, -4, -36, -5, 8, 2, 8, -3, -18, -49, -38, -32, -18, -14, 2, -16, 8, 8, 17, 18, -3, 36, 14, 14, -4, -6, -1, -11, -26, -58, -54, 6, 12, 13, -23, -25, -22, -30, -11, -15, -13, -3, -9, 2, 19, 20, 25, 5, 15, 6, 3, 20, -9, 18, 26, -6, -22, -38, -6, 24, 18, 17, -23, -14, -4, -27, 12, -7, 0, 21, 20, 24, 28, 9, 16, 20, 8, 26, -3, -6, 22, -3, -9, 6, -18, -19, -25, 16, -16, -32, -23, 28, 2, -2, 7, -6, 19, 3, 22, -6, -19, 30, 55, 39, 17, 5, 27, -5, 18, 4, 6, 40, 5, 1, 6, 20, -21, 3, 19, 2, -3, -17, 8, 24, 23, 15, 1, -1, 9, 22, 24, 15, -6, -5, 19, -4, 4, -2, 24, 36, 45, -7, 35, 36, -5, -8, 6, 23, 23, -14, 0, -2, -1, -3, 12, 8, -1, 20, 1, 10, 14, 19, 14, -5, 9, -8, -12, 49, 32, 1, 17, 30, -5, -3, 10, 10, 0, -3, -3, 5, -11, 1, 2, -7, -11, -2, 17, 19, -11, -14, 1, -11, 13, 15, 4, 27, 9, 2, -15, -16, -8, 8, -5, 26, -16, -17, 24, 0, -7, 2, -14, -13, -20, 19, 3, 1, 1, -10, 0, 15, 13, 29, 34, 2, -1, -39, 6, -3, 1, -8, -26, -12, 3, 28, -5, 1, 5, 0, 10, -3, -19, 5, -6, 0, -28, -16, -4, 11, -1, 31, -4, -13, 22, -25, -18, 0, -19, -6, -10, -1, -7, 36, -6, -6, 14, 16, 18, -13, 3, 5, -39, -38, -17, -28, -22, -15, 3, 3, -12, -20, -8, -28, -28, 28, -13, 8, -12, 13, -15, -2, -21, 16, 12, 20, 4, 4, -7, 3, -42, -2, -9, -7, -18, 8, 1, -8, 2, -23, -12, 2, 4, 7, 30, -16, 9, -17, -19, -25, -2, -7, 12, -11, 21, -3, -13, -22, -28, -25, 1, 1, 1, 7, -8, 5, -2, 8, -41, 6, -4, 6, -18, 23, -3, -16, -6, -17, 3, -20, 6, 3, 7, 9, 6, -4, 7, -7, -13, 7, -16, 16, 20, -2, 12, -10, -24, -5, 8, 17, 0, 2, 3, -18, -21, 2, -9, -6, -31, -11, -20, 5, -2, 1, 6, -10, -4, -6, 13, 18, 15, 18, 5, -1, 13, 24, -6, 1, -6, -7, -4, -2, -36, -3, 17, 27, -8, 3, 7, 4, 23, 8, -13, -5, 7, 3, 8, -23, 7, -26, -20, -16, 11, -18, 27, 17, 6, -7, -14, 22, -8, 4, 9, -1, 15, 14, 9, 14, 17, -13, -2, 15, -5, -6, -4, -49, 1, -24, 12, 17, -7, 16, 8, 5, 1, -19, 29, 11, 0, -3, -1, 2, 3, 15, -6, -7, -12, 8, -20, -17, -13, 3, -26, -29, -18, -2, 29, 28, 1, -8, -22, 15, -15, 2, 5, 38, 18, 51, -6, 18, 16, 4, 9, 6, 8, -12, 8, 13, -12, -5, -44, -8, -14, 5, 1, 37, -3, -5, -26, 5, 2, 0, 10, 2, 19, 56, 18, 49, 22, 34, 11, 19, -3, 25, 21, 6, 18, 12, -9, 19, 28, 23, 25, 0, -4, 3, -21, 11, 17, -13, -9, -4, 9, 61, 38, 19, 32, 24, 29, 34, 52, 48, 59, 17, 59, 42, 5, 18, 60, 23, 24, 7, -27, -15, -6, 0, 10, -8, -11, 18, 3, 10, 6, 28, 11, 1, 29, 20, 25, 10, 40, 17, 33, 4, 24, -6, -24, 2, 30, 18, -13, 3, -6, 9}, { 8, -4, 9, 0, 13, 7, -1, 7, -3, -1, -6, 0, -5, 11, 6, -16, -2, -16, -14, -1, -4, -15, 0, 14, -14, -14, 3, 4, 8, -11, 5, 5, -2, 3, 1, -12, 7, -16, 10, 43, 30, -8, -1, -16, 43, 20, 9, -10, -24, -2, -19, -3, -14, -6, 5, 2, 1, -5, 9, -23, -16, -13, -2, -14, 20, 34, 12, 31, 44, 0, 25, -5, -10, -12, -30, -49, -41, -2, 2, 1, 12, 13, -4, -13, -2, -2, -15, 8, 1, 11, 2, -21, 36, 20, 2, 41, 20, 12, 16, -12, 23, -12, -30, -23, -1, -18, -18, 9, 46, 30, 18, -1, 6, -12, 29, 10, 7, 24, 15, 3, 18, 10, 13, 7, 0, 6, 5, -2, 13, -6, 5, -23, -22, -32, -36, 7, 11, 6, 34, 23, 6, -7, 6, -11, -14, -24, 13, -17, -2, -5, 15, 9, -5, 24, 7, 8, -10, -18, 9, -21, -27, -46, -32, -7, -19, 14, 10, 33, 18, -8, 18, 14, 18, -4, -36, -9, -1, -3, 17, 9, -7, 17, 22, 32, 30, 10, 25, 2, -45, -36, -33, -40, -36, -20, 10, 27, -17, 45, 33, -1, -16, -14, -17, -15, 0, 5, -6, 31, 24, 23, 11, 22, 43, 43, 10, 26, -2, -33, -11, -58, -27, 5, 11, 14, 0, 7, 26, -32, -12, -12, -7, -34, 17, 6, 7, 12, -6, -33, -17, 6, 11, 26, 34, 20, 2, -34, -10, -61, -57, -57, -20, -29, -13, -10, -30, 3, 12, -9, 15, 19, 27, -9, 6, -23, -33, -38, -51, -12, 12, 33, 33, 41, 7, -15, -44, -64, -31, -36, -27, -18, -8, -14, -26, 5, -33, 14, 19, -6, 7, -18, -27, -46, -32, -59, -18, 5, 30, 27, 36, 8, 10, -6, -29, -65, -27, -7, -25, -2, 8, -6, -33, 0, -31, -6, -3, -18, -7, -29, 5, -30, -42, -41, -12, -12, 2, 28, 9, 38, 43, 6, -20, -28, -37, -17, -22, 2, 15, 5, 1, -2, 9, -24, -33, -6, -11, -25, -19, -20, -5, -9, 18, -15, 13, -5, 23, 18, 4, 6, -17, -22, -37, -27, -17, 14, 15, -2, 7, 8, -17, -15, -1, -17, 19, 10, 10, 1, -1, -5, -16, -19, -6, -3, 2, 29, -1, 3, 3, -14, 15, -11, -4, 8, 4, 6, -18, -3, -6, -24, -19, 25, 5, 20, 30, 1, 9, 12, -24, 10, -15, 15, 16, 0, -3, 16, -3, -25, -8, -15, 47, 9, -5, -3, -40, -20, -26, -14, -8, 10, 9, 1, 25, -11, -6, -7, -32, 11, 8, 19, 16, 22, -13, 9, 13, -7, -3, 13, 16, -13, 9, 15, 8, -4, 6, -18, -24, -10, -1, 4, 35, -5, 24, -6, -2, 6, 12, 15, -21, -21, -6, 14, 20, -25, -9, 2, -2, 20, -1, -8, 33, -9, -29, -38, -21, -18, 8, 7, 21, 18, 11, 13, 3, 17, -4, 15, 4, -14, -1, 0, -9, -44, -29, 14, 25, 39, 21, 13, -2, -15, -23, -38, 6, 18, -12, -3, 19, 6, 14, -8, -10, 3, 13, 24, -9, 21, 3, 0, -14, -38, -15, 23, 32, 50, -23, 6, -9, -13, 9, -24, -25, -6, 2, -14, 10, -6, 28, 13, 11, -1, 16, -2, 3, 13, -2, 10, -36, -4, -16, 7, 18, 4, -8, 37, 3, 13, -29, -5, -17, -7, -12, -8, -1, -6, 20, -6, 7, -10, -10, -9, 8, -3, -23, 7, -36, 5, -34, -10, -8, -3, 0, 9, 12, -4, 3, -21, -23, -1, -4, 2, 20, 18, 29, -6, 2, -25, 2, 6, 4, -5, 0, 12, 7, 14, 6, -10, 55, 10, -11, 0, 36, 0, -14, 23, 7, 23, 27, -11, -2, -2, -9, -12, 21, 9, -8, -2, 19, 22, 28, 5, 11, 0, 15, -21, 27, -15, -11, 13, 29, -3, -38, -7, -19, 22, 2, -16, 6, 13, -25, -29, 6, -3, -1, -8, 19, 19, 23, 27, 8, 22, 22, -4, 33, 2, -10, -1, 8, 13, 10, 4, -19, 12, -8, 9, -18, -17, -22, -8, -20, -18, -20, -17, -4, -11, 4, 42, 40, 36, 33, 21, -9, -4, -13, -8, 3, -8, 18, 38, 26, 33, 12, 4, 21, 37, -4, -8, 15, -14, -48, -9, -14, 19, 14, 22, 8, -7, -35, 7, 5, -1, 14, 11, 12, 8, 27, 35, 20, 32, 22, 13, 39, 16, 21, 2, 21, -21, -20, -10, 33, 25, 45, 11, 7, -11, 14, 13, -12, 10, 6, 11, 15, 0, -14, -6, -3, 6, 7, 16, 42, 35, 1, 1, -10, 3, -35, -10, 43, 17, -3, -4, -3, -24, 11, 9, 17, -7}, { -2, -7, 3, 11, 3, -12, 5, -14, 4, -5, 3, 8, -14, -18, 1, 3, -5, -16, 15, -8, -2, -14, 11, -3, -6, -5, 4, -11, -12, -2, 9, -12, -4, -15, -11, -16, 1, 10, -36, -16, 39, 29, -32, 32, 7, 9, 2, 20, 10, 27, -8, 13, -10, 15, -10, 18, 16, 13, 19, 15, -2, 22, -16, 1, -11, -2, -8, -19, -28, -30, -33, -22, 2, 16, 66, 30, 22, 34, 1, 20, -11, -8, -15, -14, 6, -6, -9, -5, -3, -1, 12, -8, -13, -19, -58, -14, -11, -11, -8, 10, -23, -6, 34, -1, 8, 37, 4, 4, 14, 1, 25, 18, -11, 1, -20, -9, -3, 3, -5, -40, -65, -27, -50, -20, -22, -20, 6, 4, 0, 6, 14, 8, -2, 9, 10, 13, 43, 15, 31, 9, -13, -8, -5, -13, 0, -1, -42, -43, -59, -13, -33, 8, -25, 5, 15, -9, -11, 15, 14, 10, 34, 17, 10, -23, 1, 14, 33, 11, 4, 0, -3, -26, -11, -18, -44, -38, -20, -39, -37, -6, -1, 21, 1, 18, 10, 32, -16, 4, 11, 6, -11, 11, 10, 45, 10, 6, 8, -52, -9, 2, -29, -31, -41, -34, -21, -18, -9, 14, 9, 20, 12, 31, 37, -7, 17, 5, -13, 5, -15, 4, 9, 36, 8, 18, 10, -24, -32, -13, -7, -25, 14, -40, -48, -31, 15, 21, 43, 14, 11, 5, 30, -8, 2, 4, -4, 15, 4, 34, 55, 52, 11, 19, 9, -14, 5, -17, -45, -14, -6, -21, -39, 14, 18, 28, 13, 34, -2, -21, -12, 7, 6, -3, -11, -5, 21, 9, 77, 50, -16, -12, 16, -19, 31, -7, -46, -36, -47, -47, -36, -24, 3, 11, 28, 22, -17, -8, -10, -18, -7, -30, -2, -25, -2, 10, 32, 3, 13, -27, -13, 1, 25, -3, -24, -16, -20, -38, -31, -9, -10, 13, 20, 31, 0, -4, 19, -8, 7, -31, -26, -41, -23, 5, 15, 36, 63, -20, 7, 12, 11, 10, 4, -41, -64, -50, -23, 15, 2, 17, 0, 22, 13, -2, -11, 19, -19, 1, -27, -31, -21, -11, 11, 6, 34, -25, 6, -3, -27, -15, -10, -62, -64, -34, -24, -17, -13, 6, 34, 20, 29, 13, -6, 5, -13, -17, -2, -48, -32, -2, -14, -15, -13, 9, 2, -3, -29, 9, -19, -17, -36, -43, -33, -15, -6, 10, 28, 23, 0, 21, 1, 13, -27, -37, -33, -44, -31, -27, -29, -10, -28, -9, -8, 11, -29, -5, -9, 6, 0, -15, -21, -40, 2, -12, 7, 20, -3, 3, 20, -6, 21, -12, -22, -50, -61, -49, -37, -5, -38, -14, -30, -24, -27, -1, 28, -3, 7, -34, -2, -50, -27, -26, 6, -3, 9, 8, 21, -2, 8, -15, -51, -94, -48, -33, -15, -24, -45, 9, -5, -11, -38, 2, 2, -7, 22, -13, -6, -18, -29, -17, -3, -38, -3, 36, 28, 38, 0, -24, -47, -64, -61, -57, -38, -43, -1, 23, 9, -17, -25, -40, -6, 26, 3, 26, 11, -12, -9, -2, -4, -21, 4, 1, 36, 39, 18, -2, -46, -72, -67, -49, -44, -32, -1, -39, 12, 6, 13, -60, 8, 3, -6, 10, 24, -1, -18, -4, 0, 2, 3, 2, 24, 41, 15, -10, -28, -46, -51, -24, -2, -12, -25, -31, -11, 14, 2, -50, -2, 14, 16, -4, 6, 7, 16, 3, -21, 4, -13, -3, 15, 12, -7, -11, -50, -64, -31, -48, -4, 11, -6, -2, 9, -13, -34, -18, -17, -9, -1, 11, -11, 2, -22, 22, -13, 0, 5, 8, -6, -1, -17, -35, -20, -46, -66, -36, -24, 12, -3, 4, 13, -13, -7, 3, -32, -18, -3, -2, 6, 17, 22, 31, 34, 34, 7, 15, -7, -22, -33, -23, -66, -68, -57, -7, -8, 1, -18, 0, 0, -11, -20, 34, 12, -5, -32, 2, 15, -16, 18, 0, 10, 3, 30, 11, 16, -31, -25, -45, -43, -31, -52, -24, -24, 8, -27, 8, -13, 8, -12, 16, -17, -33, -16, -8, -20, -15, -2, -12, 53, 13, 9, 20, 33, -16, -30, -35, -19, -46, -14, -26, 1, -31, -26, -11, -1, 8, 21, -23, -26, -46, 13, -14, -8, 3, 2, 11, 24, -23, -11, -5, 34, 19, -26, -30, -6, -31, -13, 2, -2, 2, -13, 15, 14, 0, 17, 14, 4, -9, -23, -15, -48, -37, -14, 8, -8, -7, -13, -20, 28, 10, -25, -10, -4, -3, -1, 12, -2, 12, 13, -1, -8, -2, -14, 18, 7, 2, 1, -27, -28, -57, -6, -6, 6, -2, 26, 23, 18, -15, 4, 18, 3, -17, 7, -3, -11, 2, -7, -5}, { -5, 9, 8, -16, -6, 1, 18, -17, 15, 9, -17, -8, 17, 9, 1, -6, 0, 18, -8, -18, -8, 14, -5, 7, 12, -11, 1, -13, 11, 7, -9, 6, -7, -15, 19, -2, 2, 15, -3, 24, 10, 27, -3, 0, 14, 24, 18, -3, 28, -3, -3, 10, 13, 10, -15, 3, 17, -10, -14, -21, 7, 10, -4, 10, 21, 6, 5, 17, 23, 26, -25, -24, -50, -33, -8, -14, -17, -11, 3, 11, 5, -10, -1, 18, -9, -7, -3, -12, 26, 14, 31, 35, 25, -11, 29, 10, 6, 8, -21, -13, 6, 2, 4, -15, -28, -24, -49, -17, -33, -1, -12, 1, 9, 0, -21, 21, 29, 42, 43, 49, 6, 6, 18, 17, 19, -6, 8, 10, 38, 33, 30, 22, 11, -11, -4, -3, -42, -2, -16, -10, -13, -12, -22, 6, 31, 50, 36, 15, 0, 10, 32, 24, 15, 10, -1, -2, -7, 1, 5, 26, 22, 9, -12, 10, -32, -44, -2, 18, -5, 9, 2, 3, 12, 46, 22, -17, 3, 26, -3, 27, -7, -18, 11, -3, 7, 9, -16, -8, 1, 25, -20, 4, 2, -25, 2, 8, -1, 18, 38, -34, -24, 16, 2, 4, -24, 11, 11, 28, -13, 8, 13, 16, 15, 7, 5, 19, -1, -11, -24, -27, 11, -29, -10, -15, 8, 11, 34, -53, -33, 1, -26, -18, 2, 10, 8, 14, 0, -19, 21, -2, -18, -20, 4, 9, -4, 22, -7, -41, -20, 21, -21, 1, -3, 14, 8, -5, -8, -9, -1, -2, 3, -1, 13, 2, -5, -21, -12, -13, 8, 20, 27, 3, 27, 4, -7, -5, -35, 2, 6, -3, 1, -1, -6, 11, -14, -4, 19, -12, 8, 10, 8, 0, -14, -30, -40, -16, -8, 21, 12, 7, 20, 14, 29, 12, -17, 23, 10, -5, 6, -13, 19, -4, -8, 9, 26, -9, 1, 17, -2, -10, -38, -23, -41, 6, 14, 6, 23, 21, 12, 28, 49, 38, 5, -9, 16, 15, 3, -14, 9, -11, 4, 23, 16, 12, 5, 11, -9, -33, -53, -19, -8, 1, 8, -4, -9, -6, 19, 38, 21, 49, 21, -41, 4, 0, -13, 7, 4, -5, 49, 45, 37, 25, 12, -19, -28, -69, -28, 1, 9, 2, -31, -20, -39, -27, -9, 46, 17, 7, 13, 12, 8, -10, 13, 20, 16, 17, 38, 40, 16, 20, 12, -10, -52, -35, -31, -21, 10, -7, -21, -42, -38, -12, 6, 33, 18, 22, -12, -14, 14, -14, 7, -4, -23, -4, 23, 32, 24, -8, -31, -30, -43, -49, -19, 4, -8, -31, -39, -52, -12, 6, 6, 2, -16, 5, -2, -22, 27, 19, 7, 1, -1, 11, 39, 42, 30, 9, -26, -37, -44, -51, -11, -8, 4, -13, -23, -47, -1, -1, 15, -20, 19, 6, -16, 9, -4, 17, 2, -6, 21, 35, 5, 26, 16, 28, 15, 1, -32, -24, -24, -13, -18, -30, -62, -20, -6, 16, -5, -27, 19, -16, -12, 8, -8, -29, 8, 9, 23, 31, 21, 0, 31, 51, 33, 39, 20, 3, -10, -13, -28, -51, -16, 7, 7, 17, -8, -3, -4, -8, -20, 45, -5, -8, -15, 12, 44, 1, 12, 0, 22, 17, 43, 54, 51, 44, 7, -10, -19, -26, -28, 15, 28, 28, 28, 8, 4, -21, -11, 29, -2, -8, 4, -13, 17, -15, -25, 0, 19, 7, 33, 20, 23, -4, -3, -10, 12, -10, 29, 22, -2, 9, -5, -7, -21, 10, 41, 49, 5, -14, 14, -17, -24, -38, -31, 7, -5, -2, 17, -1, 36, 5, 21, 1, 31, 33, 33, 10, 0, -14, -10, -10, 9, 18, 53, 45, -1, 13, 1, -7, 2, -14, 6, 12, 6, -29, 0, -12, -17, 0, 14, 9, 33, 45, 39, 11, 30, 19, 9, -17, 0, 25, 18, 9, -13, 4, 4, -6, 7, 0, -2, 9, 25, 10, -16, -24, -3, -13, 8, 21, 19, 32, 32, 21, 30, 7, 13, 13, -1, 22, 41, 0, 4, -8, -18, 4, 23, 10, 37, 40, 28, 16, 23, -10, -8, -12, -22, -4, 3, 33, 45, 14, -3, 7, 36, 7, 26, 29, 12, 14, 9, -9, -5, -2, 15, 10, 5, 32, -6, -19, 3, 24, 11, -6, -3, -14, 9, 5, 13, -3, -27, 6, 36, 54, 41, 16, 16, 22, 10, 18, 6, 10, -4, -6, 16, 30, 6, -15, 13, 20, -5, -4, -14, 10, -4, 21, 14, 18, 12, 4, 56, 64, 43, 1, -4, -6, -14, 9, 10, -8, 5, -2, -9, -18, -8, -18, 4, 13, 18, 19, 6, 15, 5, 6, 11, 23, 22, 7, 15, 38, 41, 16, 17, -9, 17, 17}, { -17, 8, 2, -11, 10, 15, 14, 8, -3, -4, 0, 2, -23, -12, 3, -15, -1, -13, -5, 1, 10, 17, -14, 11, -14, -7, 18, 0, 5, 9, -16, -9, 7, -10, -33, -7, -12, -21, -20, -40, -51, -31, -21, -46, -33, -27, -31, -5, -14, -25, -22, -18, 4, 17, -10, 18, -7, -1, -8, -15, -26, -24, -33, -13, -6, 16, 12, -17, -37, -56, -26, -52, -46, -14, -39, -48, -59, -46, -36, -31, -5, -3, 12, -14, 10, 7, -8, -8, -36, -26, -51, -45, -17, 12, 15, 29, 12, -35, -42, -13, -21, -21, -1, 1, 19, 30, 30, 4, 8, 44, 0, -4, 8, 10, -4, -1, -8, -22, -41, -28, -25, -16, -24, -8, -17, -6, 26, 10, -8, 24, 20, -22, -2, 23, -4, 22, 46, 35, 21, 11, 15, 4, -9, -19, -36, -17, 1, -24, -15, -7, -13, -24, -17, -15, 0, 1, -25, -15, -13, -23, -31, -7, 22, 5, 2, 14, 18, 28, 3, -24, 31, -22, -28, 31, 18, 0, 9, -3, 6, 19, -3, 7, 14, -32, -30, 1, 4, -15, -11, 14, 26, -3, 6, 23, 14, 16, 3, -31, 30, 10, -28, -2, -8, 10, -3, 16, 3, 1, 30, -1, 0, -6, 0, 19, -17, 8, 13, 17, 22, -19, -11, 2, 18, 27, 13, 26, 11, -1, -2, 9, -6, -18, 6, 0, -7, 18, 22, 11, 5, 18, 7, 12, 10, -9, -16, 5, 7, -28, 21, 16, -16, 10, 0, 32, 1, -18, 17, 18, -11, 4, -20, 5, -11, 18, 28, 17, 4, 8, -6, 12, 29, 5, -10, -18, -16, -22, -27, -25, 0, 14, 1, 16, 27, -12, 0, 29, 20, -17, -19, -9, 22, 24, 28, 14, 24, 38, 28, -5, 4, -1, -10, -31, -15, -68, -38, 6, -12, 4, 10, -7, 53, -9, -15, 18, 4, -11, -8, 10, 5, 26, 30, 16, -1, 10, -2, 10, 16, -1, -10, -35, -25, -57, -49, -32, -52, 43, 0, -8, 20, 1, 7, 34, -3, -25, 14, 7, -13, -6, -22, -31, -3, -6, 3, 1, -8, 17, -19, -43, -6, -34, -11, -8, 20, 19, -13, 12, 8, -30, 10, 20, -28, 6, 4, -14, -17, -34, -20, -33, -13, -9, 3, 14, 19, -24, 3, -23, -38, -7, 8, 7, 9, 1, -2, -5, 13, 17, 23, -3, -31, -24, -9, -9, -26, -42, -51, -58, -21, -20, 7, 0, 10, -18, 1, -32, 7, 28, 38, -8, 28, -9, -13, 5, -4, -2, 23, -21, -1, 4, -18, -30, -22, -11, -33, -22, -17, -16, -9, 24, 2, -8, -15, -4, 6, 41, 27, -9, 9, -15, -2, -10, -19, -2, -7, -12, 23, 39, 50, 29, 5, 13, 0, -9, 2, -8, 24, 12, 17, 16, -4, 18, 12, 22, 21, -5, 37, -27, -5, 6, 0, -27, -27, 16, 28, 60, 44, 34, 40, 11, 7, -5, 13, 11, 31, 11, 13, 15, -13, -9, -7, 0, 23, -9, -7, -25, -6, 11, -5, -7, -14, 11, 21, 28, 29, 29, 6, 18, 18, -1, 11, 31, 33, 27, -4, -8, 13, 15, 11, 0, 4, 5, 30, -1, 2, 11, 8, 32, 4, 29, 4, 20, -9, 4, 5, 14, 18, 7, 16, 24, 10, 6, 8, 7, 19, 6, -18, -9, -1, -11, 12, -9, -16, 3, 5, -3, 25, -1, 14, -15, 5, 12, -15, -26, -13, -19, -8, -16, 16, 4, 4, -3, 8, 0, -25, -1, 32, 27, 27, 19, 10, -14, 9, -27, 8, -4, -13, -39, 13, 12, -28, -28, -5, -31, -20, -18, -4, -15, -3, 14, 3, 8, 22, 9, 41, -1, -41, -12, 11, -11, -10, -30, -20, -25, 5, -13, -4, -34, -15, -29, -6, -1, -8, -13, -9, 13, 1, 11, -18, 17, 1, 14, 48, 6, -37, -1, -6, -13, -18, -27, 7, -7, 10, -2, -17, -34, 0, -17, 1, -10, -4, -13, 0, -4, -25, -23, -18, -23, -1, 32, 52, 42, -15, -16, -10, -17, 17, -13, 6, -2, 12, -12, -13, -34, -16, -8, -14, -28, -21, -17, -7, -4, 12, 5, -2, 4, 20, 28, 27, 10, 0, 0, 12, -5, 11, 10, 31, -1, -16, -22, -11, -23, -2, 2, 1, 5, 5, -15, 0, 7, 1, 18, 4, 41, 25, 27, 56, -15, 2, -11, -5, -3, 4, 8, 7, 5, -17, 0, -10, 3, 4, 10, -12, 8, -11, 14, 15, 11, -4, 31, 22, 21, 41, -13, 6, 20, 0, -15, -8, 10, -14, 7, 6, -10, 8, 1, 6, 17, 16, 12, 6, 5, 3, 0, 4, 25, 7, 30, 34, 34, 43, 22, 2, -9, -11, 0}, { -4, -8, 13, -16, -2, -18, 8, 3, -19, -7, 5, -17, 12, -2, 12, -5, -7, -11, 8, 0, 9, -13, 1, 10, -11, 6, 0, -7, 12, 16, -7, 4, 16, -18, 14, 16, 12, 2, -14, -17, 3, -20, -15, -24, 19, -2, 5, -16, -21, -27, 3, -3, -10, 17, -9, -8, -10, -12, -6, -6, -12, -4, 17, 17, 13, 15, 10, 20, 18, -33, -13, 0, -25, -45, -31, -25, 7, -25, -15, -21, -11, 19, 4, 14, -1, 12, 1, -21, -15, 0, 12, 12, 18, -7, -13, -21, -8, -31, -31, -30, -33, -21, -41, 2, 13, -42, -18, -11, -10, -7, 4, -13, -5, -11, 6, -16, -1, -3, 20, 6, 37, 5, 25, 19, 19, 27, -34, -6, -45, -42, -42, -28, 13, -25, -50, -20, -16, -6, 7, -18, 11, 2, 18, 9, 10, -15, -26, -4, -18, -5, -2, -11, 3, 18, 10, -1, -5, -39, -29, 18, -24, -2, 11, 20, 18, 10, 14, 0, -7, 4, 6, 2, -6, -9, -25, -11, -22, 7, -3, -27, 2, 1, 17, 14, 15, 9, -24, -2, -19, -5, -1, 5, -51, 19, -5, 21, 15, 32, -15, -24, -4, -8, -2, -9, -22, -5, -16, -18, 0, 1, 37, 14, -3, 0, -23, -5, -8, -8, -6, -29, -56, -3, 4, 14, -6, 8, 1, -10, -9, -13, -21, -28, -3, -3, -2, -1, 15, 38, 37, -20, -22, -21, -11, -8, -10, 2, 0, -14, -77, -54, 12, 16, -1, 2, 9, -10, 20, 42, 23, 21, 24, -3, 31, -2, 4, 7, -7, -5, 2, -12, -15, 7, 2, -8, 23, 6, -60, -8, 26, 3, 19, -2, -13, 15, 7, 36, 30, 30, 8, 28, 14, 22, -5, 0, -30, -11, 3, -11, -10, 10, 12, 2, 23, -6, -16, 10, -18, 23, -2, -5, -14, 17, 32, 53, 44, 16, 8, 22, -3, -8, -13, -34, -47, -15, 3, 5, 9, 20, 9, -11, 3, 7, -13, -30, -35, -2, -6, -11, 16, 17, 11, 33, 22, 2, -22, -13, -19, -49, -55, -40, -10, -13, 2, 16, -1, 24, 21, 15, -6, 12, 9, -32, 2, 7, 6, -6, 20, 23, -18, -14, -17, -20, -23, -15, -17, -47, -57, -4, -7, -9, 15, 19, 34, 8, 8, -7, -2, -1, -4, -34, 8, 15, -5, -8, 13, 1, -41, -65, -11, -2, -49, -41, -47, -35, -11, 5, 25, 26, 33, 37, 16, -13, 8, -14, -15, -2, 5, -26, 19, -6, 6, -12, 2, -1, -5, -18, -33, -33, -45, -60, -44, -5, 8, 27, 14, 15, 29, -3, 4, -13, -7, -2, -6, -8, 17, -3, 14, -13, 13, -2, 45, 3, 15, -15, -21, -30, -53, -50, -43, 9, 26, 29, 25, -12, 1, 14, 17, -2, -14, -9, 18, -1, 19, 2, 13, 9, 0, 3, 40, 45, 36, -8, -19, -24, -25, -23, 8, 12, 33, 34, 39, 3, -21, -10, -2, 1, -7, -7, -12, -2, -17, 41, 34, 19, 23, -10, 7, 52, 13, 13, -2, -14, -8, -2, 6, 13, 38, 22, 10, 0, 9, 2, -1, -6, -28, -39, -17, -10, -1, 17, 16, 5, 3, 14, 10, 4, 26, 24, -19, 0, -5, -1, 39, 12, 5, 39, 25, -3, -20, -5, -15, -19, 3, -28, -9, 13, 30, 27, 13, 15, -14, 12, 20, 17, 30, 16, 0, 9, 16, -7, 25, 10, -7, -17, 6, 6, -27, -3, -5, -2, 22, -9, 19, 28, 23, 32, 24, 9, 3, 12, 11, 18, 7, -24, 12, 11, 13, 2, 3, -3, 6, -19, 10, 5, -13, -21, 13, 29, 9, 23, -5, 18, 22, -12, -33, -16, -6, 21, 5, -6, -8, 22, 7, 3, 6, 15, -8, -30, -16, -1, -1, 9, -11, 8, -5, -5, -1, 18, 36, 29, 24, -15, -28, 8, 4, -3, -3, -37, -29, -10, 2, -5, 11, 5, 13, 1, -1, -5, -12, 12, 21, 15, 21, 11, 17, 25, 30, 21, 27, -13, 27, 9, -12, 10, -16, 21, 31, 4, 4, 1, -11, -7, -31, -21, -31, -11, -24, 5, -13, 11, 4, 17, -2, 1, 30, 24, 10, -6, -7, -8, -18, -11, -1, -18, 14, 3, 16, -9, 6, 6, -29, -19, -20, -7, -1, 6, 22, 14, 35, 10, 12, 32, 7, -9, -19, -10, 16, -2, -2, -1, 4, -9, -12, -2, -10, 48, 12, -3, 6, -21, -26, -20, -10, -31, -7, 19, 49, 29, 19, 20, 37, 24, -25, 9, -12, 5, -9, -8, 9, -4, -7, 7, 15, -1, -5, 24, 32, 10, 3, 11, 27, 4, 3, 14, 33, 23, 6, 23, 17, 27, 7, 1, -8, -12}, { 9, 8, 16, -17, -10, -5, 14, 18, 9, -10, 14, 13, 22, 0, 28, 20, -5, -12, 14, 18, -13, -10, 9, 12, -10, 18, 15, -15, -16, 5, -14, 13, 0, 17, 29, 18, 10, 20, 17, 15, 0, 16, -14, -13, 18, 16, 19, 21, 6, 17, 10, 0, -8, 7, 17, -10, 14, 16, -14, -1, 8, 29, 26, 22, 40, 29, 33, 71, 41, 16, 42, 35, 33, 15, 28, -1, 4, 24, 14, 2, 8, -7, -17, 10, 11, -15, 9, -3, 20, 58, 48, 47, 24, 30, -5, 40, 33, 35, 28, 2, 11, 9, -19, 4, -2, 35, -7, -3, 1, -10, 20, -8, -14, 2, 28, 15, 24, 24, 64, 25, 29, 21, 38, 15, -3, 8, 14, 4, -19, -13, -28, 5, -23, -42, -18, 4, 7, 9, 37, 10, -6, 15, 15, 4, 31, 2, 17, 31, 32, 18, 41, 47, 39, 12, -3, -11, 15, -18, -13, -20, 7, 6, -30, 16, 3, 6, 10, 31, 7, 22, -17, 26, 11, 11, 13, 54, 30, 26, 23, 43, 9, 29, 23, 18, 14, -12, 7, -28, -27, -8, -13, -13, -18, 35, 25, 34, -8, 53, 16, 26, 50, 26, 27, 49, 40, 4, 23, 24, 8, 28, 29, 22, 8, -17, 0, -5, -5, -34, -29, -42, 24, 38, 24, 4, 9, -1, -13, -12, 17, -21, 0, 2, 10, -10, -22, -23, -33, -24, -16, -8, -13, -2, -13, -28, -21, -32, -25, 0, -7, -8, -17, -15, -4, 3, -12, -43, -14, -33, -25, -29, -40, -59, -62, -28, -33, -52, -51, -49, -26, -10, -2, -17, -6, -35, 4, 8, -39, -42, -21, -5, 18, -11, 16, -22, -39, -35, -54, -71, -84, -71, -85, -68, -57, -77, -80, -39, 0, -13, 8, -38, -14, -18, -12, -22, -18, -37, -27, -14, 12, 6, -8, 16, -17, -30, -39, -70, -55, -48, -52, -14, -50, -46, -11, -28, 9, 0, -14, -3, 5, -6, -10, 11, -4, -24, -53, 9, -4, -9, -23, 46, 8, -8, -27, -4, 0, -4, 20, 10, 8, 11, 30, 0, 24, -2, -2, 17, 6, -6, 6, 12, 25, 3, 19, 46, -28, 4, 11, 22, 37, 18, 4, -2, 21, 11, 50, 13, 27, 43, 26, 8, 3, 9, 25, 18, 9, 11, 16, 14, -9, 6, -15, 2, 15, -6, 11, 19, -8, 13, 33, 20, 23, 36, 13, 6, 7, 36, 23, 4, -3, -15, -1, 6, 5, -23, -5, -22, -17, -12, 13, 14, 1, -14, -20, 7, -18, 29, 37, 6, 2, 7, -8, 12, 9, -10, -6, 10, 23, -16, 21, 2, 13, -1, -10, -4, -7, -10, 4, 6, -5, -12, 5, 6, 28, 11, 22, 3, -29, -14, 12, 22, 3, -10, 8, -21, -9, -27, -7, 4, -4, 9, -9, 3, 10, 23, 4, 1, -3, 13, 40, 12, 10, 17, 17, -6, -18, 2, 13, 27, 12, 4, -10, -17, -2, 0, -4, -14, -11, -5, -17, -17, -9, 30, -16, 18, 7, -18, 39, -15, -12, -7, -11, 13, -9, -14, 14, 22, 30, -6, -17, -4, 3, 0, -15, -21, -19, 18, 16, -6, -3, 87, 33, 19, -15, -16, 15, -10, -13, 9, 18, -16, -13, 10, 3, 14, 19, 30, 4, 29, 25, 37, 15, 16, -15, 20, 12, -10, -8, 36, 33, 9, -1, -8, 19, 29, -15, 0, -23, -20, -13, -27, -3, 5, 28, 18, 29, 8, 24, 39, 32, -27, 8, -3, 1, -19, 4, 12, 10, 8, -15, -5, 18, 37, -35, -36, -23, -11, -29, -10, 10, -13, 1, 5, 15, -10, -1, 18, -15, 2, 3, 0, 25, 7, -2, 20, 40, -10, 5, 7, 30, -2, 0, -1, 2, -5, -7, 13, 4, 6, -4, 15, 16, 13, -5, -14, -16, -12, 30, -2, 26, 17, -32, 18, 10, -1, 15, 1, 11, -5, 7, -1, 17, 1, -5, 10, 2, -7, -6, -4, -14, -19, -13, -20, -31, 12, 41, 20, 13, 13, -24, 21, -4, -8, -11, 7, 44, -6, -2, -19, -14, -13, -4, -41, 0, -5, 10, 8, 22, -1, -20, 4, -16, -19, 3, 25, -13, -21, 12, 19, 19, -17, -10, -5, 9, -8, 6, -12, 0, 21, -33, -2, 27, 32, 32, -2, -13, -43, -19, -4, -30, -40, -46, -34, 14, -19, -16, 1, 8, -5, -4, -11, -14, 0, -16, -14, -10, -8, -8, -16, 15, 1, -16, 4, 33, 2, 20, 23, -15, -4, -2, 25, 16, -13, 12, 5, -13, 9, -7, 18, 3, -9, 12, -6, 4, 1, 11, -13, -16, -15, 8, 2, 15, -8, 21, 27, -7, 14, 5, 15, -7, -6, 7, 0, 6, -1}, { 14, 10, -12, -8, 7, -16, 1, 1, 1, -6, 14, 6, 6, -20, -21, 6, -18, 4, 2, 6, -11, 3, -15, 0, 11, 19, 13, -14, 3, -3, 18, 1, -17, 4, 2, -18, -14, -24, -19, -22, -35, -27, 2, -46, -40, -41, -24, 1, -13, 5, -13, -22, 9, 2, -11, 13, 18, 17, 11, -22, -27, 6, -2, -30, -12, -40, -31, -32, -50, -57, -17, -30, -9, -20, -48, -8, -27, -38, -27, -41, -10, -6, -16, 4, 8, -6, 6, -15, -35, -30, -48, -31, -6, -39, -37, -29, -55, -71, -15, -37, -29, 1, -6, 17, 33, -5, -2, -20, -4, -27, -35, -1, -3, 15, 13, 1, -27, -13, -58, -36, -39, -46, -55, -33, -8, -38, -59, -47, -19, -45, -6, -4, 9, 32, 40, 13, -14, -14, -1, -2, 0, 17, -15, 7, -22, -3, -25, -1, -13, -6, -39, -23, -42, -40, -40, -11, -34, 3, -3, -16, 18, 0, 14, -8, 9, -3, -36, -14, -16, 3, 4, 20, 9, 11, 11, -15, -30, 9, 8, -13, -16, -22, -26, 6, 7, 27, 33, 7, 7, 19, 5, 4, -7, -36, 7, -15, 2, -5, 11, 38, 5, -16, 23, 13, 3, 6, -4, -17, 4, 15, -17, -20, 8, 37, 1, 17, 13, -14, -1, -12, 18, 2, 15, 16, 1, 23, -4, 0, 14, 7, 3, -3, 1, -5, 14, 11, -7, -7, -8, -6, -14, -3, 23, 15, 7, -18, 2, 5, -11, -11, -11, 9, 18, 39, 5, -9, 2, -4, -2, -2, 34, 21, 34, 6, 30, 5, -27, -6, 4, 18, 39, 2, -2, -15, -15, -39, -9, -45, -5, 28, -2, 12, -11, 8, -18, 18, 5, 33, 22, 38, 16, 18, 5, -26, -31, 10, 4, 11, 18, 11, -6, -15, 4, -27, -19, 14, 7, -7, -10, 8, 65, -4, -16, 8, -5, 14, -2, -8, 22, -6, -19, -22, -20, 22, 31, 19, 13, 19, -10, 21, 3, -42, -30, -25, -33, -2, 13, 20, 29, -16, 20, -8, 9, 15, 18, -10, -6, -24, -33, -28, 8, 53, 35, 23, 43, 20, 11, -9, -19, -29, -46, 16, 25, 28, -2, 19, 25, 10, 26, 11, 4, 9, 1, 0, -25, -24, -9, 15, 40, 9, 28, 23, 3, 14, 22, 19, -41, -44, -38, -6, -9, -32, 18, -4, 9, 15, 18, -30, -21, -1, 23, 7, -13, -38, -39, -23, 5, 8, 4, 27, 23, 31, 29, 7, -4, -16, -43, 2, -32, -40, -9, 14, -22, 24, 18, 4, 24, 24, 25, 21, -1, -14, -9, -7, 9, 4, -5, 8, 3, 2, 37, 41, 0, -22, -16, -19, 16, -8, 6, -10, -21, -13, 15, -8, 25, 29, 34, 39, 0, -26, -5, -4, -7, 15, 6, -4, -12, 27, 25, 19, -5, -16, -15, -45, 5, -29, -18, -9, -9, 4, -4, -20, 31, 34, 23, 47, 37, 15, -12, 12, 21, 15, -10, -7, 16, -4, 3, -5, -10, 7, -39, -35, -14, -38, 28, -10, 23, 4, -16, -6, -31, 6, -7, -1, 22, 32, 8, 17, -6, 7, 5, 19, -14, 22, -3, -1, -7, 6, -39, -32, -30, 2, 12, -8, 28, 1, -2, -8, -5, 15, -18, -26, 13, 3, -4, -9, -16, -12, 3, -11, -28, -4, 1, -14, -24, -44, -39, 4, -15, 9, -5, -25, 7, -16, -17, -24, -19, -26, -49, -16, -16, 1, 4, 1, -22, -22, 6, -17, 5, -5, 5, 13, -13, -13, -5, 43, -10, -9, 10, 6, 6, 5, -46, -22, -40, -54, -56, -23, -18, -10, -9, -3, -35, -43, -36, -11, -19, 3, 15, 16, -17, -6, 2, 32, -60, 0, -16, 13, 10, 7, -11, -45, -38, -42, -30, -44, -21, -36, -27, -19, -15, -15, -4, -22, -10, -10, 4, 0, 12, -2, -5, 21, -35, 12, 1, -1, -17, 20, 4, -12, -4, 3, -22, -5, -8, -23, -30, -11, -25, -23, -14, -10, -7, 1, -4, 14, -17, -10, 7, 32, 1, -16, -4, 2, -2, 28, 32, 16, 29, 16, 2, 18, -9, 17, -30, -4, 4, -14, 19, 8, -9, -5, 0, 4, 13, 23, 0, -23, -16, -12, -10, -13, 15, 16, 30, 42, 7, 0, 13, 24, 2, 20, 31, -8, -10, -2, 22, 9, 16, 12, -8, -7, 16, 9, -10, -13, -24, 6, -5, 6, 9, 7, -1, -1, 14, 48, 35, 6, 15, 21, 13, 14, 28, 23, 38, 19, 1, 24, 24, 45, 26, 33, 12, -11, -10, 9, 10, -1, -9, -10, -15, -2, -7, 21, 5, 25, 49, 19, 17, 16, 36, 20, 44, 32, 22, 2, 38, 25, 31, 9, 1, 8, 12, -12}, { -2, -6, -10, 18, 3, -14, 10, -5, 14, 16, 5, 4, -4, -14, -18, 11, -13, -11, -10, 11, -16, 14, 9, -11, 17, -2, -15, 4, 8, 6, 0, 10, -5, -2, 14, 10, 22, 16, 25, 5, -1, 7, -10, 5, 16, -7, 24, -9, -9, 5, -10, -15, -9, 10, 2, 3, 5, 13, -5, -4, -9, -5, -5, 19, -8, -1, 10, -23, -13, -31, -2, 5, -15, 13, -8, -11, -12, -17, 6, -5, 1, -6, -10, -17, -17, 10, 18, -4, -17, 4, -12, 14, -5, 3, 7, -8, -31, 20, 1, -18, -19, -10, -11, -21, 7, 20, 16, 7, -4, -6, -7, -9, -18, -6, -8, 21, -41, -3, 18, 21, 19, 15, -20, -20, -17, 13, -4, -13, 10, -3, 10, 21, 26, 8, 39, 50, 5, 19, -14, 6, 14, -16, -16, 0, 18, 41, 26, 39, 43, 4, -4, -1, -36, 15, -11, -13, -6, -32, 12, 20, 18, 2, -11, -1, 16, -9, 18, -2, 3, 3, -1, 15, 30, 49, 35, 44, -2, -19, -20, -16, -17, -34, -29, -9, 8, -22, 6, -10, 0, 35, 24, 20, 6, -5, -1, -3, 15, 18, 21, -11, 2, 54, 59, 47, -14, -12, 1, 8, -17, -5, -6, 14, 13, 16, 16, 16, 19, 8, -1, 8, 38, 1, -31, -13, -16, 33, 7, -22, 3, 37, 49, 39, 37, 6, -24, -2, 2, 16, 4, 3, 22, -9, 0, -12, 13, 4, -13, -3, 9, 21, -2, -6, -13, 13, 63, -8, -18, -2, 12, 17, -7, -3, 12, -13, -4, 20, -13, -9, 11, -28, 2, -11, -10, -11, 20, 17, 21, 17, -39, 11, 14, 25, 37, -30, -17, 19, 19, 27, 18, 31, -9, -9, 8, -23, -12, -7, -6, 0, -14, -13, -20, -6, 32, 35, 22, 4, 3, -4, 12, 14, 25, 5, 13, -3, 34, 26, 23, 34, -18, -6, -37, -17, -17, -7, 3, 13, -4, -43, -24, -3, 2, 17, 46, -9, -9, -19, -11, 5, 5, 9, 20, 17, 39, 34, 40, 31, -14, -30, -60, -50, -8, -14, 20, 6, -12, -36, -33, 14, -11, 15, 49, 9, 18, -11, -6, 11, 3, 16, 40, 30, 35, 44, 40, -11, -34, -49, -51, -60, -37, -16, -2, -27, -13, -29, -34, -16, 15, 39, 8, 13, 24, 0, -3, 12, 22, 6, 30, 44, 53, 55, 18, 0, -27, -33, -46, -43, -22, -23, -33, -24, -10, -40, 4, -4, 10, 21, 52, 10, -17, -12, -16, -8, 44, 4, 0, 33, 14, 51, 41, -7, -7, -28, -26, -14, -24, -30, -14, -54, -25, -34, -3, 11, 25, 31, 33, -12, -9, -13, 14, 10, 14, 10, 10, 30, 17, 37, 27, -19, -5, -20, -6, 4, 13, -2, -22, -33, -17, -18, 7, 3, 33, 5, 5, 28, 0, -17, -18, 14, 16, -6, -7, 32, 6, 6, 23, -3, -17, -2, -26, -7, 3, -6, -30, -42, -9, 4, 8, 45, 40, 34, 3, 16, 3, -7, 12, -2, 7, 1, 8, 22, 21, 29, 7, 6, -10, 5, -27, 5, -9, -20, -23, -22, -5, 26, 36, 16, 51, 37, 32, 20, -5, -24, -4, -9, -14, 35, -2, 14, -4, 20, -11, -23, 5, -22, 10, -4, 3, -8, -18, 10, -5, 3, 27, 32, 42, 6, 34, 0, -1, -8, 15, -10, -24, -3, 15, 31, -23, -1, 15, 11, 7, 2, 5, 6, -24, -15, -11, 21, -3, -8, -10, 1, 19, -3, 3, 13, -14, -13, 19, 6, -23, 14, 38, 35, 4, -8, 6, 23, 15, -16, -20, -10, -30, 13, -9, -8, -21, 2, -15, 14, 30, 5, -22, 12, -11, 2, 14, 1, -6, 9, 8, 12, 3, 2, 2, -8, 1, -9, -17, -16, -13, 16, 26, 17, -6, 2, 21, 40, 24, 10, -37, -9, -6, 0, 16, 16, -1, -24, 2, 51, 39, -3, -7, -25, -3, -23, 4, 18, 5, 20, 21, 44, 12, 6, 33, 30, -9, -28, -44, 8, 3, -13, 7, 6, -12, 3, -3, 27, 37, 17, -15, -3, -5, -17, -36, 4, -11, 11, 7, 48, -6, -5, 14, 39, -4, -40, -22, -10, 9, -5, 6, 10, 1, -3, 17, 9, 13, 49, 5, 44, 14, -6, -8, 7, 20, 31, 35, 18, 32, -14, -7, 15, 19, -25, 28, -13, 0, 0, 10, -7, -18, -12, -2, 30, 20, 24, 16, 4, 20, 29, 0, -26, 18, -11, -4, 3, 1, 27, -33, -36, -13, -54, -15, 16, -13, 3, 9, -4, 17, 15, 10, -5, 6, 20, 5, -15, 2, 24, 23, -1, 45, 44, 8, -12, 23, 21, 10, -21, -3, -15, -18, -14, 3, 12}, { 5, 0, -1, 4, -1, -13, -4, 9, 19, 13, 8, -11, -9, 21, 21, 13, -7, 8, 5, -14, 10, -17, -14, -12, -13, 8, -12, 3, -14, -5, 10, -4, 5, -15, 18, 5, -1, -5, -5, -42, -15, -5, 33, 15, -23, -7, 2, 0, 0, 9, -13, -6, 2, -1, -18, -15, 16, 14, -16, 19, 15, 11, -7, 4, 2, 13, 5, 17, -2, 33, -20, 6, 33, 27, 8, 55, 20, -4, -11, 26, 14, -16, 7, -12, 3, -12, 4, 7, 28, 22, -14, 3, 5, 13, 3, 3, 23, 23, 27, 40, 32, 33, 17, 46, 11, 11, -14, -9, 27, 1, 23, -7, 0, -11, -15, -19, -19, -12, 6, 5, 9, 18, 7, 12, 21, 36, 9, 22, 11, -6, -7, 0, -5, 9, -30, -17, -13, -5, 13, -2, -17, -14, 12, 7, -9, -11, -24, 23, 21, 35, -14, -6, 1, -8, -3, 30, 14, 3, -19, 8, -22, 25, -6, 10, -30, -3, 27, 25, 18, 0, -13, -17, -53, -11, -21, -19, 2, 21, -9, -14, 0, -15, -31, -29, -2, -5, -17, -7, -14, 11, 1, 12, 20, -13, 37, 6, -15, 53, -23, -2, -38, -5, -14, -22, -11, -6, -3, -34, -4, -24, -7, -2, -23, 21, -3, -2, -14, 0, 19, 15, -7, -7, 14, 35, 15, 28, -15, 11, 0, 20, -4, 1, -21, -24, -28, -24, 15, -11, 2, 5, -14, 28, -6, 4, 23, 26, 32, 27, 22, 32, 5, 25, -1, 26, -26, 23, -6, -4, 22, -9, 13, 8, 18, 13, 14, 19, 37, 49, 42, 33, 34, -18, -4, -3, 30, 18, 20, 37, -13, -1, -2, 29, -11, 28, -6, -15, 12, -3, 14, 37, 28, 41, 24, 41, 38, 26, 6, 9, 1, 26, 8, 10, 3, -13, -3, 19, 20, -5, 5, 22, 36, 45, 38, 16, 7, -1, 23, 22, 23, 35, 13, -9, 8, -19, -9, 6, 25, 2, 9, -10, -19, -24, -41, 11, 22, -8, -1, 4, 6, -4, -4, -13, -21, 32, 32, 22, 10, -12, -44, -40, -20, -17, -7, -23, -4, -11, -10, -28, -33, -33, -80, -8, 12, -18, 14, -2, 24, -22, -35, -5, 4, -29, -11, -28, -28, -56, -49, -55, -23, -7, -4, -16, 1, -20, -3, -3, -39, -55, -51, 7, -27, -14, -10, -4, 22, 4, -3, -28, -28, -16, -55, -53, -14, -46, -31, -37, -7, 1, 10, -8, -13, 22, 2, -5, -13, -22, -57, -14, -27, -27, -14, 1, 14, -27, 7, -40, -16, -27, -63, -55, -56, -24, -21, -23, -13, 14, -8, 4, 9, -6, 3, 7, -11, 15, -43, -36, -7, -11, -11, 24, 24, 0, 5, -19, -3, -31, -10, -39, -54, -31, -20, -8, 1, 10, 13, 4, 16, 32, 2, 5, -20, -13, -50, -51, 1, 16, 16, 23, 12, 28, 32, 1, 30, 13, 21, -18, 2, -22, -25, -29, -20, 19, -5, -9, -2, 10, 7, -9, -25, -20, 13, 4, -16, -14, -7, 17, 23, 24, 31, 52, 28, 41, 24, 38, 12, -10, -1, 15, 24, 33, 7, 24, 8, 15, -33, -12, -25, -18, 19, -23, 11, 34, 8, 22, 3, 20, 35, 22, 55, 49, 54, 31, -7, -11, -3, 24, 22, -8, 15, -2, -12, 6, -8, -27, -23, 2, 30, 1, 12, 14, 12, 3, -23, -58, 12, 3, 15, 14, 34, 34, 8, 13, -11, 4, 24, 15, 0, -19, -2, 8, -14, -1, -17, 4, 22, -28, -18, -4, 7, -14, -21, -53, -21, -34, -32, 16, 12, 6, 7, -1, -1, -5, -9, -1, 4, 0, -4, -6, -3, -4, -17, -4, 6, -8, -37, 5, 15, 0, -25, -60, -55, -37, -23, -15, -17, -11, 4, 2, 20, 15, 21, 20, 6, -3, -5, -16, -47, -37, -64, -21, 8, -15, -33, 18, -12, -12, 16, -52, -44, -23, -29, -34, -30, -23, -24, 11, 0, -6, -4, -4, -8, -11, -2, -38, -41, -16, -34, -14, 23, -14, -13, 7, -11, 11, -16, 2, 19, 45, 11, 7, -2, -7, 4, 20, 33, 2, 21, 23, 18, 13, -27, -17, -16, 15, -25, -17, -22, 0, 4, 4, -4, 5, -38, -9, 13, 46, 25, 5, -3, 8, -17, -12, 35, 22, -2, 7, -15, -6, -21, 0, 3, 8, -7, 3, 2, -6, 13, -16, 18, 15, -17, -3, -20, 9, 32, 37, 21, -17, 0, 4, 20, 25, -14, 23, 0, -12, -18, 7, -15, -4, 10, 18, 2, 23, 10, -12, 3, 8, 17, 13, 21, 21, -13, 9, 20, 17, 5, -1, -15, 1, 6, -33, 2, 13, 9, 15, 13, 16, -2, 20, -15, 10, 6, 9}, { -17, 6, -6, 18, -12, 1, 11, -8, -18, -6, -4, 6, 22, 29, 5, -9, 13, 1, -8, -17, -8, 11, 13, 2, -1, -16, -5, 0, 6, -8, -2, -10, -17, -18, -5, 8, 8, 5, 10, 4, -7, -10, 15, 8, 2, 9, -3, 10, 9, 12, 2, -10, 17, -9, -4, -15, 15, -14, 1, 19, 7, 19, 0, -18, 14, -4, 3, -11, 19, 24, -2, 7, -19, -3, -38, -49, -26, -22, -14, -5, 15, 7, 13, 6, -4, -5, 11, 13, -20, 5, 3, -12, 43, 21, 45, 24, 8, 17, 27, 5, 13, 16, -33, -33, 10, -10, -31, -15, 4, 14, -20, -1, 18, 2, 34, -7, 12, 42, 20, 33, 36, 36, 28, 49, 61, 46, 37, 29, 14, 18, 27, -8, 3, -34, -19, -71, -13, -24, 5, -16, 6, 18, 3, 21, 13, 18, 34, 12, 17, -4, 37, 22, 39, 30, 30, 3, 42, 18, 14, 8, 18, 12, -28, -43, -8, 17, 27, 10, 17, 17, -1, 4, -4, -30, -8, 4, -6, 4, 5, 29, 29, 24, 24, 11, 14, 27, 22, -14, -9, -9, -28, -23, -14, 1, -14, -18, 1, 34, -29, 26, 0, 17, 10, 11, 17, -1, 0, 13, 24, 4, 0, 13, -8, 2, 32, -13, 2, -12, -4, -23, -19, -19, -17, 8, -20, -9, 22, 17, 41, 12, -12, 0, 25, 25, 4, -19, -26, -26, -12, -15, 15, 30, 35, 23, 7, -1, 7, -39, -73, -25, 1, 13, 4, -6, 16, 40, 27, 15, -5, 19, -7, -3, -32, -39, -41, -50, -19, -3, 10, 7, 23, 31, 12, 0, 6, -16, -38, -8, 21, 10, 14, 6, 9, 4, -9, -19, -7, -13, -19, -20, -40, -36, -46, -28, -28, 1, 0, 43, 27, -3, -3, 33, 6, -30, -73, -14, -23, -16, -13, 7, -19, -2, -39, -20, -22, -33, -23, -42, -12, -13, -4, -8, 13, -5, 1, 31, 15, 28, 17, 20, -4, -22, -33, -7, -15, -13, -16, 14, -19, 3, -34, -41, -30, -3, 4, -19, 14, 21, 1, 22, 2, 7, 9, -14, -7, -1, 1, -30, -33, -19, -18, 16, 3, -9, -7, 6, -10, 1, -45, -11, 10, -13, 16, 0, 3, -5, 8, 23, 11, 1, 1, 11, -7, -11, -10, -22, 3, -32, -21, -22, 19, 14, 10, 1, -7, 5, -12, -5, 10, 29, 13, 1, -27, -7, -16, 4, 9, 12, 12, 3, -18, -24, 11, -2, 1, -15, -24, -26, 27, 0, -2, -9, 14, -12, -1, 20, 20, -6, -35, -36, -9, -26, -4, -22, 7, 1, 20, -17, -34, -19, -25, 13, 21, -3, 19, 7, -10, 20, -16, 10, 13, -4, 3, 11, -23, -27, -43, -1, -18, -33, -31, 2, -22, 3, -8, -13, 13, 2, -3, 11, 23, 5, -6, -2, 19, 18, 9, 14, 19, -5, 33, -10, -8, -7, -25, -1, -33, -14, -21, -25, -14, -37, 1, 22, 13, 10, -4, 0, -7, -15, -12, 3, -23, 25, 26, -11, 11, 4, 4, 13, -3, -20, 23, 4, 0, 5, -46, -46, -43, -9, 23, -12, -9, 8, -10, 17, 1, -8, -13, 4, -24, 21, 3, 21, 9, -2, -17, 21, -11, -4, -1, 0, -11, -16, -20, -11, 2, -12, 12, 8, 12, 12, -12, 8, 0, -5, -27, 2, 9, 25, 8, 16, -4, 5, 17, 10, 1, -5, 5, 18, 24, 3, -15, 11, -19, 6, -7, 2, -6, 10, 24, -2, 1, 15, -16, -24, 6, -11, 2, 15, 23, 24, -5, 12, 1, 38, 16, 11, 8, -12, -5, 7, -1, 1, 3, 10, 2, 11, -8, -8, -2, 11, -20, -4, 1, 17, -12, 11, 21, 5, 17, 23, 18, 23, 6, 35, 18, 2, -12, 22, 9, 12, 5, -8, 10, 35, 16, 3, 0, -21, 12, 9, 13, -5, -17, 10, 16, 34, -18, 3, 1, 24, 24, 6, 33, 38, 26, 36, 25, 14, 9, 19, 19, -1, 8, 5, 5, -5, 9, -1, -5, 16, -17, 1, 6, 32, 8, -7, 2, 7, 27, 0, 13, 27, 17, 14, -1, 7, 18, 35, 10, 7, -35, -9, -6, -16, 0, 7, -1, 1, -4, -4, 0, -14, -4, -24, 5, -4, 12, 22, 14, 22, -9, -29, 0, 1, 3, 15, 17, 13, 8, 7, -7, -20, -13, -8, -1, 0, -9, -1, 14, -13, -8, -29, -51, -19, -51, 11, 20, 24, -7, 5, -12, -21, -36, -49, -24, -10, -6, 5, 0, -4, -2, 7, 10, -16, -16, 9, -14, 2, -6, 3, 0, -3, 10, -32, 2, 18, -23, -9, 18, -18, -26, -28, 4, 12, 4, -5, -6, 1, -2, -9, -8, -13}, { -3, -14, -15, 12, -15, 16, -1, -1, 15, -16, -2, 2, -5, -14, -19, 9, -16, -5, 14, -16, 0, -15, -19, 9, -10, 10, 13, 7, 9, 12, -4, 7, 12, 15, -33, -26, -14, 6, -5, -18, -19, -19, -28, -50, -12, -16, -1, -2, -27, -24, -25, -3, -11, 0, -12, 13, 13, 18, -5, -10, -10, -3, -18, -29, 1, 23, -14, 2, 16, -7, 8, -5, -25, -16, 3, -38, -19, -12, -20, -38, -15, 1, -3, 14, 5, -10, 18, -29, -34, 8, -23, 25, 38, 3, 30, 45, 25, 11, 19, 16, 29, 11, -11, 3, 6, 42, 34, 13, -18, -20, -12, 9, 7, 5, 31, -7, 12, 29, 18, 9, 15, 28, 18, 29, 27, 15, 0, 20, 18, 26, 0, 18, 19, 25, 35, 21, 39, 19, 24, -13, -15, 15, 18, 35, 13, -12, 6, 21, 21, 20, -3, 12, 16, 10, 10, -11, 13, 3, 3, 1, 18, 6, 15, 4, 37, 37, 5, -23, 4, 7, 0, 12, 29, 2, -1, 15, 9, 29, 1, 2, -8, -16, 17, 11, 22, 3, -17, -5, 1, -31, 6, 13, 9, 8, -10, 13, -6, 9, -4, 0, 20, 13, -4, 5, -3, 12, 15, -15, 4, 10, 4, 9, 6, -26, -22, -27, -32, -20, -12, 0, 14, 3, 4, -16, -8, -19, 21, 24, 13, 16, 1, 11, 3, 6, 8, 1, 13, -4, -3, -17, 6, -43, -3, -12, -9, -7, -7, 15, 19, 15, 19, 16, 4, -47, 0, -3, -12, 2, -13, -10, -13, 14, 4, -16, -10, 18, 7, -33, -6, -23, 1, -5, -9, 12, 7, 6, 3, 15, 21, -19, 14, 1, -2, 4, -16, 3, -3, -24, -12, -4, 2, 8, 18, -4, -8, -33, -10, 2, -1, 18, 11, -15, 19, -2, -3, -4, -21, -42, 13, -2, -17, 7, -10, 17, 10, 7, 9, 11, -17, 12, 26, 18, -11, -22, -11, -6, -14, 16, 19, 8, -8, 18, 1, 30, 15, -16, -13, -23, -18, -13, -25, 24, 16, -19, 8, -1, -8, -5, 8, 22, 3, 4, 8, 3, -2, 6, 1, 17, 10, 14, 29, -7, -15, -45, 10, 8, -10, -27, 3, 21, -6, -14, 1, 6, 7, 21, 33, 19, 27, 22, -2, 17, 21, 24, -17, -20, 5, 9, 13, -15, -6, 20, 5, 3, -8, -32, 0, 2, -7, 8, 8, 5, -1, 25, 22, 21, 23, 15, -5, -1, -21, -17, -14, -27, -13, -11, -25, 20, 6, 1, -12, 11, 17, -11, 30, -4, 6, 20, -5, 12, -22, 3, -15, 11, 20, 14, 18, 9, -27, -12, -30, 9, 12, 4, -7, 16, 11, 8, -16, 2, -9, 14, 14, -6, 20, 5, 5, -5, 9, -8, 28, 21, 20, 11, 12, 9, -7, -8, 6, -9, -16, -13, -17, 15, -10, 9, 9, -21, 22, 28, 19, -15, -1, 0, -9, -5, -5, 15, 16, 29, -6, -7, -20, 9, -27, -12, -8, 3, -16, -14, -17, 16, -13, -11, -29, 18, 8, 51, 25, 6, 24, -14, 1, -7, 16, 17, 30, 12, 5, 3, -14, -20, -12, 9, -7, -9, -4, 5, -6, -23, -23, 37, -7, -5, -29, 50, 24, 34, -4, 7, 0, 0, -15, 3, -23, 1, -3, -12, 1, -14, 18, 1, -3, 15, 8, -5, -5, -31, 30, 18, 11, 9, 9, 34, 20, 11, 21, -1, -3, -15, -2, -10, -16, 0, 2, -11, -3, 15, 19, 25, 23, 27, 7, 11, -18, -31, -14, 6, -17, 7, 28, 22, 3, 5, 34, 14, -10, 10, -16, 16, -10, -7, -9, 10, -18, -3, 6, 21, -5, 31, 29, 16, -38, -34, -50, -10, 5, -6, -15, 23, 1, -23, -4, 11, -13, -8, 5, 29, 1, -7, -19, -11, -11, -11, 8, 3, 2, 45, 34, -20, -14, -23, -50, -14, 12, 2, 36, 42, -7, 8, -24, 4, 18, -2, 10, 17, -17, 18, -21, 2, 12, 14, 45, 22, 31, 22, 20, -2, 13, -17, -5, -11, -16, 11, -7, 35, 2, -33, -9, 16, 14, 28, 29, 30, 6, 5, 14, -23, 13, -15, 5, 20, 18, -11, 26, -6, -16, -8, -19, 9, 16, -14, 28, -33, -32, -31, 18, 9, -13, -18, 35, 8, -2, 27, 16, 32, 12, 13, 30, -11, 14, 4, -19, 0, -21, -17, 1, -7, 14, 5, 11, -6, 1, -35, -25, 1, 7, -15, -19, -2, 13, -11, -34, -25, -26, -14, -3, -43, -47, -31, -35, 13, 9, 2, -10, -7, 15, 2, 3, -7, -8, -2, -1, -1, -25, 7, -37, 3, 16, 11, -1, 32, 0, -30, 1, -12, -13, -24, -30, -30, 3, 8, -4, -3}, { 6, -15, -14, 8, -3, -14, -6, 9, 13, 2, -14, 4, 5, 29, -21, 6, -1, -7, 6, 11, -16, -5, -5, -10, -9, -4, -10, -9, -3, 5, 13, 18, 3, 7, 29, 29, 26, 10, 30, 16, 18, 44, 11, 38, 33, 49, 29, 27, 30, 17, 28, 22, -13, -5, 1, -12, 6, -3, 12, 16, 43, 28, 8, 22, 7, -12, -12, 19, 6, -11, 14, 23, 47, 16, 10, 17, -3, -12, 14, 49, 3, -14, -11, -14, -2, 8, -7, 31, 5, -17, 43, 33, 8, -3, 18, 23, -16, -10, 13, 20, 32, 6, 23, 3, 19, 38, 32, 4, -26, -24, -5, 13, 3, -14, -3, -14, -14, -34, -37, -35, -18, 2, 14, 6, 11, -10, -13, 12, 6, 13, 33, 27, 22, -1, -37, -20, -15, -34, 11, -2, 1, -12, 13, -9, -16, -16, -30, -23, 3, 12, -7, -8, -6, 12, 24, -17, 23, 24, -3, 29, 31, -11, -7, 14, -12, -23, 11, -9, -2, 14, -2, -36, -24, -13, -12, -17, -14, -7, -13, 21, 10, 15, -10, 8, -14, -19, -13, -11, -1, -28, -6, -10, 2, 19, -3, -18, -5, -1, 9, -34, -38, -41, -45, -28, -29, 11, 1, 10, 6, -30, 2, -20, -21, -28, 1, -17, -45, -7, -29, -38, -7, -5, -7, 9, -13, 1, -14, -12, -35, -25, -50, -51, -23, 4, 3, 3, -2, -19, -38, -25, -24, -46, -56, -31, -26, -23, -48, -44, -11, -12, -12, -13, -17, 30, 8, -9, -48, -58, -10, -13, 0, -18, 7, 10, 18, -17, -37, -44, -47, -50, -71, -16, -35, -36, -14, 4, -8, -14, -16, -24, 14, 18, 1, 5, -46, -21, -12, -8, -8, 5, 34, 6, 8, -2, -15, -14, -2, -1, -14, 15, -7, -12, -6, 6, 2, -5, -7, -27, -15, 17, -14, -21, -39, -17, -14, 2, -10, 39, 2, 2, 17, -25, 3, 4, -12, -3, 29, 23, 0, 26, 26, 22, 28, 9, 10, -9, -10, -12, -19, -9, -52, -23, -4, 26, 19, 6, 28, 20, 8, -32, 9, -2, -21, 8, 33, 21, 30, 18, 27, 6, 47, 7, -15, -49, 12, -14, -4, -10, -38, -12, -9, 26, -9, 19, 28, 24, -3, -1, 3, -17, -8, 18, -3, 45, 8, 27, 10, 3, 26, 9, -37, -29, 18, -21, -22, 5, -44, 6, -1, -1, 9, 28, 24, 23, 15, -10, -5, -7, -14, 12, 24, -2, 31, 46, 41, 15, 10, 11, -31, -22, -9, 6, 4, -11, -45, -9, 4, 18, -5, 8, 16, 32, 13, 3, -6, -21, -15, 14, 7, -16, -4, 18, 9, 3, -2, -1, -30, -5, -27, 8, -18, 13, -12, 24, -27, 9, 14, 28, 2, 19, 16, 6, 20, 8, -13, -9, 0, -16, -17, -13, -11, -4, 8, 26, -49, 11, 7, -17, -30, -7, 7, -25, -35, -10, 17, 4, -1, 39, 12, 0, -3, -14, -21, -2, 4, 7, 3, -4, -5, 1, 15, 2, -32, -18, 9, 5, -9, 3, 16, -21, -35, -17, 7, -18, 28, 10, 29, -2, 8, -7, -7, -12, -17, -19, 3, -1, -39, 5, 6, 5, -35, -42, 5, 24, -15, 18, -4, 3, -44, 3, -13, 3, 32, 41, 15, -13, 19, -11, -24, -22, -9, -3, -23, 10, 7, -3, 5, -16, -28, -35, 1, 8, 6, 23, 24, 10, -40, -22, -9, 17, 27, 10, 3, 15, -4, 16, -26, -28, -2, 5, -7, -8, 27, 9, -5, -22, -23, 9, -8, -16, 17, -10, 9, -17, -36, -30, -18, 13, 5, 47, 12, 35, 18, 21, 11, -2, 1, -6, -10, -8, 23, -22, -19, -8, 56, 17, 11, 7, -9, -30, -39, -44, -28, -30, -14, 12, 20, 18, 9, 0, 26, 33, -3, 13, -9, 8, -28, -26, 2, -17, -35, -7, 24, -4, -18, 1, 14, 4, -8, -24, -21, -17, -31, -12, -3, -26, 12, 9, 9, -3, 8, -19, -8, -4, -7, -24, -34, -16, 2, 0, -5, 18, 2, -16, 0, -8, -6, 11, 12, -14, -37, -41, -41, -38, 8, 1, -12, 3, 4, -12, -14, -63, -51, -58, -19, -23, -32, -25, -27, 10, 5, -15, -11, 3, -3, -22, 21, 19, -24, -39, 21, -12, -41, -45, -39, 17, 6, -19, -39, -23, -12, -5, -13, 19, -2, -20, 10, -18, 4, 11, -15, 2, -20, -1, -4, -28, -28, 4, -21, 11, -16, 17, 5, 36, 4, -33, -21, -22, -6, -13, -15, 4, 0, -7, 12, 17, -4, -14, -8, 16, -3, -16, -9, 15, 15, 24, 6, -17, 5, -11, -30, -25, -33, -19, 0, -5, -5, -22, -15, -5, 12, -10, -18, 14}, { -7, 18, -15, -7, -8, 11, -7, -17, 14, 17, -9, -11, 17, 11, -15, 16, 6, -18, -15, -18, 9, 9, -4, 8, 8, 19, 14, -2, -17, -15, -15, 7, -13, 8, 2, 11, 0, 16, 7, -5, 12, 4, 4, -28, -29, 1, 2, 4, 11, -1, 15, 13, 6, 13, -7, 6, 18, -13, -4, -8, 6, 33, -3, 7, 7, 7, 11, -15, 7, -2, -7, 19, 11, 5, 7, 15, -5, 5, 35, 27, -13, -17, -16, 4, 8, 15, 0, -17, -32, -14, 1, 13, -12, -20, 11, 14, -6, 4, 34, 7, 3, 19, 9, -3, 26, 10, 44, 31, 29, -8, 3, -12, 13, -8, -24, 1, 0, 9, -24, -20, -26, -30, -41, -20, -2, -16, 20, -1, -8, -13, -30, -1, -8, 31, 28, 37, 47, 20, 22, 6, -5, 0, -20, -2, 22, 5, 25, 26, -1, 14, 9, 0, 0, 3, 35, 18, -3, 11, 11, -33, -45, -17, -4, 28, 51, 42, 4, 23, -18, -19, 2, 17, -14, 22, 9, 28, -6, 16, 29, 15, 19, 26, 27, 8, 14, -3, -19, 11, -1, 6, 41, 62, 79, 15, 17, 24, 11, 8, 2, -2, -16, -22, 5, -8, -11, 9, 15, -21, 3, 12, -16, 0, -18, 1, 7, 9, 11, 15, -10, 52, 38, -12, 41, 6, 15, 4, 7, -12, -37, -29, -11, 4, -18, -3, -6, -14, 18, -6, 2, 2, -4, 6, 25, -9, -9, -2, -11, 10, 16, 11, -11, -13, 16, 14, -24, -2, -39, -27, 13, -16, -24, -12, -49, 12, 19, -6, 15, 3, -18, -10, -9, 1, 2, 5, -13, -15, -9, 5, 2, 8, -7, 15, 4, 4, 6, -30, -2, -28, -16, -28, -44, -3, 7, 15, 2, -7, -16, 0, 3, -3, -3, 8, 3, -47, -16, -1, -23, 13, 10, 9, -14, 33, -12, -33, -17, -7, 1, -40, -27, 13, 3, 14, 5, -20, 11, 0, -12, 5, -24, -13, -16, -19, -27, -38, -17, -17, -1, 15, -17, 22, -27, -10, -20, 13, -15, -24, -21, 26, 12, 24, -3, 4, 3, -12, -16, -22, -14, -5, -23, -15, -41, -20, 3, 21, -24, 1, 8, 9, -37, 4, -22, -19, -29, -10, -1, 36, 29, 0, 13, 24, 26, -16, -17, 8, -15, -19, -42, -18, -36, -15, 1, -3, 22, -7, 9, -28, -17, 14, -34, -33, -18, -12, 22, 22, 19, 15, 2, 6, 2, 1, -16, 16, 7, 17, -24, -29, -56, -13, -35, 6, -3, -6, -15, -3, -7, -8, -11, -25, -27, -28, -8, 6, 6, -13, 6, 27, 1, 8, 33, 18, 16, 13, 2, -25, -45, -12, -46, -8, 12, -1, -20, -26, -9, 1, -8, -4, -11, -17, 21, 10, 24, 10, 9, 19, 16, 20, 0, 4, -14, -33, -31, -47, -58, -46, -50, -48, -9, -9, -33, -25, 3, 12, 18, 12, -20, -1, 18, 23, 5, -4, 9, 24, 11, 9, 5, -1, -23, -29, 1, -8, -29, -37, -14, -24, -24, 2, 14, -25, -4, -12, -1, -19, 5, -22, -2, 4, 21, 8, 16, 8, 28, 21, 3, -38, -45, -33, -49, -31, -4, -24, 42, -22, -9, 40, 8, -8, 0, -19, 4, -9, -1, -24, -1, -13, 2, -26, 15, 7, 18, -8, -20, -30, -52, -35, -36, -28, -26, -11, -1, -20, -9, 6, 6, -22, -43, -1, 3, 7, -33, 5, -7, -11, -15, 1, 12, -3, 1, -11, -23, -39, -49, -34, -16, -26, -5, 2, 5, 13, 3, 4, 7, -16, -38, -2, 5, -13, -2, -11, -19, -16, -10, -7, 5, 8, -4, -1, -51, -74, -32, -4, -15, -21, -8, 2, -13, -7, -5, -5, 22, 2, 11, -6, 9, 18, -4, 11, 9, -10, 4, -12, 8, 10, 15, -12, -62, -37, -54, -45, -7, -12, -28, -21, -22, 9, 8, 0, -15, -27, 12, 24, 14, 11, -16, 4, -31, 1, -7, -8, -9, -4, -26, -82, -62, -65, -44, -24, -9, -7, 1, -14, -4, -2, 7, 18, 5, -5, 14, 45, 0, 26, -7, -26, -1, -3, -1, 50, 36, -8, -14, -62, -87, -70, -48, -39, -10, -3, -3, 2, -19, -12, -3, 4, -21, 3, 45, 67, 5, -12, -1, -12, 2, 13, 6, 22, -9, 15, -3, -61, -44, -51, -50, -34, -21, 6, 8, -5, -9, 2, -14, 7, -12, -29, 9, 43, 36, 9, 43, 1, -1, 2, 3, 30, -2, -3, 19, 12, 11, 13, -18, -4, 16, -7, -8, 19, 16, 4, -4, -2, 12, -16, -8, 19, -6, -1, -15, -2, 36, -14, 2, 13, -16, -20, -5, 20, -6, -5, -10, -12, 18, 10, 6, 3, 10, 7}, { 18, -12, 16, 15, 16, -5, 0, -4, -10, 16, -13, 2, 30, 20, 17, 4, -10, -6, 16, -14, -6, -16, -11, 3, -15, 17, -1, -14, 15, -7, 2, 10, 15, 17, -2, -4, -11, -11, 3, 5, 4, 29, 11, 1, -32, -25, 19, 12, 18, 16, 12, 9, -19, -4, -1, 14, 18, -11, -5, 13, -3, 5, -22, -9, -7, -21, 8, 8, -19, -45, -54, -26, -54, -62, -28, 18, 26, 53, 27, 17, 12, -23, 14, -1, 3, -5, 16, 6, 9, 14, 31, 14, 0, -5, -38, -18, -13, -27, -50, -50, -28, -10, -14, 20, 15, -21, 1, 8, 10, -1, 12, -14, 2, -16, -4, 23, 20, 5, 15, 1, -29, -5, -12, -37, -25, -6, -18, -3, 0, -3, 16, 50, 39, -9, -18, -15, -13, -47, -12, -13, -10, -18, 23, -9, 25, 33, 14, 4, -17, -12, 10, -23, -26, -29, -2, 0, 7, 15, 16, -2, 22, -15, -7, 6, 16, -14, -28, -11, 10, 20, 10, 21, 24, 3, 17, 10, 24, -3, -10, -4, -17, -11, -9, 7, -5, 25, 7, -6, 11, 2, 22, -13, 8, -32, 13, 11, 12, 19, 20, 25, 32, 5, -9, 16, 14, -11, -3, -19, -19, -38, -4, -18, 18, 27, 32, 25, 16, 15, 4, -30, -16, -2, 27, -8, -5, -22, 6, 16, 47, 32, 4, 7, -23, -5, 17, -33, -52, -22, -3, 24, 21, 28, 10, -6, -6, 7, -21, -70, -40, -9, 18, 1, 1, 5, 29, 17, 19, 0, -16, 17, 6, -3, -16, -30, -61, -33, 8, 32, 38, 15, 17, 0, 5, 3, -21, -19, -26, -65, -48, -27, 3, -6, -6, 11, 57, 14, -28, 0, -2, -27, -46, -24, -43, -30, 39, 41, 36, 27, 23, 1, -6, 1, 16, -20, -42, -33, 3, 48, -11, 6, 15, 1, 12, 3, -5, -3, -23, -22, -16, -42, -5, 23, 44, 29, 28, 28, 7, -3, -4, 20, 1, -21, -49, -45, 11, 21, -18, 2, 0, -8, 21, -9, -19, -2, -40, -14, 9, 11, 26, 47, 7, 19, 4, 7, 17, -28, -14, 10, 9, 12, -17, -3, -31, 26, 28, -17, -22, -19, -28, -10, -3, -2, -21, -24, 0, 12, 38, 20, -6, -17, -4, 28, -1, -16, 2, 11, -26, -45, -31, -2, -27, -4, -6, -15, 12, 5, -19, -34, 0, -28, -3, 41, 18, 22, 12, -23, 10, 6, 9, 30, -13, -21, -1, 15, -5, -24, -40, -10, -32, -9, -18, 1, 13, 0, -3, -18, -41, -43, -27, 17, 3, 40, 31, 10, -10, -5, 3, 4, -2, -14, 1, 32, -25, -24, -24, -23, 0, -12, 3, 11, 6, -13, 0, -8, -58, -52, -21, -5, -3, -2, 18, 5, -10, 20, 20, 9, -17, -2, 16, 24, -19, -19, 5, -17, -47, -16, -17, -11, -3, -7, -23, -16, -66, -41, -48, -32, -23, 9, 22, 33, 18, -4, 14, 11, -9, -13, -10, 8, 1, 18, 32, 6, 11, -25, -17, -6, 0, 3, -43, -50, -33, -38, -24, -8, -16, 9, -2, 4, 20, -14, -13, -1, -4, -26, -21, 1, 1, 7, -3, 21, 32, 27, -3, 42, -7, 34, -14, -11, -8, 2, -39, -51, -52, -26, 14, 8, 1, -13, -16, -5, 4, -18, -18, 8, -25, -33, -16, 41, 22, -2, -14, 6, 9, 62, 20, -13, 9, 8, -21, -40, -34, -35, -27, -26, -1, -2, 10, -14, 12, -23, -28, 13, 7, -25, -4, 9, 0, 17, -11, 1, 33, 39, 10, 21, 22, 30, 2, 1, 5, -20, -5, -8, -6, -19, 18, -1, 9, -42, 11, 12, 26, -31, 21, -2, -18, 18, 20, 11, 23, 6, 33, 53, 23, 28, 34, 21, 19, 4, -26, -7, -2, -12, -26, 4, -2, -8, -3, 21, 10, 8, -14, -26, 16, -8, 11, -1, 6, -18, 8, 0, 18, 44, 12, 25, 25, 12, 0, 16, 16, -11, -15, -4, 3, -20, -9, -38, -52, -14, 6, 24, 28, -2, 2, -8, 21, 5, 41, 37, 23, 30, 19, 26, 15, -16, -15, -33, -20, -29, -20, 12, 5, 5, -2, -5, -15, -7, -7, 12, 12, -3, -9, 18, 18, 16, 36, 39, -28, 24, 22, 24, -30, -56, -26, -11, -13, -29, -48, -30, 16, 12, 2, -13, 4, 7, 4, 20, -11, 13, 4, -10, 17, 35, 12, -1, -17, 13, -30, -18, 4, -13, -56, -30, 14, 20, -5, -17, 10, 18, -14, 1, 5, -22, -6, -6, -9, -9, -2, 7, -2, 1, -19, -20, -27, -9, -23, 4, -13, -32, -10, -6, -2, 11, -2, 2, 27, 2, -19, -3, 11, -19, -12, -7, 2, -7}, { -5, 3, -18, 10, 16, 6, 5, -16, -12, 11, 14, 16, 18, 18, 15, 9, 13, -6, 11, -12, -3, -3, 6, -5, -8, -8, 11, -3, 13, 5, 0, -9, -12, -7, -9, 14, 8, 6, -5, 7, 9, -3, -24, -28, -28, -5, 17, 14, 15, 10, 7, 12, -9, 13, -15, -6, -18, 1, -9, 1, 9, 4, 16, -5, 39, 12, 4, 35, 34, -11, 24, 6, -39, -6, -10, -46, -19, -12, -12, 30, 27, 22, -17, 8, -17, -10, -10, -6, -25, -2, -3, -4, 14, 35, 26, 7, 23, -20, -47, -41, -44, -30, -13, 0, -13, 27, 19, 9, -17, 8, 26, -5, -9, 0, 0, -23, -38, -17, 8, -16, 14, 13, -6, -2, 6, -37, -35, -20, -15, 20, -25, -12, 11, 11, 13, -3, 6, 18, 16, 30, 6, 18, 5, -14, -36, -4, -26, -22, 4, -1, -16, -6, 0, -31, 16, 5, 19, -3, 7, -3, -10, 11, 15, -21, 7, 26, 33, 30, -7, 4, 10, -15, -20, 19, -33, -15, 29, 14, 6, -4, 23, 4, -15, -1, 1, -1, 1, 20, 5, 21, -20, 18, 3, 13, 5, -13, 15, 22, 26, 13, -10, -22, -5, 7, 23, 6, 25, -2, 13, 1, -20, -8, 22, 25, 17, 17, 16, 30, 33, 10, 1, -12, 60, 34, 13, 34, -1, 33, -7, -10, 17, 32, 22, 5, -9, 22, 10, 11, 18, 22, 35, 22, 42, 31, 23, 33, 22, 47, -6, -23, 34, 11, -14, 8, 38, 26, 24, 11, 38, 44, 25, 30, -2, 26, 8, 12, 18, 23, 38, 24, 11, 21, 17, -2, 7, 26, 9, 6, 26, 4, -1, 3, 24, 20, 34, 36, 20, -10, 11, 2, 49, 8, 11, 44, 16, -8, 7, -21, 6, 8, -10, -1, 6, -4, 33, 33, 35, -8, 15, 7, 6, 30, 74, 49, 23, 17, -1, 12, 24, 10, 9, 9, -24, -20, -39, -26, -31, 3, 12, -14, -35, -12, 6, 18, 44, -14, -7, -4, 10, 24, 14, 33, 21, 30, 9, 3, -13, -3, -27, -36, -54, -64, -59, -42, -10, -28, -37, -18, -31, -48, 5, 22, 33, 21, -9, 9, 1, 10, -32, 11, 11, -12, -4, -4, -29, -13, -10, -41, -15, -38, -50, -27, -37, -16, -28, -52, -26, -33, -27, 8, 10, 22, 24, -6, 20, -41, -11, -34, -21, -36, -26, -33, -22, -25, -42, -27, 18, -12, -32, -33, -65, -50, -31, -19, -32, -10, -24, 3, 34, 29, 23, -17, -7, -42, -48, -25, -38, -38, -56, -27, -25, -25, -19, 9, -9, -5, -13, -8, -31, -39, -38, -39, -9, 20, 16, -12, -21, -16, -12, -10, -6, -14, -67, -43, -68, -29, -33, -24, -5, -10, 16, 14, 18, -15, 26, 12, -38, -37, -38, 7, 12, 4, 17, -12, -7, 10, -5, -2, 2, -26, -49, -18, -54, -37, -25, -10, -17, 15, 28, 21, 33, -4, -6, -5, -19, -15, -9, -3, 36, -6, 15, -5, -8, 25, -7, -8, -5, 11, 0, -12, -10, 7, -29, 4, 6, 27, 33, 22, -2, 25, -3, -2, -4, 8, -15, 12, 5, -10, 36, -14, 10, 47, -14, -1, 13, 17, 1, -1, 12, -3, 10, -13, -24, 24, 18, 18, 18, -5, -19, 7, -2, -4, 26, 5, 12, 8, 5, -1, 40, 24, -13, 15, 32, 15, 27, 11, 43, 24, 28, -12, 7, 1, 5, 13, 22, 9, 15, -7, 18, 14, -3, 29, 13, -9, 4, 18, 8, 7, -10, 9, 11, 26, 40, 48, 35, 11, 2, 10, 12, 37, 6, 19, -1, 17, 25, 47, 38, 40, 18, 35, 28, 21, 20, 9, 34, 17, 5, -17, 27, 23, 41, 65, 43, 7, -5, 14, -12, 15, 22, 13, 17, 35, 13, 24, 19, 23, 6, 8, -7, 17, 2, 23, -3, 17, -5, -10, 1, -10, 51, 30, 45, 15, -8, -4, -13, 10, -1, 12, 14, 2, 7, 20, 30, 33, 13, -20, 6, 49, 17, 14, 27, 15, 4, 13, -7, -18, -18, 10, 17, -15, -10, 4, 0, 23, 14, 6, 12, 23, 40, 52, 69, 47, 17, 18, -16, -3, 31, 4, 11, 10, -18, -7, -43, 23, 6, -16, 6, 25, 29, -4, -12, -3, 25, 22, 32, 32, 2, 30, 9, 38, 0, 29, 10, -24, -5, 7, -8, -15, 18, 16, 6, -17, -18, -32, -13, -6, 8, 5, 12, 21, 11, 19, 9, -4, -8, 1, -10, 33, -1, -4, -5, 12, -22, 22, 18, 0, -15, -13, 12, -13, 35, 48, 49, 29, 31, 17, -24, -15, -3, 23, 2, -5, -12, 47, -13, 18, -15, 19, 2, 23, -6, -17, -3, -7}, { 16, -16, -12, 15, -16, -13, -8, -6, -17, 15, -2, 9, -17, -5, -1, 13, 0, -18, -8, 7, -1, -2, -9, 17, -17, -17, 15, -16, -6, 0, 14, 6, -7, -15, -8, -14, -8, -10, -25, -13, -19, -1, 10, 15, 52, 18, -16, -20, -13, -7, -32, -9, -7, 4, -18, -13, -2, -14, -4, 14, -12, 7, 19, 4, 25, 13, 5, -22, -13, -16, 15, 13, 7, 3, 14, -42, -22, -33, -19, 15, 18, -4, 13, -17, -17, 1, -7, 11, 16, -22, 6, -22, -44, -9, -13, -13, -12, 23, -10, 12, 1, -19, -18, 9, -33, 12, 8, 19, 0, -19, -7, -14, -7, 17, 24, -26, 2, -3, 1, -27, -3, 5, 5, 10, 3, 17, 16, -1, 18, 16, 7, 23, 16, 11, 5, 12, 24, 24, -2, -13, -5, 4, 3, -22, -5, -34, -16, 0, 10, 7, -16, 17, 13, 9, 7, -10, 0, 1, 8, -16, -12, 12, -12, 2, 10, 30, 12, -27, 17, -7, 7, 3, 17, 5, -32, -5, 3, 10, -2, -5, 26, 3, 11, -8, -5, 8, -13, -14, 13, -12, 25, 14, -1, 19, 14, 5, -14, 22, -6, -2, 27, 9, -3, 2, 5, 28, 16, 11, 23, 15, -30, 10, -9, 11, 12, -13, -15, -1, 23, 14, -4, -21, -1, 6, -10, 19, 6, 22, -1, 8, 17, 38, 2, 24, 15, -13, 12, -11, -12, -5, 6, 10, 7, 12, -4, -28, 16, 3, -5, -4, -1, 7, -15, 26, 29, 12, 6, -11, 27, 22, -2, 20, -4, 10, 4, 2, 0, 4, 27, 8, 14, -5, -9, -5, -9, 22, 12, -10, 0, -14, 4, 18, 18, 4, 0, 26, 24, -8, 26, 6, 6, 1, -14, -18, 7, 0, -2, 8, 2, 10, -15, 11, 4, 22, 18, -33, 8, -16, -12, 6, -11, 32, 14, 26, 17, 36, 31, 3, 3, 3, 8, -2, -4, 14, 9, -24, -2, -17, -21, 18, 10, -3, 29, 0, 18, 18, -15, -5, 17, 43, -7, 11, -10, 13, -15, -19, -8, -21, -2, 15, -15, 25, -2, 16, -32, -8, 13, 4, 11, 26, 35, 21, 0, 36, -10, -7, -1, 31, -20, -12, -4, -19, -5, -16, -22, 1, 8, 6, 13, 8, -2, 0, 3, -18, 1, 37, 39, 18, 6, 23, 12, 20, 13, -4, -17, -13, -24, -3, 19, -11, 10, -13, 8, -4, -9, 19, 4, 22, -15, 6, -13, -15, -13, 7, -8, 6, 9, 38, 11, 15, 8, -23, -16, 21, -27, 13, -1, 20, 7, -2, 3, 3, 24, 40, 43, 17, 22, 10, -13, -11, -28, 25, -12, -4, -27, 29, 24, 13, 19, -19, -11, 7, -34, -19, 14, -17, 20, -9, 19, 21, 31, 36, 45, 30, 33, -13, -15, -29, 5, 17, -8, -7, 1, 29, 0, -7, 3, -14, -19, -24, -1, -11, 15, -29, -1, 11, 20, 13, 23, 30, 13, 20, 20, -2, -29, -33, 2, 6, 8, 7, -1, 16, 19, 16, 2, -1, 10, -5, 4, -20, 6, -16, -13, 4, -11, 2, 23, 35, 17, -4, -19, -13, -6, -10, 8, 21, 10, 9, 17, 5, 21, 27, 5, -22, -15, -18, 4, -7, -31, 1, 3, 14, -3, -13, -12, -20, -18, -18, -12, 2, 3, 4, -2, -7, 2, -10, -7, -3, 31, 24, -9, -14, 1, -8, 13, -2, -5, -3, -4, -11, 20, -15, 12, -8, -15, -19, -16, 2, 12, 14, 5, 5, -13, 1, -8, 6, 21, 17, -14, 20, -30, -16, 3, -8, 14, 17, 1, 15, 2, 2, 11, 8, -2, 7, -26, 8, -22, -4, 3, 9, 16, -4, -32, -19, 52, -18, -7, 0, 15, -23, 23, 25, 1, 16, -21, 22, 8, 33, 7, 11, -16, -18, -16, -2, -8, -2, -12, 7, 1, -29, -26, 1, 51, 7, -9, 6, -7, -22, 20, -20, -28, -24, -18, -22, -15, -17, 24, 23, 5, -5, -12, -21, -11, 32, 7, 20, 36, -27, -56, -20, -28, 16, -12, -15, 11, -41, -12, -11, -21, -46, -30, -14, -4, 1, 0, 19, -13, 12, -17, -13, -22, -9, 16, -6, -13, -37, -36, 24, -2, -13, 7, 1, -40, 3, 20, -5, -14, -15, -40, -29, -10, -1, -23, -7, 9, 10, -2, -21, -10, -34, -22, -8, -39, -26, -19, 19, 26, -5, 4, -8, -19, -23, 3, 14, -6, 9, 16, 14, -22, -16, 28, 33, -21, -22, -16, -23, -9, -18, -25, -31, -16, -1, -3, -4, -3, -3, -5, -11, 16, 0, 16, 11, -2, -6, -7, 10, -14, -22, -7, 10, -28, -3, -6, 11, -6, -14, -6, 12, 8, 22, -3, 11, -18, -15}, { 0, -11, 3, -5, 9, 4, -2, 2, -16, 2, 5, -10, -11, 23, 8, 3, 17, 11, 10, -16, 1, 5, -15, -3, 11, -7, 19, -16, -10, -14, 13, -15, 12, 20, 35, 10, 24, -10, 8, 10, -2, 23, 6, 44, 21, -4, 29, 1, 5, 17, 27, -5, -16, 7, 19, 1, -18, -12, -13, 26, 12, 2, 22, 16, 18, 4, -7, 24, 19, -6, 2, 20, 8, 8, 13, 26, -11, 10, 8, 44, -2, -1, -18, 11, -16, -13, 18, 27, 30, 13, 9, 18, 0, -7, -3, -21, 5, -1, -6, -13, 17, 16, 44, 3, 28, 4, 10, 30, 1, -6, 11, 11, -16, 11, 2, 11, -1, -2, 0, 4, -13, -22, 8, 21, 7, 18, -14, 15, 3, 2, 15, 10, -1, 13, -10, -27, -31, -28, 10, -10, -17, -12, -9, -7, 20, 6, -2, -16, 11, -14, -27, -7, -2, -14, -19, 12, 4, 14, -10, 10, 6, -21, -35, -51, -33, -33, -12, -26, 6, -3, 30, 8, 31, -3, 25, -1, -12, -9, -17, -7, 6, 11, -13, -13, 12, -7, -5, 2, -2, 16, -22, -3, 1, -13, 9, 4, -16, 48, 20, 43, 7, 8, 7, 29, 11, 14, -4, 4, 14, -24, -1, 15, 16, 20, 24, 5, -9, -13, -9, 7, -5, 0, 15, -8, 9, 12, -15, 4, 4, 9, -10, 19, 11, -1, 12, -21, 7, -5, -2, 2, 15, 4, 9, 4, 3, 26, 17, 18, 18, 11, 1, 14, 15, 35, 12, 8, 24, -5, -7, 15, 17, -16, -22, -15, -18, 1, 3, -11, 16, 18, -2, 9, 10, 17, 37, 18, 24, 17, 7, 13, -4, 29, -11, 12, 16, -9, 0, -23, -20, -22, -2, -2, 9, 27, 2, 9, -7, -3, -5, 16, 8, 11, 11, 6, -5, 35, 53, 36, 20, 15, 45, 43, 34, -17, -3, 11, 12, -9, 1, 1, 8, 11, 3, -2, -1, 1, 33, 14, 4, 23, 15, 21, 0, 13, 42, 37, -13, -6, 29, 25, 7, -10, -24, -17, -2, -9, 10, 18, 6, 2, 36, 19, -3, 12, 11, -5, 22, 13, 14, -29, -42, -13, 12, 35, -7, 24, 41, 36, 1, 1, -6, 4, 13, 11, 13, 10, 14, 16, 39, -2, 5, 8, -7, -12, 12, -7, -7, -27, -19, -8, -9, -21, -7, 15, 13, 30, -12, -4, 21, 12, 0, 12, -5, 23, 3, 18, 1, 4, -10, -4, 11, -7, -4, 20, 12, 17, -2, -37, -3, -29, -3, -11, 10, -6, -18, 12, 6, 9, -9, 4, -6, 3, 9, -5, -1, 4, 16, 11, 15, 12, 14, 12, 22, 19, 18, -21, -27, -1, 2, 11, 11, -19, 1, 31, 10, -7, -10, -17, -19, -17, -25, 1, -17, -5, 10, -8, 8, 6, 24, -10, -12, -27, 14, -47, -32, 0, 9, -9, -1, -4, -11, 5, 1, 9, -11, -2, -16, -25, -26, 11, 20, 10, -1, 20, 12, -1, 14, -8, 5, 3, -17, -18, -16, 4, 8, -5, -5, -23, -22, 16, -18, 3, -19, -6, 2, -9, -5, 26, 0, 2, -1, -3, 5, -21, -11, 4, 5, -45, -30, 26, 33, -7, 0, -3, -14, 0, -25, 7, 10, -4, -11, -6, -28, -6, -1, 14, 28, 15, -11, -4, 6, -23, -19, -25, -32, -25, -17, 23, -2, 9, -1, 1, -9, -1, 2, -29, 16, 4, -14, 3, -18, -26, 9, 22, 27, 14, 5, -9, 10, -22, -19, -38, -19, -35, 8, 25, 12, -16, -2, -6, 13, 13, -30, -25, 12, 21, 12, 9, -3, 11, 2, 6, 12, -11, -5, 6, -2, -3, -27, -23, -33, -30, -8, 8, -15, 7, -14, 0, 12, -15, 11, 12, -5, 6, 19, 15, 26, -6, 5, -11, 7, 9, -11, -6, -17, -9, -11, -45, -30, -27, -9, -3, 11, 17, -15, -11, 10, 16, 21, 14, 12, 29, -19, -3, 21, -3, 6, -11, 2, 1, -11, -31, -18, -44, -43, -31, -17, -14, -9, 1, 5, 11, 11, -8, 3, 22, 53, 47, 41, -1, -2, 6, 21, 0, -7, -10, -3, -21, 4, -18, -28, -47, -39, -40, -46, -32, -7, -22, -18, -13, 13, 12, -42, 7, 38, 64, -9, 26, 7, 21, 2, 6, 29, 10, 6, -2, -11, -15, -11, -10, -6, -33, 12, -8, 0, 6, 3, -14, 13, 14, 1, 10, 1, -6, 15, 31, 13, 24, 30, 21, -8, 20, 40, 22, 16, 11, 22, 51, 38, 20, 25, -3, -1, 22, 4, -13, 6, 0, 14, -13, 4, 8, 2, 24, 6, 22, 39, 27, -4, 22, 24, 24, 27, 55, 10, 10, 1, -6, -11, 20, 17, 5, 6, 15}, { -8, -3, -17, 7, 15, -4, -5, -10, -2, -4, -11, -15, 16, 18, -8, -7, 3, -12, 11, -9, -9, 12, 6, 9, -7, -14, 8, 15, -7, 8, 8, 4, -17, 11, -12, 9, -9, 9, 9, 2, 1, -5, 1, -2, -23, -11, -1, -2, -4, -12, -20, -20, 3, -9, 16, -3, -15, -2, 6, 16, 6, -9, -13, -2, 1, -22, -26, -43, -46, -65, -42, -41, -28, 37, 18, 35, 8, -3, 12, -2, 6, 15, -10, 2, 18, -1, 1, -7, -1, -5, 18, -1, -15, -25, -17, -47, -6, -10, -33, -10, 4, 5, 6, 7, -12, -15, -15, -32, 20, -20, 10, -12, -6, -8, -20, 16, 30, 9, -14, -23, 3, 14, 13, 18, 4, -6, 18, 26, -7, -22, 7, -14, -9, 3, 13, 16, 15, 52, 25, 6, -3, 11, 2, 10, -6, 18, 41, 10, 12, -4, 2, -10, -2, 5, 5, 14, 13, 3, -13, -9, 11, -17, -2, -4, -7, -3, 17, -18, 16, -4, 13, 0, -2, -8, 7, 21, -2, 9, 19, 25, -1, -1, -16, 1, 16, 11, -2, 8, -8, -8, -35, -20, -7, 27, 13, 39, 18, 16, -41, -7, 5, 29, 19, 10, 10, 3, 37, -7, 2, 7, 19, 13, -4, -6, 0, -3, 13, 8, -36, -11, -17, 38, 17, 24, -3, 8, -62, -12, 8, 4, 2, 9, 17, 14, 10, 21, 16, -6, 30, -17, 10, -18, -13, 10, 8, -2, -18, 2, 2, 40, 42, -4, -6, -2, 14, 4, -6, 2, 12, 25, 28, 21, 13, 18, 13, 5, -6, -27, -17, -28, -29, -18, -4, -22, -4, -15, -2, 10, -18, -2, -14, -8, 30, 11, 17, 10, 21, 1, 20, -19, 5, -10, 14, 23, 21, -18, -27, -22, -21, -9, -41, -37, -35, -21, -27, 2, 1, -6, -10, 10, 1, -32, 0, 22, 0, -2, -27, -11, -31, -29, -3, -2, -5, -21, -23, -2, 13, -6, -33, -32, -68, -61, -23, -18, 31, 13, -3, -8, -8, -39, 23, 18, 12, 4, -26, -27, -6, 4, 15, 16, -13, -25, -20, 7, -8, -17, -1, 2, -23, -1, -15, 16, 17, -2, 14, 4, 13, -44, 20, -2, 10, -5, 13, -11, -1, 2, -19, 6, -14, -31, -10, -23, -12, -5, -17, 12, 17, 9, 29, -2, 27, -15, 8, 21, 12, -46, 1, -23, -11, -7, -6, 4, -12, 2, 3, -8, -8, -25, -15, 3, -6, -28, 1, -21, 8, -4, 25, -6, 7, -8, 3, 0, 2, -31, -63, -24, -24, -22, 17, 12, 13, 11, -3, 19, -3, -22, 10, -1, -26, -25, -28, 1, -7, 4, 25, 3, 24, 10, -21, 2, 10, -17, -86, -68, -58, -55, -21, 2, 8, 3, 13, 22, 14, 18, -16, -24, 2, -23, -21, 5, 17, 30, 64, 31, 34, -13, -12, 15, 21, 35, -62, -59, -70, -50, -21, -52, -29, -18, -12, 12, 7, 15, -15, -23, -2, -23, -15, -2, 2, 12, 4, -16, -1, 9, -5, -12, 18, 33, -17, -72, -67, -44, -40, -90, -66, -60, -40, -30, 5, 7, -3, -14, 0, -5, 14, -11, 14, 0, 4, -22, 3, -15, -7, -18, -19, 36, 20, -22, -51, -52, -63, -97, -66, -77, -67, -60, -26, 17, 13, 20, -1, 6, 23, -2, -7, -9, -6, 14, 5, -19, 7, -16, 4, 17, 13, 6, -24, -20, 3, -30, -42, -14, -31, -11, 17, 29, 21, 33, 5, 12, 27, 21, 0, 37, 19, 14, -18, -11, -9, 7, 8, 57, 53, 25, 24, 50, 28, 5, 4, 35, 19, 17, 6, 15, 2, 25, 12, 3, 9, 5, -1, 33, 2, -5, -30, -3, 3, -2, -28, 39, 54, 35, 40, 60, 36, 51, 47, 64, 51, 28, 1, -3, 4, 15, 12, 3, 39, -2, 28, 25, -14, -3, -19, 13, -17, -13, 16, 25, 89, 51, 61, 68, 60, 32, 51, 42, 0, 19, -2, -16, 7, 8, 10, 16, 32, -5, -13, 1, -16, 7, 21, -3, -6, -18, -11, 28, 47, 18, 77, 61, 53, 47, 11, 17, 3, 3, 1, -4, 0, 7, 13, 18, 18, -21, -11, -5, 5, -7, 4, 13, 0, 4, 25, 5, 3, 38, 56, 41, 17, 6, 25, 5, 18, 34, -16, -2, 7, -24, 12, 30, -30, 1, 8, 20, 1, 10, 6, -10, -8, -17, 6, 0, -15, 6, 19, -8, 9, -30, 28, 6, 15, -4, -20, 7, 1, -15, -21, 10, -2, 16, 35, 11, -15, -15, 3, -5, 14, 7, -13, 13, -11, -5, -26, -34, -19, -27, -55, -69, -72, -57, -33, 4, -31, -47, -49, -47, -11, 3, -17, 12, 0, -1, 8, 8}, { -5, -16, 9, 7, 11, -18, 8, -17, 16, -19, 17, 7, 12, -9, 11, -15, 10, 6, -13, 15, 16, 9, -18, 16, -4, 16, -17, -13, -9, 12, -15, -7, 18, 12, -2, 6, -17, -20, 14, 3, -9, -14, 29, 14, 15, -15, -23, -26, -11, -24, -20, -18, 7, -16, -17, 4, -12, 9, -16, 3, -20, 9, -20, -18, -37, -37, -22, -7, -13, 24, -15, -3, 3, 10, 16, -11, -8, -6, -17, 12, 2, 8, 12, -18, -8, -18, -18, 5, -18, -2, 6, -9, -7, -20, -37, -39, 16, 15, 1, -22, 5, 12, -28, -41, -32, -13, -1, -3, 4, -3, -2, -13, 4, -8, 2, -5, 17, 26, -1, -3, -15, -21, -11, 21, 8, 20, 17, 20, 8, -18, -17, -21, -1, -20, -40, -60, -13, 9, 20, -20, -10, 16, -5, 0, 8, 13, 14, 33, -23, -2, -21, 11, 2, 15, -15, 26, -5, 15, 15, -3, -7, -15, -39, -28, -4, -21, -8, -16, -13, -10, 8, 17, 11, -16, 17, 6, 15, 19, 0, -3, -13, 3, 12, 5, 3, 6, -5, -21, -11, -23, -31, -32, -8, -16, -16, -3, -8, 13, -23, -1, 11, -27, -13, 16, 7, -10, 4, 6, 13, 10, 21, 4, -7, -3, 3, -19, -6, -25, -6, -1, -21, -10, -3, 15, -14, 19, 4, 10, 29, -6, 1, -10, -1, 0, 17, 4, -1, -24, 2, -1, 6, 16, 16, 7, 5, 15, 36, 4, -51, -13, -15, -11, -15, 10, 14, 11, 2, -19, 19, 16, -9, 1, 15, 1, -20, 19, 28, 9, 35, 23, 18, 28, 11, -7, 17, 38, -18, 14, 14, -12, 17, 28, -13, 7, -15, -19, 4, 7, -5, 0, -31, -5, -6, 51, 40, 39, 33, 12, 12, -16, 12, 15, 35, 23, -46, -30, -22, 0, 17, 1, -26, 2, 30, 5, -4, 1, -22, -24, -30, -13, 1, 13, 24, 27, 22, -4, -5, 2, 24, 14, 10, -3, -31, 9, 14, 4, 12, -2, 13, -6, 4, 19, -11, 19, -19, -18, -33, 17, 4, 13, 39, 19, 7, -4, -25, 4, -3, 5, -14, -17, -72, -12, -31, 11, 21, 12, 21, -20, 1, -11, 21, -2, -5, -4, -28, 10, -1, 21, 23, 8, 3, 11, -19, -30, -28, -38, -33, -37, -45, -14, -12, 2, -4, 5, 1, -24, -18, -33, 4, -24, -13, -14, -20, 2, 7, -18, 8, 21, 20, -8, -25, -39, -33, -20, -6, 0, -33, -11, -19, -15, -21, -11, 31, 0, -9, -25, 4, 6, 19, 6, -11, 7, 23, 11, 24, -3, 22, 15, 3, -22, 1, 12, 5, -24, -16, 4, -21, 19, 1, 10, 6, -24, -3, -24, 21, 16, 13, 5, 22, -11, 7, 6, 20, -18, -9, -25, 6, -3, -4, 7, 15, 5, 16, 2, -2, -12, 2, 1, 3, 0, -5, -20, -21, -13, 4, -22, -36, -29, -18, 17, 23, -3, -6, -17, -11, 0, 11, 14, 22, 4, 35, 1, 3, -7, 26, 23, 10, -29, -22, 15, 9, -11, -42, -42, -61, -54, -26, -9, -7, -23, -15, -12, -38, 0, -2, 5, 10, 5, -5, 21, 0, -6, 10, -1, 8, -11, -2, -15, -5, 2, -25, -20, -18, -55, -58, -4, -10, -9, -11, -4, -16, -13, 7, 4, -4, -1, 12, 26, -24, 3, 15, -5, 6, -12, -12, -5, 7, 14, -1, -26, -8, -5, -39, -32, -29, -2, -13, -5, 17, 1, -2, 2, 20, 12, 0, 8, 14, -18, -10, -3, 27, 27, 32, 3, 22, 12, 8, -6, 3, -4, -20, 0, -3, 4, 20, -12, 14, 14, 21, -10, -5, -11, -21, 4, -11, -7, -7, 9, -19, -10, 11, 41, 45, 26, 6, 18, 16, 4, -11, -20, -2, 12, -10, 9, -7, 4, 24, -31, 11, -4, -12, -1, 8, 12, 17, -10, 13, 4, 18, 23, 17, 16, 30, 8, 28, -13, -18, -18, -23, 18, -3, 13, 10, 7, 20, -27, 4, -1, -11, 1, 21, -2, 7, -14, -1, 37, 36, 23, 13, 26, 10, 20, 41, 15, -6, 7, -1, -10, 1, 7, -5, 2, -19, -6, -5, 19, -2, -13, -6, 9, -4, -8, 16, -17, -22, 5, -2, 34, 35, 40, 23, -2, 25, 26, 25, 31, 22, 24, 8, 56, 20, 8, -2, -23, -29, -3, 17, -7, 15, 7, 0, 25, 8, 5, 20, 36, -5, 25, 39, 27, 20, 32, 31, 8, 34, 32, 32, 42, 31, 14, 9, 6, -15, -16, 1, -16, 13, -6, 14, 6, 14, 0, -8, 1, 40, -2, 4, 15, -21, -10, 24, 13, 10, 22, 40, 1, -20, 18, 24, 11, 14, -5, 6, -3}, { -9, 14, -12, 2, 16, 10, -7, 17, -16, 8, 0, 15, -16, -8, -15, -6, -8, 3, 13, -5, 14, 8, 5, 7, -4, 5, 15, 9, 9, -7, -16, -13, -9, 14, -28, -24, -18, -10, 10, -23, -4, -28, -25, -23, -17, -10, -10, -16, 5, -8, -13, -4, 5, -17, -18, 6, -4, -14, -9, 11, 5, -6, -18, -26, -14, 11, 13, -23, -39, -24, -18, -37, -33, -23, 4, 9, -26, -1, -11, -13, -7, -4, 3, 7, 2, 0, -13, -17, 4, -6, -5, 17, 23, 29, 42, 29, 3, 20, -28, 20, -9, -1, 20, -9, 19, 16, 11, 14, 31, 1, -9, -9, 16, 5, 7, -1, 22, -2, -6, 9, 25, 34, 36, 32, 15, -9, 20, 25, 36, 28, 18, -2, 5, 16, 14, 18, 40, 31, 9, 14, -16, 3, 12, -1, 3, 18, 14, 21, 18, 12, -1, 21, 8, 25, 8, -1, 11, 20, 27, 31, 26, 17, 19, 0, 16, 51, 33, 4, 5, 1, -14, 3, -10, 35, 52, 50, 15, 27, 22, 10, -10, 13, 21, 26, 29, 18, -1, 9, 17, -11, -8, -24, -17, 11, 45, -3, 0, -2, 11, 7, 27, 37, 22, 37, 47, 5, 7, 7, -4, 21, 37, 45, 33, 14, 14, -14, -6, -6, -47, -30, -8, -24, 17, 33, 13, -3, 7, 28, 21, 29, 16, 33, 28, -2, 6, 10, 5, -15, 9, 24, 17, 0, 5, -16, 14, -25, -19, -14, -17, 6, 53, 19, 16, -11, 19, -6, -13, 26, 11, 13, 2, -12, 13, -9, -14, 2, -13, -26, -11, 8, 6, 5, 8, 7, 3, 4, 7, 31, 52, 6, 10, -33, -1, 13, -7, -3, 13, 13, -5, 5, -6, 21, 8, -6, -16, -33, 8, 7, -12, 6, 15, 15, 22, 2, -32, 7, 3, -20, -15, 0, 3, -29, 0, -8, -23, 19, 20, -2, 15, 7, -9, 19, -15, -9, -12, 23, 27, 20, -1, -15, -5, -4, -10, -14, 18, -19, -4, -4, 25, -13, -19, 8, -23, -8, 0, 5, 20, 5, -2, 3, -1, -13, -9, 17, 24, 28, 12, -18, -7, -30, -32, -19, -13, -16, -2, -16, -22, -2, -16, -41, -36, -13, -30, -13, -4, -19, -8, -12, -8, -25, -10, -6, 14, 11, 5, 8, 5, -34, -6, -10, 0, 16, -10, -10, 6, -28, -45, -46, -47, -36, -54, -22, -29, -25, -16, -19, -5, 16, 10, 9, 7, 12, -8, 15, -12, 10, -18, -25, 4, -20, -24, 6, -20, -34, -40, -43, -42, -35, -41, -41, -41, -17, -12, -4, -5, -4, -2, 7, 6, -7, -12, 4, 7, 24, 34, -10, 8, 12, -7, 19, 30, 4, 4, -45, -21, -49, -54, -23, -25, -32, 12, 5, 2, -8, 7, -1, 8, -10, -15, -12, 17, 5, 25, -34, 11, 14, 11, 12, 32, 32, -9, -10, -23, -41, -32, -16, -19, -19, -9, 9, -23, -17, -15, -7, -14, -4, -16, -14, -15, -10, 21, -13, -19, 25, 9, -7, 28, 22, -29, 14, -18, -42, 2, -31, -7, 15, -10, -23, -32, 16, 19, 3, -2, 1, 6, -11, -7, 4, 11, 21, -11, -9, -5, -12, 25, 11, 1, 9, -9, 0, -14, -17, 21, 0, 6, -19, 1, 18, 7, 13, 10, -6, 12, -16, -26, -6, 16, 3, -24, -6, 8, 2, 31, 46, 32, 20, -1, -9, 8, 17, 9, -15, -8, 11, 6, 9, 39, 33, 33, 14, -1, -9, -13, 24, 20, -30, 8, -15, -10, -12, 50, 31, 16, 6, 20, 20, 22, 22, 20, 16, 4, 8, 35, 12, 5, 16, -4, 15, 7, -5, -22, 34, -3, -21, -13, -13, 1, -18, 14, 7, 14, -15, 18, 35, 29, -3, -13, 15, 28, -3, 16, 9, 33, -1, 19, -15, -8, -22, 3, 36, 17, -21, -17, 2, 9, -2, 20, 57, -15, -28, 2, -5, 20, -15, 14, 15, 33, -1, 11, 10, 22, 27, -1, -25, -9, -3, 6, 23, -3, -13, -31, -16, -4, -7, -16, 27, 0, -27, 13, -11, 4, -2, 8, 0, 41, 35, 24, 46, 25, 21, 13, -14, -26, -11, -17, -30, 4, 9, -13, 16, -5, -13, -14, -15, -46, -30, 26, 10, 6, -21, 29, 7, 6, 41, 31, 53, 41, 37, -10, 16, -23, -10, -30, -22, 5, 15, 13, -18, 13, 1, 0, 11, 2, 9, 4, 6, -10, 21, 21, 21, -19, -15, -6, 29, 13, 41, 30, 7, 8, 12, 10, -15, 5, 4, -16, 8, 14, -2, 2, 1, -2, -1, -31, -23, 3, -19, -47, -42, -42, -9, 21, 16, -9, -28, -33, -22, -14, -20, -5, 12, -8, -10, -6, 16}, { -7, -4, 18, -9, -8, -8, -3, 11, -13, -12, -12, 2, -11, 19, 11, -8, 19, -11, 0, 9, -8, -5, 3, 14, 2, -13, -17, 9, 17, 11, 3, -2, 17, 15, 19, 2, 20, 11, -2, -1, 21, 26, 13, 34, 5, 33, 7, 9, 25, 24, 18, 12, -13, -16, 18, -3, -3, -6, -9, 2, 32, -1, 14, 16, 23, 17, 51, 64, 28, 16, 26, 18, 30, 26, -3, 33, 53, 44, 36, 29, 29, 4, 9, 1, 19, -8, -4, 1, 22, 5, 6, 3, 39, 19, -14, 6, -9, -2, -4, -27, 2, 3, -7, 43, 18, -9, 2, 23, 29, 4, -4, 15, -15, -1, 9, 4, 35, 15, 19, -35, 16, -8, -21, -3, -32, 7, -7, -7, -7, -6, -6, -2, 16, 5, 16, -5, -10, 6, -10, -4, -7, -18, 37, 11, 18, 6, -41, -7, -7, 2, 3, -4, 0, -8, -11, 16, 6, -3, -26, -5, -5, 21, 19, 21, 8, -17, -21, -23, 9, 7, -5, 5, 18, 8, -28, 5, -25, -6, 28, -2, -6, 6, -1, 11, -12, -3, -8, -21, -25, -3, 7, -7, -2, -15, -32, 4, 3, 52, -1, -14, 4, 1, -23, -10, -16, 8, 14, -5, 19, 23, 14, 3, -9, -1, -24, -10, 3, -13, -19, -23, -13, -21, 1, -10, 18, -2, -19, -31, -3, 12, -31, -21, 12, -7, -13, -8, 7, 0, 33, 10, -6, 30, 4, -6, 4, -12, -2, 3, -30, -58, -30, -5, 2, 13, -42, 32, 13, 24, 0, 6, -6, 0, 14, 3, 10, -13, 1, 2, 11, 7, -24, -12, -7, -17, 27, -5, -39, -17, 19, 21, 8, 33, -36, -19, -16, 11, 11, 16, 19, 22, -1, -20, -26, -39, -26, -2, -4, -9, -17, -12, -13, -26, 17, 0, 12, 35, 39, 46, -10, -5, -18, -36, -42, -20, -18, -10, 19, 12, -8, -27, -62, -71, -8, -7, -4, -29, -33, -30, -2, -3, 7, 35, 20, 20, -46, 35, -10, -8, -23, -21, -40, -45, -44, -24, -29, -36, -45, -64, -78, -46, -4, 7, -3, -7, 15, 9, 0, 9, -4, 22, 21, 25, -6, 42, -1, -24, 16, -6, -48, -42, -50, -54, -34, -71, -60, -56, -15, -7, 30, 17, 3, 10, 15, 13, 3, 2, -22, 8, 32, 26, 5, 5, -5, 7, 13, -1, -52, -61, -25, -56, -38, -35, -11, 4, 31, 23, 26, 29, 37, 20, 0, 6, -18, 1, 11, -3, 19, -19, 14, -3, -6, -11, 12, 6, -3, -34, -30, -28, -26, -25, 32, 49, 30, 58, 30, 12, -2, -7, 30, 16, -26, 5, -17, 11, 23, 0, -8, 13, -8, -2, 17, 6, 25, -12, 17, -18, 6, -11, 21, 10, 44, 28, 23, -6, 0, -5, 24, 18, -19, 1, -12, 16, 35, -7, -15, -7, -15, -11, 23, 27, 21, -8, 12, 28, 5, -11, 28, 32, 26, 14, 10, -30, -5, 2, 2, 2, -24, -24, -3, 5, 39, 5, 19, 10, 4, -15, 9, 2, 14, 17, 6, 12, -5, -5, -3, 27, 35, 30, -20, 3, 13, 22, 31, 12, -17, -35, -7, 5, 16, 55, 27, 35, 13, -14, 0, -8, 3, 25, 26, 15, -3, 1, 20, 2, 28, 1, 26, 2, 8, 2, 26, 20, 11, -1, 4, 5, 3, 20, 13, 32, -18, -32, -13, 22, 33, 18, 1, 30, 24, 14, 3, 1, -2, -9, 8, 6, -5, -7, -8, 6, 13, 11, -5, 5, -10, 9, 30, -5, -2, 6, 33, 36, 18, -7, 2, -6, 15, -2, 24, -6, -7, 16, 26, 1, 12, -15, -10, 3, -13, 6, 4, -7, -8, 31, 50, -2, 11, 11, -6, -5, 35, 32, 1, -12, 11, 4, -12, -1, -12, 9, -16, -4, -3, -5, -19, 3, -11, -4, -13, -1, -6, -2, 25, -2, -12, -16, 18, -48, 20, -11, -17, -21, -21, -2, -21, 2, 5, -3, -20, -9, -6, -28, -11, -14, -16, -1, -22, -18, -12, 21, 18, -1, 4, 15, -21, -22, -15, -7, -9, -11, -28, -25, -8, -17, -25, -46, -22, -6, -24, -13, -25, -46, -40, -40, -28, -5, 8, 26, 25, 11, -2, -10, 13, 47, 11, 14, -16, 8, -19, -3, -10, -1, -15, -17, -18, 8, -10, -24, -41, -50, -16, -40, -41, -24, 2, -2, 21, -4, 5, -2, -14, -4, -31, -1, -1, 65, 34, -7, 30, -3, -14, 24, -7, 12, -16, -45, -25, -13, -11, -29, -25, -11, 16, 0, -1, -18, -6, -18, -6, -9, 14, 21, -12, 26, 17, 30, 40, 36, 24, 38, -1, 40, 33, 17, 10, -18, -16, -8, -21, 11, 8, 5, 7, 0}, { -18, 1, -2, 9, 6, 18, -9, 13, -6, 8, -6, -18, 19, 13, -9, -7, -9, 19, 18, 11, 8, -15, 5, 0, -5, 17, 0, 11, 1, 14, 0, -12, -11, 6, 4, -9, -4, 15, -15, -29, 1, 14, 3, -2, -37, -39, 27, -4, 23, 4, 16, -17, -6, -9, 7, 15, -9, 1, 7, 4, -9, -12, 11, 10, -22, -8, -10, 10, 10, -5, 20, 23, 8, 19, -15, 19, -7, 1, 7, 3, -1, 5, -10, -3, -18, -3, -7, 8, -14, -23, -16, 1, -14, 1, -1, 5, -13, 13, 29, 4, 18, 8, 9, 0, 8, 18, -14, -29, -22, 8, 13, 7, -9, 18, 2, 5, -20, -1, 8, -19, 5, -22, -20, 6, -10, 10, 9, 5, -4, -8, -14, -21, -13, -11, -42, -32, -19, -6, -18, -4, -2, -1, 21, -7, -15, -2, -17, -7, 4, -15, -11, -31, -24, -2, 6, 9, 2, -3, -2, -34, -17, -28, -60, -6, 20, 4, -26, -14, 9, -24, -15, -2, -10, 0, -3, -21, -6, -28, -30, -31, -1, 20, 13, 39, 13, -4, 12, -27, -16, -5, -22, 0, 6, -41, -21, -1, 10, -9, -14, -21, -20, 1, -19, -29, -16, -9, -31, -6, 20, 0, 34, 5, 21, -1, -25, -31, -21, -17, -7, -3, -31, -27, -6, -44, -9, -16, -28, -29, -14, -14, 1, -22, -25, -1, -4, 14, -9, 2, 24, 10, -32, -45, -30, -29, -26, -17, 11, -21, -17, -12, 12, -4, 16, -6, -17, -45, -28, 0, -35, -59, -19, -15, 23, -9, 18, 28, 19, 6, -45, -39, -28, 3, -40, -18, 0, -6, -38, -21, -2, 21, -9, -5, -23, -13, -12, -13, -33, -14, -18, -23, -10, 21, 22, 22, 25, 2, -21, -24, -13, -13, -24, -4, -4, 13, -7, -20, 6, 2, -7, 2, 6, -9, -20, -29, -38, 12, -10, -4, 25, 9, 19, -11, 1, 1, 13, -2, -7, -6, -9, 4, -15, -7, -46, -52, -56, -5, 5, -14, 17, -5, -29, -22, -30, -5, -22, 6, 31, 44, 23, -11, 13, 23, 41, 23, 16, -29, 6, -11, 5, -9, -31, -27, -59, -2, 6, 12, -21, -28, -11, -19, -28, 4, -8, 8, 44, 29, 19, 15, 26, 24, 39, 11, 6, -36, -25, -17, -21, -44, -41, -48, -35, -24, -17, -15, -22, 1, -38, -52, -45, -42, 0, 33, 23, 3, -12, 1, -3, -1, 27, 21, -6, -12, 15, -25, -31, -53, -22, -21, -39, -10, -6, 6, -5, -18, -6, -18, -16, -54, 9, 22, 34, 16, -11, 2, -15, 4, 37, 22, 11, -18, -7, 36, 13, -13, 1, -8, -31, -4, -17, 14, -9, 6, 12, -3, -16, 0, 27, 0, 26, 43, 8, -18, 5, 35, 21, -8, -3, 6, -1, 11, 1, 35, -8, -41, -23, -15, 14, -15, -16, 0, 12, 10, 14, 12, 3, 17, 25, 19, -14, 1, 21, 4, 12, -15, 8, -9, -9, -24, -14, 31, 20, -54, -20, -37, 11, -17, 0, 21, 18, 1, -9, -35, -2, 10, 5, -20, 12, -11, 21, 0, -23, -12, -31, -29, -35, -18, 4, 24, -23, -55, -35, 24, -9, -7, -47, 8, 1, 0, -30, -6, -18, -24, -33, -1, -17, 0, 18, 14, -17, -27, -41, -22, -52, -16, 2, 8, -20, -19, -8, 8, -18, 7, -31, -13, 19, 11, 12, -12, -35, -34, -30, -21, 3, -8, 26, -8, 8, -9, 4, -8, -4, 2, 4, -27, -8, 0, 18, 16, 19, 10, -5, -1, -3, 21, -3, -26, -12, -31, -31, -17, 5, 5, 16, -19, 13, -5, -2, -20, -5, -4, -27, -24, -11, 16, -3, -14, 11, 8, -6, -18, 5, -25, -44, -42, 2, -34, -9, -32, 2, -6, -27, -7, 10, 8, 25, 16, 14, 38, -37, -2, -14, 10, 5, -7, 17, -17, -16, -10, -13, -41, -71, -61, -14, -1, 11, -6, -12, -13, 6, -27, 1, 10, 4, 12, 28, 15, 5, 2, -16, -25, 34, -7, -3, 17, 4, -11, -14, 4, -7, -35, -4, 13, 2, -19, -11, -9, -27, 11, 15, 3, 13, -14, -7, 21, 16, 32, -2, 1, 12, -7, 17, -7, -14, 3, -17, 7, -5, 8, 16, -11, 16, 2, -4, -5, 1, -2, -5, -15, 3, -17, 0, 9, 19, 21, -20, -1, -1, -17, -2, -5, -10, 11, 16, 21, 17, 36, 21, 2, 8, -1, 24, -20, 33, 41, 14, 10, -21, 0, 2, -11, -20, 23, 21, -14, -2, 17, 16, 10, -18, 1, -9, -2, -7, 22, 20, -17, 27, 3, 21, -3, 36, 35, 12, 17, -4, 13, 3, 34, 2, -12, 3, -2, 17, 1}, { 7, 10, 1, -5, 18, -4, -5, -13, 0, 3, -8, 11, 21, -14, -21, -5, -5, -6, 1, 14, 10, -10, 14, -11, -5, -5, -17, 13, -13, -16, 1, -8, 18, -1, -7, 6, -15, 4, 3, 4, 4, 6, 9, 3, -9, -14, -1, 25, 15, 35, 29, 13, 7, 0, -15, 7, 5, 6, 2, 3, 11, 4, -18, 3, -11, 28, 20, 4, -22, -53, -24, -17, -20, -30, -25, 23, 34, 21, 46, -8, 4, 3, 3, 9, 14, -11, 13, 7, -1, 7, 19, 9, 15, -8, 34, -13, -34, -30, -21, -28, 1, 15, 16, 7, 22, 13, 17, 26, 23, -9, -24, 12, -17, 7, 41, 20, 10, -11, -29, -21, 10, 3, -3, -38, -27, 16, -22, -28, -16, -9, 4, 8, 28, 15, 19, -1, 21, 1, -2, -5, -10, 16, 20, 14, 30, 6, -7, 43, 8, -2, -19, -9, 20, 15, 16, 5, 10, -1, 0, -4, -1, 21, 19, -13, 33, 20, 1, -5, 11, 29, 25, -7, 13, 8, 21, 14, -9, 1, -17, 8, -1, 39, 10, -21, -5, 3, 5, 27, 35, 14, 7, 31, 32, 33, 4, 14, 1, 63, -9, 10, -30, 13, 8, 2, 16, 20, -4, -28, -17, -10, -8, -12, -1, 12, 27, 44, 44, 9, -5, 17, 12, 2, -10, 22, 9, 35, 18, 3, -5, 6, -6, 9, 8, 9, -18, 11, 12, -4, -31, -28, -3, 22, 25, 21, 4, 24, 26, 16, -29, -23, -10, -15, 1, 17, 7, 8, -12, 2, -4, 12, 2, 3, -20, 1, -32, -37, -17, -19, 13, 20, 46, 13, 26, 16, 11, -6, -17, 5, 25, 36, 1, 12, -23, 2, 17, -12, -19, 4, -18, -14, -18, -34, -29, -16, -6, 22, 31, 53, 45, 20, 12, 2, -4, -7, -18, -15, 17, 4, 4, 14, -23, 8, -1, -7, -15, -12, 2, -8, -39, -36, -37, 42, 48, 18, 28, 35, 22, 4, -21, 4, -11, 11, 17, -13, 14, 12, 10, -11, 2, 1, 1, 35, 5, -20, -16, -2, -34, -17, 25, 37, 27, 12, 7, -5, -14, -6, -45, -28, 2, -12, -14, -23, -22, 28, 15, 17, 3, 17, 4, 30, 25, -27, -5, -20, -20, -9, 15, 42, 44, 4, 4, -20, -4, -35, -21, -30, -23, -26, -27, 5, -25, -15, -10, 18, -10, -5, 3, 33, -10, -12, -5, -8, 3, 15, 10, 31, 19, 14, -21, -7, -20, 4, -9, -1, -52, -39, -25, 1, -10, -26, 10, 28, 17, -21, 8, -18, -20, 9, -7, -22, -17, 28, 9, 6, 8, -2, -22, 3, 7, 5, 4, -9, -28, -19, -39, -1, -23, -26, -9, 8, 6, -23, -9, -18, 4, -4, -12, -10, 7, 35, 22, 28, 3, -7, -1, 13, 39, 31, -7, 6, -30, -7, -26, -40, -12, -12, -11, 15, 20, -25, -16, -21, -11, 3, 13, -6, -10, 38, 29, 22, 8, -41, 3, 4, 18, 12, 10, 33, 3, 20, -13, -11, 4, -39, -28, 17, 3, -6, -31, -15, -15, -14, 12, 26, 23, 14, -2, 0, -37, -14, -3, -9, -1, -13, 17, 24, -10, -18, -33, 2, 19, -12, 0, 1, 0, -2, -18, 8, 13, -7, -8, 7, 25, 11, 2, 15, -39, -31, -6, -15, -30, 3, 23, 14, 5, -14, -29, -32, -22, 9, 17, 2, -17, 27, 7, -12, -6, 12, 4, -19, -21, -5, 10, -8, 6, -8, -26, -19, -3, 33, 34, 50, -8, -47, -48, -23, 2, -12, 7, 8, 12, 6, 9, 4, 40, 26, -5, -32, -7, -11, -3, -17, 10, -36, -29, 4, -28, 0, 30, 13, 22, -69, -42, -37, -33, 11, -10, 8, -8, 5, 14, 18, 23, 17, -15, 3, 1, 16, 13, -11, -9, -2, 8, -9, -22, -1, -29, -4, -8, -45, -31, -15, 4, -12, -16, -3, 17, 14, 15, 38, 17, 25, 14, -5, -16, 20, -7, 39, 30, 18, -12, 2, -7, -22, -6, -20, -21, -33, -14, -10, 38, 14, 12, 11, 9, 12, 2, 29, 49, 34, -6, 16, -4, 9, 32, 20, 31, 7, 27, 7, -3, -25, 1, 4, -26, -50, -19, 3, -34, 18, -15, 17, -29, -2, 27, 4, -11, -18, -20, 4, 19, 30, 38, 19, -16, -33, -9, -36, -6, 0, -13, -58, -68, -34, -12, -15, -30, -9, 16, -11, 14, -2, -42, -9, -22, -35, 6, 7, 22, 36, -19, 25, -9, -52, -32, 8, -46, -42, -41, -50, -32, -11, 16, 19, 7, 7, 0, -8, 6, -13, 14, 20, 3, 5, -9, -27, -19, -44, -1, -14, -17, 0, -12, -8, -35, -3, -13, 2, -39, 5, -11, 1, 1, 14}, { -9, -8, 11, 3, 2, -2, 15, 19, 13, 5, 14, -14, 24, 20, 11, 17, 14, 13, 7, 9, -18, 13, -17, -18, -19, -6, -5, -3, 3, 14, -15, 2, -12, 0, 9, 27, 8, 17, 23, 5, 24, 26, 20, 18, 4, 2, 5, 13, 16, 15, 9, 15, -13, -4, 16, 3, 3, -15, 11, -6, -36, -5, -1, 30, 34, 6, 12, 10, -15, -33, -27, 6, -13, -8, -5, -3, -6, 10, -8, 18, -4, 0, -2, 3, -5, -13, -4, -36, -9, 16, 22, 27, -8, 4, -12, -30, -17, -18, 13, -35, -37, -20, -3, 6, 41, 0, 26, -22, 26, -15, 27, 2, -14, 1, -9, 4, 10, 8, 35, 0, -38, 1, -17, -27, -11, -11, -11, -19, -16, -22, 15, -3, 11, -36, 10, 23, 14, 2, -36, -4, -3, -3, 22, -9, 19, 32, 0, -20, 10, -10, -46, -29, -10, -16, 17, 8, 12, -13, 5, -5, -9, -14, -1, 0, 24, 12, 1, 2, -11, -21, -30, -25, 22, 34, 13, -14, 37, -45, -44, -23, -38, -11, -1, 8, 9, -6, -8, -43, -45, 0, 6, 19, 14, -15, 37, 21, 13, -27, -14, 7, 12, 34, 20, 2, -32, -34, -38, -19, -44, -16, 16, -9, 19, 1, -22, -59, -26, -18, 40, -2, 8, 13, 17, 24, 5, -2, 7, -12, -31, 26, 24, 5, 3, -22, -24, -26, -12, 17, 21, 2, 2, 5, -26, -48, -12, -3, 2, -22, -6, -2, 19, -13, 12, -1, 0, -45, -35, -7, 12, 2, -11, 3, -37, -37, -30, 9, 31, 25, 1, -12, -23, -13, -9, -29, -51, -21, -25, -10, 39, 26, 6, -11, -9, -20, -27, 12, -8, 0, -2, -55, -38, -49, -18, 31, 20, 37, 3, -5, -4, 8, 6, -3, 5, -22, 7, 52, 46, 20, 12, 23, -17, -39, -34, -32, 18, 8, -3, -16, -21, -29, -6, 30, 26, 20, 19, -10, -15, -30, -8, 2, -16, -26, -9, 15, -17, 2, -14, -4, 7, -28, -44, -38, -24, -13, 17, -14, -13, -5, 33, 16, 28, -6, 11, -17, -29, -14, -17, -17, 3, -42, -24, -26, -16, -30, 24, -20, -34, 13, -54, -8, -15, 12, 11, -17, 11, 32, 45, 2, -14, -18, 17, 24, 7, -17, 2, -31, 12, 16, -5, -20, -11, 19, 6, 4, -2, 26, -27, -7, 16, 2, 11, 6, 28, 10, 10, 2, -10, -14, 39, 3, 13, -21, -40, -18, 2, 32, 22, -10, -10, -9, 5, -17, 27, 36, -4, -21, -5, 18, -17, 20, 17, 2, 33, -7, -13, 0, 13, 13, 4, -18, -15, 4, -5, 12, -13, 35, -24, -11, -8, -10, 41, 6, 9, -21, -21, 30, -5, 8, -9, 12, 35, 3, -1, 17, 33, 39, 17, 7, 19, 1, -2, 12, 16, 42, -9, 0, 6, 0, 10, -16, 17, 19, 20, 15, -4, 24, 24, 7, 27, 26, 31, 30, 18, -14, 13, 21, 17, 15, 29, -9, -1, 0, 7, 9, -22, 8, 8, -1, -2, 24, -14, -10, 12, 0, 6, 16, 28, 40, 30, 38, 18, 9, 1, 26, 14, 39, -24, -4, 27, -18, -32, 37, -5, -14, 1, 8, 32, -8, 0, 9, 5, 14, -6, 7, 17, -2, 19, 19, 7, -27, -8, -4, 3, -7, 1, 23, 40, 0, 2, 9, -7, -27, -21, 3, 9, 7, 11, 10, 9, 11, -20, -11, 25, 6, 4, 8, 2, -28, 16, 3, -34, -33, -45, -24, -14, -25, 2, -14, 14, -2, -42, -23, -5, 31, 14, 3, -37, 0, -7, -22, -16, -2, -2, -14, -10, -33, 21, 2, -33, -25, -29, -24, 15, 24, 67, -18, -13, 17, -13, -6, -11, 2, -8, -26, -46, -42, -16, -29, -20, -20, -27, -11, 2, -12, -9, -9, -2, -10, -8, 12, 37, 25, 70, -14, -10, -7, 7, -3, -6, -28, -16, -16, -18, 3, -11, -19, -7, -17, 5, 10, -13, -19, 18, 29, -7, 19, 31, 28, 35, 38, 28, -16, 11, -13, 11, 13, -34, -40, -22, -15, 0, -11, -26, -5, -38, -23, -9, 14, -15, -6, -2, 12, 20, 68, 72, 29, 50, 17, 34, -18, -15, -14, 11, 26, -31, -21, -27, -31, -47, -36, -19, -21, -55, -56, -38, -26, -60, -80, -33, -62, -8, 30, 19, 26, 38, -2, 15, 0, -1, -5, 7, -3, -7, 1, 0, -48, 19, -7, -7, -16, -85, -86, -51, -11, -34, -43, -20, -25, -41, -2, -6, -6, -8, 2, -13, -17, 12, -9, 3, -11, 13, 10, -7, -34, -23, -10, -26, -35, -7, -36, -36, -3, -1, -26, -31, -31, -7, 1, -18, -13, -3, 1, -6, 3}, { -18, 9, 14, -17, -7, 4, -4, 10, 10, -10, -18, 6, 18, 14, -12, 14, 1, 1, -1, 1, -3, 13, 18, 4, -18, 13, -4, -7, -15, 5, -18, 2, 2, -2, 2, 8, 6, -12, -27, -5, -25, -1, -29, -43, 0, -2, 5, -6, -15, 0, 13, -24, -18, -11, -19, -11, -13, -7, 11, -20, 15, -18, 7, -10, -16, 6, -27, -9, -21, -41, -18, -34, -12, -13, 24, -23, 8, -37, -27, -23, 14, -4, 17, -11, 9, -16, 5, 4, 10, 3, -11, 13, -14, -10, -25, -6, 6, -36, -24, -4, -46, -52, -8, 7, -14, -1, 19, -2, 11, 37, 3, 14, 0, 15, -18, 16, -3, -5, -18, -7, -32, -56, -57, -24, -24, -18, -41, -37, -39, -35, -19, -36, -21, 5, -12, 22, 24, 9, -7, -40, 8, -14, -25, -15, 28, 20, 36, 4, 4, 0, -16, 1, -1, 7, 13, -10, -11, -24, 3, -30, -48, -7, 0, -6, 12, 38, -9, -43, -13, 17, 25, 14, 19, 6, 15, 1, 0, 16, 29, 4, 16, 20, -1, 24, 6, 6, 17, 3, 8, 19, 32, 26, 26, 26, 4, -19, -10, 8, 36, -3, -1, -10, 8, 0, 18, 29, 13, 23, 21, 27, 25, 20, 30, 33, 50, 46, 46, 53, 30, 16, 14, 14, -4, -15, 16, 19, 14, -7, -15, -8, 0, 7, 22, 34, 35, 42, 10, 25, 47, 36, 14, 28, 40, 38, 33, 40, 21, 22, -15, 2, 7, 18, -3, -4, 21, -4, -23, 6, 9, 1, 27, 27, 30, 21, 46, 36, 17, 31, -9, 13, 30, -4, 5, 6, 34, -18, 14, 53, 27, 29, -3, 15, 26, 15, 9, 7, 28, -21, 36, 31, 14, 15, -15, 16, -2, -23, -22, -20, -20, -1, -18, -26, 7, -20, 31, 40, 37, 19, 8, 2, 14, 8, 3, 9, 5, 7, 16, -2, -25, -12, -48, -62, -53, -24, -28, -17, -14, -33, -11, -1, 4, 2, 11, 20, 11, 2, -3, 17, -3, -2, -25, -4, -11, -16, -16, -3, -32, -28, -69, -70, -54, -16, 7, -14, 0, -32, 3, -31, -15, -25, -14, 35, -7, -6, -23, -12, -2, -31, -57, -47, -24, -21, -28, -34, -27, -32, -54, -43, -11, 12, -4, 14, 2, -23, -20, -19, -54, -53, -23, 11, -11, 19, -11, 18, 18, -27, -29, -54, -14, -33, -19, -20, -7, -15, -22, -13, 28, 22, 28, 27, 17, 18, -8, -31, -44, -18, -18, -21, 12, 24, -2, 19, 4, 0, -16, -31, -21, -30, -30, -28, -15, 6, -8, -7, 18, 30, -5, -6, 12, -15, 11, -11, 4, -20, -4, -37, -11, -14, 3, -5, 7, -13, 9, -52, -44, -17, -11, 18, -1, 0, 6, 17, -7, 29, 32, 29, 15, -13, -4, 9, 4, -28, -29, -31, -7, -10, -7, 2, 0, 8, 8, -15, -32, -34, -2, 24, -5, 6, 16, 1, 6, 19, -2, -6, -1, -5, -11, 13, -8, -1, 2, 11, 4, 0, 6, 2, 13, -5, -6, -32, -18, -3, 18, -3, -12, 3, 18, 23, 19, 35, 8, -2, 0, 5, 20, -12, -14, -6, 11, 20, 37, -2, -10, -11, -1, -14, 36, -23, -17, 10, 11, 9, 21, -16, 6, 7, -2, 11, 17, 12, -18, -1, 5, -6, -45, 11, 16, 35, -11, -32, -3, 20, -23, 0, -12, -8, -7, 28, 12, 9, -7, -6, -7, -13, -10, 8, -21, 3, -24, -2, 7, -38, -40, 6, -4, 35, 6, 15, -1, 4, 14, -2, 2, 12, 16, -15, 11, -20, -5, -11, -5, -10, -3, -31, -18, 0, -9, 6, -26, -20, -13, -7, 2, -21, -57, 16, -23, -18, -11, -27, 20, 13, -12, -5, 8, -18, -7, 6, 4, -21, -7, -28, 7, 12, -18, -20, -3, -9, -13, 20, 20, -15, -63, 10, -3, 2, -19, -29, 16, 36, 3, 15, -12, -17, -1, 12, 3, -8, -30, -9, -15, -4, 3, -19, 27, -8, 6, 13, -13, -21, -24, 16, -17, -3, 26, -21, 35, 30, 36, 33, 12, 2, 13, 10, 1, 4, -3, 4, 0, -23, -11, 24, 28, 16, 2, 10, 2, 2, -18, -5, 4, 6, -27, 25, 34, 22, -12, 12, 27, 22, -4, 28, 48, -7, -1, 28, 23, -5, 10, 29, 12, 11, 21, 0, 12, -13, -1, -17, 16, -11, -15, -7, -31, 3, -5, 38, 36, 32, 23, -13, -18, 19, 51, 35, 18, 4, 29, 60, 49, 11, -24, 8, -31, 1, 3, -13, -16, -16, 10, 8, -7, 14, 19, 23, 6, 19, 35, -9, -10, -1, 5, 11, 3, 23, 15, 7, -13, -26, -32, -9, 2, 14, -6, -15}, { 12, 2, -10, 3, 16, 16, -13, -8, -6, 3, -18, 7, -19, 9, 2, 3, 11, 1, -14, 5, -17, 13, 18, -15, -1, 13, -1, 13, 8, 12, 18, 18, 4, -10, 7, -4, 8, 16, 1, -17, 10, -3, -16, -16, 3, -13, 16, 15, -7, -8, -17, 5, 12, 18, 0, 0, 6, -17, 6, -16, 13, -1, -5, 4, 15, -3, 16, 2, -3, 14, 7, -15, -18, -9, -27, 7, -19, 6, 1, -16, 15, 18, -11, -4, -3, 14, -9, -6, 9, -6, -5, -2, 3, 9, 1, -21, 9, 7, -17, -26, 3, -6, -11, -24, -4, 1, 7, -20, 8, 9, 11, -10, -18, 9, 6, 15, 16, 19, 38, 34, 10, 1, 1, 1, -26, -4, -5, -12, -2, -35, -30, -13, 14, 32, 59, 35, 42, -16, -9, -14, 18, 4, 13, 9, 0, 43, 41, 10, 8, 15, -26, -15, -37, -21, -29, -23, -28, -9, -28, 2, -4, 26, 37, 27, 32, -12, -27, -8, -10, -14, -9, 35, 19, -13, 13, 20, 13, 21, 5, -50, -28, -19, -26, -51, -16, -33, -28, -23, 6, 3, 5, 2, 26, 3, 14, 2, 7, 10, -18, -14, -10, -10, 5, -1, -7, 5, -15, -13, -48, -65, -32, -51, -3, -1, -3, -2, -2, 2, 23, 15, 1, 2, 33, 4, 15, -9, 12, -4, -4, 8, 3, -8, -3, 11, 4, -4, -20, -38, -43, -23, -26, -26, -29, -5, 9, 45, 38, 35, 4, 14, 41, 13, -6, -4, 12, 17, 9, 14, 19, 11, 5, -3, 5, -27, -29, -30, -28, -23, -22, 6, 10, -4, 19, 18, 23, 10, 11, 12, 45, -10, -4, 29, 14, -10, -12, 30, 22, 7, -7, 22, 13, -15, -23, -10, -37, 3, -2, 14, 3, 34, 16, 16, 10, 39, 32, 24, 60, -9, 3, 12, 23, -9, 32, 31, 10, -11, 14, -3, -18, -7, -4, -10, -10, 4, 15, 4, 23, 10, 9, 1, 2, 17, 49, 24, 30, -5, 7, -17, -8, 25, 16, 33, -2, -11, -5, 22, -11, -27, 0, -12, 0, 12, 7, 23, 16, 2, 5, -23, -20, -5, -8, -25, 2, -18, 3, -2, 16, 16, 23, -12, -11, 2, 12, 18, 24, 2, -9, 9, 5, -1, -21, -14, 3, 7, -42, -4, -5, -11, -4, -5, -16, -11, -5, -7, 11, 19, 24, 1, -9, 5, 22, 10, 5, -7, -6, -9, -3, 4, 12, 2, -24, -31, -12, 7, 14, -28, -34, -3, -4, 3, 13, -7, -5, 31, 24, 28, -13, 17, 28, -17, -1, 2, -7, 15, -5, -1, -20, -43, -18, -33, -11, 31, 18, -5, -22, -20, -23, -1, -7, -10, 7, -1, -13, 42, 21, 14, -6, -6, 18, 1, 26, -6, -30, -32, -6, -2, -22, -20, 9, 22, 11, 2, -22, 22, 1, -6, -3, -14, -14, -13, 21, 31, 21, -2, -29, -8, 11, 22, 23, -39, -13, -42, -22, -36, -19, -13, 4, 6, -2, -30, 2, 17, 18, 4, 8, -13, 8, -11, 0, -12, -35, -25, 0, -5, 46, 10, -23, -15, -48, -6, -10, -7, -18, 20, 21, -3, 11, 2, 5, -4, 5, 8, 18, 11, 11, -35, -24, 4, -27, 3, -6, 23, 17, -1, -4, -32, -40, -21, -29, -8, -24, 6, -1, 27, 2, 12, -9, 0, 6, -2, -1, 8, 2, -29, -13, 10, 13, 3, 6, 22, -6, 9, -31, -18, -32, -12, -41, 6, 7, -15, -2, -5, -6, 31, 9, -20, 5, -2, -1, -15, 17, -20, -4, 15, 4, 2, 23, 11, 17, -24, -36, -14, -32, -19, -32, -5, -17, 6, -11, 1, 24, 21, -23, -1, 4, -4, -6, -15, -17, -16, -17, 15, 3, 4, 12, -4, -13, -29, -43, -23, -40, -32, -47, -16, 1, -12, 0, 27, 18, 5, -30, 14, 18, 9, -18, -8, 17, 0, 10, 29, 28, 17, 33, 9, 11, -7, -19, -17, -45, -18, -24, -3, -11, -13, 12, 54, 41, -7, -28, -10, -7, -16, 11, 2, 8, 5, 24, 22, -4, 0, 17, 31, -13, -8, -10, 4, -26, 22, -9, 12, 23, 20, 48, 23, 32, -8, -21, -9, 2, 9, 18, -3, 18, 5, -13, -3, -40, -13, 8, 24, -9, -19, 7, 10, 10, 1, 12, -12, 0, 9, -2, 15, 20, -20, 10, 8, 7, -11, 5, -14, 9, -14, -9, 29, 13, 6, -16, 5, 4, 9, 4, 0, 5, 3, 3, 21, -16, -10, -28, 2, -2, 3, 12, 4, 13, 1, 13, 15, 1, 9, 15, -15, 9, -10, -7, 16, 4, -17, -17, 14, -8, -5, -8, 2, 0, 13, -6, 25, 11, 10, 14, -5, -13, 2}, { -11, 15, -6, 15, 9, 17, -1, 3, 18, -3, -4, -9, 17, -7, 3, -11, -17, -15, 4, 17, 15, -15, 12, 2, 1, 3, 10, 4, 13, 3, 18, 6, -10, -9, -33, -21, -19, -7, 1, 5, -16, -6, -4, -12, -13, 2, -13, 4, -12, -7, 1, -15, -6, 6, 12, -18, -3, 14, -3, 3, -18, 15, -8, -13, -2, -26, -24, -52, -51, -33, -52, -10, -4, -4, 29, -3, 24, 0, -9, -9, -18, 11, -9, -7, -3, 12, -10, -4, -19, -12, 0, 19, 13, -24, -50, -53, -9, -1, 25, 3, -37, -12, -5, -36, -16, -11, 18, 12, -9, 4, 5, 8, 3, 13, 8, 35, 1, -1, -10, 10, 19, -22, -14, -22, 0, -9, 7, -16, 7, 9, 17, 10, -4, 11, -5, -28, 5, 9, 30, 17, 10, -19, -12, -28, 8, 0, 7, 5, 10, -18, 2, 26, 23, 3, 3, 1, -12, -2, 3, -21, -24, -7, -40, -47, -11, 4, -18, 17, 0, -10, -4, -33, 3, 5, 1, 10, 12, -24, 8, 25, -11, 10, 12, 10, 20, 23, -9, -19, -2, -2, -22, -33, 5, 6, 22, -2, 12, -13, -30, -4, -12, -9, -48, -8, -20, -1, -2, 3, -7, 9, -21, 24, -1, 9, -9, -1, 18, -3, 13, -27, 2, 10, -6, -15, 11, -12, 24, 31, 19, 9, -17, -1, 12, 18, 3, -24, -18, -5, -20, 28, 2, -15, 7, -7, -21, 22, -11, -19, -14, 9, 19, 0, -18, -11, 35, 22, -17, -23, 11, 20, 0, 20, -12, 5, -5, 0, 4, -14, 1, 0, -17, -21, 22, 4, 5, -7, -23, -1, 24, -27, 1, -14, -8, 48, 0, 5, 14, -11, 17, 22, 6, -17, 4, -32, -17, -39, -40, -8, 2, 18, 24, -8, 10, 14, 23, -7, -32, -13, -10, -11, 3, -8, -13, -20, 30, 28, 37, 6, 7, -10, -28, -48, -26, -38, -11, -3, 16, 20, 46, 16, 15, 49, 20, 9, 25, -4, 9, -7, 37, -22, -7, 3, 10, 21, -10, 3, 13, 5, -29, -27, 9, -1, 15, 23, 13, 13, 18, 13, 23, 69, 20, 6, 8, 2, -7, -4, 0, -45, -12, -17, -20, 19, 16, -6, 29, 37, 23, 42, 20, 39, 0, -3, 20, -6, 13, 39, 24, 11, -16, -11, -33, 14, -5, 17, -26, -34, -23, -1, -9, 7, 24, 37, 54, 45, 60, 54, 46, 45, 8, 2, 5, -16, 20, 14, 8, 1, -13, -13, -34, -6, -10, 2, -17, -25, -19, -39, -44, -15, -37, 2, 19, 33, 66, 62, 32, 25, 15, 9, 10, -17, -14, -12, 15, -23, -42, -35, 25, -4, 8, 6, 12, -39, 4, -26, -55, -47, -41, -46, 25, 32, 47, 48, -10, 7, -6, 1, -4, -28, -16, -18, -11, 0, -36, -45, -26, 5, 7, -15, 22, 16, 0, -24, -71, -66, -75, -93, -79, -25, -17, 20, -25, -9, 5, -16, 4, -28, -9, -1, 4, 3, -12, 37, 8, 6, 37, 20, 32, 9, 9, 8, -21, -73, -81, -107, -87, -63, -52, -25, -12, -8, -8, -9, -2, -18, 7, -1, 11, -1, -29, 23, 23, -9, -8, -3, 12, 15, 26, 30, -11, 0, -24, -33, -16, -47, -42, -19, -4, 2, 13, 18, 6, -18, -41, -28, -4, -20, -44, 14, 0, -2, -2, -4, 32, 31, 34, 33, 9, 4, 6, 18, -11, -27, -25, -38, -11, -6, 2, 20, 19, -21, -49, -28, 11, -17, -18, -8, 16, -3, 12, 17, 3, 18, 35, 36, 13, 12, 24, 8, 8, 3, 4, -18, -23, 5, -1, -25, -12, -49, -53, -54, -13, 11, -25, -12, -4, 5, -17, -7, -25, 19, 38, 41, 37, 29, 6, -6, 6, 22, -12, 5, 7, -11, -20, -6, -30, -36, -26, -39, -22, 1, -21, -22, -10, -16, -5, 10, 14, 43, 31, 39, 13, 25, 26, 9, 13, 10, 8, 11, -6, -8, -33, -35, -8, -23, -44, -23, -20, -10, -11, 2, -7, -12, -9, -15, 16, 40, 42, 15, 10, 15, -21, -6, 15, -11, -4, 4, 29, -22, -48, -34, 3, -4, -21, 16, -25, -26, -14, 2, -20, 6, -2, -18, 20, -30, -20, 9, -6, 1, -9, 6, -6, -1, -2, -13, 9, -6, 5, 6, -1, -26, -17, -30, -26, 11, 2, 6, -10, -4, -16, 4, 3, 34, 30, -7, 11, 15, -3, 28, 20, 7, -2, -9, 25, 14, -1, 49, 5, 25, 36, 10, -6, -4, 4, 1, -12, -13, -5, -7, -10, -17, -11, -4, -34, -13, -30, -8, 10, 21, 13, 19, 47, 0, -12, 26, 39, 45, -5, -1, -15, -7, -2, -15, -4, 0}, { -11, -5, -7, 4, -2, 7, -9, -17, 1, 17, -4, -19, 0, 4, -2, -9, -17, 15, 13, -11, -14, -13, 2, -1, 1, -15, -9, 10, -12, -18, 4, -11, -9, 17, 6, 12, -1, -17, -3, 4, -19, -11, 10, 19, 1, 22, -3, 37, 22, 37, 33, -1, 11, 3, -17, -14, -8, 8, -15, 5, 35, 3, -16, -15, -14, -9, -4, -1, -20, -37, -19, 7, -6, -23, -22, 7, 3, 20, 15, 14, -20, -9, -16, 6, -13, -16, -5, 16, 22, -7, -4, -13, -36, -49, -14, 11, -2, -44, -30, -16, -20, -33, -20, -24, 15, -18, -3, 5, -16, 31, 0, -5, 5, 7, -22, 11, 11, 5, -5, -3, -50, -54, -52, -15, -33, -1, -15, -25, -16, -44, 0, -35, 1, -27, 3, 31, 4, 8, -18, -47, -15, -15, 7, 4, 21, 23, -2, -38, -57, -26, -27, -23, -28, 13, 9, -13, -28, -28, -35, -36, -18, -53, -13, 12, -3, -13, -66, -14, 8, -16, 9, 9, -7, 13, 20, -15, -28, -42, -31, -20, -3, 18, 6, -14, -3, -11, 1, -11, -10, 3, -5, -6, 16, -19, -5, -24, -14, -15, 1, 9, -19, -11, 15, 8, -29, 8, -22, -26, 9, 13, 38, 10, 2, 13, 1, 20, 26, 8, 24, 24, -5, -32, 2, -24, -2, 2, 7, 13, -29, -8, -9, 17, -4, -10, -34, -25, 6, 0, 18, 16, 11, 29, 52, 20, 14, 9, 30, 24, 17, 11, 15, 16, 3, 45, -25, -3, -26, -6, 7, -7, 9, -16, -39, -37, 7, 14, 32, 14, 6, 29, 38, 21, 15, 24, 21, -14, 30, 25, 21, 32, -4, 21, -12, -26, -24, -15, 11, 13, 8, -28, -18, 9, 18, 56, 26, 16, -3, -2, 15, 35, 16, 26, 3, 21, 69, 54, 33, 16, -3, -9, -19, 9, 4, -7, -18, -10, -15, -25, -24, -13, 28, 57, 28, 31, -18, -8, 5, -20, -3, 26, 14, 16, 13, 26, 49, 28, -11, 16, 18, 16, -24, -11, -16, -13, -19, -17, -16, 8, 12, 39, 16, 30, 0, -27, -8, -21, -10, -16, -14, -28, -49, -4, 27, 36, -12, 18, 32, 25, 9, 2, -12, -24, -16, -23, 22, 51, 24, 7, 20, 4, 6, 4, -18, -15, -11, 12, -24, -35, -29, 20, -9, -12, 17, 19, -3, 25, -21, 4, -5, -19, 4, -5, 20, 25, 23, 19, 15, 17, 0, -20, 3, -9, -2, -9, -41, -40, -42, -14, -28, -22, -13, -6, -13, -11, 1, 13, 13, 38, 7, -4, 13, 14, 16, -20, 11, 31, -16, 22, 1, -12, -11, -23, -33, -34, -48, -25, -33, -5, 16, -2, -43, -12, 6, 8, -14, -2, -8, -8, -13, 0, 19, 4, 14, -4, 18, -3, -26, -32, -18, -34, -49, -35, -54, -36, -33, 14, -2, -18, -47, -8, 5, 0, -4, -14, 6, -11, -19, -12, 6, 23, 9, 19, 6, -3, -28, -12, -4, -60, -22, 6, -15, -9, 15, 19, 30, 17, -15, -24, 6, -14, 0, 12, -3, -4, -19, -15, 20, 41, 47, 20, -4, -30, -33, -26, -31, -52, -36, -21, -16, 27, 39, 32, -12, 14, 19, -29, -22, -2, -9, 35, -3, -35, 4, 18, 25, 28, 10, -27, -22, -35, -40, -53, -36, -12, -31, -15, -2, 11, -12, 10, -1, 30, -22, -59, -30, -1, 2, -1, -5, -2, -11, 22, 38, 22, 17, -12, -48, -18, -17, -32, -48, -32, 6, -19, 18, 22, -3, -9, 10, -27, -29, -37, -50, -18, 12, 13, -8, 2, 16, 17, 25, 3, -10, -32, -32, -30, -13, -51, -30, -2, -2, -20, -6, 7, -30, -12, 13, -4, -24, -7, -14, -19, 14, 21, 1, -2, 19, 25, 6, -9, 0, -28, -32, 1, -51, -9, -37, 0, 23, 17, 32, -16, -12, -3, 17, 4, -7, -16, 22, 16, 27, 26, 12, 27, 33, 11, 4, -24, -27, -40, -47, -51, -61, -39, -10, -7, 16, 20, 6, 3, 32, 12, -8, 8, -9, -9, -10, 12, -5, 22, 24, 41, 19, -12, 4, -14, -3, -20, -63, -33, -43, -52, -23, -18, 20, 18, 14, -14, -3, -8, 15, -12, -3, 23, 27, 25, -12, 0, 2, 20, 4, 20, 3, 8, -16, -34, -31, -49, -30, -35, -11, 10, 48, 16, 41, 8, -5, -11, -19, -9, -18, 25, 40, 24, 27, 19, 3, 14, 15, -11, 42, 27, -12, -16, 16, 10, 20, 19, 3, 23, 6, -3, -22, 15, -7, 1, -1, 2, 0, 7, 9, -9, 13, 18, 21, 23, 44, 1, -19, 2, 19, 16, -10, 12, -1, 3, -14, -10, 16, 11, -10, 17, -18, 6}, { 2, 11, -6, 15, 8, 1, -6, -16, 2, -14, 6, -16, -2, 10, 16, 18, -13, 15, -16, -14, 12, 17, -6, 1, 1, -15, -18, -8, -8, -14, -5, -8, 1, -3, -9, -10, -4, -22, -7, -14, -12, -17, -5, -39, -24, -46, -13, -7, -12, 3, -21, 6, -10, -1, -16, 13, 16, 7, 0, -35, -36, -6, -3, 1, -9, -5, -26, -47, -39, -43, -44, -39, -14, -34, -32, -49, -22, -22, 3, -43, -17, -22, -2, -10, 11, 10, -2, -20, -27, -21, -29, -22, -38, -33, -34, -12, -12, -60, -38, -46, -31, -19, -8, -11, 11, -4, 7, -14, -9, 16, 10, 1, 4, -18, 4, -22, -26, -16, -31, -24, -51, -9, -35, -17, -2, -18, -24, -21, -37, -12, -13, -31, -26, 1, -9, 6, 13, 28, 27, -12, 17, 18, -11, -21, -10, -8, -38, -29, 2, -7, -16, -19, -2, -13, -27, -6, -13, -39, -29, -40, -3, -9, -1, -21, -11, 22, 12, 28, 16, -16, 0, 2, -23, 19, -23, -2, -6, 10, -9, -8, -4, -27, 3, -13, -29, -14, -27, -16, 8, 1, 17, 13, 9, 19, 52, 18, 17, -13, -4, 9, -20, -39, -28, -11, -26, -11, 6, -19, -3, 6, 11, -15, 13, -2, 1, 17, 21, 25, 12, 0, 12, 29, 50, 36, 13, 18, -9, 0, -11, -22, 19, -13, -10, 10, 6, -2, 16, 10, 6, 28, -7, 24, 34, 29, -1, 12, -17, 28, 49, 65, -2, 11, -7, 22, 9, 4, 19, -8, 2, 1, 13, -3, 7, 26, -3, 12, 32, 28, 8, -11, 12, -19, -26, 14, 0, -7, 46, 69, 10, -3, 10, 30, 27, -9, 14, 25, 13, 20, -16, 4, 19, 23, 6, 1, -12, 25, 19, 1, -22, 12, -8, -6, 19, -10, 63, 59, 29, 19, 20, 3, 38, -13, 24, 16, 12, 24, 3, 14, -1, 28, 35, 15, -18, 1, 18, 13, -4, -11, 6, 9, 7, -5, 27, 34, 23, 18, -13, -5, 51, -2, 32, 7, 6, -4, 30, 0, 23, 9, -4, 8, -5, 14, 13, 1, -12, -9, -3, -15, -7, 2, -25, 6, 6, 15, 1, 7, 34, 16, 21, 21, 2, 11, 8, 1, 27, 21, -6, -3, -11, -2, -13, 22, -15, -37, -4, -25, 16, -1, 16, 26, 22, 5, 10, 16, 33, 8, 14, -5, -3, 16, 18, 33, 30, 23, -11, -27, -10, 9, 17, 18, 6, -1, 4, -16, 10, 30, 23, 5, -24, -6, -5, -2, -7, 12, 15, -15, 23, 20, 4, 23, 23, 7, 5, -20, -29, -2, 13, 38, 1, 8, 0, 28, 1, 15, 17, -20, -10, 4, 16, 1, 18, 2, -8, 12, 12, 10, 38, 0, 10, 31, 5, -32, -27, -13, 1, 14, -2, -4, 6, 25, 2, 4, -32, -32, -7, -26, -11, 18, -3, -6, -10, 15, 11, -23, 29, 20, 19, 36, -11, -26, 10, 8, 17, 15, -5, -11, 8, -1, 1, -22, -24, -33, -27, -11, 10, -16, -5, -14, 5, 13, -9, -4, 9, -27, -15, -21, -50, -36, 2, -3, 8, -15, -31, -16, -9, -42, -29, 2, -14, -40, -22, -4, 15, 20, 7, 7, -10, 3, -15, -18, -3, -40, -33, -35, -25, -25, -12, 6, -3, -11, -7, 7, -19, -23, -37, -13, -5, -2, -17, 9, -7, 32, -7, -11, -44, -8, -7, -12, -35, -15, -41, -33, -30, -8, 1, -15, -4, -20, -5, -6, -17, -44, -24, -16, -3, 42, -7, -16, -13, 2, -19, -49, -21, -8, -16, -10, -5, 19, -16, -38, -24, 4, 6, -1, -17, 11, 5, -10, -17, -18, -10, -4, 19, 33, -17, -15, -14, 8, 5, -6, -4, -23, -38, -10, 4, -14, -6, -5, -19, -24, 18, 1, -7, 7, -3, -3, -22, -29, -34, 8, -2, 31, -39, 5, 4, 16, -30, -7, 4, -14, -24, -44, 2, -4, 2, -2, 4, -8, 1, 28, 6, -6, -3, 17, 6, 11, -7, 34, 14, 3, -13, -10, -5, -7, 0, -26, -33, -21, -27, -23, -16, 0, -35, -9, -17, -7, 14, 14, -3, -15, -19, 39, 45, 38, 21, 9, -1, 4, 15, -7, -7, 12, 6, 16, -31, -13, -36, -34, -10, -28, -18, -7, -9, 4, 10, 9, -11, 9, 27, 14, 44, 36, 39, 17, 14, 22, -13, 8, -4, 2, 6, -6, 17, 3, -12, 15, 25, 25, -3, -14, -1, 19, 20, 40, 28, 24, 15, 10, 45, 62, 28, 15, 7, 18, 6, 15, 5, -12, 18, 16, 10, 42, 39, 19, 27, 47, 38, 22, 34, 37, 19, 20, 38, 47, 53, 37, 41, 23, 43, 23, 12, -12, 16, -10}, { -10, -14, -9, -11, -7, 13, -14, 17, -2, 17, 14, 14, 14, 0, 21, 6, -8, 5, -7, 9, 10, 15, -18, 18, 5, -18, 16, -9, 0, 19, 3, 4, 4, 16, 11, 21, 11, 1, 10, 12, 3, -7, 12, -16, 8, -25, -16, 37, 32, -15, -12, 0, 14, 11, -6, 14, 4, 2, 4, -11, -20, 6, 14, 9, 34, 26, 13, 51, 16, 27, 63, 36, 39, -3, -13, -13, -2, 10, -1, 15, 8, 4, 1, 14, -8, 3, 11, 10, -19, -21, -14, -26, -11, 9, -3, -16, -12, 11, 5, 1, 21, -16, -28, 12, 7, 36, 23, 30, -26, -10, -12, 6, 4, -16, 31, -23, 2, -18, 0, -29, 12, 4, 7, -25, 8, 2, 8, -13, 4, 25, 6, 14, 29, 29, 13, -20, -41, -53, -8, 6, -9, 17, 15, 1, 23, -5, -15, 5, -7, -27, -24, -15, 18, 8, 8, -16, 16, 36, 1, 13, 35, 44, -6, 8, 2, 6, 20, -13, -12, 11, -18, 6, 13, -8, -3, -24, -23, -26, -28, -1, -1, 13, 0, 19, 18, 11, 9, -7, -12, 25, 11, 4, -4, 17, -5, 26, 11, -20, 11, -20, -28, -22, -13, -7, -15, -15, -19, 4, -9, 19, 0, 8, -9, -8, -6, -9, -10, 17, 24, -9, 5, 10, 0, 15, 16, -10, 3, -13, -24, -9, 7, 19, 19, -14, 10, 9, 6, 27, 37, -24, -37, -17, -2, -11, -16, -9, -13, -6, 1, -19, 22, 13, 8, 5, 6, 7, -15, -14, -20, -18, -17, 30, 42, 5, 7, 28, 30, -21, -23, -35, -14, -9, 19, 13, 4, -14, -9, -1, -9, -41, -10, 8, -13, -1, -15, 8, 18, 6, -3, 25, 12, 36, 12, -2, -7, -1, -33, -20, 3, 3, 27, -17, -20, -2, -28, -56, -36, -22, -13, 9, -6, -19, 0, -8, -3, -6, -7, 13, -5, -7, 21, -5, 28, 15, 15, -6, -10, 16, 9, 3, -8, -13, -10, -13, 15, 7, -15, 4, 8, -9, 3, 5, 0, 1, -4, 10, 6, 2, 6, -16, 9, -11, 17, 31, 8, 8, -2, -5, -18, 1, -2, -3, -32, -11, -11, 10, 2, -12, -34, -9, 10, -10, -28, -5, -36, -28, 0, 5, 0, 16, 3, 9, -41, -14, -5, -9, 4, -18, -8, 20, 11, 16, -15, 3, -20, -3, -32, -23, 8, -7, -13, -61, -48, -24, -11, 11, 19, 2, -13, -29, -42, -37, -16, -32, -35, -18, -8, 40, 36, -3, -26, -14, 4, 6, -24, -5, 10, -5, -16, -14, -10, 3, -2, 31, 47, 7, 17, -29, -23, -25, -20, -13, -5, -38, -22, 45, 18, 12, 17, 2, -8, 11, -30, -23, -9, 11, 27, 18, 24, 24, 3, 0, 33, 18, -11, -2, 12, 12, -9, -11, -12, -10, -6, 85, 43, 30, -1, -2, -15, -20, -10, -40, -3, -13, 18, 3, 5, 31, 0, -6, 21, 6, -20, -5, -10, -1, -12, 17, 21, 19, 9, 56, 48, 26, -7, 7, -19, -1, -19, -23, 15, 24, -3, -4, -7, 0, -27, -13, 13, 2, 1, 27, 17, -21, 9, 24, 28, -6, 13, 26, 38, 33, 14, -2, -19, 22, -26, -33, -7, -6, -1, 6, 23, -18, -9, -16, -3, 27, 5, -4, -12, -12, -9, -16, -5, 15, 23, 6, 52, 21, 18, -1, -25, -12, -6, -36, -23, 14, -5, -12, 17, -17, -17, -22, 4, 15, 5, 5, 4, 10, 11, 9, -18, 4, 3, 43, 26, -15, -14, -18, -32, -6, 4, -25, -2, 21, 15, 0, -23, 0, 1, 23, -3, 1, 10, -1, -18, -17, 4, -10, -6, 1, 5, -16, -1, -17, -11, -14, -4, 9, 33, 7, 20, 29, 21, -7, -13, -20, 4, -17, -7, 21, 22, -6, -5, -5, 4, 30, 24, 4, 4, -9, -26, 15, -10, -7, 0, -32, 8, 12, 32, 4, -11, -13, -27, -51, -7, -29, -30, -5, 10, 15, 19, 37, 8, 31, 23, -3, 0, -7, -14, -13, -12, 14, -2, -39, -26, 9, 23, -14, -30, -21, -47, -61, -61, -54, -21, 6, 1, -3, -21, 6, -2, -12, -21, 6, 7, 19, 14, 4, -11, -12, 1, -9, 3, -8, -11, -21, -38, -52, -26, -39, -74, -34, 11, 20, -18, 5, -1, -9, 11, 2, -16, -7, -24, 42, 31, 14, -12, 1, 17, -27, -9, 33, -5, 11, 4, 18, -21, -8, 5, -10, -6, 23, 9, -9, 4, -24, 1, 32, 16, 25, 6, 11, -1, 15, -10, -1, -5, 3, 22, -5, 18, -4, 5, 3, 5, 3, 15, 15, 16, 22, 30, 7, 19, 12, 8, 27, 27, -20, 10, 2, 16, 5}, { -2, -19, -3, 6, 7, 4, -7, -17, -7, 9, 8, -10, -21, 6, 23, 12, 13, -9, 4, 15, -8, 14, -4, -5, 6, -16, 11, 11, -18, -13, 4, 2, 10, -18, -22, 1, -5, 8, -15, -18, -24, 5, -24, -46, -11, -36, -34, -4, -24, -20, -10, -26, -17, 0, 13, -5, 18, -13, 14, -17, -20, -1, -28, -5, 9, 11, -5, -16, -4, 11, 16, -17, -13, -11, -43, -55, -55, -15, -32, 10, -2, 16, 11, 6, -17, 18, 7, -8, -19, -5, -7, -42, -28, 4, 9, -32, -15, 12, 8, -15, 24, 14, 21, 0, -6, 30, 35, 11, 10, -11, -9, 11, -5, 5, 16, 17, -17, -13, -33, -32, -26, -3, -4, 9, 41, 0, -8, 14, 4, 34, 22, 14, 36, 21, -11, -20, -1, -4, 22, -17, -8, 16, 8, 2, 17, -24, 12, -1, -1, 1, -25, 19, 3, -19, 6, 5, 19, 20, -10, 19, 17, 23, -22, -42, 12, 17, 15, -12, -7, 2, -26, -26, -16, -50, -29, -1, -6, -36, -34, -16, 2, -1, 13, 30, 12, 6, 8, -20, 13, -12, -14, -19, -33, 20, 16, 14, 13, -34, -8, -17, 30, 3, -27, -50, -17, -15, 2, -7, -4, 3, 3, 24, 13, -12, -17, 11, -8, -12, -10, -16, 33, 8, -27, 4, -3, -22, -18, 11, 14, -14, -2, -37, 7, -13, 22, 10, 11, 15, -3, -11, -11, -4, -3, 34, -11, -3, -12, 1, -4, 13, 18, 14, -14, -10, 32, 41, 5, -24, -9, -28, 5, 28, 33, 13, 6, 14, 5, -23, -3, -17, 1, 37, 32, -13, 7, 2, -13, -13, 15, -40, -4, -38, -19, 15, -8, -12, -1, 20, 31, 22, 4, 27, 1, -15, 15, -1, 17, 12, 15, 28, 26, -19, -2, 22, -6, -42, -17, -2, -7, -20, -37, -3, 3, 11, 23, 16, 2, 7, 3, 21, 17, 8, -3, -8, 28, 12, 45, 39, 31, -12, -26, -25, 2, 15, 9, -6, -6, -9, -5, -10, -3, 7, 4, 22, -7, -11, 2, 4, -8, 11, 3, 47, 46, 33, 41, 28, -27, -20, -45, -18, -8, -7, -25, -24, -13, -12, 5, 10, -21, -10, -12, -14, -19, -25, -21, 8, 17, 18, 37, 33, 32, 41, 15, 0, -26, -12, -5, -30, -27, -11, 17, 18, 11, 10, -18, 14, -19, -18, -3, 16, -16, -42, -3, 3, 14, 24, 38, 25, 10, 1, -26, -53, -26, -28, -9, -7, -5, -14, 41, -5, -17, 6, -13, 8, -11, 0, -1, -7, -18, 4, -13, 11, 21, 19, 32, 2, 19, -9, -41, -45, -37, 2, 9, 9, -13, 24, -3, 32, 18, 20, 17, 2, -14, -8, -12, 16, 5, -2, 30, 40, 23, 32, 10, 22, 7, -8, -45, -64, -52, -11, 9, 12, -18, 16, 28, 39, -4, -18, 18, -27, -17, -3, -8, 9, 26, 27, 26, 23, 34, 29, 20, -16, -23, -42, -67, -54, -27, 2, 22, 29, -1, 10, 20, -1, 6, 0, -18, 8, -25, 11, 4, -5, 11, -2, 23, 11, -31, -17, -17, -33, -34, -40, -48, -18, 17, 17, 43, 24, 12, -9, -26, 6, -6, 0, -26, -11, 1, 16, -5, 10, 14, 27, 3, -31, -29, 2, -24, -42, -15, 0, -35, -22, -7, 17, 42, 35, -16, -24, 24, -16, 12, -21, -22, -2, -4, -12, 20, 2, -11, -10, 9, 1, -6, -40, -18, 0, -27, -12, -2, 19, 5, 11, 32, 20, 2, -9, 13, 2, 2, 2, -30, 2, 25, 9, 24, 5, 15, 9, 9, 1, -9, -32, -20, -12, -17, -10, -16, -15, 0, 3, 3, -24, -45, -4, -25, 18, 2, 7, 24, 11, 35, 17, 35, 45, 10, 17, 5, -26, -11, -12, -27, -11, -12, -15, -3, -10, 8, 31, 19, -23, -31, -25, -54, -10, 15, -6, -5, 27, -3, 9, 10, 21, 21, 0, -9, -2, -24, -12, -19, -23, 20, -4, -1, 4, -4, 19, -1, -21, -14, -28, -17, -12, -14, 8, 3, -32, 10, 20, 25, 18, 15, -41, -16, -19, 1, -15, -32, -10, -7, -5, -14, -49, -9, -6, -25, -9, -29, -18, -8, 3, 2, -17, 41, -10, -14, 11, 12, 22, -5, 13, 7, -1, -10, 7, 7, 20, -10, 15, -27, -37, 6, 3, -18, -19, -51, 17, 13, 18, -12, 16, 7, 25, 28, 4, -4, 35, 11, 20, 36, 28, -15, 10, 16, 32, 26, 4, 26, -3, -23, 18, 31, 30, 2, 11, 9, 14, 3, 19, -4, 17, -7, 1, 22, 1, 15, 24, 16, 19, 18, 2, 53, 33, 3, 0, 18, 15, -5, 25, 29, -24, 9, 12, 2, -1}, { -16, 8, -7, 9, 13, 10, -14, 9, 14, 15, -14, -8, 9, -12, 7, -7, -3, -7, 16, 2, -9, 2, 9, -17, -10, 16, 7, -10, 4, 0, -7, -7, 17, -2, -27, 3, -10, 0, 7, -20, 5, 7, 4, -19, 16, -11, 1, -32, -6, -17, -6, -22, -6, -15, 11, 3, -8, 4, 12, 18, -14, -12, 4, -27, 8, -7, -24, -9, -13, -20, -18, -37, -36, 13, 0, 4, -7, -23, -19, -10, 0, 21, 12, -10, 2, -8, -12, 5, 10, 7, -12, -30, -54, -31, -34, -39, -53, -54, -43, -39, -42, -15, -6, -1, -28, -8, 21, -4, -5, -2, 5, 9, 0, -15, -2, 13, -13, -19, -11, -25, 5, -14, 6, -7, -23, -13, -7, -17, -17, 4, -24, -26, -5, 1, 18, -13, 9, -15, 0, -10, -5, 0, -14, -4, -11, -13, -12, -17, 38, -3, 6, 7, 15, 1, -2, 6, -24, 4, 3, -15, 0, 10, -17, -6, -8, 13, -8, -8, 16, 10, -3, 14, 15, -18, -1, -8, 21, 6, 13, 7, -2, 4, 9, 2, 5, -3, -15, 12, -22, 7, 8, 2, -19, 8, -11, -3, 2, -2, 36, 19, 16, -2, -2, 0, 6, 15, 5, 5, -4, -10, -27, 10, -4, -2, 7, 5, -13, 14, -4, 18, 12, 14, -18, -5, 7, -4, 4, 17, -7, -1, 25, 14, 22, 28, 8, -5, 2, 10, 5, -6, 11, 1, -7, -19, -23, -4, -25, -11, -9, 10, 34, 10, 20, 15, 12, 18, 29, 18, 18, 12, 5, -8, -2, 4, 11, -2, 17, 0, 18, 7, 10, -4, 1, 4, -32, 17, -7, 11, 7, -18, -2, 21, 17, -2, 28, 30, 6, 9, 14, 10, 11, 6, 0, 5, 7, -30, 12, 22, 7, 5, -13, -5, -29, -20, -15, -36, -41, -7, -2, 3, 11, 20, 24, 12, 36, 12, 25, 20, 19, 1, 24, -12, -32, -17, 13, 1, 7, 5, 4, 19, 5, -6, 13, -24, 7, 6, -16, 29, 24, 49, -2, 4, 0, 6, 8, 21, 11, 16, -20, -30, -15, 6, 14, 25, -13, -5, 13, -10, -11, 12, 43, 4, 16, 35, -5, 20, 21, 33, -27, -17, -4, 18, -1, -2, -7, -15, -6, -35, -31, 18, 6, 15, 4, 13, 7, 14, 9, 14, 15, 30, 15, 2, -20, 17, 16, 2, -31, -17, 21, 20, 5, -4, -13, -12, -31, -10, 4, -1, 16, 11, 12, 27, -4, 17, 6, 24, 26, 46, 8, 9, 11, -11, 3, -4, -47, -9, 2, -4, 16, -6, -27, -32, 3, 12, 40, 12, 6, 13, -13, 16, -12, 2, -5, -10, 8, 54, -6, 2, 8, 6, -23, -11, -33, -9, 3, -5, -13, 4, 0, -11, 10, 22, 33, 31, 18, -7, -13, -8, -8, -17, -14, 16, -2, 12, 26, -19, 15, -22, 11, -34, -24, 0, 6, -26, 2, -15, -19, 17, 18, 23, 42, -7, 16, -8, 1, 3, -9, -13, -11, -8, 31, 22, 21, -17, -7, -19, -5, -3, 0, -21, -29, -32, -3, 4, 2, -2, 11, 37, -7, 0, -10, 10, -11, -1, -13, -17, -9, -21, 37, 6, 26, -10, -18, 0, -8, -17, -12, -18, -38, -6, -3, 10, 28, 17, 10, 19, 1, -24, 3, -16, -18, -3, -17, 1, 2, -8, 14, 4, 19, 7, -11, -4, -4, -23, -43, -40, -25, -24, 4, 5, -2, 14, 8, -24, 0, 5, -21, -20, -33, -7, -6, -26, -11, -18, -21, -23, 9, -1, -10, 6, -32, -18, -29, -23, -18, -18, 3, -2, -2, -17, -20, -21, -1, -14, 0, 12, -18, -20, -7, -9, 11, 7, 4, -25, 13, 6, 11, -15, -10, -16, -21, -25, -16, 6, -3, -4, 12, 3, 21, 18, 16, -6, -2, -17, -26, -29, -19, -15, 2, -16, -11, 7, 1, -18, -5, 17, -20, -30, -30, -17, 0, 6, 2, 16, -12, -3, 11, 13, 25, -1, -18, 7, -9, -16, -22, 16, -15, 3, -11, -4, -9, -12, 3, -9, 1, -32, 2, 9, 5, 1, -4, -15, -19, -3, 2, -4, 3, -1, -14, -40, -21, 11, 2, 9, -27, -13, -18, 6, 8, 18, 17, 3, -25, -2, 28, -6, -8, -26, -8, -32, -9, -10, -26, -22, 30, 8, -8, -6, -21, -19, -19, -24, -7, -13, -23, -12, -11, -15, 18, -18, 18, -26, -2, -10, 14, -17, -2, -17, 2, 5, 15, -13, 18, -5, -14, -5, 4, 23, -21, 4, 16, -6, -2, -5, 0, 13, 18, 8, -4, 1, 12, 31, 20, -16, 12, 26, 18, 0, -16, -8, 11, -28, -16, 14, 16, 16, 30, 10, 16, 29, 6, -6, 16, 17}, { 17, 6, -16, 15, 19, -14, 8, -3, 16, 14, -17, -7, 2, 2, 13, -7, 12, 13, -19, -18, 7, -4, 15, -5, 5, -16, -11, -8, 14, -13, -14, -6, 10, 16, 8, -18, -18, 16, -16, 10, 15, 6, 30, -19, -8, -7, -8, -6, -3, 12, 10, -20, -19, -1, 4, 2, 10, 2, -10, 10, -22, -8, -23, -16, 7, 8, 19, -13, -17, -16, -57, -22, -17, -42, -45, -46, -56, -49, -19, 1, 9, 9, -14, 2, -6, -8, -8, -8, -7, -12, -16, -5, 32, -19, 0, 2, -7, -9, -17, -42, -43, -31, -72, -83, -41, -69, -50, 18, -15, -3, -13, 2, -2, 10, 0, 15, 37, 1, 22, 24, 18, 20, 16, 22, 19, 22, 10, -4, -15, -11, -54, -44, -41, -19, -31, -65, -5, -24, -19, 12, 16, 0, -22, 6, 13, 29, 30, 28, 21, 14, 1, -8, 27, 18, 2, 13, 16, -15, -37, -23, -37, -16, -15, -42, -1, -5, -15, -6, -5, 10, -4, 34, 18, -9, 22, 11, -5, 4, 10, -6, -21, -8, 19, -7, 1, 13, -9, -48, -23, -34, -37, -26, -27, -6, -14, -11, 4, 26, -14, 34, 23, -8, 13, 2, 10, -26, -6, -32, -18, -4, 4, 17, 32, 3, -9, -38, -41, -78, -58, -37, -32, -25, -2, 7, 0, -20, -1, -4, 42, -6, 2, -27, -17, -40, -12, -23, -21, 11, 4, 52, 25, 22, 13, -26, -71, -77, -56, -47, -32, -35, -27, 15, -4, -29, -34, -24, 22, 39, -3, -3, -22, -13, -42, -18, 18, 6, 36, 58, 82, 58, 2, -61, -80, -59, -60, -22, -17, -36, -10, -25, 12, -18, 4, 27, 9, 10, 12, -12, -25, -37, -8, -23, 2, 10, 30, 75, 74, 58, -16, -53, -89, -62, -58, -24, -42, 5, 6, -20, -1, -9, -14, 54, 24, 3, 5, 15, -23, -9, 23, 26, 24, 41, 30, 19, 23, 1, -18, -51, -51, -85, -46, -5, -41, -3, -13, -5, -1, -23, -1, 15, -3, -4, -5, -4, -7, 15, 15, 11, 0, 26, 40, -3, 2, 10, -5, -22, -22, -62, -32, -30, 44, 14, -1, -10, 14, -23, -3, 44, 10, -23, 2, 14, 27, 20, 21, 9, -1, 19, 1, -8, 0, 17, -17, -34, -29, -27, 11, -5, 26, 24, 15, 20, -21, 6, -20, 34, 21, 19, -5, -2, 4, 10, -2, -17, -13, 21, -3, 8, 12, 4, -33, -13, -26, 12, 45, 32, 23, 39, 25, 0, -6, 7, 5, 12, 22, 19, -5, -18, 2, 14, -21, -17, -19, 9, 42, 39, 21, 1, -18, 6, -4, 12, 18, 19, 21, 36, 44, -8, 19, 2, 21, 3, -39, -45, -13, 7, 16, 3, -14, 16, -2, 10, 9, 18, 20, -7, -8, -3, 1, 2, 20, 37, 47, 26, 79, 36, 5, -2, 14, -1, 3, -35, -31, 3, -15, 7, -18, 0, 2, 6, -10, -4, -17, 11, 10, 2, 9, 9, 17, 14, 21, 17, 21, 26, -18, 3, 22, 1, 9, -3, -14, -3, 4, -16, 17, -7, -19, 4, -29, -8, -7, 10, 3, -4, -2, 3, 9, -5, 17, 25, 9, 36, 17, 4, -28, 7, -2, -3, -24, -2, -15, 3, 2, -17, -22, -25, -24, -15, -21, -5, 0, 10, 25, 0, 14, -17, 17, 9, 9, -5, 4, 12, -4, 0, -12, -14, -2, 8, -5, 30, 17, 11, -22, -28, 0, -15, 5, 6, 11, 2, 37, -8, -21, -18, 12, 8, 21, -7, 15, 11, 38, -12, -14, -16, -8, -6, 22, 11, 9, -22, -15, -34, -4, -7, 15, 14, 20, 4, -13, -1, -21, -4, -18, 12, 32, 10, -2, -9, 72, 15, 10, 3, 6, 6, -4, -9, -10, -30, -24, 6, 3, 1, 0, 11, 24, 6, 4, -12, 13, -10, 3, 17, 2, 10, -13, -11, -2, 52, 13, -10, -14, 15, -2, 24, -4, -6, -15, 3, 5, 10, 6, 0, 31, 14, 24, 40, 24, -13, -8, -8, 18, 7, -8, -11, 8, 28, 8, 25, -12, -17, 13, 10, 13, -14, -31, 8, -22, -15, 5, -11, 25, 18, 13, 50, 23, 7, -29, 3, 11, -3, -2, 8, 0, -9, 39, 30, 9, 39, 17, -3, -22, -31, -22, -22, 7, -33, -13, 0, 3, -5, 16, 3, 2, -8, -15, -1, -2, 0, 14, 16, -5, -10, -8, -29, -37, -5, -19, 13, -39, -43, -39, -37, -7, -16, -43, 9, 2, -31, -15, -24, 8, -12, -15, 1, -14, 14, -9, 17, 1, 12, 18, 8, 4, 7, -18, -9, -22, -34, -13, -30, 12, 37, 25, -21, -12, 1, -23, 20, -5, -10, -13, -6, 5, 14}, { -8, 5, -6, 8, -15, 2, -17, -5, 16, 2, 2, -8, 15, 17, -30, -9, -8, -17, 4, -18, -1, 18, -17, -1, -4, 11, -3, -13, -8, 1, 2, 11, 9, 9, 13, -4, 13, -5, 10, 42, 18, 24, 44, 32, 15, 37, 11, 29, 7, 16, 3, 5, -4, 2, 16, 16, 5, 4, 7, 1, -18, -14, 10, 11, 1, 22, 18, 8, -4, 61, 14, 16, 6, 12, -7, 23, 29, -1, 7, 0, -17, -24, -9, 6, 18, -16, 8, 5, -6, 7, 2, -3, -5, -21, -13, 4, -33, -10, 42, 4, -7, 22, 6, 42, -14, -6, -26, 12, -16, -37, -28, -7, 10, -8, 8, -31, -43, -31, 5, 7, -2, -17, -4, -20, -5, 20, -7, -12, 12, 10, 36, 3, -8, -8, 1, 20, -20, -36, -10, 38, 12, 17, 16, -15, 2, -20, -9, -10, 6, -25, -11, -27, -2, -12, 13, -2, -14, 2, 34, 5, 2, -11, 7, -3, -17, -31, 31, 33, 16, -23, -11, -1, -27, -12, 5, -6, -32, -13, -11, -8, 5, 33, 9, 22, -12, 12, -12, -38, -45, -18, -24, -30, -3, -29, -5, 10, 16, -7, -3, -15, -1, -19, -16, -40, -38, -16, -31, -6, 5, 40, 34, 28, 4, 14, -21, -14, -27, 12, 2, -7, 11, 27, 9, -10, 7, 27, -22, -22, -6, -11, -2, -13, -26, -5, -13, 5, 6, 18, 39, 3, -9, 19, 7, -32, -16, -2, 8, -19, 24, 12, -25, -6, -10, 11, 22, -9, -2, 18, -20, 11, -40, -8, -26, -20, 32, 10, 15, 22, 11, 19, 11, -17, -14, 18, -6, 2, -10, -23, -34, 7, 7, 19, 38, 3, -1, 25, -1, 6, -49, -5, 7, -11, 5, -4, -13, -14, -13, 3, 5, -1, 19, 40, 4, -5, -16, -29, -11, 18, 2, -1, -24, -18, -29, 1, 9, -12, -35, 3, -2, 0, 5, -9, -41, -32, -13, -7, 0, 19, 5, 2, -2, -21, -33, -29, 0, -12, 1, -1, -48, 3, -11, 8, 24, 2, 8, 5, 15, 11, 32, -19, -11, -39, -46, 3, -6, 15, -10, -18, -7, -22, 3, -34, -36, 3, -8, 14, -4, 13, -1, 5, 7, 6, -14, -8, -4, 19, 2, -18, -20, -49, -13, -7, -3, -12, -11, -32, -40, -8, -11, -17, -7, -10, 23, -10, 5, 9, -5, 26, -15, 11, 2, -6, -9, 29, 21, -4, -49, -38, -4, -15, -8, -32, -11, -10, -15, 2, 38, 1, 23, 6, 25, 14, 24, 10, -19, -2, -31, 1, -6, -16, 22, 22, 19, -12, -60, -40, -23, -1, -32, -27, -4, 0, -39, -18, 6, 9, 18, 28, -14, -12, -5, 14, -21, -4, -5, 2, -23, -9, 26, 26, 14, -19, -39, -7, 3, -7, -5, -7, -2, 8, 3, -8, 46, 38, 45, 36, -12, -19, -17, -24, -28, -25, -7, -2, -3, 19, 14, 39, 4, 9, -25, -3, 22, 13, 21, 32, 19, 11, 27, 8, 29, 64, 30, 22, -22, 14, -3, -16, -15, -22, -13, -15, -13, 22, 7, 6, 19, 5, -32, -23, -10, 10, 37, 40, 21, 20, 13, 5, 17, 38, -13, -16, 11, 30, 5, 17, -22, -20, 12, 19, -7, 3, 4, 41, 31, 10, -17, 19, 12, 28, 22, 24, 27, 16, 8, -3, -9, 14, 22, 7, -4, 23, 10, -5, -13, -20, 5, -5, 5, 3, 12, 38, 40, 19, -10, 12, -6, 16, 1, 32, 12, 40, 30, 26, -32, 2, 39, 14, 5, -13, -11, -1, -1, 7, -33, 3, 2, 14, 18, 14, 9, 18, -4, -12, 0, -11, -3, -12, 17, 19, 61, 34, -10, 38, 62, 8, 4, -3, 14, 24, 2, -2, -9, -24, 8, 15, 20, -6, 7, -5, 6, -9, -23, -13, -14, 3, -4, 28, 22, 3, -19, 30, 38, -4, 10, -16, 4, 3, -2, 0, 10, -15, 6, 15, 7, 14, 25, 2, -9, -1, -10, -28, -31, -34, -11, -34, -57, -36, -16, 19, 35, -12, -2, 17, 18, -14, 15, 35, 11, 8, -15, 1, -5, -6, -8, -24, -1, -10, -15, 2, 5, -43, -40, -32, -35, -37, -5, 9, 31, 10, 17, 17, -14, 2, 35, 13, -19, 7, 15, 21, 11, -5, -52, -45, -95, -51, -4, -27, -12, -40, -57, -31, -42, -28, -8, 29, 24, 19, 18, -1, -11, -12, -23, -12, -18, 20, 48, 16, 41, 26, -8, -58, -16, 70, 63, 18, -4, -5, -59, -39, -10, -12, 9, 12, 13, 15, -12, -15, 4, 7, -4, -2, -1, 14, 5, 13, -1, 8, 19, 17, 16, 36, -23, -3, -29, -19, 5, 8, 3, 16, -6, 8, 4, 3}, { 1, 13, -11, 8, 12, 9, -7, 4, 14, -1, 10, -8, -23, -7, 27, 11, 19, -14, -3, -5, 5, -3, 8, 13, 16, -8, -16, 10, 2, -8, -9, 17, -18, -13, 12, -10, 8, -2, 3, 13, 16, 3, -25, 27, 21, 8, -16, -5, 22, -12, 2, 19, -10, -9, 12, -3, -18, 2, -11, 23, 16, 16, -9, -14, -1, -20, -23, -10, 5, -32, -29, -27, 22, 1, 2, -34, -3, 6, 10, 28, 3, 20, -9, 4, -1, -3, 4, 30, 24, -7, -25, -11, -6, 10, 23, 20, 9, 36, 7, -17, -4, 0, -11, -12, 12, 29, 25, 12, -18, 14, -35, 12, 11, 3, -17, -2, -7, -29, -13, -16, -28, 27, 2, 13, 25, 11, 13, 15, 11, 39, 19, 23, 3, 14, 12, -15, -1, 11, 3, -1, -6, 11, -20, -14, -11, -46, -6, -5, -9, -12, 7, -3, 8, -3, 30, 18, 23, 39, -10, 5, 11, 27, 26, -36, -9, 17, 31, -3, -3, -8, -18, -36, -10, -42, -26, -20, -10, -1, 1, 24, -5, -11, -9, 2, 16, 4, 12, 11, -18, -17, 12, 6, 3, 15, 20, 11, -1, -12, -3, -30, -35, -17, -32, 1, -21, 10, 18, 9, 9, 11, 10, 23, 5, -11, 17, 2, 3, -5, -1, -1, 12, 40, 0, -11, -13, -7, -15, 11, -35, 4, 13, 8, 0, 14, 15, 19, 28, 22, 18, -3, 31, 10, 26, 18, 22, 14, 13, 16, 35, 14, 9, 23, 6, -30, 8, 4, -6, -15, 10, 7, 10, 26, 22, 4, -1, 11, 16, 3, -5, 11, 15, 13, -8, 12, -11, 3, 17, 27, 25, -16, 7, -34, -6, -16, 11, 27, 40, 15, 1, 21, 14, 18, -1, 5, 13, 10, -8, 10, -8, 8, 7, -3, 3, 28, -1, -13, 6, -6, -7, -33, -31, 7, 29, 0, 14, 12, 9, 15, -5, 16, -13, 5, -10, 0, 0, 4, -13, 17, -3, 22, 4, 34, 30, 23, 34, -8, 11, 3, -6, 25, 26, 2, -7, 4, 0, 9, -12, -6, -4, -1, 15, 8, 3, 13, -10, 3, 17, 9, 22, 37, 38, -12, -3, -45, -1, 6, -18, 5, 31, -18, -5, 14, 9, 11, -9, -9, -3, 3, 2, 15, 1, 12, 9, 34, 19, 1, 35, 0, -5, -4, 4, 24, -8, -5, -27, -6, -14, 16, 20, 9, -5, -5, 8, 0, 1, 42, 29, -7, -16, -12, 6, -14, 3, 2, 24, 4, 4, 12, 3, 0, 9, 0, -40, 9, 18, 9, 5, 10, 27, -9, 27, 22, 8, 28, 27, 11, 16, -16, 4, 0, -19, 4, -22, 22, 11, 9, 2, 23, -22, -9, -9, 5, 20, 18, 21, -5, 11, 15, 22, 2, 15, -7, -3, 0, 1, -8, -14, -8, -20, -19, -4, -11, -22, 46, 9, 38, -12, 3, -4, 0, 25, 15, -5, 8, 13, 0, 11, 26, 13, -8, 1, -6, 19, 5, -4, -5, 0, -4, -9, -24, -26, 2, -7, 35, 10, -1, -18, -2, 15, 21, 22, 21, 25, 10, 10, -1, 14, -2, 5, 26, -1, 17, 5, 9, -11, -21, -2, -5, -1, -12, -26, -30, 7, 3, 15, -25, -9, -5, -5, 3, 14, 17, 31, -16, -10, 16, 3, 4, 18, 6, 3, 1, 4, -11, 4, -20, 2, 11, -18, -27, 10, 23, 5, -4, 17, 21, 3, -9, -11, 13, 0, 14, 10, 12, -2, 25, 6, -2, 29, 11, 19, -30, -11, -14, 1, -19, 12, 14, 6, -16, -15, -7, 19, -4, 26, 4, 11, -9, -1, 2, -6, 13, 4, 13, 12, 25, -15, -4, -13, -31, 13, -18, -4, 1, 57, 15, 6, -3, 4, 28, -1, 4, 13, 23, -11, 13, 12, 5, -2, 29, -1, 5, 21, -1, -16, -13, -7, -39, -2, -15, 3, -6, 36, -11, -12, -5, 0, 23, 11, -17, -19, -24, 8, 8, -10, 0, 22, 13, 1, -1, 32, -11, 9, 2, -8, -28, 10, -2, -12, -1, -10, -7, -10, 12, -1, -12, -16, -45, -45, -36, -16, 0, 19, 25, 28, 32, -19, -9, 2, -41, -7, -14, 9, -21, -9, 12, 8, 5, 1, 14, -1, -10, 44, 1, -59, -69, 12, -19, -28, -19, -1, -24, -15, 4, -11, 11, -3, -6, 14, 24, -1, 8, -7, 1, -2, -2, 7, -7, -12, 4, -1, 3, -10, 9, -13, -28, -22, -15, 6, 30, 23, -15, -14, -21, -9, -3, 22, -9, 16, 5, -26, 22, -6, 4, 18, -10, -4, -11, -6, -12, 5, -19, 18, -2, -14, -15, -16, 4, 15, -13, 14, -1, -20, -34, -16, 8, -30, -10, -8, -19, -6, -9, -15, 1}, { 1, -16, 3, -4, 15, -11, 5, -4, -8, 8, -2, -5, 21, 5, 4, 3, -8, -2, 14, -1, -10, 14, 0, 14, -9, -18, 4, 11, -15, 19, -4, 2, 1, 10, 27, 10, 5, 7, 14, 10, 9, 9, 14, 12, 28, 9, -14, 20, 14, -3, -11, 5, -2, -3, -6, 17, 7, 6, -14, 19, -6, -4, 21, 18, 32, 51, 64, 38, 37, 24, 29, -2, 17, 11, -15, 8, 7, -3, -9, 21, 30, 22, -13, -4, -15, -10, 20, -10, -7, 8, 22, -2, -5, 17, 9, 12, -5, 27, 27, 7, 8, 23, 2, 12, 18, 8, -14, 18, 29, -27, -2, -18, 14, -8, -6, -23, 9, 25, 22, -8, 7, -8, -6, -10, 5, 0, 5, 4, 7, 0, 6, -6, 3, -28, -25, -16, -18, -31, -19, 34, 1, -12, -8, 22, 3, 15, -5, 4, 26, -6, 9, -13, -20, -7, -38, 2, -5, 10, -7, 8, -22, -16, -9, 5, -10, -7, 19, 30, 0, 26, 6, 11, -17, 15, 1, 4, 7, 11, 0, -17, -1, -34, -58, -29, -3, -5, 10, -5, 14, 21, -5, -31, -47, -28, -4, 11, -8, 12, 13, 12, 40, -3, -10, -2, 17, 18, 23, 14, 7, -10, -45, -27, -11, 21, 15, 31, -1, 25, 27, 5, -35, -32, 0, 31, -11, 4, -18, 4, 30, 1, -6, 23, 33, 25, 33, 19, 11, -31, -17, -13, 4, 7, 8, 20, -2, -9, -2, 15, -40, -35, -22, -7, -2, 13, 7, -4, 1, 18, -31, 24, 36, 1, 22, 14, 22, 1, -29, 1, 27, 22, 21, -4, -1, -27, 22, -4, -56, -23, -14, 13, 5, 18, 25, -30, -14, 1, -24, 11, 5, 11, 12, 3, -14, -20, -26, 19, 21, 10, 16, 1, -36, -19, 1, -6, -36, -27, -23, 8, -1, 15, 0, -30, -27, -25, -24, -1, 3, 4, -24, -31, -28, -42, 6, -5, 20, 25, 15, -19, -36, -11, -6, 2, -29, -13, -40, -20, 11, 5, -6, -44, -40, -25, -44, -17, -23, -25, -40, -24, -7, -21, 5, 7, 8, 18, -7, -44, -8, 11, 4, -24, 28, 23, -23, -6, 7, -7, 2, -23, -52, -41, -55, -52, -6, -29, -15, -38, -5, 8, -3, -37, 1, 1, -5, -16, -2, 6, -8, -3, 33, 13, 11, 21, -13, -17, -17, 8, -18, -31, -52, -12, -7, -10, 0, -5, 11, 1, -5, -23, -25, 6, -8, 1, -21, 14, 1, 3, 36, 28, 25, -1, -2, -15, 0, 2, 14, 5, -17, 8, -2, 12, -10, 36, 12, 34, -24, -25, 2, 17, 5, 22, -16, 25, 12, 43, 13, 16, 31, -1, -18, -18, 2, -7, 6, -16, 0, 26, 1, 2, 29, 25, 28, 31, -16, -25, 3, -2, -2, 14, -17, 33, 16, 9, 45, 36, 20, 12, -1, 6, -7, -3, -16, -7, -7, 3, 13, 15, 20, 15, 30, 9, 4, -30, -7, -7, 22, 13, 9, 24, 31, 7, 12, 10, -7, 23, 9, 3, -5, -21, 21, -32, -8, 30, -3, 27, 11, 28, -3, 7, 0, -1, 13, 28, 25, -11, -20, 10, 25, 18, 1, 19, -9, 1, 1, -22, -7, -2, 1, 3, -25, 7, 5, 6, 2, 13, 5, 0, -2, 22, 12, 14, -14, -8, 0, -14, 14, 3, -1, 21, 25, -1, -15, -4, 7, 19, 16, -11, -21, 16, 10, -4, 4, -8, 6, 14, 11, 27, -1, 20, -19, -18, 12, -3, 11, 0, -25, -4, 18, -7, -18, 15, 4, 28, 10, -14, 8, 12, -4, -26, 8, 17, 22, 27, 7, 15, -2, -6, -9, -16, 14, 14, 20, -5, -15, 19, 36, -7, -12, -12, 19, -10, -4, 30, 23, 7, -15, 16, -10, 11, -2, -4, -6, -20, 8, -20, -35, -20, -25, -9, 11, 1, -26, -4, 52, 11, 7, -9, 9, -13, -2, -9, 5, 27, -18, 14, 4, -3, 10, -5, 1, -7, -2, 6, -11, -12, -19, -16, 10, -23, -23, -5, 35, -4, -3, -8, 1, -27, 25, 0, -4, -20, -31, 3, -18, -16, -13, 25, -7, 2, 17, 13, 5, -10, -35, -27, -34, -24, 21, 19, 0, -17, 17, 4, -26, -7, 44, -6, -33, -8, -5, -23, -29, -9, 8, 13, -2, 23, 6, -2, 1, 1, -30, -32, -13, 4, 7, -8, -6, -10, 13, 16, -11, 7, -24, -32, -38, 18, 25, -14, 2, -12, 1, -11, -2, 4, 0, -11, -26, -15, -40, -49, -29, 21, 24, -4, -12, -17, 7, 3, -8, -11, -11, 18, -8, -11, 20, 22, 17, 17, -1, 10, -13, -21, 4, -5, -30, -15, -24, -5, -7, 11, -10, -2, -4, -2}, { -13, 16, -1, -8, -6, 15, -2, 1, 2, 14, -4, -14, 4, -5, 3, 18, -7, 9, -10, -12, -9, -16, 8, 4, -16, -7, -17, 12, -3, 3, 7, 5, 6, -20, -9, -18, -11, -9, -21, -3, -21, -29, -45, -23, 15, 12, -20, -40, -40, -20, -14, -30, 6, 14, -8, 7, -4, -13, 13, 39, 5, -21, -25, -5, 7, 5, -19, -14, 11, -44, 7, -15, -12, 7, 11, -21, -11, -5, -29, -10, 9, -1, -18, 12, -11, -10, -3, 30, 13, -24, -27, -14, -12, 14, -17, -4, -14, -8, -24, 1, -15, -12, -24, -32, -6, 38, -4, 14, -8, 28, -5, 16, 9, -7, 6, -23, -23, -35, -5, -1, -39, -9, -17, -27, -14, -33, -40, -3, -24, 7, -20, -27, -6, -17, 3, -10, 42, 34, 32, 10, 10, -9, -15, -8, -15, -14, -12, -11, 35, 7, -10, 16, -13, 21, 8, -18, 0, -7, -6, -26, -32, -3, 3, -36, -19, 11, 18, 25, 12, -18, 28, 8, 2, 20, -15, 22, -8, 6, 23, 15, 19, 24, 21, 3, -3, 30, 9, 21, 5, 16, -10, -22, -13, 1, -3, -9, -10, -12, 23, 11, -28, -11, 19, -30, -8, 8, 31, 20, 14, 3, 8, 24, 13, 29, 48, 33, 17, 23, -6, -7, 2, 13, -16, -22, 5, 7, 0, -4, -37, -23, 27, -26, 18, 14, 1, 33, 14, 23, 27, 32, 43, 35, 24, 11, 39, 25, 20, 10, 3, -18, -13, -5, -14, 23, 0, 2, -1, -11, 31, 9, 9, -7, 8, 21, 26, 17, 6, 11, -1, 25, 36, 9, 10, -16, -17, 1, 31, 29, -10, 39, 11, -17, 11, 6, 3, 15, 46, -12, -18, 0, -14, 13, -9, 15, 11, -14, -3, -20, -1, -25, -26, -7, -14, 7, 12, 15, 5, 3, -2, 14, 12, -14, 9, 13, 24, 23, 14, -10, -12, -20, -13, 3, -13, -24, -2, -13, -26, -1, -20, -23, 10, 17, 25, -2, 18, 2, -16, 9, 16, -11, 19, 5, 2, -4, 22, 21, -8, -22, -32, -3, -11, -26, -16, 5, -12, 3, 7, 1, 13, -13, -22, -10, 36, 11, -7, -7, -14, -1, 10, 13, -16, -4, -23, -16, -1, 0, 13, 1, -22, 6, -12, -16, 1, -2, 2, 14, 15, 8, -34, 9, -2, 7, 16, 10, -3, 23, 30, -16, -27, 6, -11, -9, 8, -17, 3, 6, -3, 12, -19, -15, 2, 3, 14, 7, 3, 8, 7, -6, 23, 24, 14, 13, -31, -22, 21, -4, -6, -7, -25, 6, -13, -7, -2, -17, -1, 1, 11, 11, 11, -16, 21, 17, -21, -3, 10, 6, 4, 19, 2, -33, -26, 2, 27, 5, 17, 9, 13, -9, -5, 21, -2, 4, -19, 9, -6, 21, -9, -1, 19, -12, -7, -1, -10, 18, 24, 20, -8, 0, -7, 7, -20, 19, 35, 18, 19, 6, 4, 26, 7, -12, 6, 36, 6, 17, -12, -16, -11, -6, -27, -16, -2, -5, 16, 10, 11, -13, -9, -19, 27, -7, 29, 16, 25, 7, 5, 21, 9, -15, -9, 8, 28, 10, -18, 14, -11, 4, 9, 12, 6, -18, 19, -3, -12, -3, 10, -17, 26, 24, 20, -14, 14, 2, 24, 17, 4, 14, 7, -8, -21, -14, -2, 17, 16, -8, 5, -4, -19, 12, 8, 23, -2, 12, -1, -31, -12, 2, -13, -22, 17, 11, 0, 14, -2, -8, -19, -6, -17, -30, -15, 1, -29, -21, -4, 5, 11, -6, 10, -14, -18, 17, -42, -23, -9, 10, 2, 2, -11, 2, 6, -2, -15, 0, -9, -23, -8, 4, -26, -17, -44, -34, -18, 3, 11, 14, 17, -11, 0, 3, 13, 12, -22, -6, 11, -20, -13, 10, 18, -12, -3, -10, -13, -25, -13, 2, -6, -25, -36, -37, 13, 21, 14, 7, -18, -12, -7, 1, -8, 12, 1, -9, -15, -21, -1, -27, -3, 2, 6, -24, -7, -27, -13, -13, -10, -2, -19, 4, 16, 46, 27, -14, -27, -16, -7, -10, -9, 3, -13, 24, -1, 3, -12, -32, -6, -15, 12, 12, -11, 28, -13, -27, -20, 1, 30, 4, 32, 29, 44, -14, -3, 0, 17, 11, 21, 18, 25, 12, 15, 20, -26, -29, 21, 5, -8, -15, 12, 9, -6, 2, 11, 24, 18, 40, 42, 36, 39, 27, 8, -8, 7, 16, -1, 3, 22, 70, 54, 44, 38, 18, 28, 18, 29, 33, 43, 13, 46, 11, 17, 64, 39, 26, 29, 29, 7, 15, -4, 5, -2, -4, 10, 6, 8, -21, 9, 13, -7, 23, 40, 40, 24, 18, 34, 15, -15, 12, 10, 5, 1, 24, 13, -6, 10, -8, -9, 4}, { 17, 4, 7, 10, 13, 14, -17, -7, -15, -1, 3, 3, -17, -25, -7, 8, 7, 17, -2, 15, 9, -10, 6, 0, 6, -11, -9, -7, -18, -2, 9, 13, 5, 8, 0, -3, -33, -25, -2, -31, -25, -14, -15, 7, -7, -26, 0, -2, -2, -31, -29, -32, -12, -5, 16, -1, 13, 15, 18, -25, -23, -27, -10, -21, -37, -15, -19, -22, -36, -53, -39, -11, -5, 0, 1, -17, -5, 5, -3, -34, -14, -14, -3, 11, -14, 1, 4, -26, -7, -6, -30, -25, -39, -26, -24, -19, -8, -15, -32, -14, 4, 7, 15, -57, -34, -53, -50, -43, 5, 10, -31, 13, -10, -8, -7, -13, -25, -20, 6, 9, -15, -2, -13, 13, 5, -5, 20, 12, -17, 3, -22, -44, -20, -22, -15, -9, 10, -11, 13, -19, -14, -7, -6, -14, -24, 0, 5, -6, 14, 28, 19, 24, 28, 12, 8, -13, 3, -23, -5, -26, -39, -1, -7, -26, -6, 10, -6, -4, 9, -13, 10, 25, 1, -5, 17, 24, 3, 15, 14, 28, 15, -3, -7, 3, 9, 35, 16, 14, 8, 25, -6, -15, -38, -7, -10, -8, -9, -2, 18, 29, 1, -15, 20, 29, -3, 0, 12, 17, -15, -8, -2, 13, 21, 25, 43, 30, 30, 25, 16, -2, -17, -4, 10, -4, 19, 2, -15, -9, -18, 14, 35, 14, 10, -1, 20, -1, -23, -24, 19, 6, 27, 3, 38, 33, 10, 3, -7, -7, -24, -45, -12, -15, 1, 33, 11, 28, 18, 10, 18, 11, 18, 14, -5, 4, -12, 5, 6, 22, 3, 33, 28, -6, 15, 10, -16, -14, -35, -54, 1, 18, 20, 0, 19, -7, 6, 29, 21, 26, 3, 5, 2, -6, -22, -32, -4, 6, -1, 14, -4, -6, 8, 0, -13, -11, -24, -3, -1, 10, 12, 23, 19, 10, -11, 12, 34, 26, 16, 4, 5, -3, 3, -36, 25, 30, 15, -8, -22, -24, -2, 0, 3, 1, -13, 24, -1, 4, 2, 3, 5, 44, 28, 14, -4, 13, 5, -19, -28, -3, -23, -3, -22, 24, -11, 9, -4, -4, -22, 13, 21, 2, -10, 10, 19, 16, -4, 16, 31, 29, 17, -13, -9, -23, 1, -10, -14, 7, -20, -14, -5, 10, -14, -17, -24, -10, -1, 31, 31, -20, -13, 7, 38, 10, 14, -9, 21, 7, -1, 0, -8, -15, -20, -2, -11, 0, -5, -25, 3, -8, -3, -5, 13, 20, 23, 34, 14, 22, -9, 16, 38, 10, 8, -14, -35, 1, -9, -22, -33, -34, -10, 22, 17, 8, -5, 10, 6, -10, -3, 22, 2, 9, 5, 28, 17, 9, -11, -6, 11, 13, -4, -22, -12, -24, -28, -32, -36, -11, 3, 3, 7, 12, 3, -21, 0, 20, 27, 35, 16, 13, 31, 34, 9, 8, 9, -34, 7, -3, -9, -9, 1, -46, -39, -40, -12, -29, -5, 30, 10, 21, 15, -13, -5, 32, 42, 35, 21, 5, 20, 6, 15, -9, 21, 8, 35, -23, 37, -15, -21, -33, -11, -30, -9, -1, 14, 0, 9, -13, -18, -18, -10, 24, 27, 17, -1, 6, -1, 11, -20, 8, 6, -1, 30, -3, -14, -4, 6, -10, -7, -20, -5, -8, 17, -9, -22, -22, -26, -2, 6, 14, 7, 21, -24, -19, -7, -34, -13, -8, 24, -28, -14, -2, 3, 11, -5, -2, -37, -31, -24, -9, -16, -25, -9, -8, -2, 7, 1, -6, 5, -21, -35, -11, -18, -32, -22, 11, 33, 11, 2, 1, 5, 9, 17, 7, -5, -23, -24, -41, -23, -15, -15, -3, -14, -26, -3, 16, -14, 12, -16, -15, -19, -42, -17, 4, -7, 1, -26, 18, -4, -12, 19, -27, -16, 9, -39, -23, -21, -4, 2, -14, -5, 3, 11, 23, 9, 8, -30, -12, -30, -26, 5, 12, 30, 6, -25, 9, -9, 3, -22, -23, -34, -16, -23, -26, -11, -3, -5, 13, 19, 6, 12, 5, 5, -32, -31, -16, 11, -2, 12, 3, 8, -1, -41, -9, 5, 9, 5, -7, -11, -24, -30, -16, -19, 0, 3, 8, 5, -7, 2, 5, -3, -23, -24, 16, 42, -2, -15, -16, -2, 1, -6, -14, 1, 6, -28, 12, 20, -22, -14, 13, 6, -1, 17, 26, 8, -17, 9, 16, 10, -10, -31, 0, 13, -24, -20, -16, -31, 11, -5, 3, 3, -10, 10, -8, 26, 8, -9, -6, 32, 46, 34, 4, -1, 36, 56, 19, -3, 11, 34, 39, 26, 11, 9, -11, -8, 3, 8, 8, -9, -1, 8, 2, 14, 0, 30, 7, 8, 24, 40, 11, -5, 37, 16, 35, 38, 13, 16, 24, 30, 26, 21, 6, 1, 5, 5, -3}, { 12, -3, 5, 11, 14, -7, -17, 13, 5, 9, 12, -11, -10, -8, -5, -18, -18, -5, -2, 15, -6, -3, 6, -12, -6, -14, -14, -17, -8, -12, 15, -3, -7, -11, 1, 9, -7, 24, 8, 1, 13, -11, 13, 11, 20, 6, -6, -2, -15, -16, -7, 13, -10, -17, -10, 11, -13, -9, 0, -15, -12, -9, -2, 2, 2, -7, 14, 9, 42, 16, -6, -5, -4, -20, -26, -5, 1, -12, -7, 11, 11, -6, -7, 18, -8, -6, 7, 8, 6, 0, -6, -16, -11, -5, -3, -29, -4, -30, -14, -9, 3, -18, -34, -17, -24, -18, -11, 15, -9, 15, 17, 17, -12, 14, -1, -5, -17, 3, -14, -8, 13, -24, -24, -17, 19, 12, 0, 12, -3, -25, -34, -49, -39, -27, -39, -6, 7, -10, 4, 4, -3, -16, 17, -7, 10, -12, 7, -14, 4, -26, 3, -18, -20, 9, 14, 37, 17, -34, -7, -47, -63, -21, -55, -15, -10, -31, -7, 5, 9, 2, -24, 1, -35, -21, -1, -4, 24, 9, -9, -7, 26, 7, 28, -9, 12, 4, -12, -53, -53, -37, -16, -22, -16, -24, -40, -9, 11, 10, -7, -4, 4, -4, 2, 24, 18, 15, 5, 12, 12, 39, 8, 25, 9, -6, -30, -28, -29, -56, -54, -21, -39, -30, -13, -29, 2, 21, -18, -5, 13, -1, 11, 0, 16, -3, 7, 21, 13, 15, 16, 26, 17, -5, -30, -31, -17, -33, -70, -16, -39, -29, -30, -18, 14, 8, 29, -47, -5, 35, -10, -2, -2, 1, 7, 23, -1, 36, 24, 32, 18, -17, -29, -25, -34, -34, -19, -27, -62, 18, 20, 31, 8, -7, 29, -56, -26, 3, 12, 12, -6, -9, 8, -3, 12, 24, 43, 52, 38, 12, -54, -56, -50, -23, -33, -27, -3, 21, 34, 46, -4, -9, 25, -24, 0, 32, 19, 26, -20, -20, 17, 12, -19, -6, 23, 20, 20, 12, -16, -64, -37, 10, 8, -11, -32, -7, -1, 12, -1, 15, 33, -19, 25, -5, 14, 1, 0, -36, -4, 3, -7, 2, 26, 16, 31, 9, -36, -58, -15, 8, 6, -6, 1, 12, 30, 41, 7, 13, 33, 22, 27, -4, -11, -47, -42, -14, -23, -19, -13, 4, 19, 8, 42, 5, -5, -25, -9, 19, 20, 36, -2, 20, 39, -2, -15, 4, 18, 46, 8, 5, -59, -69, -41, -18, 31, -4, -1, 2, 1, 2, 15, -6, 6, -11, 4, 35, 12, 37, -9, 24, 32, 0, -12, 2, 30, 18, 33, 0, -59, -38, -40, -5, 5, 4, -3, 14, 16, -13, 25, -10, -48, -5, -17, -11, -36, 1, -12, 29, 26, 11, -9, 4, 13, 45, 50, 15, -53, -30, -25, 9, 14, 8, -8, 28, 25, 1, -10, -39, -55, -42, -11, -30, -50, 14, -29, 22, 51, 39, 18, -10, -2, -16, 3, -1, -39, -66, -66, -17, -15, -24, 11, 15, 24, -12, -26, -49, -38, -32, -9, -48, -50, -49, -2, 73, 72, 24, 6, 13, 14, -6, 2, -3, -25, -61, -75, -51, -43, -32, -9, 10, 26, -12, -47, -19, -4, -30, -13, -15, 12, 15, 6, 71, 48, 17, 10, 33, 5, -4, -11, 12, -39, -29, -61, -55, -45, 0, 28, 55, 30, -8, -7, -8, -12, 14, 24, -17, 11, 3, -2, 53, 51, 10, 10, -3, -11, -12, -13, -38, -22, -65, -65, -68, -39, 14, 52, 42, 39, 4, 15, -1, -3, -15, 6, 11, -3, -14, 20, 63, 15, -7, 15, -3, 1, 7, 4, -51, -44, -31, -33, -17, -18, 18, 50, 32, 17, 21, -9, 0, -11, 4, 11, -13, 9, 9, 13, 19, 40, -7, 16, -10, -10, 26, -5, -6, -20, -18, -27, 7, 13, -12, -1, 8, 30, 17, 6, -21, 8, 33, 49, 36, 9, 14, 14, 13, 25, 12, 18, 8, -5, 14, 18, -15, -49, -47, -56, -14, 9, 15, 25, 12, 25, -7, 16, 8, 7, 20, 15, 13, 20, 25, 12, 30, 10, 8, -6, -7, -3, 10, -15, -22, -49, -41, -37, -26, -14, -9, 22, -16, 14, 21, -3, 36, 10, 28, 40, 35, 14, 20, 39, 10, 38, 7, -5, 11, 5, 15, 20, 13, -25, -42, -14, -66, -72, -31, -24, -29, 10, 7, 1, 24, -9, -44, -24, 2, -4, 8, -25, 6, 0, 1, 12, 2, -14, -18, -11, 26, -3, 8, -25, 2, -12, 14, 39, 29, 67, 29, -30, -22, -6, -16, -7, -9, -44, -38, -10, -12, -15, 2, -11, -9, -3, 6, 4, -11, -10, 8, 23, 3, 27, 33, 21, 53, 2, -19, -12, 36, 51, 48, 31, 12, 15, -13, 18, 12, 2, -13}, { 3, 15, 10, -12, 8, -12, -12, 6, -5, 3, 3, -12, -13, -15, -7, 12, 0, -2, 13, 5, -9, 15, 0, -13, -11, -13, 7, -10, 1, -5, 2, 12, -6, -3, 7, 8, -20, -6, -11, 1, 16, 10, -40, -36, -3, -10, 24, -18, 9, -1, 17, 9, 16, -10, 2, -15, -10, 16, 9, -11, -1, -17, -9, -12, 28, 13, 27, 13, 20, -6, 15, -2, -11, -19, -22, -26, 8, 6, 15, -17, 14, -3, 15, 10, -11, -2, -17, -17, -10, 8, 2, 29, 20, 23, 24, 35, 24, -7, 18, 7, 22, -14, -27, -8, 11, 7, -8, -9, -8, -25, 0, 13, 11, 4, 17, 21, 16, 47, 4, 27, 26, -1, 27, -2, -8, -2, -8, 8, -17, -29, -32, -19, -9, 7, 14, 12, 1, 14, 2, 7, -18, -12, -8, 9, 21, 20, -11, 10, 4, 13, 29, -3, -15, -4, 5, -7, 4, 5, -21, 11, 3, -33, -37, 19, 11, 1, 6, 16, 0, 13, 14, -1, 34, -1, -4, 5, -7, 35, 11, -14, -16, -34, 7, 25, 3, -5, -14, -18, 3, -25, -10, -22, 2, -6, 14, 25, 12, -12, 27, 0, -5, 8, 0, -6, -13, -13, -22, -12, -11, 5, 6, 22, -5, 9, -8, 0, -27, -31, -21, -33, 16, 20, 13, 15, -16, -8, 29, -26, 11, 25, -17, -20, -2, -23, -16, -13, -5, -9, -1, 3, 7, 13, 7, -18, -26, 14, -20, -37, -31, -12, -7, -25, -1, -39, -11, 12, 19, 28, 2, -12, -25, -10, -4, -25, 6, 3, 24, 9, -5, 1, 4, -15, 30, -8, -23, -24, -13, -34, -2, 11, 4, -22, -25, 37, 18, 23, 20, -6, 14, 0, 4, -8, 12, -2, -21, -3, -12, 10, 14, -8, 14, -20, -4, -14, -27, -20, -22, -21, -1, 4, -21, 4, -13, 6, 8, -2, 7, 25, -8, -1, -15, -14, -22, -34, 23, 30, 19, 32, 19, -31, -31, -18, -49, -7, -39, -23, -3, 5, -8, -13, -9, -3, -4, -13, 4, -16, -5, 3, -28, -4, -21, 1, 23, 0, 31, 26, 10, 9, -2, 18, -16, -33, -28, -44, -25, -20, -2, -32, 5, 3, 15, 7, 20, -11, 0, -28, -2, 16, -10, 16, 15, 36, 7, 14, 13, 7, 35, 22, -3, -24, 1, 30, 2, -2, -37, 5, 4, 6, 14, 5, 16, 17, -5, 9, 11, 3, 5, 21, 22, 0, 23, 25, 9, 8, 13, -5, -2, 43, -6, -22, 8, 26, -23, 9, 6, 19, 13, -4, -2, -16, -17, -9, 2, 14, -13, 16, 6, 23, 10, 35, 6, 12, 0, -11, 7, 49, 25, 30, 26, 8, 33, 20, 16, 14, 20, 17, 8, 1, -13, 24, 5, -2, -26, -2, 3, 15, 20, 9, 24, 6, 24, -14, 22, 47, -3, -9, -16, -4, 24, 20, 19, -3, 0, 6, 16, -12, 1, 17, 13, -5, 3, -8, 0, 28, 17, 33, 0, 18, 23, -15, -46, 23, -8, -2, 18, 0, 3, 34, 11, 5, -5, 4, -8, -5, -12, 1, 11, 3, 7, 36, 31, 19, 8, -6, -21, 17, -2, 3, -26, -21, -31, -2, -2, -12, -23, 31, 38, 49, 22, 27, -4, 12, 11, 16, 11, -1, 17, 22, 28, 18, 27, 9, -2, -5, 14, 30, 0, -13, 13, 12, 2, 9, -1, 43, 22, 11, 0, -1, -1, 18, -4, 19, 12, 15, 40, 20, 12, 19, 18, -1, 1, 15, -7, 3, -3, -3, -5, -17, 4, 12, 37, 14, 15, -4, 8, 22, 30, 0, -10, -18, 7, 35, 19, -4, 14, -27, -17, 4, 7, -12, -1, -13, -11, -19, -33, -15, -3, -14, 18, 18, -7, 7, -30, -7, -18, 1, -18, 8, -13, -5, 2, 2, -1, 4, -23, 0, -21, 8, 18, 4, -13, -16, -24, 1, -11, 9, 12, 28, -17, -30, -12, -15, -20, -15, -20, 0, -19, -10, -17, 7, -22, -3, 20, -1, 4, 21, 14, 2, 21, -1, 8, 12, 5, -4, 5, 41, 13, 13, 35, 14, -2, 11, 8, -8, -20, -2, 0, -27, -3, -10, -9, -11, 17, 20, 15, 6, -8, 9, -3, -5, 10, 8, 37, -10, -3, 25, 16, 7, 19, -8, 20, -7, -17, -18, -11, -16, 2, -15, -12, 9, 11, 8, -8, -26, -30, 20, 7, -4, -10, 13, -8, 0, 2, 38, 36, 23, -2, 1, 19, 4, -20, 16, 17, 6, -6, -14, -16, 0, -8, -7, -2, -9, 10, -24, -8, -4, 18, 18, 18, -16, -15, -29, 17, 18, 2, -15, -25, 19, 20, 1, 18, 44, -13, 0, 10, 6, -5, 0, -2, -32, 1, 8, -11, 5}, { 7, 10, -16, -5, 5, 4, -1, 17, 1, 7, -6, -16, 13, 0, 6, 10, -12, -14, 13, -12, -3, -11, -6, 1, -2, -17, -13, -10, 5, 12, -17, 4, 4, 3, 3, -1, 35, 1, 21, -2, 24, 8, 15, 15, -12, -20, 30, 9, 40, 7, 27, 17, -12, 2, 17, 10, -9, -1, -8, 11, 6, 31, 30, 29, 8, 6, 35, 37, 6, 22, 8, 21, 3, 13, 3, 34, 17, 31, 23, 39, -17, 1, 3, 16, -13, 11, 18, 12, 2, 30, 29, 23, 19, 16, -1, 10, -1, 12, -12, -5, -3, 24, -3, 1, 17, 11, 43, 47, 14, -38, -14, 18, -2, -17, 21, 10, 26, 19, 14, 20, 26, 19, 0, -2, 18, 34, 31, -5, -5, -24, -19, 15, 19, -15, 0, 21, -4, -20, 4, 1, 0, -12, 38, -11, 37, -6, -4, 17, 6, 24, 14, 19, 25, 17, 5, 19, 6, -8, -23, 16, 7, 12, -17, -34, -15, -3, 49, 27, 2, 15, -11, 14, 4, 0, 20, 22, 2, 0, 6, 20, 25, 7, 17, 12, 4, 0, 11, -2, -14, -12, -30, 6, -20, -5, -2, 8, -18, 42, -11, -7, 25, -11, -8, -10, -1, -7, 10, -20, -18, -21, -22, -5, -12, -24, 14, -8, 5, -20, 9, 11, -35, -14, -25, 41, 1, 2, -11, 26, 17, 1, 9, 27, 23, 12, 9, 2, 10, 0, 5, -8, 3, -2, -6, -1, 8, 12, -12, -6, -32, -20, -13, -5, -2, 30, -15, 32, 19, 1, 23, -11, -6, -20, -24, 2, 6, 1, 8, 1, -2, 5, 2, -1, -7, 14, 11, 15, 13, 6, -4, 2, -9, 3, -35, -1, 23, -4, -9, -11, -13, -2, 16, -12, -25, 6, -7, -1, -9, 18, 0, 14, 24, 28, 10, 23, -7, -9, -15, -6, -6, -7, 25, 51, 32, 24, -14, 5, 18, 14, 15, -17, -22, 31, 30, 38, -2, -12, 8, 5, 29, 17, 24, 16, 17, 22, 32, 21, 16, -16, -11, 35, 30, 23, 7, -2, -5, 4, -15, 0, -6, 22, 46, 28, 39, 34, -17, 5, -8, 28, 0, 25, 29, 13, -13, 11, 1, 16, 24, 28, 38, 8, -29, -7, 13, -4, -11, 11, -4, 5, 35, 43, 32, -7, 17, 19, -10, -5, 19, 16, 1, 0, -22, -25, -8, 24, 2, 48, 16, 6, -40, -1, -7, 4, -7, -7, 1, 28, 16, 15, 4, 21, 9, 5, -10, 20, 18, -19, -25, 26, -40, -21, -17, 5, -20, 14, -8, 3, -22, -11, 7, -4, 9, 17, 2, 2, 36, 10, -10, 2, -9, -10, 13, -25, -14, 12, -4, 4, -8, -9, 11, 21, 8, 1, -41, -12, 19, -2, 34, 17, 19, 27, -18, 9, 26, -16, -7, -22, -11, -11, -32, -22, -21, -18, -19, -7, -45, -19, 17, 18, 10, -24, -28, 8, 17, -2, 24, 4, 20, -2, 17, 6, 27, -15, 17, -3, -8, -6, 0, 2, -5, 8, -3, -10, 4, -46, 9, 17, 12, -42, -15, -20, 7, 14, 18, 15, 1, -9, -14, 22, -13, -30, -27, -19, 0, -12, -10, -30, 7, 15, -26, 12, -5, -12, 18, 2, -20, -9, -33, -37, 5, 12, -14, 3, -3, 0, -13, -6, -9, 5, 0, -13, -10, -11, -18, -4, 2, 1, -29, -29, -1, 0, 14, -26, -9, -27, -24, 0, -19, 9, -19, -14, -19, -29, -7, 5, 0, 17, -23, -11, -7, 5, -8, -4, -6, -22, -18, 11, -11, -5, -15, 31, -32, -14, -14, 11, 14, -4, 0, 13, 5, -15, -9, 9, 20, 19, -1, 25, 7, -19, 5, -20, 8, -37, -11, 1, -40, 0, 12, -10, -36, -13, 27, 26, 23, 16, -12, -2, 6, 20, 18, 6, -15, -13, -11, 16, -26, -20, -14, -9, -35, -48, -22, -2, -38, -8, -8, -16, 23, -48, -1, 10, 11, 22, 0, 5, 3, -30, 1, 4, 7, -11, 25, 11, 3, 23, -18, -28, -2, -29, -29, -20, -28, -17, -13, -6, 9, -29, -7, 32, 37, 6, 22, -15, -5, 29, 4, -15, -20, -19, 11, -28, -2, -14, 3, -25, -26, -50, -19, -22, 5, 9, 6, -15, -2, 1, 29, 30, 31, 29, 35, 7, 39, 17, 11, 10, 18, 1, -6, -1, -21, 43, 7, -13, -35, -39, -33, -10, 13, -18, 7, 4, -1, -16, 10, 52, 74, 41, 48, 67, 28, 27, 26, 36, 26, 14, -5, 27, 28, 35, 65, 29, 50, -10, -24, 5, -12, 19, -9, 3, 17, 19, 18, 2, 24, 18, 5, 27, 37, 35, 29, 42, 59, 56, 14, 17, 13, 19, 12, 24, 36, -24, -11, -17, -16, -12}, { -6, 10, 1, 17, -6, 16, -15, -3, 5, 12, 7, 13, -1, -4, -16, -13, 6, -4, -11, 3, -16, 17, -3, -6, -16, -7, -14, 0, 12, 7, 2, -14, -14, 15, -27, -12, -21, -16, 2, 1, 26, 25, -33, -31, 1, 21, 1, -2, -32, 6, -9, -23, -16, 12, -4, 7, 16, -12, 11, -12, -24, -18, -3, -7, -29, 3, -11, -20, 3, 2, 4, -8, -30, -24, -24, -14, 16, 28, 0, -6, -7, -13, 11, -14, -5, -16, 9, -10, -1, 35, -8, 4, -34, -1, -13, -8, -20, -22, 18, 22, 6, 22, -14, -31, 20, 35, -5, 11, -5, -4, 9, -10, -8, -2, 37, 4, 35, 18, 21, -13, -12, -33, -23, -10, 1, 14, 6, 6, -20, 0, -10, -20, 18, 10, 12, 15, 22, 8, 26, 23, -14, -7, 8, -19, 6, 4, 1, -6, -1, -20, -17, -3, 36, 29, 23, 3, -4, 13, -4, 10, -2, -14, -6, -12, 36, 40, 24, 5, 6, -9, -22, -10, 18, 20, -8, -4, 3, -2, 7, 3, -5, 1, -6, 0, 12, 12, 9, 7, -8, -3, 27, -5, -16, -6, 8, 14, -7, -18, 0, 0, 19, 29, -16, -20, -22, 5, 10, 18, -1, 5, -32, -8, -15, 17, -3, 20, 5, 18, 26, 14, 32, 19, -6, 22, 16, -34, 9, -10, -10, -5, -35, -23, 1, 23, 17, 13, -10, 3, -19, -17, -4, -14, 11, -2, -3, 38, 21, 13, 8, 17, 4, -8, -4, -16, -18, -22, -36, -10, -8, -7, 5, 1, -1, -29, -28, -6, -11, -9, -17, 2, -29, -10, 35, 29, 19, 13, 37, -19, -1, -26, 13, -5, -4, -7, -12, -10, -21, -8, -8, 5, -26, -32, -13, -27, -2, -7, -8, -7, -2, 4, 19, 26, 27, 45, 9, -13, -14, -34, 6, -10, -8, -3, -20, -45, -18, -14, 23, 7, -15, 1, 7, -21, -13, -20, -26, -2, -19, -5, 16, 16, 20, 24, 35, 39, 25, -17, 18, -18, -7, -30, -24, -7, -19, -3, 11, 24, 44, 42, 20, -7, -19, -16, 7, -23, 0, -5, 7, 24, 35, 49, 55, 17, -5, -17, 11, -8, -29, -19, -24, 5, -1, 0, -6, 21, 35, 47, 15, 4, 0, 8, -9, -24, 32, 24, 9, 5, 27, 18, 2, 24, -13, 9, -19, 3, -14, -43, 4, 36, 25, 5, -5, 5, 36, 37, 35, 36, 13, 8, -18, 17, 32, 4, -10, 34, 8, 11, -10, 6, -35, -1, 15, 15, 10, -21, 4, 1, 20, -18, -6, -20, -6, 7, -5, -9, 7, 6, -7, 27, 41, 36, 18, 4, 12, 2, -5, 6, 13, -17, 6, 9, 24, -17, -20, -8, 1, 11, -16, -32, 5, 17, 10, 5, 9, -4, 24, 21, 24, 17, 16, 11, -9, -20, -12, 3, -18, 0, 5, 2, -5, -8, 13, -3, 10, 21, 2, -4, -27, -10, -18, -25, -2, -17, 16, 42, 30, 16, -16, -11, 11, 16, -10, -25, -9, -13, -2, 7, -1, -23, -6, 4, 11, 2, 15, -33, -46, -36, 0, -4, -10, 20, 11, 29, 15, -14, -12, -10, 7, -1, 22, -28, -10, -18, -18, 30, 10, 20, 23, 22, 30, 36, 22, 1, -23, -18, -25, -20, -5, 11, -17, -5, 0, -18, -3, 6, 12, 20, -19, -33, -26, -10, 1, 33, 5, 22, 0, 43, 33, 33, 8, 24, -5, -21, -1, 1, -2, 0, -13, 4, -12, -35, -13, -18, -2, -25, -25, -36, -16, 15, 2, 1, 10, 0, 24, 28, 21, 8, 21, 27, -10, 0, 5, 7, 2, -3, -32, -8, -39, -6, -41, -35, 13, -10, -37, -16, 41, -13, -20, 14, 23, 29, -25, -29, 19, 21, 7, 12, 35, 17, 12, 19, -3, -11, 10, -21, -18, -22, -33, -12, 16, 14, -19, -18, 19, 15, -1, 8, 13, 39, -10, -8, -10, 18, 14, 3, 38, 13, 10, 19, 16, 2, -11, 6, -7, 0, -47, 1, 6, -8, -4, -21, -30, 11, -5, 8, 3, 28, 8, 5, 6, 5, 7, 11, 6, 18, 13, 21, 26, 36, 20, -1, 3, -28, 6, -20, -3, 15, -1, -18, -16, -3, 17, 13, 13, -21, -26, -14, -4, -4, -9, -18, 25, 1, -41, 3, -7, 17, 7, 8, 10, 2, 6, 4, 12, 4, -21, -13, -12, 0, -12, 14, -13, 0, 20, 9, -2, -2, 6, 5, 5, -5, -9, -49, -16, -15, 2, -2, 27, -41, -9, -14, -26, 3, 5, -18, 10, -17, 7, -1, 14, 1, -14, -42, -12, -3, -25, -28, -49, -15, -13, 6, -37, -10, -27, -9, -23, -5, -16, -1, -5, 5, 7, 15, 18, 16}, { -1, -3, 13, 9, 10, -18, -17, 11, -14, 7, 13, -19, 14, -23, -21, 16, 16, 12, 10, 0, -7, -13, 0, -3, 6, -9, 14, -2, -5, 5, 1, 14, -15, 15, 5, 1, -11, -4, -11, 4, -3, -5, -26, -12, -13, 3, 11, 21, -26, 7, -9, -3, 5, -1, -13, 17, -6, -6, 7, 2, -5, -23, -15, -7, 10, -34, -15, -4, 2, -37, -15, -4, 20, 0, -21, -3, 8, -22, 2, -44, -21, 14, -9, 16, -10, 3, -15, -10, -33, -3, 0, -15, 10, -27, -8, -16, -23, -30, 10, 33, 11, 24, 25, 26, 25, 11, 9, 30, 0, -24, -12, 2, -5, 2, 14, 13, -29, -10, -30, -14, -27, -34, -19, -22, -2, -5, -24, 10, 45, 8, 10, 33, 37, 26, 40, -6, -5, -5, -19, 8, -5, 2, 18, 36, 13, -12, -23, -3, -1, -3, -34, -10, -11, -9, -18, -18, 11, -2, 21, 17, -18, 3, 18, -11, 22, 6, -1, 1, 15, 23, 14, 38, 14, 20, 28, 3, 15, 28, 11, -16, -12, 7, -19, -5, -5, -18, 14, 17, 0, 51, 9, -2, -17, -2, 0, 25, -5, 60, 4, 48, -19, -11, 14, 4, 17, 34, 5, 12, 28, 2, -18, -13, -24, 8, -8, 32, 28, -1, -4, 13, 12, -11, -20, 22, 11, -1, -5, 12, 9, 23, -1, 5, 12, 18, 24, -2, 13, 10, -25, -34, -29, 2, 27, 28, -3, -5, 20, 3, -38, 1, -30, 9, 1, 41, 23, -10, -4, -12, -9, 1, 23, 20, -21, 20, -8, -15, -24, -34, 2, 31, 32, 25, 47, 32, 5, 8, -65, -50, -18, 11, -11, 38, 17, 6, 12, 4, -24, -19, 17, 7, -24, 2, -28, -10, -23, -43, -7, 18, 40, 34, 36, 22, 10, -31, -91, -35, -42, -1, -16, 1, 7, 28, -6, -3, -11, -29, -27, 5, -16, -18, -17, -10, -17, -12, -11, 14, 32, 29, 36, 10, -8, -24, -68, -50, -45, 10, 9, -2, 0, 15, -24, -19, -30, -13, -14, -43, -16, 17, 10, 11, -30, 1, 24, 3, 11, 2, 4, 0, -4, -42, -22, -48, 4, -14, -16, 8, 20, -2, -1, 11, 1, -14, 4, -20, 12, 30, -11, -7, 9, -11, 4, 5, 37, 3, -19, -20, -15, -49, -30, -16, -28, -12, -14, 5, 19, -19, -1, 15, -13, -22, 16, -1, -8, 0, 11, -8, -13, -15, -10, 6, 5, 0, -23, -6, 7, -25, -33, -19, -22, 11, 12, 18, 13, -24, 3, -18, -20, -4, 1, -13, 8, 9, -2, -14, 22, 10, -25, -1, 2, -4, 9, 3, 13, -2, -30, -31, -1, 15, 7, 17, 13, 9, 26, -33, -1, 14, -18, 2, 10, -23, -13, 21, 19, 15, -15, -15, -13, 9, -7, 17, -17, -30, -10, -49, -38, -16, 3, 3, -2, 5, 30, -23, -15, -7, 5, -19, 11, 27, 5, 22, 23, -6, 0, -10, 4, 12, -20, -1, -20, -22, -4, -39, 0, -6, -21, 19, 12, -16, 1, -16, -23, -21, 3, 35, 14, 15, -8, -7, 20, 16, -2, -9, 4, -3, -17, -3, 7, -30, -20, -28, 17, -14, -7, 9, 6, 22, 16, 18, -5, -1, -2, 19, 14, -3, -18, -6, 4, -1, -2, -6, 2, -15, 2, 8, -2, -29, -34, -10, -19, 1, -3, 9, 36, 25, 24, -13, -22, -16, -15, -16, 12, 9, 13, 11, 14, 8, -14, -14, -19, -12, -2, 8, -8, -44, -12, -28, -8, 2, -15, 2, -2, 22, -24, -11, -4, 4, 7, -21, 0, -5, -6, 16, -5, 17, -19, -29, 1, 20, -10, 4, -2, -31, -19, -16, 31, 5, 10, -3, 7, -6, -13, -8, 8, 19, -4, 3, -17, 9, 6, 2, -4, 22, -9, -27, 4, -20, -16, -8, -7, -24, -8, 9, 24, 5, -1, -12, 12, -11, -7, -17, 6, 31, 1, 3, -4, 12, 4, 19, 11, 0, -15, -4, -6, -30, -30, -9, -26, -17, -32, -15, -8, 8, -6, -14, 21, 20, 3, 48, 13, 12, 9, -5, -15, -3, -8, 19, -9, -10, 39, -15, -19, -13, -31, -12, -1, -24, -24, 7, 10, -18, 0, -11, -33, -6, 28, 16, -18, -16, -3, 9, 28, -2, 21, 5, -19, 3, 17, 0, -22, -30, -42, -34, -39, -8, 5, 2, 10, 12, -18, 12, -12, -14, -38, -40, -6, -28, 2, -21, 4, 3, -30, 7, -1, -16, -9, -8, -14, -17, -51, -36, 2, 4, 2, 7, 5, 16, -15, -3, 9, 11, 13, 13, -6, 7, 17, -7, -18, -23, -24, 8, -2, 2, 8, 8, 10, -21, -21, -3, -10, -1, -5, 18, 14, 10}, { -2, 12, 1, 3, -14, -2, -14, -7, 4, 4, 7, -6, 26, 19, 10, -10, 3, 10, -10, -11, 12, -2, 10, 1, 4, 3, -16, -18, -7, -14, -18, -4, 14, 16, 31, 19, 35, 9, 12, 3, -8, 30, 7, 6, -8, 20, 10, 10, -5, 16, 17, 11, 18, 15, 7, -9, 10, -11, 15, -15, -8, 13, 37, 42, 6, 3, 0, 42, 29, 26, 37, 22, 7, 22, -11, 15, -2, -8, 25, 8, -10, 11, 16, 14, -10, 6, -15, -31, 5, 0, 15, 27, 23, 27, 20, 65, 37, 40, 11, 28, -7, -18, -57, -19, -14, -14, 26, 11, 13, -1, -12, 8, 8, 16, 4, 1, -16, -12, -3, -6, -5, 5, 3, 8, 19, 48, 57, 28, 14, -18, -26, -15, 2, -2, 19, -4, 1, 17, -15, -11, 3, 1, 20, -22, 0, -13, -21, 18, 14, 42, 22, 28, 17, -33, -4, -34, -18, -32, -35, -20, -24, -3, 7, -22, -8, -21, -16, 5, -13, -6, 34, 10, 19, 15, 6, -17, -1, 16, 13, 28, -3, -23, -23, -64, -35, -26, -12, -11, -12, -4, -4, 10, -22, -13, 10, -7, 2, 39, 31, 16, 10, -10, -13, -1, 12, 30, 34, 24, -10, -49, -62, -44, -31, -26, 11, -7, -26, 0, -20, 11, -9, 5, 14, -15, -2, 32, 16, 25, 18, 7, -24, -3, -5, 25, 18, 20, -19, -55, -34, -38, -20, -15, -13, -9, -16, -6, -10, 17, 18, 34, -12, -25, 9, 46, 6, -7, 19, -18, -3, -10, 21, 7, 29, 22, 7, -58, -39, -23, -10, 17, -3, -22, 9, 26, 6, 36, 46, 56, 4, 18, -6, 33, -15, -4, 34, 4, -5, -3, 29, 39, 24, 41, -1, -39, -45, -11, 20, 15, 24, 4, 17, 12, 31, 35, 53, 53, -9, 3, 21, 36, 22, 25, 28, 23, 0, 20, 22, 26, 48, 55, 12, -33, -23, 7, 28, 9, 15, 25, 19, 31, 15, -4, 28, 42, -10, 12, 0, 25, 10, 10, -11, -5, -7, 11, 22, 12, 38, 56, 14, -20, -20, 4, 24, 22, 25, 19, -6, 20, 34, -13, 8, 15, 26, 18, -9, 24, 49, 19, 3, 3, 26, 13, 16, 22, 41, 36, -17, -49, -47, -8, -2, 6, 13, 14, -5, 12, 29, 8, -5, -12, 23, -4, -11, -8, 56, 5, 5, 58, -3, -3, 20, 26, 5, 13, -29, -54, -7, -14, 11, 14, 15, -3, 11, 3, 32, 30, 10, -32, -14, 7, 3, 19, 39, 4, -4, 5, 27, 8, 12, -6, 1, -28, -39, -22, 1, -5, -23, -21, 12, 1, -6, -20, -7, -12, -24, -18, -12, 2, 32, -4, 20, 20, 6, 9, -10, -7, -11, -7, -19, -22, -43, -34, -3, 26, -7, 9, -18, 0, -3, 4, -3, -21, -29, -13, -22, -26, 0, 15, -7, -15, 10, -4, -25, -15, -22, 0, -52, -27, -76, -45, 27, 1, 13, -13, 4, -28, -8, 14, -17, -24, -24, 34, -26, -26, 3, 17, 0, -27, 16, -3, -22, -24, 4, -10, -12, -67, -46, 5, 30, 23, -16, -1, 31, -11, -20, -20, 17, -17, 3, 17, -31, -18, 7, 23, 27, -14, 24, -10, -4, -23, 6, -9, -48, -49, -42, -1, 15, 6, 0, -3, 0, -25, 6, 3, -25, -23, -2, -23, 8, 2, -5, 17, -6, -7, -18, -9, -24, -10, -23, -41, -33, -14, 2, 7, 35, 24, 0, -2, 8, -12, -26, -1, -16, -24, -8, 8, 12, -12, -17, -16, -28, -33, -45, -9, -9, -8, -5, -1, -7, -1, -10, 25, 22, 11, -5, 3, 22, -11, 12, 20, 3, -4, -1, 0, -2, 5, -11, -6, 4, -47, -30, -34, 17, -5, 0, 16, -17, -30, -26, -3, -13, 19, 3, 18, 24, 20, -10, -11, -9, -12, -25, -31, -5, 14, -19, -7, -23, -5, -3, -12, -1, -12, 18, 12, -6, -38, 6, -1, 7, -6, 1, 8, 3, -6, -20, 5, -17, -35, -6, -11, 1, 14, -14, 5, 15, 38, 28, 11, 13, -11, 4, 5, -20, 7, 9, 7, 20, 3, 7, 12, 7, 9, 5, -12, 9, -38, 10, -10, -17, -4, 16, -11, -17, -4, 0, -13, -5, 2, 1, -10, -13, -8, 14, 7, 25, 53, 30, 13, 20, 0, -7, 25, 12, 14, 25, -9, 10, 18, 9, -10, 0, -13, -27, -15, -22, -56, -33, -27, -20, -26, 0, 19, -4, 27, -7, -12, 10, -3, -16, -17, 22, -6, 2, -3, 3, -4, 14, -2, 6, 10, 31, 43, 40, 20, 2, 26, 10, -8, 0, 17, -6, -33, -11, 22, -8, -8, 22, 63, 37, 36, -11, 14, -8, 9}, { 0, 5, 7, 13, 8, -1, 17, 11, -15, -1, 0, 5, -9, 19, 16, -4, 18, 13, 16, 3, -10, -5, -10, 4, 16, -11, 9, -13, -11, -12, -3, 17, -13, 12, 10, 5, 5, 7, -15, -22, 1, 11, 20, 27, 18, -9, -25, -7, 0, -11, -17, -27, -1, 12, 4, -14, -12, -18, 11, -17, -10, 6, -7, -35, -12, -25, -3, -2, -14, 8, -3, 1, -20, -14, -11, -28, 1, -18, -8, -37, 1, -9, 3, 18, -16, -1, -12, -16, -14, 9, -5, -21, -5, -6, -18, -37, -6, -16, -48, -31, -22, -35, 7, -1, -32, -29, 6, -6, -19, 0, -29, 12, -9, 0, -1, -17, -25, -31, -11, -26, -18, -30, -17, -24, -8, -52, -26, -40, -1, -4, 23, 4, -5, -23, -16, -15, -26, -4, -10, -1, 0, -1, 3, 8, 7, -16, 4, -24, -23, -27, -60, -14, -32, -35, -37, -20, 2, 4, 8, 9, 17, 3, 3, -32, -20, -20, -2, -12, -5, -20, -25, -1, -22, -41, -46, -40, -35, -50, -49, -26, -25, -10, 1, 20, -9, -7, 10, -6, -1, -13, -17, -26, -1, 25, -11, -9, -17, -21, -17, -26, -11, -24, -44, -67, -18, -50, -16, -22, 10, 21, 4, 21, 35, 19, 26, 1, -9, 7, -18, 1, -16, 3, -9, 6, 12, -19, -7, -24, -20, -32, -43, -7, -22, -4, -11, 3, 21, 11, 14, 10, 11, -2, 17, 13, -10, -11, -11, 8, -2, 21, 31, 22, -4, -34, -13, -5, -19, -16, 6, -13, 0, -1, -2, 2, 13, -5, -6, -2, 15, 12, 8, -4, -11, -26, 16, 29, 17, 16, 29, -12, -12, -6, -21, -6, -24, -31, 0, 10, 34, 20, 23, -4, -4, -17, 19, 18, 31, -8, 18, 21, 4, 10, -1, 3, 14, 6, 8, -4, -11, 3, -9, -66, -63, -7, 16, 42, 35, 31, 3, -4, 11, 30, 11, 15, 23, 6, 10, 14, 1, -5, 10, 36, 28, 21, 38, 3, -10, -27, -9, -24, -8, 9, 21, 25, 18, 31, 7, -6, -18, -3, 19, 0, -2, -16, -11, 6, 27, 26, 15, 7, 27, 2, 16, -26, -6, -15, -13, -10, -34, -12, 2, -4, 22, 28, 6, 11, 22, 2, -5, 15, 1, 9, -15, -7, -18, 29, 26, 3, -15, -22, 28, 35, -12, -10, 9, -3, -41, -32, 7, 2, 12, -16, -9, -9, 10, 23, 22, 24, 11, 17, 4, 1, -15, 21, 0, -19, 26, -8, 54, 26, 17, 4, -19, 3, -15, 12, 0, -6, -8, 6, 7, 10, -5, 6, 13, -15, 4, -9, -12, -26, -17, 11, 14, -24, -7, 7, -5, 38, -15, -9, -7, 8, -43, 4, 3, -8, 9, -12, 4, -1, 1, 11, 11, 12, 3, -8, -37, -49, -40, 4, 24, 15, 17, -8, 20, 40, -9, 3, -6, -11, -24, 7, 28, -28, 5, -15, 24, 32, 31, 31, 10, 0, -20, -38, -47, -43, -18, 11, 2, 3, 24, 38, 24, 43, 34, -17, 8, 1, -9, -23, 9, 3, 14, -7, 19, 18, 15, 31, -8, -21, -16, -19, -16, -5, -33, -8, -7, -5, 39, 40, -11, 21, 4, -5, -41, 15, -35, -16, -26, 2, 1, 20, 18, -9, 2, 27, -11, -16, 4, -12, 2, -4, -25, -21, 25, 48, 48, 43, 22, -9, -8, 5, -27, -12, -50, -44, -21, -1, 7, 9, 19, -3, 9, -9, -22, -3, -23, -9, -3, -14, -2, 10, 4, 39, 25, 51, 10, -12, 12, 1, -24, -46, -58, -47, -4, -19, 0, 2, 6, -16, -35, -13, -26, -5, -20, 7, -13, -10, -21, -13, 16, -1, 9, 4, -18, 4, 15, 3, -14, -17, -31, -31, -2, 1, -19, 11, -16, -9, 8, 3, 26, 3, 25, -7, -16, -28, 11, 5, -20, -7, -23, -25, -37, 2, -4, 5, 1, -18, -27, -10, -11, 4, -2, 16, -4, 11, 3, -5, 21, 3, 42, -2, 3, 12, -21, -40, -21, -8, -28, -21, 21, 7, 16, 7, -22, -27, 0, -42, -22, -19, 11, -4, 7, 1, 3, 15, -2, 0, -14, 1, -1, 4, -49, -41, -27, -24, -22, 14, 28, 11, 2, 5, 11, -7, -39, -41, -5, -7, 1, -20, -29, 1, -2, 22, 7, 21, 36, 15, 11, -6, 33, 27, 3, -30, -3, -7, 0, 16, 2, 1, 7, 28, 19, 26, 13, -15, -21, 0, 20, 31, -2, -9, 4, 9, 27, 31, 18, -18, 50, 30, -12, 21, 2, -8, 11, 2, 5, -14, -3, -7, -7, -20, -25, -35, -21, -19, 21, 14, 20, -15, 18, 12, 7, -18, 24, 3, 25, -2, -25, 4, 17, -18, -18, 12}, { 14, 3, -1, 1, 18, -1, 3, 3, -11, -15, 7, -18, 21, 9, -20, 10, -14, 3, -7, -4, -3, 8, -4, -13, -4, -2, 3, -13, 0, -10, 4, -1, -6, -6, -16, -15, 3, 24, 22, -2, 3, 11, 12, 3, 8, -10, 25, -13, -6, -12, -22, -14, 12, 16, -13, -8, 19, -7, -11, 16, 11, -17, -1, -10, 16, -32, 5, 3, -13, -46, -36, -12, -29, -18, -4, -6, 0, 12, -12, 12, 7, -11, 15, -4, -5, 8, -13, 11, -12, -12, -30, 6, 19, 11, -1, 35, 15, -21, -27, -24, -29, -11, -2, -3, -8, -23, 3, -3, -16, 6, -18, 19, 4, -8, -12, 17, 27, -52, -18, 15, -29, -38, -15, 11, -10, -18, 9, -2, -5, -20, -36, -34, -29, -16, -15, 6, 9, -8, -7, 1, 1, 11, -3, 16, -15, -14, -4, -31, -24, -2, 32, 13, 26, 23, 27, 7, 6, -2, -2, -40, -51, -23, -4, -3, -2, -6, 4, 14, 3, 17, 0, 20, -20, -52, -27, 17, 24, 30, 35, 48, 63, 60, 27, -18, -26, -37, -45, -57, -32, -55, -53, -45, -1, -7, -10, 8, 15, -6, 10, -4, -51, -25, 2, -16, 13, -2, 33, 44, 38, 31, 6, 9, -48, -42, -45, -73, -73, -34, -48, -50, -21, -26, -7, 1, 16, 3, 8, -3, -2, -21, 9, -13, 24, 26, 19, 27, 12, -13, 11, 2, -1, -11, -7, -45, -77, -60, -16, -70, -13, 7, 8, -17, -17, -24, -57, -19, 4, -9, 7, -2, 24, 7, 9, 5, -41, -37, 28, 23, 5, 28, 10, -8, -43, -59, -44, -46, -25, -39, 5, 2, -13, -8, -47, -18, -13, 11, 20, 23, 17, 2, -8, -37, -60, -33, 4, 15, 15, 36, 21, -1, -32, -33, -37, -69, -24, -16, -7, -10, -22, 3, -5, -3, -38, -11, 14, 13, 16, -8, -51, -77, -31, 31, 8, 9, 34, 43, 25, 15, 26, -38, -41, -36, -11, -31, -17, 8, -17, -3, -35, 3, -16, -8, 2, 1, 9, 11, -39, -23, -5, -6, -3, 4, 2, 15, -14, 13, -17, -26, -35, -25, -7, -21, -2, -25, 8, 6, -26, -13, -9, -19, 1, -5, -3, 16, -8, -18, -12, -10, -14, 0, 7, 15, 12, 3, 10, -54, -65, -17, -4, -16, -22, -11, 4, 5, -43, 8, -8, -26, 11, 21, -6, -2, -1, -6, -20, -11, -37, -16, 15, 6, 20, -2, 4, -24, -32, -44, -27, -5, -26, 3, 9, -12, -23, -10, -3, 12, -12, 21, 14, 15, -8, 1, 3, -20, -14, -5, -8, 21, -12, -9, -2, 3, -25, -58, -29, 4, 20, -12, -23, 1, -7, -5, -7, -14, -20, -2, 27, -9, 28, 37, 30, -8, -7, -21, 19, 17, 15, 13, 1, -29, -8, -1, -53, -7, 24, 31, -2, -2, 7, -4, 10, 5, -3, -14, -5, 3, 8, 27, 28, 2, -20, -5, -10, 7, -11, -16, -14, -38, -14, -13, -50, -8, -4, 16, -16, 12, 5, -20, -3, -24, -25, 13, 19, 25, 23, 53, 20, -20, -26, 0, -7, 22, -14, 8, -11, -26, -11, -26, -48, -14, -25, -15, -18, 21, -11, -16, 30, 5, -31, 20, 30, -1, 28, 29, 29, -22, -31, -19, 2, -23, 19, 8, 4, -16, -6, 14, -28, -16, 12, -14, -16, 17, -22, -5, 30, -2, -27, 11, -15, -15, -21, 6, -20, -44, -4, -32, -6, -12, 17, -10, 15, -18, 16, 14, 7, 42, 11, -1, -3, -1, -38, 1, 19, 13, 7, 27, 23, -8, -29, -2, -31, -9, -15, 5, 15, 8, 15, -1, 10, -26, -8, 3, 7, 28, -28, 12, 18, 17, -3, -19, 19, -10, 18, -4, -13, -26, -14, -5, -9, 14, 3, -1, 7, -2, 18, -11, -19, -14, 14, 4, 21, 18, 0, 6, 18, 3, 12, 20, 14, 22, -22, -24, -28, -30, -25, -14, -15, 4, 9, 20, 13, 16, 6, 9, -11, 20, 20, 17, 4, 23, -22, 9, 11, -14, -19, 16, -2, 20, -10, 13, -37, -40, -17, -8, -7, -13, 22, 16, 20, 12, 17, 0, 9, 16, 15, 15, 4, 6, -6, 17, -1, -15, 34, -7, 13, 10, 6, -5, -9, -40, -10, 2, -25, 2, -15, -12, 0, -10, 19, -2, 28, 15, 6, -2, -33, 6, 5, -18, 0, 1, 0, -17, 5, 12, -17, 8, -10, 10, -4, -34, 13, 7, -9, 23, 0, 16, 32, -25, 43, 39, 18, 14, -13, -7, 11, 4, -16, 16, 5, 4, -6, 11, 17, -14, -20, -27, -27, -10, -46, -40, 11, 32, 6, -13, -4, 19, -11, -16, 30, 2, 0, 3, -7, 16}, { 8, 17, 0, 11, -17, 8, 7, 7, -1, 14, 17, 7, -31, -27, -15, -2, 1, -17, 11, 12, -12, -11, -18, 17, 15, -5, -19, -8, -10, 7, 0, -17, -10, -16, 15, 8, -7, -7, -31, 2, -4, 1, -7, 25, 12, 28, -6, 2, -28, -34, -17, 2, -8, 9, -14, 8, -8, 11, 8, 37, 22, 1, -4, -13, -23, -29, -23, -25, -34, -57, -41, -14, 8, -15, -35, -16, 10, -4, -20, -18, 8, 23, 16, 9, -2, 2, 5, 16, 13, -34, -24, -40, -9, -17, -38, -16, -29, -24, -57, -75, -30, -23, 9, 7, -12, 6, -3, -9, -8, 21, -2, -4, 2, -18, 2, 7, -12, -17, -22, -32, -55, -37, -49, -52, -25, -80, -86, -81, -64, -46, -31, -22, -19, -42, -40, -25, -6, -12, -22, 0, 11, 17, 14, 18, 37, 8, 1, -4, -22, -21, -26, -17, -78, -74, -103, -54, -70, -85, -59, -42, -47, -30, -42, -54, -29, -31, -6, 31, 9, -1, -1, 53, 40, -9, 12, 41, -9, -20, -12, -15, -50, -37, -55, -79, -64, -52, -53, -67, -52, -36, -41, -29, -38, -16, -11, 17, 18, -9, 16, 1, 12, 8, 16, 34, 2, -34, -9, 4, -1, -2, -9, -42, -41, -53, -42, -61, -44, -21, -31, 10, -7, -8, 2, 34, -9, -7, -1, -17, -10, -11, -2, -20, -26, -25, 6, 11, 13, 42, 16, -1, -20, -3, 6, -15, -10, -11, -15, 14, 10, -35, -22, 20, -13, 1, -77, -23, 7, 24, 13, -2, -17, -14, 16, 16, 44, 42, 35, 34, 20, 11, 12, 2, -27, -30, 22, 18, 9, 12, -10, 52, -3, -41, -5, -15, -12, -8, -7, -8, -2, 7, 18, 27, 13, 27, 36, 46, 49, 29, 26, 7, 27, 8, -6, 31, 40, 71, 52, 17, -28, -18, 22, 25, 10, 20, -20, -13, 16, -11, 4, 17, 12, 28, 42, 41, 33, 40, 38, 1, -6, -2, 1, 13, 43, 41, 20, 27, -12, -12, 18, 11, 21, 17, 17, 6, 19, 6, 10, 25, 0, 29, 36, 5, 5, 14, 21, -9, -15, -11, 8, 16, -21, 32, 61, 39, -12, -11, 13, 4, -5, 12, 3, 11, 4, -2, 1, 31, -5, 7, 0, -23, -7, -8, -14, -10, -16, 15, 11, -7, 40, 54, 17, 13, -11, 6, 13, -18, 8, -1, 7, 1, 6, 5, 4, 4, 18, -19, -37, -7, -24, 6, 1, -6, 14, 23, 9, -3, 37, 10, 44, 8, 9, -10, -34, -38, 3, 6, -7, -16, 4, -7, -5, 6, -13, -7, -27, -13, -9, -7, 5, 5, 24, 2, -15, 5, 28, -9, 20, -9, -32, 8, 5, 1, -1, 36, -2, -13, -6, -8, -3, 6, 5, 6, -21, -15, -27, -10, 13, 24, -4, 0, 25, 29, 0, -10, 35, 31, 8, -16, -8, -3, -4, 36, 2, -13, 3, 7, 3, 22, 34, -3, -12, 8, -1, -4, -9, 15, 4, 9, 8, 8, -23, -32, 28, 49, -4, -16, 23, -20, -15, 11, 7, -7, 0, 23, 40, 43, 38, 26, 17, -8, -22, -15, 13, -1, 2, 19, 43, 27, -12, 21, 13, 29, 7, 14, 41, -47, 19, 32, 6, -20, -3, 8, -1, 23, 35, 23, 9, -12, -2, -2, 1, -8, -21, 8, 31, 32, -6, -1, 17, 14, 17, 31, 1, -7, -15, -45, -28, -34, -7, -9, 7, -10, -2, 16, 2, -25, -16, 4, -6, 22, -16, 18, 17, 27, -22, 18, 12, 18, 18, 11, 8, 7, 12, -46, -26, -41, -44, -17, -42, -22, -33, -38, -29, -5, -16, -20, 22, 9, -11, -16, -3, 35, -2, 26, 4, 12, 16, -12, 8, -14, -18, -52, -45, -31, -39, -12, -44, -51, -22, -25, -38, -14, -19, -2, 20, -29, -12, -3, 42, 16, 20, 37, -2, 15, 15, -16, 16, 3, -28, -53, -70, -46, 10, -29, -27, -43, -52, -17, -3, -10, -11, 0, -25, -14, -8, -18, -1, 5, 12, 24, -8, -5, 3, 5, 6, -7, -27, -26, -18, -40, -27, -13, 10, -16, -37, 10, 7, 12, 14, 20, -9, -22, -8, -20, 2, 29, 42, -18, -17, -13, 18, -11, 5, 8, 8, 10, 41, 61, -16, -40, 7, -25, -24, 7, 33, 27, 56, 29, -20, 19, -1, -8, -21, 24, 18, 16, -31, 4, -12, -11, -6, -13, -24, 1, 6, 56, -7, 13, 28, 44, 61, 48, 60, 27, 57, 14, 11, 30, 53, 25, 40, 3, -26, 1, -13, 12, 16, 3, 3, 5, -10, -44, -9, 12, 8, -12, 35, 20, 25, 14, 29, 8, 11, 7, -4, -15, -37, -14, 34, 30, -7, -14, 1, 14}, { -8, 9, -9, -9, 10, 15, 15, 2, -2, -5, 16, -17, -5, 0, -2, -4, 0, -18, -5, -2, -13, 7, 2, 14, 19, 13, -10, 9, -17, -6, 12, -15, -8, -17, -27, -33, -12, -15, -2, -9, -20, -61, -23, -52, -45, -52, -6, -36, -10, 0, -4, -24, -10, -6, 17, 13, 2, 15, 6, -29, -28, -9, -27, -16, -19, -54, -29, -59, -13, -16, -17, -25, -76, -20, -11, 8, 5, 2, -33, -35, -36, -8, -13, 0, 3, -12, 0, -35, -20, -6, -40, -23, -38, -48, -61, -54, -44, -70, -32, -17, 6, 11, -41, -9, 44, 12, 17, 18, -12, 16, -14, -2, 1, 15, 9, 13, -23, -29, -43, -55, -30, -33, -29, -32, 7, 2, 2, -31, -34, -6, 7, 2, 22, 12, 33, 33, 53, 40, -6, 10, 3, 4, 6, 17, -12, -23, -42, -32, -19, 0, 16, 12, 12, -5, 7, -12, -25, -2, 4, -16, -25, -4, 2, 27, 24, 26, 17, 6, -14, 17, -12, 7, -7, -32, -2, -19, -9, 4, -4, -5, -2, 28, -9, -8, -26, -2, 18, 7, 21, -7, 28, 40, 19, -27, 33, 14, 12, 1, 5, 20, 27, 26, 24, 5, 23, -4, -3, 20, 7, 11, 18, -2, -6, -15, -14, 11, 7, 27, 39, 29, 30, -12, 19, 5, -6, -8, 28, 29, 24, 46, 3, 22, 9, 2, 27, -1, 8, -8, -22, -23, -16, -17, -10, -27, 16, 26, 18, 26, 17, 24, 22, 14, 8, 2, -2, 27, 35, 40, 31, -2, -12, 40, 4, -17, -35, 13, 16, -9, -22, -4, -15, -18, 34, 12, 25, 9, 30, 7, 0, -17, -6, -13, 6, 12, 1, 23, 21, 4, 3, 10, -26, -13, -27, 11, 6, -38, -72, -19, -43, -8, 14, 36, 21, 38, 33, 8, -32, -27, -1, -21, -34, 26, -18, 39, 13, 20, 21, 11, -11, -7, -5, 3, 9, -72, -89, -72, -22, 40, 59, 42, 58, 40, 16, -6, 34, 5, -8, -16, -5, 6, -2, 23, 26, -8, -14, -1, -2, -10, -14, -28, -36, -78, -98, -26, 3, 55, 50, 46, 35, 52, 10, 9, -1, -25, -11, -5, 10, 26, 6, 11, 7, 2, 12, 11, 4, 10, -2, -18, -45, -58, -67, 9, 39, 40, 48, 72, 48, 23, -5, -17, 29, 14, 11, -11, -40, 0, 11, -5, 1, -2, 9, 19, 17, 21, 19, -2, -20, -52, -39, 7, 45, 56, 35, 8, 7, -17, -29, -10, 0, 16, -21, -9, -7, 43, 11, -26, -1, -11, 4, 20, 27, -6, 12, -1, -21, -35, -2, 5, 32, 18, 17, -26, -1, -45, -44, -88, 10, 8, 0, 8, -20, 20, 9, -13, 13, -28, -22, -11, 22, 33, 16, 25, -5, -24, -11, 49, 30, -2, 4, -12, -13, -27, -16, -50, 9, 14, -9, -8, -5, 7, 15, -11, -13, -7, -13, -2, -1, 19, 2, -2, 6, -2, -1, 26, 31, 11, -24, -8, -18, -27, -8, -50, 7, 0, -15, 3, -13, 34, 10, 23, 7, -7, -10, -17, 2, 5, 11, 6, 3, -7, 4, 7, 26, 0, -5, -1, -50, -34, 26, -28, 8, -24, 8, -1, -10, 23, -18, -3, 8, 4, 9, 4, 1, 22, 14, -1, -6, 13, 24, 14, 38, 11, -26, 1, -24, 17, 18, -14, 23, 3, -6, 21, 27, 6, -22, 3, 2, 0, -6, -18, -8, 18, -5, -10, -7, -8, 20, 13, 18, 23, 6, 36, -12, 35, 27, 35, 37, 16, -11, -14, 42, 18, 4, 8, 16, 7, -1, -29, 7, 14, 5, 4, 14, 2, -2, 5, 8, 14, 30, 12, 26, 10, 25, -16, -13, 10, -11, 9, 24, 2, 14, 15, 25, -9, 4, -2, -25, 17, 12, -11, -4, -16, 4, -7, -23, 29, 25, 19, 10, 21, 45, 16, -16, 17, -18, -7, -16, -15, 7, 8, 31, -3, 26, 16, 8, -2, 21, 14, -10, -4, 2, -4, 4, -6, 8, -7, -4, 40, 35, 20, 16, 5, -17, -10, 28, -18, 0, -26, 4, 4, 12, 27, 14, 20, 7, 33, 13, 17, 8, -26, -11, -23, -1, 10, 4, 2, -15, 22, 5, 2, 17, -2, 32, -11, 15, 25, 31, 2, 19, 20, 15, 0, 18, 32, 51, 26, 32, 26, 17, -25, -31, -7, -9, 1, -27, -13, -7, -5, -8, 6, 4, 5, 49, 9, 0, -1, 36, -6, -21, -25, -5, 13, 27, -14, -16, 20, 13, -38, -13, 17, -1, 26, 14, 3, 12, -4, 12, 9, -17, -9, 5, -31, -7, 11, -12, 19, -29, 20, 7, 13, 13, -16, -19, -9, 5, 15, 25, 10, 7, -11, 18, -3, -7, 6}, { -3, -18, -15, 9, -15, 6, 10, 13, -6, 18, 11, -14, 0, -24, 0, -6, 14, 0, 8, 4, -12, -18, 14, -1, -15, 0, -5, -15, -4, 0, 0, 13, -19, 8, 0, -27, -27, -21, -18, -23, 13, -6, -1, -6, -26, -18, 13, -13, -30, -7, 12, 8, 5, -7, -3, -8, 13, 1, 14, -37, -36, -12, -6, -13, -15, -40, -5, -33, -19, 15, 5, -21, -14, -12, -12, -23, 3, -5, 17, -34, 3, -21, 6, 12, -11, -17, 13, -28, -11, 23, -6, -3, -2, -12, -17, 8, 4, -8, -1, 14, 6, -1, 5, -5, 16, 27, 33, 14, -5, -5, 14, -12, -18, -16, -5, 13, -1, 4, -9, -14, -17, -26, -5, 1, 17, -4, 0, -1, 0, 0, -11, 3, 18, 22, 24, 24, 20, 18, 52, 15, 10, 5, 12, -9, -4, -3, 0, 4, 0, 14, 10, 24, -2, -10, 27, 15, -11, -5, -23, 7, 2, -15, -10, -8, 19, 26, 21, 11, -16, -4, 37, 19, 13, 15, 1, -9, 6, 9, -9, 12, 0, -7, -15, -3, -8, 10, -31, -10, -24, -23, 3, 10, 23, 21, 2, 6, 9, -18, 0, 27, -13, -21, -14, -3, -9, 19, 13, -12, 9, 19, 3, 15, -7, 5, 0, -8, -1, -9, -11, 30, 22, 36, 26, -6, 1, 9, 17, 0, -11, 1, 5, 28, 26, 8, -8, -3, 9, 40, 23, 21, 13, -16, -9, -13, 1, -5, -12, 4, 73, 81, 31, -1, -15, 4, -15, 10, 11, -6, 17, 16, 11, 6, 16, 21, 7, 38, 36, 0, -4, -7, 11, 15, -8, 8, -25, -1, 35, 92, 24, -21, 14, 4, -10, 14, 18, -15, 9, 19, -20, 24, 19, 38, 21, 21, 11, 0, -3, -5, 14, 11, 4, 28, -4, -16, 1, 41, -12, -34, -5, 1, 29, 4, -9, 22, 29, 13, -22, -7, -3, 12, 34, 8, 20, -7, 6, 4, 3, -1, 15, 1, -12, -17, 10, 0, 14, 4, -2, 19, -1, -13, -9, 1, 12, 24, 4, 0, 3, 15, 1, 5, -10, 12, 21, 23, 12, 17, -2, 3, 3, 2, 4, -34, 6, 7, -14, -11, 9, -13, 13, 10, -11, 6, 25, 12, 19, 17, -11, -4, -4, 13, 32, 11, -1, -1, 7, -18, -5, -10, -24, -28, -30, -14, -8, -1, 6, 5, -8, -12, -2, 6, 9, 18, -6, 16, -1, -16, -13, 5, 7, -5, -20, -14, 10, -12, 4, 21, 1, 8, -17, -28, -12, 19, 32, 34, 23, -23, -9, 20, 35, 20, 28, 18, 7, 1, 2, -11, -8, 20, -7, 3, -2, 19, 18, 9, -11, -17, -3, -2, -6, -2, -9, -15, -4, 5, 7, 14, 40, 27, 34, 32, 8, 5, -24, 6, -25, 7, 12, -5, 2, 5, -10, -27, -17, -19, -13, -24, 10, 5, -15, -5, -22, 23, -5, 5, 18, 14, 1, 12, -23, -41, -8, -2, 12, 7, 18, 15, 10, -12, 21, -14, -16, -53, -23, -22, 5, -2, 1, -8, 8, 23, -7, 19, -6, 2, -32, 5, -6, -7, 11, 8, 13, -8, 7, -12, 25, 6, 8, 2, -39, -54, -18, -39, -12, 11, -1, 1, 3, 17, -8, 14, -12, -15, -6, -45, -32, -8, -3, -8, -17, -12, -9, 18, -17, 4, -9, -40, -44, -19, -32, -14, 10, 37, -16, 1, -31, -11, -1, -14, -15, -6, -31, -11, -35, 2, -16, -4, 13, 8, -3, 28, -7, -4, -22, -10, -10, -35, -26, -7, -8, 1, -11, -19, -15, 23, 16, -22, -6, -15, -48, -2, 1, 0, -9, 4, -16, -25, -3, -16, -12, 4, -12, -44, -15, -12, -57, -1, -9, -7, -19, 16, 3, -19, -3, 2, -21, -18, -6, 4, -6, -11, 3, 11, -9, -6, -7, 18, -19, 10, 22, -11, 0, 11, -30, -14, 3, -1, -12, 23, 1, 13, -10, 16, -6, 16, -11, 1, 12, 4, -9, 1, 23, 15, 13, -7, 10, -1, 16, 11, 1, -18, -28, 11, -10, 10, -7, -14, -4, 27, -3, 28, 32, 40, 2, 11, 34, 30, -13, -13, 11, -28, -17, 12, 10, 20, 23, -3, -16, -21, -19, 6, 18, 0, 13, -9, 14, 7, -17, 10, 15, 23, 22, 18, 22, 1, 7, -18, 11, 1, 2, 0, -3, 15, 2, 13, -8, -4, 5, -14, 1, 11, -4, -24, -31, 2, -10, -17, 20, 35, -3, 19, 12, 6, 35, 35, 43, 6, 9, 10, -7, 23, 43, 29, -12, 24, -9, 13, -14, 7, -3, 1, 8, 22, 20, 29, 6, 48, 44, 15, 34, 42, 54, 37, 22, 23, 36, 32, 26, 31, 35, 14, 1, -10, 5, 12}, { 1, 11, -15, 15, -19, 6, 4, -12, -18, -5, 10, -10, 4, 17, -15, -16, -17, -5, 2, 2, -11, 4, -12, -6, -2, 3, 6, 0, 10, 7, -7, 6, -1, 12, 0, 3, -1, -4, 2, 9, 26, -13, -18, -12, -33, -19, -4, -29, -29, 3, 12, -13, -19, 10, 3, 3, -8, -9, -9, -23, -43, -23, -28, 0, -9, -23, 0, -10, -17, -19, -16, -44, -20, -13, -25, -9, -22, -22, -2, -9, -15, -17, -11, 3, 10, 6, -15, -18, -36, -5, -24, -43, -46, -52, -61, -27, -7, -52, -3, -25, -8, 11, -30, -18, -22, -25, -2, -8, -2, -25, -24, -11, 6, 15, 15, -24, -11, 14, -18, -11, -19, -20, 1, -2, -6, -6, 7, -24, -21, 10, -23, -10, -4, 20, 47, 15, -5, -14, -8, -5, 5, 1, -1, 25, -6, -8, 11, 8, 26, 27, 5, 11, 1, -15, -8, -11, -22, -29, -27, -13, -16, -1, 14, 29, 9, -3, -16, -4, -11, -24, 16, 14, -10, -11, -9, -7, 4, -12, 6, -17, 16, -17, -17, -20, -8, -20, -19, -11, -10, 17, 27, 10, 11, -2, -11, 19, -17, -39, 14, 0, -4, 11, 0, -25, -20, 25, -16, 8, 9, -1, -14, 8, -12, -26, -4, -23, -21, -1, 20, 10, 18, -7, -3, 7, 11, -9, 1, 37, 34, -3, -10, 12, 18, 6, -6, 3, 2, 20, 13, -12, -23, -32, -8, -42, 0, -5, 10, -18, -4, 7, 21, 7, 4, 10, 25, -16, 22, 14, -20, 11, -11, 6, -3, 17, 24, 16, -4, 16, 7, -21, 4, -23, 8, -4, 9, -15, -6, -34, 16, 3, -17, -20, 7, 1, 7, 17, -7, 14, 12, 3, -5, 8, 4, 10, 14, 17, -6, 8, 12, 8, 12, -17, -11, -17, -2, -10, -24, 12, -14, -18, -23, 6, 7, -6, 4, 25, -7, 4, 8, 18, 20, 7, 11, -1, 0, 19, 14, 0, -5, 2, 1, -23, -45, -77, -33, 2, 2, 1, -5, 13, -1, -13, -8, -7, -10, 9, -11, 4, 27, 30, -14, 14, 41, 7, 23, -1, 3, 31, 6, 4, -12, -6, -5, -18, -6, 0, -28, 23, -17, -11, 16, 13, 14, 0, 8, -1, 7, 3, 16, 31, 10, 38, 24, -8, 13, -4, 16, -27, -4, -6, -24, -22, 8, 4, -14, 14, -8, -6, -2, -23, 4, 13, -6, 31, 32, 8, 3, 15, -10, 23, 24, 26, 3, 16, 11, -14, -10, 15, -16, -11, -21, 4, 10, 21, -14, -6, -20, -18, 3, 6, -1, 26, 4, 19, 23, 18, 8, 2, -18, -5, 22, -10, 9, 13, 4, -15, 2, 1, 11, -6, -10, 7, -5, 2, -16, 7, 39, 24, 20, 25, 34, 18, 40, 24, 15, -9, -15, 16, 31, -12, -12, 3, 20, -3, -3, -27, 10, 2, -9, 5, -7, -5, 3, -7, 22, 10, 30, 11, 23, 22, 0, 5, 17, -14, -6, 4, -12, -2, -13, 2, 6, -17, -5, -34, -8, -4, 0, 13, -10, -24, 12, -14, 15, 8, -16, 0, 2, -1, -1, -30, -14, -29, -20, -7, -22, 0, -19, -14, 9, -10, 9, -4, 12, 45, -1, 2, -3, -31, -14, -18, 11, 5, -19, -9, 17, 6, -27, -39, -5, -36, -4, -6, -4, -1, -28, -40, -5, -9, -12, -12, -11, 41, -14, -37, -7, -30, -28, -34, -33, -10, -28, 11, -4, -13, -14, -11, 1, 4, -5, -5, -1, -12, -13, -6, -19, -3, -4, 10, -15, 3, -33, -24, -40, 5, -31, -28, 2, -4, -21, -1, -5, -1, -28, -17, 8, -5, 3, -9, -12, -11, -2, 12, -18, -21, 20, -4, -11, -1, -4, -18, -36, -5, -6, -22, -4, -12, 4, 1, 13, -1, 0, -12, 12, -13, -17, 32, -4, 33, 10, 13, -13, 4, 48, -1, -14, 0, -14, -32, -32, -43, -23, 10, 4, -15, 0, 6, 19, 11, 10, -17, 6, -23, 1, 34, -8, 17, 5, 0, -8, 2, 2, 11, -18, -15, -11, -7, -4, -4, -5, -15, -20, 1, -11, -5, -7, 21, -17, 7, 9, -1, -15, -7, 1, 6, 2, -22, -37, 12, -5, 10, 18, -11, -20, 1, 20, 11, -11, -20, 2, -3, 23, 10, -34, 4, -3, -1, -33, -16, -17, -17, -25, -10, -24, -37, -16, -3, -1, -12, -3, 5, -17, 7, -9, 20, -1, -35, -35, -18, -22, -48, -54, -62, -18, -33, -42, -11, -10, -60, -48, -28, -6, 6, -5, -8, -9, 13, 4, 9, -3, 9, -1, 12, -3, -19, -29, 3, -22, -28, 6, -7, -41, -30, -37, -3, 1, 14, 4, 18, -14, 3, -14, 18, 2, -11}, { -5, -5, -8, -15, -17, 3, 13, 11, 9, -15, 6, 16, 13, 4, 17, 9, -11, -16, -6, -11, -8, 17, 10, -6, -4, 5, 8, -3, -11, -17, 8, 1, -3, -2, -10, -10, -2, 12, 2, 32, 18, 33, -11, 16, 10, 6, -15, 22, 3, 11, 10, 25, -6, -18, -10, 8, 6, 2, 19, 9, 7, 10, 10, 29, 8, 5, 13, 3, 2, 10, -5, 7, 27, 5, -8, -8, 2, 28, 35, 26, 14, 14, 12, 9, 5, 2, -10, 18, 35, -19, -7, -5, -26, -4, -16, -15, 6, 16, 12, -24, -26, -6, -9, -10, -27, 22, -2, 42, 12, -24, -7, -18, 10, 4, -6, 2, -27, -13, -27, -42, -38, -22, -15, -10, 12, 8, 2, -11, -9, 7, -1, 20, 21, 8, 24, 33, -22, -11, 4, 14, -6, -17, -14, -25, -19, -28, -22, -51, 6, -11, 13, 21, 16, 0, 11, 15, -20, -1, -1, 7, 32, 26, 13, 22, 15, 3, 23, 30, -5, 9, 2, -18, -26, -11, -56, -7, -2, -12, 9, 33, 16, 2, 26, -2, 5, -9, 6, 0, 6, -13, 33, 14, 19, 16, 10, 25, 3, -10, 0, -24, -13, -14, -31, -27, -29, -6, 3, 24, 19, -12, 6, -5, 5, 17, 22, 10, 2, 15, 16, 29, -8, 3, -15, 24, 14, -8, -3, 3, 1, -20, -9, -7, -12, 13, 19, 26, 23, 13, -18, -7, 16, -3, -2, -1, 8, 13, -3, 27, 16, -11, 5, 19, -6, -26, -17, -18, -1, -53, -33, -18, -33, 10, 19, 24, 14, -3, 2, -16, -22, -28, -32, -15, 3, -8, -1, 0, 17, 22, -5, -20, -6, 5, 18, -10, -11, -16, 1, 14, 2, 11, 19, 5, 28, -5, 13, -10, -28, -31, -6, -8, -14, 11, 30, 44, 24, -7, -16, -24, 18, 9, -3, -19, -35, -29, -16, 0, -14, 6, 2, 2, 18, 8, 18, 6, 3, -9, -8, -5, 1, 23, 3, 37, 66, 73, 41, -4, 16, -10, -6, 15, -38, -29, -9, 16, 15, -12, -2, 2, -9, 30, -9, 1, -25, 13, -15, 5, 0, 16, 27, 37, 62, 23, 9, -45, -6, 9, 9, 19, -35, -41, -5, -14, -19, -14, -1, 16, -8, -8, 8, -10, 2, -29, -11, -18, 8, 19, 10, 11, 14, 23, 18, 33, 26, -3, 12, -24, -6, -13, -2, -16, -17, -7, -9, 12, 2, -7, -8, -2, -24, -10, -26, -3, 5, 24, -3, -7, 36, 10, 27, 2, 8, -13, -6, 4, -27, -2, -17, 12, 2, 25, 14, 33, 4, 11, -5, -16, 6, -12, 1, -4, -19, 18, -28, -6, 18, 10, 12, 23, -8, -16, -38, 15, -22, 8, 14, 18, 25, -3, 45, 23, 38, -6, -10, -32, -21, -5, -16, -27, -17, 10, -3, -16, -5, 55, 1, 14, -17, -11, -8, 3, -14, -6, 14, 24, -7, 17, 52, 50, 30, -18, -27, -31, -15, -20, -33, -7, 7, 10, 4, -1, -22, 2, -23, -3, -16, 9, -21, -36, 23, 19, -4, 0, 25, 31, 44, 11, 5, -45, -41, -18, -21, -12, -26, -19, -1, -17, 7, -10, 12, -20, -22, 14, -12, 7, -12, -15, 9, -5, 13, 25, 13, 40, 48, 0, -8, -35, -20, 10, -17, -12, -30, -13, -7, -10, 3, -20, -7, 3, 7, 2, 14, 18, 20, 15, 17, 15, 5, 10, 22, 26, 30, 25, 9, -32, 12, -6, -11, 1, -31, 11, 9, 3, 11, -7, -12, -14, 6, 15, 18, -8, 0, 21, -5, -9, 30, 20, 28, 46, 1, -7, 6, -4, -9, 7, -10, -10, -11, -14, 3, -10, -18, -9, 14, 7, 10, 11, -18, -19, 26, 35, 9, 25, 16, 39, 9, 18, 26, 20, -12, 8, -5, -16, 3, 12, 5, 13, -20, -36, -20, -5, -7, -22, -6, 3, -6, 8, -18, 1, 23, 18, 26, 0, 39, 29, 11, 3, 6, 5, 23, 4, 19, 4, 11, -4, -26, -25, -23, 16, -33, 5, -25, 17, 17, -10, 13, -6, -13, -37, -21, 16, -10, 9, 17, 25, 21, 12, -6, -10, -12, 3, -1, -32, -13, -48, -20, -6, -10, -2, 23, 4, -13, -14, 3, -13, -41, -41, 8, 2, -4, 6, 14, 14, 1, 28, 10, 24, -16, -27, -38, -29, 19, -29, -25, -17, -8, 10, -1, -7, 13, 6, 13, -10, 20, -12, -32, -41, -19, -14, -18, 21, 36, 11, -21, -26, -18, -17, -22, 1, -21, -2, -11, 14, -10, 14, 6, 4, -14, 12, -17, 7, -11, 8, 1, -16, -21, 4, -7, -16, 2, 0, -19, -27, -8, -21, -14, -6, 2, -26, -33, 2, -9, 16, 0, -16}, { 11, -7, 2, -10, -6, -14, -13, -14, 7, 18, -12, 6, 20, 17, 17, 9, -17, 5, 1, -11, -5, 0, -10, 13, -12, 11, -1, -12, 16, -10, 4, 1, 14, -1, 13, 0, 11, 18, 10, 5, 26, 25, 43, 36, 33, 29, 31, 25, 34, 19, -4, 30, 17, -18, -4, 17, 10, -9, 8, 2, 13, 0, 16, 24, 13, 25, 18, 34, 17, 21, 24, 28, 6, 9, 4, -11, 8, 36, 39, 22, 24, -8, 2, -6, -16, 11, 18, 18, -5, 25, 30, 30, 0, -11, 19, 21, 9, 2, -13, -4, 1, -4, -44, 2, 34, 2, 19, 28, 10, -40, -8, -18, -12, 9, 9, 0, 46, 25, 13, 2, 35, -18, 20, 17, 19, -5, -7, 1, -13, -20, -33, -14, -23, -14, -8, -22, -37, -30, -35, 9, 1, -9, 2, 6, 36, -5, 14, 2, 3, -1, 1, 2, 19, -9, 6, 21, 6, -15, -23, -53, -43, -49, -12, -4, -26, -16, -17, -2, 9, -5, 6, 26, 25, -20, -14, -25, -38, 12, -1, 13, 7, 16, 3, 9, 6, -26, 5, -36, -70, -30, -39, -4, -13, -39, -12, -18, -8, 42, 7, 29, 32, -13, -22, -9, -28, -16, 9, -5, -7, 4, -2, 6, 17, -1, -3, -36, -80, -62, -30, -4, -17, -30, -16, -26, -15, -2, -12, 3, 40, 22, -20, 17, 8, 21, -13, -15, -38, -2, 42, 19, 12, 19, -20, -49, -78, -59, -45, -29, -18, -19, -16, 11, 20, 8, -3, 30, 17, 14, 14, -2, -11, -25, -39, -36, -24, 24, 47, 48, 14, -8, -53, -51, -54, -70, -23, -16, -16, -19, -12, 25, 16, 2, -27, 17, -2, 13, -12, 8, -41, -41, -48, 2, 5, 30, 54, 37, -18, -24, -33, -56, -26, -21, -26, -3, -8, -20, 9, 11, 16, -3, -49, 30, 2, 17, -11, -8, -17, -35, 17, 10, 25, 57, 48, -5, -45, -43, -37, -36, 2, 11, -5, -8, -57, -64, -56, 14, -6, 7, -10, -29, -17, -1, -19, -18, -9, -5, 32, 33, 40, 23, 26, -18, -34, -10, -10, 3, -11, 0, 26, -1, -7, -1, 1, 38, 17, 23, 8, -39, -29, -37, -17, -6, 11, 35, 0, 12, 4, 19, -2, -32, 21, 16, 1, 24, 20, 26, 13, 37, 16, -1, -15, 14, -21, 15, -9, 0, -48, -35, 3, 0, 9, 35, 8, 22, 7, -11, 17, -24, -14, -14, -15, 18, 21, 39, 55, 32, 32, 6, 16, -2, -15, -10, -10, 4, -31, -27, 13, -1, 23, 14, 27, 8, 23, 25, 3, -35, -16, 5, -8, 27, 22, 8, 30, 40, 4, 10, 3, -6, -4, 15, 3, -4, -33, -4, 0, 42, 30, 7, 36, 16, 0, 9, 10, -19, 17, 7, 25, 10, 10, 14, 26, 3, 17, 35, 6, -3, 9, 20, 13, -4, -26, -33, -9, -7, 8, 11, 12, -1, -11, 22, 1, -14, -1, -6, -10, 20, -20, 27, 22, 6, -10, 32, 4, 25, -1, -11, -13, -25, -21, -28, -20, -12, -11, 9, -17, -22, 0, 21, -21, 10, 9, 19, 18, 3, -16, 8, 26, 8, -24, 45, 32, 38, -7, -25, -24, -48, -43, -37, -40, -17, -20, 17, 0, 1, 17, -1, 15, 6, 12, 1, 12, 5, 9, 2, 28, 8, -31, 39, 28, 8, 14, -20, -35, -4, -39, -29, -30, 4, 5, 25, 2, 8, -2, -3, 30, 15, 1, -4, 5, 0, -11, -10, 16, -24, -34, -14, 19, 14, 22, -1, 8, -27, -10, -57, -37, -30, -9, 7, 4, -17, 0, 6, -19, 7, 13, -11, 17, -18, -19, -17, -31, -21, -28, 20, -1, 11, -15, 7, 28, 29, 9, -18, -15, -6, 18, 3, 1, -1, -15, 4, -7, -9, -32, -31, -5, -29, -2, -33, -9, -17, -22, 0, 23, 9, 1, 8, 4, 55, 8, 20, 3, -7, 10, 19, 6, 8, -13, 13, -9, 14, -26, -29, -14, -34, -26, -8, -13, -50, -12, -18, 25, 8, 15, 14, -6, 9, 16, 29, 17, 36, 0, 17, -7, -9, 9, 5, 23, 5, 7, -7, -22, -20, -1, 15, -4, -31, -9, 29, 14, -1, 13, -10, -9, 11, 28, 16, 55, 31, 38, 34, 32, 24, 1, -19, 4, -8, -3, -39, -27, 3, 7, -11, -21, -17, -15, -9, 9, 2, 2, -19, 3, -4, -15, -19, -7, -22, 9, 10, 45, -1, -25, -29, -19, 21, -4, -25, -7, -2, -3, -28, -20, -18, -11, 10, -15, -17, -16, -6, 10, 15, -3, -17, -15, -30, -41, -14, 2, -3, -14, -17, -44, -8, -18, -29, -28, -26, 7, -11, 16, -8, 15, 2, -18, -1}, { 14, -16, -6, -13, -5, -18, -4, 5, -1, -4, 1, 1, -15, -18, 9, 5, -3, -9, -8, -5, 15, -13, -7, -6, 7, -9, 14, -18, -13, 18, -10, 18, -9, 2, -9, -1, -7, -2, 4, -18, -48, -37, -25, -51, -6, -16, -19, -39, -10, -27, -32, -34, -7, 6, 8, 5, -11, 17, -3, -19, -33, -1, 7, 0, 28, 36, 31, 26, -2, -25, -3, -8, -15, 25, 5, -18, -7, -12, -19, -17, 11, 5, -14, -1, 4, -16, 15, -4, -26, -27, -21, 9, 1, -6, -3, -18, -10, -31, -26, 6, -21, -5, -23, 19, -24, 12, 6, -14, -8, -9, -12, 14, -1, -8, 16, -17, -11, -4, 8, 8, -13, -31, -1, -10, -22, -9, 3, -8, -23, -7, -18, -4, 0, 5, -22, 19, 20, 6, -10, 10, -4, 2, 19, -17, -17, 2, -5, -19, -7, 5, -37, -29, 4, 18, 10, -9, -25, -3, 17, -15, 14, -11, 3, -14, -15, 5, 31, 19, 2, 3, -13, -29, 21, -41, -31, -17, -16, -24, -23, -8, 1, -1, 5, -17, -3, 5, 8, -1, 4, 4, -8, -32, -40, 24, 5, 14, -7, -16, 2, -12, 27, -23, -38, -53, -3, -28, -1, 4, -6, -14, -1, 8, -11, -20, 5, -1, -6, -8, -18, -7, -12, 43, 14, 23, 3, 5, 17, 2, 15, -10, -49, -36, -48, -36, -1, -16, -8, 9, 3, -13, -1, 14, 1, 16, -1, 13, -20, -13, 29, 35, 1, 2, -15, -22, -15, -13, 6, -8, 2, -28, -50, -13, -15, -3, 22, 37, 10, 2, 15, 20, -4, -20, -17, -4, -17, -1, 40, -11, -36, -51, -15, -11, 6, 25, 13, -2, 13, -5, -50, -23, -33, -26, 21, 22, 3, 4, -26, -11, 0, -30, -32, 6, -34, -2, 22, 3, -13, -28, 14, -7, 23, 17, 18, 41, 28, -27, -32, 1, -9, -11, -4, -7, -22, -25, -18, -14, -49, -15, 1, 3, 7, -4, 33, 59, -7, -24, 7, 2, -15, 25, 17, 44, 34, -22, 6, -6, -18, -30, -43, -34, -46, -34, -33, -27, -12, 0, 20, 21, 9, 2, 32, 33, 3, -33, 10, 1, 0, -15, 25, 16, 18, 6, -9, 1, -19, -33, -46, -4, -13, -26, 13, 11, 4, 7, 25, 17, 23, 33, 7, 21, 28, 34, -19, -16, -17, 29, 48, -9, -2, 3, 19, 4, 7, -11, -20, 5, -15, 1, 7, 12, 6, 3, 28, 24, 44, -17, 21, 67, 40, 22, 5, -17, -38, 30, 15, 11, 9, 22, 34, 34, 20, -1, 26, 21, -1, 7, 28, 7, 12, -4, 17, 5, 15, -33, 17, 43, 28, 21, 18, -30, -21, 6, 5, 25, 31, 5, 1, 26, 22, 44, 8, 3, 14, 16, 38, 21, 22, 0, 3, 0, 16, -12, -14, 53, 47, 44, -18, -13, 6, -4, 3, -3, 26, 24, 4, 36, 24, 19, 34, -8, 4, 62, 28, 21, 0, 10, -4, -5, -27, -37, -32, 51, 33, 39, 15, -18, -20, 14, 7, 0, 34, 46, 11, 20, 30, 27, 1, -2, 20, 41, 8, 5, 23, 0, 7, 8, -14, -3, 22, 39, -1, 32, 7, -10, -7, 1, 24, -2, 27, 46, 30, 4, 13, 18, 7, 9, 14, 38, 0, -11, 23, 5, 23, -2, -2, 18, -12, 6, 29, 21, 0, -2, 35, 12, 26, 41, 12, 15, 21, 15, 6, 10, -8, -14, -20, 25, 17, -3, 10, 20, 3, 5, 39, 30, 49, 51, 25, -13, -10, -7, -9, 19, 51, 19, 5, 25, 16, 15, -1, -22, -15, 7, 4, -6, 9, 15, -9, 9, -7, 18, 7, 49, 57, 5, -20, -12, -12, 8, 17, 18, 39, 24, 16, 8, -25, -1, -20, 18, -6, -21, -22, -19, 1, -5, -21, -19, 24, 12, 10, 20, 23, -4, -58, 12, 2, -7, -8, 29, 7, 17, 5, -27, 10, -4, -12, -31, -13, -36, -27, -20, -33, -38, -8, 0, 14, 26, 28, 23, 16, -24, 4, 17, -10, -4, -12, 15, -21, -61, -8, -1, 18, 26, 0, 7, -5, -12, 5, -19, -12, -25, -1, 10, 29, 5, 22, 31, -25, 8, 31, 2, 0, -6, 20, 8, -6, -6, 29, 27, -3, -11, -18, -6, -3, -3, 0, 22, -15, -9, 38, 54, 20, 35, 24, 22, -15, 24, 2, -2, 14, 18, -8, 12, 24, 52, 26, 21, 20, -11, -27, -13, 15, 40, 14, 18, 20, 6, 21, 6, 17, 11, 11, 32, 8, -23, 2, 3, -11, -14, 0, 16, 14, 0, -12, 22, 26, 13, 9, 16, 26, 3, 16, -9, 8, 25, 29, 21, 11, -24, -13, -51, 11, -12, -4, -11}, { 1, 7, 8, -6, -18, -4, -1, 9, 7, -12, -17, 12, 3, 16, 9, -14, -4, -5, 11, 16, -1, 18, -11, 8, -11, -11, 4, 2, 14, -12, 15, 12, -19, -17, -20, -7, -11, -16, -30, -10, -22, -3, 6, -17, 3, -17, -17, -26, -14, -24, -9, -20, 9, 13, -3, 0, -5, 19, -5, 15, 1, -6, -24, -23, 1, 8, 5, 8, 23, -13, -5, -16, 14, 0, -16, -23, -17, -39, -32, 6, 21, 10, 2, -18, 0, -6, 1, -17, -16, -8, 10, 0, 24, 17, 32, 20, 18, 6, -7, 23, 5, -15, -2, 7, 20, -25, -21, 4, 21, -9, -11, -1, -18, -9, 2, 4, -4, 11, 0, 19, 10, -20, -3, -10, -13, -33, -30, -12, -9, -9, 20, 39, 22, 10, -8, -27, -13, 8, 11, -1, 5, -18, 15, 3, -8, -11, -19, -20, -42, -17, -28, -41, -27, 5, -25, 1, 6, -14, 13, 16, 38, 39, 27, 10, 0, 34, -7, -37, -15, -5, -26, 1, -9, -19, -22, 4, -29, 1, 20, -22, -9, -3, 17, 24, 36, 7, 11, 11, 7, 21, -1, 2, -6, 6, -20, 0, -14, 52, -10, -5, 14, -13, -1, -17, 13, -4, 15, 16, 9, 14, 31, 39, 6, 5, 5, -17, -5, 6, -8, -24, -27, -39, -32, -4, -7, 15, -7, -18, 12, -6, -6, -14, 24, 8, 27, 22, 25, 4, 8, 13, -1, 15, -9, 21, -19, -18, -1, -4, -58, -24, 16, -11, -7, -9, 19, -3, -10, 17, 18, -8, 32, 16, 10, 8, 37, 7, -16, 3, -10, 7, 6, -10, 0, 6, 20, 2, -49, 7, 21, 32, -3, -11, -24, 15, 4, 13, 43, -6, 23, 30, 3, 4, -15, -13, -12, -18, 2, 27, 31, 2, -16, 16, 4, -3, -25, -2, -4, -2, -19, -22, -15, 16, 31, 28, 30, 1, 16, 2, -19, 4, -51, -64, -43, 8, 3, 19, 39, 22, -3, 2, 32, -34, -43, -27, -44, 3, 0, 0, 17, 14, -1, 4, 1, -1, -28, -21, -31, -46, -43, -62, -16, 5, 32, 18, 13, 24, 8, -16, -30, -49, -23, -12, -5, -16, -1, 14, 4, 25, -29, -25, -32, -25, -23, -34, -42, -13, -15, -1, 11, -4, 26, 27, 25, 3, -17, -9, -17, -26, -47, -35, 20, 15, -24, 3, -35, 6, -48, -67, -22, 4, -24, -45, -41, -17, -23, -6, 0, 16, 10, 10, 5, -1, -22, -12, -20, -34, -19, 2, 22, 18, 6, -14, -31, 1, -16, -49, -29, -28, -8, -7, -37, -8, -3, 17, 4, 14, 9, -2, 4, -29, -24, -24, 2, -23, 7, 0, -7, -4, 13, -14, -1, 20, 11, -26, -25, -19, -4, -1, -9, -4, 12, 4, 16, 12, -19, -5, -13, -26, -3, 3, 7, -20, -20, -19, 8, 13, 10, 4, 5, 10, 19, -2, 18, 23, 30, -7, -11, 8, 18, 41, 24, -14, -15, 2, -25, -4, -26, -26, -2, -19, -3, 23, 26, 14, 14, -5, 9, 52, 21, 26, 2, 19, -1, -6, 39, 26, 40, 0, -1, 24, -2, 9, -12, -9, 9, -9, -14, 13, 0, 22, 36, 24, -11, 11, -21, 0, 15, 34, 36, 21, 11, 11, 18, 21, -15, 16, 4, 19, 5, 11, 16, -7, 12, 8, -8, 12, -16, 31, 22, -7, -4, 14, -17, -22, 11, 4, 4, 45, 10, -10, 5, -1, -22, -18, -9, -6, 18, 2, 15, -12, -6, -12, -4, 21, -6, 16, 27, 14, -4, 9, 7, 2, 16, -3, 11, 21, 4, -4, -8, -7, -10, 10, 14, -12, 6, -21, 4, 19, 16, 23, -3, 27, 5, 4, -22, -16, -20, 18, 17, -5, 1, 11, 2, 15, 2, 22, 16, -14, -4, -8, -4, -14, -18, 8, 26, 19, 17, 10, 4, 15, 13, -9, -44, 13, 17, 6, 8, -9, -17, 0, 6, -8, -19, 5, -8, 15, -5, 6, -9, 20, -9, -4, 3, 20, -5, 28, 20, 5, 14, -8, 29, -16, -12, -11, 20, 2, -2, -7, -3, 4, -11, -36, -36, -11, 10, -19, 7, 9, 13, -9, -2, -4, 11, 14, 18, 22, 32, 10, 11, 18, -13, -16, -9, -27, -20, -5, -3, -1, -2, -31, 0, -1, 40, -8, 17, 18, -9, 19, 14, 31, 40, 19, 19, -7, -15, 8, 4, -3, -1, 5, 15, -33, -10, -19, 22, 25, -8, -8, 5, -14, 7, 9, -4, 16, -1, 11, 45, 35, 39, 23, 7, -24, -32, 3, -16, 6, -1, 3, 5, -7, -7, -8, -15, -16, -15, -19, 4, -16, -14, -20, 28, 13, -8, -40, -23, -2, 7, 15, 8, 7, -15, 1, 14, 4}, { -15, -16, 5, 13, 0, -7, -17, 18, 3, -8, 15, 6, 0, 10, 39, 15, 3, 3, -6, 7, -7, 13, 4, -13, -8, -3, 2, -1, -8, 13, 16, 12, 4, -4, 2, 10, -12, -2, -17, -5, -29, -23, -27, 2, 10, 11, -1, -3, -8, -22, -23, -2, -10, -13, -13, -3, 0, 12, -18, 4, 9, -8, -12, 3, 27, 31, 20, -5, -6, -11, -34, -2, 17, -1, 10, -42, -11, 26, -6, -26, 5, 18, -6, 4, -15, -9, 2, 8, -14, 5, -11, 3, 24, 25, 13, 24, -1, -25, -30, -11, 3, 5, -3, -20, 14, 14, 18, -10, -11, -9, -44, -15, 4, 12, 30, 24, -19, 16, -12, -7, 3, -6, 10, 28, -9, -34, -16, -23, -1, -15, 18, 14, -18, 6, -9, -3, -13, 8, -49, -32, 4, 10, -1, 16, 22, 13, -19, 11, -4, -28, -25, -10, -24, -7, -8, 6, 25, -1, -9, 12, 5, -7, -2, -3, -19, -17, -36, -18, -16, 13, 6, -3, 18, 32, 47, 17, 11, 15, 37, 8, 7, 14, 22, 12, 5, -4, 21, 24, 7, 8, 33, 3, -33, 1, -22, -11, -11, 35, 10, 5, 12, 21, 16, 16, 24, 7, 21, 37, 40, 31, 6, -7, 9, 18, 5, 7, 0, -4, 9, 11, -19, -39, 1, -2, 18, 7, -18, -4, -2, 28, -6, -3, 2, 33, 22, 41, 12, 5, 35, 5, -4, -13, 6, 15, 15, 0, 17, 9, -21, -52, 8, 20, -6, -17, -33, 3, -17, 1, 20, 8, 8, 37, 8, 17, 21, 0, -3, -4, -24, 10, -8, -8, 0, -8, 48, 16, -56, -20, 43, 33, -5, -1, -22, -25, -45, -13, 11, -12, 4, -15, -27, -18, -27, -65, -62, -42, -34, -1, 15, -11, -14, -3, -10, 13, 2, 19, 47, 50, 9, -8, -31, -30, -46, -27, -57, -62, -54, -81, -85, -96, -98, -44, -51, -20, -2, -21, -18, 3, -10, 3, 30, 23, 3, 16, -28, -19, -17, -16, -29, -20, -62, -68, -107, -113, -108, -116, -106, -75, -22, 7, 11, 0, -1, -4, -4, -7, -24, 19, -7, -22, -21, 36, 18, 19, -19, 5, -18, -36, -75, -71, -66, -67, -58, -50, -34, 7, 42, 51, 14, 3, -10, -19, -22, -6, 4, -14, -19, 16, 41, 19, 18, 33, 1, 3, -3, -9, -5, -16, -2, 5, -3, 0, 52, 56, 33, 41, 28, 20, 7, -14, -10, 23, -11, -4, -4, 0, 26, 30, 41, 20, 3, 12, 11, 4, 8, 34, 15, 27, 43, 32, 42, 19, 28, 31, 3, 24, -4, 32, 13, -3, 9, 8, 33, 41, 32, 2, 2, -2, -15, -7, 41, 11, 68, 40, 22, 15, 27, 26, 35, 32, 2, 7, -6, 33, 20, 13, 30, 30, 17, 38, 13, 31, 11, 4, 13, -1, -2, 8, 31, 12, 41, 4, 31, 2, 33, 10, 7, -6, -6, -21, 3, 9, 8, -1, 18, -12, 14, 20, -6, 15, -4, 5, -2, 10, -22, -16, -6, 21, 22, 30, -10, 2, 6, 22, 2, -17, -24, -5, -8, -11, 19, 10, 34, 16, 1, -9, 3, -10, -26, 2, 33, 7, -18, -23, 0, -24, 11, 19, 10, 13, -8, 5, 15, -13, -24, -19, 1, 2, -19, -13, 6, 6, 16, -12, 2, 1, -5, -13, 18, -18, 9, -19, 3, 10, -18, 9, -3, 16, 18, -6, 14, 14, 5, 14, -19, 7, -28, -18, 9, -3, -17, -3, -37, 0, -14, -24, -3, -11, 13, 2, 8, -12, -21, -17, 3, -13, -10, -6, 10, -1, 12, -2, -12, -14, -16, -20, -10, 19, -16, -25, -34, 1, -29, -12, 10, 11, 1, -20, -4, -26, 19, 31, -18, -21, 0, 12, 3, 19, -2, -10, -28, -28, -24, -21, -11, 0, -19, -4, -27, 13, 9, -23, -15, -14, -15, 8, -16, -22, -9, -6, -2, 5, -3, -5, -27, -9, -24, -7, -15, 4, 8, 2, -14, -23, -28, 14, 20, -18, -18, 14, -4, 2, 8, -2, 4, -27, 7, -11, -17, 0, 28, 22, 17, 1, -9, -4, -5, -12, -8, 21, -41, -45, -23, -11, -12, -22, 17, 10, 15, -10, -5, -12, -7, 4, 7, 21, 35, 11, 13, 3, 21, 9, 2, -43, 1, 28, 43, -16, -23, -10, -27, -26, -6, -6, 6, -4, -9, 12, 17, 9, 17, -6, -31, -27, -29, 22, -13, 11, -6, 22, 15, 33, 19, 27, -8, 13, 2, 4, -12, -32, -18, -4, -17, 20, 7, -5, 14, -6, 12, -1, -14, 20, 21, 49, 40, 10, -5, 4, 4, 27, -16, 11, 4, 31, 3, 12, -5, -3, -22, 8, 17, -12, 14, -12}, { 15, 13, 14, -12, -8, -1, 4, 19, -2, 0, 7, 14, 18, 13, -5, -9, -3, 5, -17, -1, 10, 17, 3, 2, 2, -16, -14, -14, -10, 6, 10, 10, 3, 9, 36, 8, 39, 10, 27, -5, 10, 35, 41, 30, 3, 19, 28, 28, 43, 24, 14, 9, -15, -6, -3, -1, 4, -18, -17, -3, 21, 29, 39, 39, 4, -10, 27, 31, 14, -3, 20, 38, 37, 20, 2, 44, 25, 8, 14, 21, -8, 6, 4, -12, 0, 15, 9, -14, 7, 0, 22, 28, -23, -41, -19, -5, -11, -4, 36, 24, 41, 14, 25, 35, 2, 26, 25, 27, -4, 1, 4, -3, 13, 8, -30, 4, -12, 8, 20, -23, -45, -34, -16, -2, -17, 20, 0, 39, 4, 0, 1, 1, -12, -17, -1, -27, -56, -48, -22, -10, -13, -12, -14, -17, -9, 3, 2, -3, -10, -27, 3, 22, 22, 22, 31, 7, -8, 4, 21, -3, 12, -28, -35, -18, -29, -14, -22, 7, 18, 8, 8, -28, -8, -19, 8, 8, 3, -10, 13, 26, 27, 11, 4, 17, 9, 19, 0, 4, 13, -24, -22, -21, -11, 5, 0, -25, 12, -30, -6, -13, -20, -18, -19, -12, -10, -5, 7, 19, 19, 0, 25, 19, -14, -21, -12, -18, 12, -3, -7, -46, -45, -48, -44, 0, -17, -26, -2, -21, -4, 5, 2, -12, 8, -3, 19, 24, 2, -17, 17, 2, -24, -34, -43, -15, -8, -10, -40, -49, -47, -34, -43, -3, -1, -27, -22, -24, 23, -20, 7, 16, -11, -15, -1, -1, 6, 14, 24, -3, -15, -45, -13, -21, -18, 6, -55, -37, -28, -49, -39, -3, -1, -9, -25, 7, 12, 4, 27, 13, -24, -18, 3, -7, -2, -29, -11, -45, -36, -68, -23, -20, 8, -7, -52, -18, -15, -17, -29, -33, 2, -5, 23, 14, -1, 5, 1, 19, -22, -18, -26, 0, -5, -26, -30, -45, -27, -33, -1, 22, 10, 27, 15, 18, 3, -4, -32, -5, -7, -16, -10, -18, 15, -11, -6, 13, 21, -17, 0, 5, -32, -38, -12, 6, -16, 8, -2, 10, 21, 8, 10, 42, 29, -7, -14, -36, 12, 9, -17, -23, 17, -10, 10, 4, 19, -16, 14, 5, -25, -26, 10, 15, 0, -23, -21, 11, 5, 4, 32, 31, 36, -13, -24, -2, 21, -18, -21, 6, 4, -5, 15, 22, 31, 5, -4, 18, -15, -14, 39, 15, 25, -26, 3, -8, 17, 24, -3, -9, 16, 10, 2, -24, -12, 3, -21, -12, -22, -7, 12, -1, 37, 15, 37, 21, -1, 21, 0, 17, -9, 11, 11, 19, 13, 8, 16, -6, -9, 1, -31, -19, -10, -20, -21, -8, -17, 10, -3, 3, 7, 10, 11, 19, 7, -18, -1, -8, -26, -24, 9, -12, 9, -7, -5, -17, -2, 6, -11, -19, 18, -1, -24, 9, -28, -12, -3, -10, 17, -2, -3, 4, -18, -7, 10, 8, -21, 0, 19, 9, 10, -19, -13, 3, 14, 19, -10, -38, 8, -18, -20, 7, -6, -42, 4, 26, -5, 2, 1, -8, -18, -16, 30, 21, -3, 4, -8, -16, 4, 11, -1, -26, 8, 23, -6, -20, 5, -1, -9, -9, -30, -8, 14, 14, -2, 10, -4, -7, 5, 10, 9, 1, 25, 17, 6, 7, -6, 9, 5, 19, -15, 16, -6, -8, -3, -6, 13, 13, -2, 9, -21, -17, -10, -19, -16, -20, -14, -11, 34, 21, 0, 14, 14, -22, -26, 3, 26, 24, 11, 15, -24, 9, -12, 0, 1, 6, -18, -1, -22, -14, -18, -13, 14, 5, 6, 14, 37, -8, 2, 15, 2, -4, -13, -4, -1, 2, 18, -9, -12, -6, 1, 14, 20, 12, -5, 5, -7, -1, -12, -15, 17, 13, 25, 11, -5, -9, 14, 28, -3, -20, -8, -39, -3, 3, 5, 0, -22, 7, -2, 15, 0, -27, -19, -5, -29, -27, -26, -7, -29, -25, 21, 27, 19, -22, 19, -2, 2, -3, 24, -23, -6, -9, 23, -1, -7, -3, -1, -15, -16, -25, -31, 1, -25, -21, -6, 14, 11, -14, 9, 8, -14, -14, -2, -26, 14, 2, 32, -1, 23, 35, -15, -15, 14, 18, 16, -3, 22, 14, 2, -2, -26, 2, 6, -5, 15, 15, 36, 71, 7, -34, -8, -6, 15, 13, 27, 6, 24, 25, 6, 14, -7, 17, 13, 6, 16, -7, 9, -14, -7, 13, 24, 18, 31, 8, 28, 53, 24, 19, 32, 17, 34, 51, 40, 0, -13, 7, 18, -18, 17, 6, -15, 15, -1, -6, -7, 9, -15, -4, -6, 7, -6, 11, 1, 25, 29, -21, -8, -1, 28, 16, 9, 11, -18, -7, 3, 5, 9, -6}, { 7, 18, 8, -13, 0, -1, 11, -3, -5, -15, 11, -15, 3, -7, 20, 9, -18, 18, -11, -13, 11, 7, 0, -8, 14, -14, -1, -16, 4, -14, 11, -9, -17, -17, -22, -20, -12, 1, -16, -45, -46, -37, -11, -38, -16, -8, -26, -38, -33, -17, -6, -10, 4, -11, -2, 0, -5, 19, -7, -17, -14, -11, -34, -29, 5, 17, -5, -22, 7, 14, 26, 28, 14, 26, -3, 13, 17, 2, -36, -50, -7, 4, 1, 1, -2, -17, 12, -42, -8, 14, -32, -15, -14, -3, 5, 14, 10, -10, 8, -18, 11, 7, 7, 4, -5, 2, -12, -60, -3, 9, -23, 13, 5, 12, -12, 3, -14, 28, 29, 9, 28, 8, 28, 26, 20, 19, 24, -10, -25, -44, -5, -11, 1, 6, -7, -48, 16, 0, 6, -9, -15, 1, -8, 4, 5, 35, 42, 33, 7, 25, -2, 1, 6, 24, -22, 23, -2, -33, 2, -30, 1, -16, -21, 24, 18, -19, -4, -8, 16, 5, -6, 35, 40, 8, 51, 25, -2, 4, -6, -5, 10, -20, 12, -9, -4, -17, -13, 2, -1, -14, -12, 4, 21, -7, 37, 6, -14, 10, 0, 14, 44, 42, 26, 5, -25, -27, -10, 7, 8, -9, 11, -5, -15, -27, 14, 6, 17, 23, 9, 10, 20, 15, 27, -15, 2, 14, 24, 37, 28, -8, -1, -48, -44, -47, -37, -8, -17, 18, 12, 4, -29, -23, 0, 11, 24, 8, 21, 16, 46, 60, 31, 19, -7, -20, 33, 53, 0, -43, -45, -12, -51, -16, -3, -13, 9, 0, 12, -5, -47, 2, 22, 8, 23, -3, 9, -12, 15, 37, -1, 16, 12, -12, -11, 41, -37, -46, -42, -34, -20, -20, 1, 1, 16, -15, -5, -8, -29, -4, -12, 21, 8, -19, 9, -16, 16, 46, 26, 11, 0, -6, -21, -47, -40, -40, -12, -23, -22, -35, -13, -13, 8, -10, -17, -35, -6, -23, -20, -3, 17, -6, -14, -22, -14, -11, -29, -23, -11, 8, 9, -34, -19, -19, 4, -3, 17, 13, 20, 4, -12, -2, 19, -2, -24, -2, -17, 11, -15, -4, -19, -20, -38, 21, -22, -32, 3, 5, -5, -29, -17, -15, -3, 16, 27, 6, 18, 0, 27, -3, 20, -13, -26, -7, -9, -16, -1, -12, -27, -19, 13, -19, 3, 19, 2, -3, -5, -10, 15, 7, 24, 52, 10, 26, -3, 7, 3, 12, 12, 25, -3, 11, 3, -2, -19, -34, -44, -29, 16, 9, 39, 38, -26, -2, 5, 30, 46, 36, 35, 6, 32, 17, 28, 2, 31, 22, 36, 21, 35, 13, -5, -8, -9, -3, -27, -34, -5, 16, 44, 2, -2, 17, 33, -8, 38, 18, 26, 33, 19, 11, 4, 28, 14, 26, 27, 20, 21, 10, 13, 0, -9, 18, 7, -18, 16, -9, 50, 32, -15, 5, 36, 27, 38, 20, 14, -6, 13, -5, 13, 5, 14, 8, 23, 7, 16, -2, 21, 7, 13, 32, -10, -9, -30, 31, 38, 5, 35, -5, -4, 41, 28, 10, -12, 5, 4, 3, -24, -27, -29, -23, 24, 10, 27, 5, 2, 27, 12, 42, 10, 19, 13, 19, 13, 31, 13, -24, 5, 10, 2, 27, -17, -23, -21, -11, -33, -43, -50, -6, 33, 16, 23, 5, 29, 29, 20, 26, 12, 27, 39, 49, 43, 9, -1, -3, -4, 11, -12, 8, -16, -18, -35, -31, -53, -27, -40, -14, 4, 17, 7, 16, 34, -6, 14, 28, 40, 42, 39, 36, 32, 8, 8, 1, 11, 7, -10, 5, -16, -30, -15, -33, -26, -17, -18, -17, -16, 2, 11, -25, 25, 12, 8, 16, 27, 35, 56, 28, -17, 7, -7, 8, 27, 14, 24, -15, -1, -17, -8, -13, 10, -12, -7, -6, -30, -19, -19, -31, -8, -9, 33, -3, 7, 47, 24, 8, -12, -2, 18, -6, 8, 14, 52, -2, -24, -12, -22, -32, -5, 10, 11, 11, 1, -16, -16, -48, -45, -20, -13, 6, -13, 3, 10, 6, 22, 9, -7, 7, 5, 20, 43, 27, 2, -3, -3, -15, 20, 7, -13, -1, 13, -8, -43, -28, -2, -21, -4, 5, -6, 26, 5, 4, 21, 16, 18, -8, 3, -23, 22, 54, 53, 49, 30, -26, -3, -15, -6, 6, 3, -11, -17, 1, -19, -26, -25, -5, -2, -30, -33, 22, 17, 7, 9, 10, 19, 11, 28, 3, 24, 37, -21, -3, -10, 1, 22, 28, 9, 17, -3, 16, -31, -16, 6, -5, -7, 15, 18, -11, 10, 1, 18, 8, 7, -7, -4, 3, -12, 7, -1, 17, 32, 33, 2, 24, 6, 9, -18, -13, 24, 18, -13, 5, -27, -6, 2, -11, 11, 1}, { 3, -5, -6, 0, 17, -10, -18, -7, 4, -5, 18, 14, -5, 8, 4, -14, 9, -2, -12, -1, -4, -13, 18, 8, 7, 16, -9, 2, -16, -6, -1, 16, 10, -17, -4, 14, -12, -17, -10, -17, -10, -9, 41, 33, 6, -7, -27, -15, -9, -8, -1, 4, -16, 5, 11, 11, -10, -19, -7, 5, 7, 12, 11, -3, -10, 17, 19, 2, 25, 19, 1, 43, 34, 5, 20, 30, 31, 16, -12, 4, 14, 9, -13, 13, 1, 18, -15, -7, 0, 9, -6, -12, 2, -4, 22, -9, 21, 18, 7, 38, 18, 4, 20, 16, -14, -56, -23, -29, -2, 17, -19, 6, -3, -4, 23, 0, -11, -13, -10, -15, 1, 24, 20, 32, 4, 19, 18, 13, 34, 9, 2, 18, 14, -39, -14, -40, -23, 17, -6, -11, -17, -16, 17, 0, -13, 15, 38, -8, -8, 6, 34, 24, -15, -5, -8, 5, -7, -20, 14, 3, -11, 6, 27, 17, -5, -26, -43, -33, -6, 0, 1, 17, 3, 5, -15, -6, -6, -32, -17, 3, -13, -4, 2, -7, 22, 22, 23, -6, 9, -8, -4, 22, 20, 10, 16, -34, 8, 37, -7, -20, 9, 8, -24, -5, -3, -11, 6, 1, 14, -19, 32, -4, 23, 16, 30, 25, -5, 0, -1, 21, -41, 3, -13, -34, -4, 24, -30, 15, 21, -15, -8, -26, 10, 1, -8, 15, -24, -4, 14, 8, 9, 11, 2, 20, 3, -11, 8, 32, -35, -7, 2, 0, 9, 2, 11, 10, 14, 4, 6, 6, -4, 17, -18, -6, -8, -34, -21, -12, 3, -4, 3, -16, -30, -19, -3, -3, -15, 12, -4, -4, 14, 12, 32, 40, 19, 20, -22, -18, 6, -34, -33, -22, -9, -30, -22, 12, 3, 20, -2, 28, -32, -15, 7, -10, -17, -3, 12, 30, -15, 23, 24, 15, 5, 5, -15, -42, -63, -45, -26, -22, -35, -48, -2, 15, 12, 8, 26, 6, -29, -44, -28, -32, -51, -22, -30, 11, 1, -16, 15, -11, 1, -29, -37, -52, -33, -50, -34, -3, -29, -34, -4, 29, 7, -7, 13, -22, -29, -16, -28, -22, -14, 10, -16, -5, 3, 0, -24, 10, 18, -38, -17, -10, -17, -6, -16, -2, -15, -6, 15, 14, 27, 23, 6, -22, -27, -17, -21, 5, 9, 31, 4, 19, 9, -15, 16, 28, 18, -24, -1, -12, -8, -10, -7, -22, -10, -20, 27, 24, 30, -3, -5, -6, -19, -27, -12, 14, 13, 18, 12, -5, 17, -23, 31, 27, -22, -14, -3, -3, -28, 15, -14, 4, 1, -17, 15, 6, 20, 10, -20, -7, -22, -5, -11, -13, 33, 9, 31, 11, -3, 10, 53, 0, 1, 5, 2, -4, 11, -3, -15, -11, -20, -14, 0, 20, 24, -26, -17, -21, -11, 0, 12, -14, 26, 4, 1, 21, -7, -8, 33, 1, 11, -7, 41, 14, 26, 8, 5, -6, -24, 6, 24, 27, 5, -21, 6, -19, 1, -24, -2, -7, 29, 49, 22, 18, 16, 9, 25, 28, 12, 18, 15, -3, 13, 26, 24, -11, -14, 1, 2, 32, 22, 3, -4, -6, -5, -17, -10, 0, 17, 32, 5, 20, 16, 4, 0, 28, 12, 18, 13, 14, 7, 26, -5, 18, -1, -2, 20, 19, 16, 0, 16, 1, 4, -6, -9, 22, 19, 47, 21, 8, -17, -8, -15, 30, 16, 24, 34, 0, 16, 21, 10, 20, 25, 13, 16, 4, 30, 13, 13, 26, -1, -12, 0, 38, 48, 56, 30, 16, 2, 2, 17, 39, 16, 23, 22, 29, 7, -1, 19, 0, -14, 19, 1, 27, 20, 16, 31, 24, 0, 2, -14, 40, 46, 20, -36, -18, -9, -14, -6, -2, 34, 44, -2, -14, 24, -3, 5, -30, -3, -4, -21, 4, -5, 30, 15, 45, 44, 22, -27, 45, 51, 20, -18, -12, -10, 7, 22, 5, 2, 13, -9, -22, 7, -15, -18, -1, 9, -19, 2, 13, -8, -3, -4, -1, -11, 14, -22, 21, 48, 41, 36, -14, 6, -6, 10, 11, 21, -21, -6, -30, -1, -7, 17, -10, -9, -30, -17, -19, -53, -28, 6, -14, 6, 31, 20, -5, 19, 10, 17, 4, -18, -2, 3, -9, -6, -3, -15, -2, 35, 37, -16, -20, 30, 20, 16, -15, -21, -37, -39, -11, 9, 5, 28, -7, 4, 5, 20, -5, -11, 7, 12, -11, 10, -13, 13, 19, 18, 16, 23, 9, -38, -28, -19, 29, -15, -6, -18, 1, -16, -10, 9, 12, -19, -16, 6, -2, 17, -10, -14, 18, -8, 19, -16, 12, 1, -18, -5, -38, -6, -5, 26, 12, -7, 8, 7, 11, 8, 18, -17, -15, -1, -3, -13, -5}, { 7, -1, -4, 14, 17, -5, 6, 15, 13, 15, 17, 19, -3, -15, 18, -18, 1, -15, -1, -12, -1, -5, -13, 6, 7, 1, 3, -2, 0, -6, 6, 15, -7, 14, 8, -11, -30, -26, -22, -9, -6, -6, -25, -13, 12, -27, -1, 8, -13, -4, 17, 11, 14, -3, -1, 15, -1, 2, -1, -16, -1, -2, 5, -14, -35, -29, -25, -33, -52, -63, -54, -14, -12, -6, 25, 2, -11, -4, -15, 7, -8, -5, 11, 8, 6, -4, -17, -4, -4, 18, -30, -11, -22, -35, -12, -52, -70, -64, -42, -20, -7, 4, 41, 40, -3, 12, -9, 1, 27, -5, 11, 8, -16, -3, -6, 6, 26, -17, 2, -11, -17, -14, 5, 33, 14, 1, -10, 14, 0, 21, 22, 11, -15, 12, 28, 12, 37, 3, -2, -13, -17, 7, -14, 27, 17, 29, 16, 10, 26, 8, 23, -22, -13, -2, -21, 9, -3, 4, -7, -2, -2, 2, 7, 23, 6, 5, 19, -1, 16, 14, 4, 17, 31, 33, 28, 0, 24, 15, 21, 10, -3, -1, 29, -10, 12, -11, 6, -2, 2, -15, -17, -14, 3, 10, 6, 43, 10, 4, 29, 5, 11, 16, 25, 13, 7, -4, 19, 19, -3, 10, -6, -7, 12, -4, -9, -11, 8, -15, -6, -36, -3, 11, 18, 32, 8, 12, 2, -2, 9, 0, -10, 10, -13, 12, 7, 8, 5, 2, -12, 21, 3, 15, 25, 5, 2, -5, 9, 8, 3, 31, 11, 22, 18, 26, 18, -13, -6, -1, -8, 16, 9, 3, 14, 29, 6, -13, 3, 6, 6, 17, 8, 12, -5, -13, 7, 12, 31, 22, -19, 7, 20, 33, -21, 12, -15, -16, -9, 13, 21, 34, 16, 31, 32, 21, -16, -4, -20, -4, -7, -25, 7, -3, -10, 0, 8, -9, 17, 8, 0, 7, 4, -35, -4, -14, -29, -36, 6, 6, 19, 5, -4, -32, -39, -17, -13, -22, -16, -50, -13, -5, 18, 32, 41, 1, 18, 15, 19, -3, -20, -36, -10, -26, -12, -11, -9, -11, -7, -1, -18, -20, -16, -14, -18, -30, -26, -41, 14, -17, 16, 27, 2, 21, -48, -9, -18, -3, -4, -46, -21, -18, -10, 5, 5, -1, 1, -11, -13, 17, 15, 0, -14, 17, -9, -3, 7, 5, 16, 22, 45, 4, -45, -12, 25, -7, 33, -35, -17, -14, 1, 26, 20, 24, -4, -2, 2, 9, 7, -2, 6, 5, -13, -1, -3, -13, 1, 26, 64, -41, 3, -14, 17, 13, 0, -41, 11, 21, 25, 30, 41, 17, 40, 18, 0, -13, -5, 22, -14, -1, 17, -12, -13, 9, -9, 56, 29, -73, -1, -13, -6, -11, -1, -49, -30, 19, -3, 17, 39, 57, 56, 30, 53, 28, 16, 5, -35, -6, -3, 10, -26, 15, 18, 10, 18, -77, -56, -9, -11, 13, 12, -38, -72, 17, 6, 24, 2, 2, 31, 18, 26, 15, -4, -15, -30, 9, 8, 9, 9, 16, 2, 44, 4, -50, -36, -13, 19, 2, -7, -72, -36, -33, -11, -12, -55, -26, -32, -13, -16, -44, -34, -17, 20, 21, 1, -3, 21, -7, 18, 37, -16, -12, -8, -10, 6, 4, 21, -20, -42, -58, -45, -68, -70, -61, -71, -78, -104, -98, -59, -29, 19, 18, -6, 10, 17, 5, -16, 5, 7, 10, -32, -15, -17, 22, 19, 23, -48, -49, -34, -39, -73, -69, -104, -102, -115, -96, -46, 23, 14, 24, 25, 17, 20, -17, 12, -6, 18, 3, -20, -8, 16, 30, 30, 45, 27, -21, -31, -38, -44, -61, -38, -44, 0, -8, -6, 19, 22, 6, 14, 0, -14, -1, -1, 9, 27, 15, -39, 9, -15, 3, 16, 35, 19, 11, -10, -10, -28, -47, -22, 6, 23, 25, 12, 24, -5, -8, 1, -6, 8, -7, -3, 17, 11, 1, -3, 17, -19, 2, 9, 35, 36, 13, 35, 25, -8, 0, 0, 45, 11, 12, 18, 8, -23, -13, -6, -13, -11, -15, -15, 13, 38, 17, -7, 16, 1, -6, 26, 38, 43, 17, 44, 28, 14, 40, 54, 18, 8, 17, 18, 19, 14, 33, -12, -5, -3, 13, 12, 33, 17, 3, -37, 15, -14, -1, -18, 21, 25, 48, 54, 48, 51, 28, 40, 35, 63, 51, 8, 10, 24, 29, 8, 19, 23, 4, 43, 53, 45, -23, -24, -12, -10, 18, -13, -16, -9, 22, -2, 9, 14, -30, 41, 20, 17, 2, -23, 50, 42, -9, 5, 34, 47, 31, 26, 12, 15, -18, 17, -9, -12, 18, -8, -5, -10, 17, -28, -1, 11, -7, 26, 13, -13, -17, -10, 9, -12, 1, -3, 1, 24, -16, -1, 34, -19, -16, 16, 3}, { -12, 6, 18, 11, -17, -9, 16, -13, 3, 15, 8, 4, 5, -31, -15, 9, -4, 9, 14, 11, -2, 4, 18, -14, -8, -16, 1, 18, 14, 8, 16, -8, -2, 18, -18, -25, -26, 7, -6, -14, 0, -25, -2, 11, 22, 9, 6, 1, 13, -12, -4, -11, 11, 18, 15, -5, 7, -1, 16, -8, -16, -10, 4, -26, 8, 22, 4, 16, -21, -47, -34, -23, -12, -4, 13, -6, -12, -4, -5, 27, 28, 26, -9, -12, 18, 15, 19, 15, 16, 2, 5, -5, 25, -7, -4, -26, -13, -42, -64, -67, -35, -26, 9, -9, -19, -19, -7, 13, 2, 7, -3, -9, 13, -17, -7, 10, 33, 21, 29, -2, 35, 8, 2, 14, 16, -24, -33, -58, -44, -41, -11, -50, -33, -8, -23, -2, -4, 5, 19, 11, 2, -12, 9, 5, 18, 37, 39, 18, -14, -13, 5, 6, -13, -1, -19, -14, -7, -21, -29, -20, -19, -22, -14, -2, 0, 8, -2, -19, -8, 16, 5, 32, 30, 10, 24, 13, -1, 18, 2, 20, 31, 6, 36, 4, 7, -2, -35, -57, -33, -23, -33, -27, -26, 3, 8, -17, 0, 20, 29, -1, 8, -10, 20, -15, -1, 18, 21, 23, 23, 41, 25, 24, -14, -23, -40, -46, -44, -43, -40, -35, -10, -8, 12, 5, 8, 2, 21, 1, 31, -6, -3, -7, 0, 30, 1, 17, 37, 44, 10, 16, -21, 2, -17, -37, -47, -34, -20, -49, -38, -10, -7, 2, -17, 19, 3, 20, 4, -4, 7, 17, 18, 9, 34, 22, 25, 32, 31, -14, -8, 11, 9, 3, -28, -31, -2, -12, -33, -2, 16, 19, -8, 13, -15, 51, -5, 17, 48, 17, 39, 48, 17, 32, 3, 10, 9, -1, 16, -2, -7, -14, -15, -23, -25, 17, -30, 4, 14, 40, -23, 7, 6, 10, 32, 35, 41, -7, -3, -5, 12, 1, -13, -10, -16, 8, 18, 6, -8, -21, 1, -6, -5, 17, -13, -16, -4, 9, -4, 19, -23, -15, 19, 18, 26, 5, -8, -13, -47, -44, -13, 5, 0, 9, 5, 19, 19, -6, 12, -14, -28, -27, -33, 0, 16, -3, 4, -12, 2, -26, -14, -17, -12, -31, -9, -27, -39, -4, -5, 21, 13, 20, 7, 30, -13, -22, -8, -29, -11, -9, 19, 13, 10, -7, -13, 15, -3, -8, -12, -48, -36, -33, -14, -15, -6, 3, 9, 9, 2, 22, -7, 8, 4, 6, -22, -20, -9, -6, 5, 0, 28, 14, -12, 19, 27, 24, -28, -55, -36, -20, -19, -14, -27, -13, 3, -1, 11, 21, 10, 11, 5, 15, 29, 24, 12, -22, 14, -26, -1, -13, -3, 7, 19, -5, -15, -62, -20, 7, -9, -11, -1, 25, 7, 18, 4, 12, -22, 0, -16, -19, 13, 11, 32, -3, 2, -13, 1, -12, -15, -8, 16, 18, 0, -2, -16, -10, 7, 2, -6, 0, 15, 47, -13, 5, -16, 10, -9, -17, -7, 18, 3, 8, -7, -31, -9, -5, 6, -14, 20, 1, -10, -8, -8, 5, -7, -14, -28, 1, -7, -21, -31, -34, -6, 4, 10, 16, 2, 17, 4, -1, 10, -19, 24, 11, -4, -7, -4, -5, -13, -4, -33, -16, 8, 4, -16, -29, -18, -23, -13, -37, 12, -6, 25, 6, -4, 13, 29, -6, -22, -9, 4, 4, -8, 12, 4, -7, 6, -12, -7, 2, 24, -16, 2, -23, -24, -23, -26, -13, 10, -5, -18, 12, 31, -2, 29, 6, -44, -24, 2, 3, 12, -18, 12, 22, 19, -20, -33, 6, -8, -18, -28, -14, -19, -4, 10, -3, 17, -9, -22, 1, 5, 7, 14, -33, -47, -51, -8, 19, -10, 4, -10, 36, 17, -16, 16, 10, 3, -27, -3, -18, -16, 4, -1, 28, 11, -23, -10, -21, 2, -16, 3, -18, -14, -5, -4, 18, -10, 16, 5, 38, 27, 3, -4, -19, 4, -10, -6, 20, -24, 7, -15, -14, -30, -2, 6, -13, 11, 3, 12, -31, 1, -5, -21, 5, 8, 12, 8, 37, 21, 5, -8, 17, -14, 1, 17, 21, -10, 23, 3, 7, 0, 11, 10, -5, -4, 8, -22, -8, -25, -16, -37, -1, -18, -4, -10, -18, 4, 50, 46, 42, 24, 1, 47, -3, 33, 22, 11, -6, 47, 16, 18, 26, 33, -2, -14, -8, -39, 2, -27, -17, 8, 7, -3, -3, -18, 9, 29, 14, 27, 21, 28, 34, 15, 46, 25, -3, 35, 42, 18, 20, 15, 13, 24, 45, -5, -5, -4, 18, 7, 5, -7, -3, -32, -6, 12, -4, 6, -17, -28, -30, -12, -5, 61, 23, 44, 38, 26, 8, -15, 26, 43, 40, 15, -12, -11, -14}, { 1, 12, 13, -2, 11, -12, -3, 9, -4, 14, 4, 7, 8, -22, -10, 7, 5, -7, -3, -1, -4, -13, -5, 1, 2, -1, -6, -10, 10, -11, -5, -13, -2, -2, 29, 10, 5, -2, 0, 37, 3, -8, 17, 24, -2, 5, 16, 29, 3, -5, 13, -9, 12, -14, 7, -4, 10, 3, 11, -4, -2, -13, 21, 32, 36, 31, 27, 4, -11, -36, -16, -6, -17, -8, -17, -9, -9, 19, -5, 23, -5, 17, 17, 10, 6, 0, -13, -2, 2, 0, 30, 58, 24, -13, -13, -19, -33, -33, -9, -6, -17, 10, 48, 14, -24, 9, -6, -3, -17, 17, -12, 8, 16, 9, -12, -5, 32, 29, 27, 6, -9, -25, -32, -3, -13, -12, -18, -23, 6, 5, -8, -8, 12, 17, 6, -8, -17, 3, -31, -11, -16, 9, 18, 19, -6, 38, -3, 40, 53, 3, -11, -10, -2, -26, -8, -5, 36, 12, 0, -13, -41, -13, -23, 5, -47, 14, -45, -12, -3, 6, 11, 23, 8, 27, 6, 13, 15, 0, -36, -34, -43, -9, -7, 8, 34, -2, 7, -2, 9, -20, -25, -16, -21, -7, -31, -12, 4, 3, -4, 6, 4, 31, 9, 30, 4, 27, -9, -9, -2, -17, 15, 30, 5, 23, 3, -25, 10, -40, -3, -1, -3, -32, 3, -10, -10, 2, 22, 14, 47, 25, 20, 17, 28, -4, 6, -12, 5, -3, 22, 45, 10, -7, -34, -25, -40, -27, -5, 19, 2, -5, -14, 1, 16, 39, 13, 21, 57, 2, 5, 19, 3, -1, 13, -38, -26, 15, 27, 27, 2, 3, -37, -17, -30, -3, 11, 18, 12, -14, -12, -2, -8, 52, 47, 19, 14, -5, -10, -12, -2, 11, -13, -4, 7, -13, 18, -5, 5, 6, -4, -21, -20, 4, -3, 7, -20, -7, -17, -9, 17, 21, 51, 5, 23, 10, -13, 7, 5, 14, 22, -12, 2, 9, -5, 12, -16, -21, -19, -13, -21, -12, -1, 13, -36, -13, -4, -2, -1, 40, 31, 8, 10, 25, 0, -10, -6, 19, -9, -9, -5, -5, -11, 13, -3, -11, -4, -4, -12, -14, -8, -8, 15, -13, 26, 10, 12, 20, 49, 1, 12, 6, 5, 2, -3, 5, 16, -16, -40, -41, -2, -1, -9, -9, 11, -2, -3, -5, -7, -3, -5, -21, -10, 15, -16, 29, 37, 16, -6, 47, -7, -16, -3, 3, 5, -5, -29, -46, -16, -9, 14, 34, -6, 22, 4, -12, 1, 19, -15, -7, -16, -4, -13, 14, 68, 45, -23, 23, 22, 19, -19, 8, 12, 3, -28, -11, -39, -16, 18, 38, 27, 26, -6, -7, 15, 4, -5, -3, 30, 12, 18, -3, 40, 48, -9, 29, 34, 40, 3, -2, -12, -6, -30, -49, -13, 23, 28, 13, 3, 9, 9, 2, 20, 2, 13, -40, -6, -19, 10, 7, 9, 15, 47, 21, 18, 5, -23, 14, -3, -8, -57, -53, -11, 32, 26, 35, 29, -5, 11, 11, 16, 1, 25, -45, 3, -10, -4, 4, 38, -8, 27, -7, 6, -2, 8, -6, -20, -34, -67, -50, -9, 9, 26, 49, 22, -8, 25, 24, 37, -2, -4, -67, -8, 6, -12, 21, 28, -18, 29, -6, 5, 17, 5, -5, -12, -28, -75, -50, 2, 16, 21, 30, 24, -3, -19, -19, -17, -28, -13, -48, -9, -5, 3, -3, -2, -15, 12, 21, -17, 20, 0, -6, -19, -20, -58, -23, 3, 39, 46, 20, 11, -37, -26, -27, -38, -58, -19, -48, 0, 3, 5, 20, 9, -2, -8, 11, 20, -24, 4, -5, -18, -27, -28, -34, 23, 31, 13, 3, -15, 0, -11, -15, -26, -48, -24, 2, 9, 18, 3, -16, 12, -21, -18, -8, -11, -26, -32, -9, -40, -42, -23, -1, -2, 49, 13, 11, -7, 16, -32, -3, -36, -54, 3, 3, 11, -17, -13, 18, 22, 1, 27, 5, -15, -31, -33, -40, -57, -68, 5, -9, 0, 10, 12, 7, 13, -9, -11, -13, -43, -46, 6, 19, 11, 15, 2, 19, -15, 8, 13, 10, -33, -35, -38, -54, -72, -23, -35, 0, 18, 8, 41, 33, 24, 13, -4, -14, -24, -22, 12, 14, 11, -6, -10, -19, -34, -11, -8, 25, -8, -16, -14, -44, -54, 0, -22, -14, 3, 29, 16, 6, 23, -14, -2, -5, -1, -31, -36, 2, -13, 5, -17, -8, -14, 11, -14, 14, -5, 22, 1, -38, -42, 7, 15, -14, 7, -9, 0, -22, 18, -1, -35, -27, -39, -33, -1, -17, 15, -4, -4, 14, -5, 16, 3, 18, 6, -5, 1, 29, 45, 11, 32, 9, -3, 2, 27, 33, 13, 8, 25, -13, 2, 4, -9, -15, 13, 1}, { 13, -5, 0, -5, 9, 0, 9, -15, 12, -14, -15, -12, -9, 17, 16, 18, -4, 14, -17, -5, 13, 17, 2, 1, 5, -5, -6, 13, 18, -11, 17, 16, -6, 11, -12, 12, 7, 14, -1, -12, -7, -11, 7, -19, 20, -14, -16, 10, -19, 13, 5, 12, 8, 17, -12, 12, 9, 12, -15, 6, 17, 18, 14, -8, -7, 18, 26, 8, 5, 16, 7, 2, 2, 19, 34, 11, 18, 13, 12, -13, -16, -18, 6, 5, -11, 6, -14, -5, 5, -18, -17, -3, 11, 16, 33, 11, 47, 28, 40, 40, 39, 16, 29, 22, 1, -19, -29, -18, -19, 10, 13, 10, -18, 9, -35, -13, -29, -23, -8, -1, -4, 9, 12, 30, 29, -25, 18, 1, 8, 15, 20, -9, -3, -13, -25, -37, 6, -10, 12, -9, 7, -13, -8, -20, -19, -13, 2, -30, -11, 10, 26, 1, -11, 12, -11, -7, 15, 18, -2, -14, -5, 14, 15, 12, -8, 25, -11, -5, 18, -6, 13, -35, -39, -27, -28, -17, 6, -3, 13, 18, 5, -3, 16, 5, -8, 3, 25, 21, 0, 20, 30, 27, 43, 53, 19, 20, 12, 12, 2, -22, -13, -1, -13, -27, 16, -3, 1, -6, 3, -4, 15, 20, 40, 27, 30, 42, 36, 17, -2, 23, 40, 32, 54, 18, -3, 1, -21, 3, 18, 1, -29, -15, -18, 8, -22, 4, 1, -21, -7, 1, 31, 1, 36, 10, 22, 24, 35, 20, 24, 27, 45, -2, 3, -4, 1, 10, -7, -9, -17, -4, -7, -7, -3, 1, -6, -26, -8, -10, -4, -5, -3, 6, 5, 5, 34, 29, 16, 18, 13, -11, 4, -12, -9, -13, 2, -9, 0, 0, 6, -15, -12, -28, -23, 1, -21, -9, -36, -54, -24, -34, -31, -17, 25, -7, 12, 18, 17, -4, -21, 9, -10, -11, 12, -18, 4, -8, -17, -9, -3, -20, 7, -15, -26, -34, -34, -41, -19, -25, -22, -21, 5, 21, -40, -47, 24, 1, -10, 1, -5, 1, 5, -36, -14, -30, -21, 7, -13, 11, -7, -15, -2, -2, -27, -18, -34, -3, 15, -22, -25, -3, -15, -47, 2, -11, -4, -21, 6, 17, -12, -31, -16, -11, 11, -12, 3, -6, 13, 11, 20, -8, -44, -16, -2, 17, 7, 10, -6, -1, 6, -19, 6, 14, 20, 7, -4, 9, -12, 14, 9, 11, -5, 14, -12, -7, -15, -4, 12, 13, -26, -41, -14, -19, 22, -20, 0, 7, 22, -18, 26, 7, -4, -19, -19, -8, 13, -10, 11, 7, -29, -13, 17, -21, -19, -7, 11, -8, -12, -22, -25, -6, 13, -13, -21, -6, 5, -22, 25, -5, 13, 10, -8, 40, 30, -6, -21, -1, -3, 5, 9, 2, -8, -6, -1, -10, -29, -28, 7, 12, 3, 8, -13, -17, -6, -28, 8, 6, -18, -11, -10, 19, 6, -15, 6, -28, 1, -1, -17, -10, -15, -17, -24, -32, -40, 1, -7, 10, 3, -7, -2, -12, -3, 47, 15, 18, -1, 3, -24, 33, 7, 8, 12, 6, -23, -16, -25, -29, -37, -39, -33, -45, -18, 7, 17, 5, 12, -6, -13, 8, -14, 34, 25, 2, -13, 7, -7, -22, 9, 4, 12, -20, -12, -6, -9, 7, -5, -26, -4, 3, 9, 1, 20, 1, 2, 6, -12, -22, -19, 21, 9, 20, 9, 3, -11, 0, 2, 12, 8, -1, -8, 9, -1, 31, 14, 30, 35, 35, 14, 17, 0, 7, -1, 18, 7, -2, -7, -6, 4, -13, 14, -3, 4, 30, 11, 19, 13, -3, 26, -9, 3, 11, 18, 11, 12, 45, 24, 23, -6, 9, 10, -9, -2, 19, 44, -2, 17, 14, -3, -14, 8, 34, 38, 22, -8, 16, 1, -1, 0, 1, 16, -2, 2, 7, 21, 31, 28, 7, -1, -6, 7, 46, 4, 8, 12, -8, 14, 1, 2, 32, 30, 19, 20, 6, 18, 22, 15, 22, 13, -1, 4, -15, 5, 1, -20, -13, -8, 9, -10, 35, 19, -2, -10, 10, -1, -6, -2, 7, 7, -5, 11, 37, 8, 10, 15, 20, 26, 24, 7, -8, 18, 27, 23, -5, -1, -7, 21, 14, -10, 5, -7, 3, -3, -15, -13, 10, -31, -26, 20, 4, 25, 13, 10, 1, 29, 30, -3, 7, -26, -2, 6, 6, -9, 30, 30, 24, 7, -17, 3, -12, 3, 17, 8, -2, -23, -14, -8, -36, -45, -19, -13, -1, -12, -35, -24, -25, 9, -12, 1, 25, 28, 33, 29, 18, -14, -12, -4, 1, -11, -15, -12, -6, 2, -10, 16, 16, 3, 0, -24, 2, 15, -11, 3, -5, -28, -22, -21, -12, -2, -14, 14, 9, 8, 18, -4, 2}, { -10, -14, 16, 2, -4, -4, 4, -14, 1, 5, -5, 0, -12, -10, -16, -5, -9, -7, 4, 4, -12, -8, 9, -9, -11, 15, 10, 11, 2, 5, -9, -14, -6, -13, 6, -17, -6, 17, 7, -18, -14, -15, -16, -22, -8, -8, 10, 12, 16, 7, -1, 12, -12, -18, 0, -2, 8, -11, -19, 12, -12, -17, -1, -10, -3, -23, -19, -5, -54, -24, -14, -7, -21, -13, 20, -2, 15, -5, -18, 4, 6, 2, 1, -8, -10, 16, -7, 13, -9, 35, 20, 9, -21, -7, -20, -17, -40, -39, -28, -11, -29, -9, -6, -65, -41, -18, -12, -13, 8, -29, -15, -5, -9, -1, 10, 15, 35, 1, 7, -1, -29, -20, -10, -7, -13, 1, 10, 26, 10, 13, 10, 13, 4, 26, 26, -11, -22, 9, 30, 14, 15, -17, -8, 6, 16, 21, 13, 6, -2, 11, 4, 12, -7, 2, -23, 2, -6, 31, 6, -13, -16, 2, 11, -15, -2, 4, -5, -17, -2, -1, 6, -2, 23, -13, 10, -2, 15, 15, 16, -4, 2, 18, -2, -3, 4, 21, -20, 2, -11, 22, -3, -11, 6, 19, 17, -10, -8, -32, -5, 5, 1, 5, -5, -17, -5, 10, 14, -3, -12, 9, 21, 26, 0, 4, -6, -9, -8, -6, -26, -2, -3, 30, 20, 14, 8, -20, -20, 32, -24, 16, -5, 0, 14, -6, -8, -6, 15, 2, 18, -8, 23, 14, -5, -10, -10, 9, 16, -21, 1, 45, 3, 25, 0, -1, 9, 19, 10, -15, 9, 13, -9, 13, -11, 3, 13, -1, -7, -27, 5, -10, -20, 9, 14, 17, 14, -15, 4, 51, 11, 22, 10, -9, -13, 44, 5, 17, 1, -17, 0, 0, -5, 18, 15, -15, -2, -13, -23, -4, -27, 5, 3, 19, 20, 38, 9, 82, 41, 2, -21, -12, -1, 18, -6, 17, -16, 3, 17, -20, -9, -11, -25, -18, -16, -19, 5, 2, 18, 10, 24, 11, 13, 17, 17, 21, 19, 36, -20, 2, 2, -22, 16, -3, 6, 18, 11, -13, -26, -32, 6, 26, 15, 14, 10, 11, 17, -23, 34, -1, 1, 22, -18, 2, -23, 7, 1, -9, -12, -46, 29, 8, 7, -3, -2, -15, 5, 16, -4, 34, 8, 17, 9, -8, 4, 5, -4, 7, -23, -1, -8, -15, -26, 4, -5, 4, -3, -20, 11, 8, -19, -11, 28, 19, 34, 15, 31, 45, 29, 11, 33, -6, 3, 8, 20, 4, 18, -15, -11, -40, -37, 2, -21, -1, -9, 7, -7, -36, -22, 13, 0, 39, 33, 55, 61, 46, 41, 36, 7, -7, 26, -7, 9, -13, 19, 5, -9, -18, -5, -15, -1, -9, -12, -6, -20, -57, -32, -45, -23, -13, 21, 4, 35, 21, 15, 13, 8, -14, 8, 5, 1, -10, -8, -9, -19, -40, -51, -14, 16, 24, -15, -2, -37, -45, -63, -41, -55, -86, -61, -12, -16, 1, -5, 20, -22, -1, -21, 8, 17, 19, -4, -12, -28, 20, 8, -14, 13, 2, -13, -12, -6, -32, -19, -38, -85, -84, -85, -54, -69, -12, -33, -4, -15, -28, -18, -11, 1, 21, -12, -32, -45, -1, 34, -7, -10, -9, 3, 26, 27, 22, -20, -27, -17, -51, -49, -48, -18, -26, -8, -20, -13, -10, 13, 10, 0, -13, -36, -38, -39, 11, -17, 16, -16, -11, 11, 19, 42, 48, 36, 31, 2, -3, -9, 4, -25, 5, 28, -13, 4, -9, -9, 8, -17, 1, -8, -33, -4, 5, 1, -8, 19, -7, -5, 32, 25, 47, 45, 32, 39, 11, 37, 13, 0, -10, 6, -4, -8, -10, -22, 10, -3, -18, -55, -30, -29, -4, -6, 8, -5, -1, -20, -3, 14, 35, 13, 36, 18, 12, 6, 39, 8, 14, -2, 6, -17, -23, -10, -4, -8, -33, -29, -42, -2, -1, -6, 16, -17, 6, -8, 2, 34, -6, 19, 7, 5, -9, 11, 35, -10, 12, 14, -18, -32, -23, -36, -33, -2, -2, -12, -3, 7, -8, -7, 18, -1, -6, -14, 15, 12, 2, 3, 4, 9, 4, -11, -7, -5, -7, 18, -16, -68, -32, -21, 2, 26, 24, 20, 11, -33, -21, -20, -17, 0, 7, -5, -24, 1, 26, -18, 2, -1, -11, -19, -8, -30, -2, 4, -7, -12, -9, -26, -20, 33, 4, 16, 11, -9, -11, -9, 4, 17, 3, -6, 25, 13, 27, 19, 13, -2, -10, 0, 0, -14, 3, 55, 4, 33, 12, 22, 2, 35, 14, 13, -8, 17, -12, 8, 15, 14, 1, -14, -8, 0, 13, 8, -3, -24, -12, 8, 7, -1, 4, 32, 17, 9, 20, 25, 6, 4, -3, -8, 13, -6, -12, 2, -6}, { 5, 6, 8, 9, 0, 8, -4, 4, -8, 14, -11, 4, 3, 1, -15, -6, -19, 12, 10, -4, -4, -14, -16, 18, 10, 8, 15, 16, 18, -13, 1, -5, 5, 0, 2, -2, 1, 23, 6, 19, 54, 38, 26, 28, 9, 18, 8, 20, 12, 6, 25, 29, 14, 10, 2, 12, 16, 0, 0, -3, 27, 10, 0, 17, 30, -13, 25, 19, -24, 12, 14, 18, -3, -13, 13, 20, -3, -1, 30, 31, 10, 10, 6, -1, 4, 6, 6, 33, 9, -3, 25, 4, -36, -10, -25, -15, -43, 5, 15, 1, -1, -14, 30, 17, 8, -7, -9, -20, -10, -5, -6, -14, -3, -12, 0, 3, -10, 7, 11, 15, -43, -39, -11, -7, 3, 17, 20, 5, 2, 25, 20, 18, -3, -5, 14, 4, -54, -10, -25, -18, -1, 8, 16, -22, 5, 31, 29, 0, -26, -10, 1, -18, -17, 9, 20, 26, 2, 15, 28, 27, -16, -4, -28, -28, -32, -58, 2, -21, 10, -14, -1, 5, -9, 42, 12, -14, -16, -7, -21, -3, 6, 16, 6, 22, 23, -10, -20, -24, -14, 16, -2, -24, -50, -50, -12, -9, 12, 26, 2, 17, -9, 9, 3, -12, -28, 7, -19, 7, 15, 26, -7, 11, 6, -9, -3, -4, -8, 7, 1, -9, -35, -35, -28, -31, 13, 16, -2, -22, -14, 6, 8, -7, -8, 10, 10, 15, 14, 22, 6, 21, 18, 10, -12, -20, -11, 30, 16, -16, -19, -29, -38, -15, -13, 45, -21, -6, 12, 11, 31, 20, 4, 3, 27, 6, 20, 5, 8, 3, -15, -7, 18, 22, 18, 18, -11, -21, -21, -47, -61, 1, 19, 31, 35, 10, 0, 22, 11, 10, 7, -2, 19, 11, 22, 14, -16, 4, 7, -2, 18, 10, 16, 13, 8, -5, -15, -5, -20, -13, 15, -3, 31, 20, 0, 16, 18, 19, -20, 12, 17, 12, -2, -26, -60, -16, -16, 17, 11, 20, 14, 20, 1, -20, -33, -50, -31, 15, -3, 2, 26, 6, 11, 26, 14, 0, 29, 42, 23, 16, 6, -57, -28, -34, -4, 1, -12, -24, 11, 14, 24, 7, -25, -58, -22, -15, 2, 0, 2, -2, 35, -7, 13, -10, 4, 13, 5, -1, -52, -39, -39, -5, -12, -9, -21, 5, 13, 14, -13, -18, -9, -23, -8, -23, -7, 18, 14, -9, 41, 15, -15, 10, -14, -10, -4, -41, -33, -46, -48, -9, -18, -11, -10, -10, 14, -7, 5, 25, -6, -21, -35, 2, 7, 3, -4, 3, 6, 24, 19, 9, -32, -35, -15, -53, -37, -49, -19, -3, -6, -24, -1, 8, 35, 16, 27, 8, -18, -14, -28, 0, 5, -21, -20, 11, 29, 27, 22, 11, -1, 2, -10, -22, -31, -30, -14, -21, -26, -10, 3, 20, 10, 19, 22, -20, 1, 1, -57, 7, 18, -17, -24, -22, 16, 29, 28, 2, 12, 7, -4, -2, -34, -23, 6, -12, 7, 24, 19, 10, 15, 18, 12, -30, -26, 29, -8, 7, -15, -6, 18, -53, 4, 4, 5, 19, 25, 8, 26, 18, -14, -23, 7, -5, 14, 34, 47, 29, 8, -1, -7, -14, -8, 7, -19, -14, -7, 3, 35, -32, 15, 13, -9, -9, 22, 1, 27, 19, -2, -3, 13, -6, 19, 8, -1, 19, -2, -11, -18, -25, -25, 11, -16, 20, -7, 16, 19, 5, 0, -15, 0, -22, -15, 10, 14, 33, 22, 3, 11, -7, 4, -8, -7, -2, 5, -31, -1, -15, -7, 18, 14, 3, -10, -3, -5, -22, -29, -3, -22, -10, -21, -3, 11, 14, 27, 9, 12, 2, 19, -10, -2, 0, 13, -14, -6, -13, -6, 6, 59, -15, -8, -8, -10, -12, -24, -1, 9, 5, -9, 12, 12, 6, 14, 13, 1, 26, 14, -2, 7, -16, -1, 7, -3, 4, -12, 23, 24, -12, 18, -4, 1, -48, -4, 13, 6, 12, -11, 21, 0, -6, -16, 3, -6, 19, -19, -9, 4, 3, -21, -2, -13, -30, -28, -2, -27, 10, -6, 16, 20, 1, 32, 52, 9, 10, 3, 25, -4, 0, -26, -33, -1, 1, 12, 34, -11, -17, 0, -11, 13, -2, -5, -12, 5, -8, -13, -9, -31, 35, 23, 19, 2, 12, 22, 30, -26, 12, 9, -1, 4, -19, -2, -31, 11, 32, 26, 17, 9, 15, -6, 18, -1, 19, -18, -16, 14, 13, 7, -7, 27, -9, 0, 6, -25, -23, -35, -14, -3, 3, 26, -12, -6, 46, 1, 14, 37, -2, -8, 7, -6, 9, -17, 3, 13, -3, 29, 40, 27, 2, 6, 3, 35, 29, 14, 38, 23, 2, 10, 58, 17, 32, 41, 29, 19, 40, 8, 16, 10, -12}, { 12, 1, 5, 12, -12, 10, 13, -5, 11, 11, 7, -5, 8, 13, 2, 2, 3, 5, 12, 15, -8, 3, 14, -8, 1, 5, 7, -6, -6, 11, 15, -13, 6, 18, -12, 15, -14, -13, -4, -3, -27, -8, 11, 13, 0, -27, -1, -3, -22, 8, 15, 17, -18, -7, -16, -5, 6, 1, -6, -17, -13, -8, 9, -19, -31, -16, -15, -37, -19, 49, 8, 31, 29, 56, 43, 27, 16, -9, 7, 6, 2, -8, -3, 9, 15, -5, -6, -11, 3, 0, -12, 21, 10, 0, 16, -30, 8, -12, 9, 30, 26, 12, 13, -2, -1, 8, 17, 27, 47, 3, -4, -2, 17, 2, -29, 4, 17, -7, -10, -21, 12, 15, 14, 45, 21, -9, -14, 26, -5, 0, 0, 18, -5, 20, 14, 1, 34, 10, 33, 0, 13, 12, -16, 9, 3, 46, 25, 10, 11, -5, 9, 21, 16, 20, 10, 21, -3, 20, 5, 4, 12, -13, 3, 13, 20, 4, 25, -15, -7, 16, -14, -6, 7, 25, 30, 11, 23, -5, 8, 6, -8, 7, 10, -7, 15, 5, 10, 1, 5, -28, -32, -6, 8, 48, 31, 1, 10, 25, -26, -4, -28, 0, -3, -14, -6, 9, 15, 20, 24, -17, 9, 17, 12, 7, -12, 0, 11, -8, -32, -10, -22, 21, 37, -12, -18, -3, -48, -46, -40, -7, -2, 5, 14, -3, 13, 4, 7, -12, 6, -1, -28, -15, -7, -24, -11, -4, -19, -1, 17, 43, -4, -9, 10, 0, -63, -40, -3, -7, -1, 19, 12, -2, -2, 8, 6, 8, 9, 9, -5, -35, -28, -31, -38, -23, 2, -36, -21, 5, 6, 0, -15, -19, -45, -17, 1, 8, -1, 3, 14, 3, -9, 25, 15, 4, 12, -11, -8, -38, -16, -30, -35, -14, -59, -61, -53, -35, 17, -18, -4, 11, -34, 2, 14, -13, -7, -5, -14, -13, 8, 10, 34, 23, 10, 22, 24, 15, 1, -11, -28, -35, -48, -83, -63, -49, 13, 22, -12, 6, -35, -9, 4, 20, 11, -19, 15, 18, 32, 37, 30, 36, 14, 10, 11, 7, 3, -7, -5, -22, -19, -34, -79, -20, 30, 14, 6, -16, -23, -28, 5, -4, -13, 10, -3, 17, 5, 22, 16, -6, 36, 24, 21, 12, -13, 6, 18, -16, -13, 2, -10, -12, 25, -14, 10, 13, -27, 0, -33, -74, -19, -6, -12, 10, -2, 0, 1, -8, 1, 1, -5, 4, 4, -8, -12, -18, 7, -3, -7, -15, 2, -3, 8, -12, 7, -16, 0, -69, -68, -82, -76, -40, -37, -28, -7, -24, -17, 3, -8, -1, 14, 0, 20, 18, 12, 29, -3, -5, 29, -2, -20, -11, 24, 1, -25, -64, -75, -86, -105, -92, -81, -71, -64, -32, -14, -13, -4, 2, 2, 10, 1, 30, 25, 22, 17, -28, 2, -13, 1, 18, 0, 36, -24, -20, -28, -45, -63, -104, -98, -106, -123, -99, -11, 17, -6, 10, 9, 14, -11, 38, 11, 7, 26, 11, 17, 14, 16, -4, 8, 68, 29, -3, 8, 8, 4, -29, -62, -78, -127, -87, -15, 1, 20, 19, 6, -5, 22, 42, 24, -1, 17, -13, -52, -19, 6, -24, 5, 64, 15, 31, 23, 26, -3, 23, -12, -11, -34, -30, 22, 21, 42, 22, 12, 10, 25, 35, 21, 13, 47, -8, -19, -26, -8, -17, -7, 39, 40, -6, 4, 27, 20, 26, 36, 47, 27, 9, 13, 31, 25, 9, 36, 20, -2, 25, 42, 23, 54, -19, -5, 11, -14, -13, 6, 22, 18, 5, 0, 37, 43, 47, 31, 15, 13, 34, 13, 11, -10, 16, 8, 17, 37, 27, 14, 13, -7, -7, -18, -4, 9, -8, 2, 14, 38, 37, 14, 3, 16, 18, 24, 18, -1, 6, 20, -1, 12, 4, 6, 10, 34, 7, -13, 15, -30, -3, 0, -13, 7, 18, 5, 32, 18, 7, -18, 13, -7, 9, 3, 8, 18, -16, 18, 14, 13, -10, 3, -2, -2, -1, -43, -24, -24, 5, 4, 14, -1, -16, -9, 16, 20, 23, 0, 51, 9, -15, -6, 14, -14, -14, -7, 12, -8, 14, -29, -37, -56, -32, -41, -49, -21, -7, 12, 1, 12, 18, 10, 2, -8, 53, 45, 56, 1, 5, 42, 7, 8, 7, -6, 5, -28, -34, -81, -62, -36, -22, -19, -38, -8, -12, -1, 13, -5, 2, -14, -4, 2, 26, 30, 26, 14, 18, 53, 54, -18, -32, -11, 6, 18, -2, -31, -36, 5, 34, 12, 6, 17, -8, 13, -14, 2, 12, -9, 16, -11, 10, -13, -13, -38, -33, -32, -29, -41, -19, 16, 19, -7, -44, -47, -43, -19, -1, -1, 3, -8, -5, -16, 13}, { -1, 4, -14, 15, 2, -16, -6, -3, -13, 17, 6, -10, 6, 17, -7, -5, 19, 6, 12, -10, 11, -14, 9, -1, -1, 13, -11, -15, -1, 0, 6, 14, 17, 5, 7, 29, 12, -3, 10, 36, 45, 21, 4, 7, 32, 14, 25, 39, 10, 36, 21, 18, 14, 5, -6, 8, 6, -3, -5, 7, 28, -9, -3, 1, 5, 37, 24, 10, 2, 10, -25, 23, 49, 20, 9, 8, 18, 26, 70, 55, 31, 3, -7, -1, 9, -3, -7, 29, 41, 0, 51, 49, -4, -6, -18, -8, -51, -21, -20, -24, -17, -21, 30, 20, 35, 62, 25, 37, 8, 5, -6, 3, 17, -18, -16, -8, -2, -5, 43, 23, -16, -37, -4, -56, -87, -66, -74, -55, 25, 50, 7, 2, 19, 12, 4, 24, -4, -27, -3, 18, 11, 16, 7, -24, 14, 0, 41, 9, 2, -18, -38, -68, -79, -85, -31, 0, 15, 21, 13, 11, -4, 23, -21, -31, 3, 1, 40, 38, -6, -19, 7, 19, 23, 8, 19, 23, -7, -25, -60, -69, -75, -25, -11, 22, 23, 16, 9, -9, 31, 1, 27, -21, 1, -5, 7, 28, 15, -33, 10, -6, -5, 14, 27, 34, -23, -48, -55, -78, -58, -2, 3, 11, -22, -1, 17, -6, 30, 1, -8, 11, -8, 30, -5, 35, -15, -9, -18, 17, -4, 17, 22, 1, -21, -22, -69, -62, -23, 19, 16, -13, -12, -16, -10, 7, 1, 8, -16, -12, -36, -30, -22, 0, -15, 26, 1, -15, -1, -20, 31, -13, -29, -45, -32, -53, -11, 23, 14, 7, -9, -26, -35, 3, 15, -5, -39, -12, -7, -35, -53, -1, 14, 17, 11, 9, -12, -9, -12, 5, -20, -25, -66, -6, 9, 25, 24, 20, -10, -3, -38, -10, 7, 0, 10, -5, -44, -37, -32, -16, 10, 29, 19, 38, 37, 29, 12, 1, -24, -10, -32, 9, 36, 29, 34, 9, -38, -58, -53, -13, 21, 42, 27, -36, -63, -66, -12, 8, 18, 16, 22, 61, 44, 38, 24, 22, 33, 18, -8, 14, 19, 31, 21, -25, -13, -42, -26, 7, 18, 9, 40, 17, -49, -23, 2, 19, -25, -5, 39, 30, 46, 19, -5, -18, 0, -5, 14, 23, 49, 19, -10, -7, -12, -24, -10, -14, 28, 10, 38, 25, -25, -37, -4, 9, -5, 7, 13, 9, 21, -4, -31, -5, 20, 1, -7, -7, 40, 34, -24, 8, -28, -22, -16, 0, 39, 43, 23, 3, -41, -36, -12, -8, 16, -14, 8, -2, -6, -43, -14, 19, 11, -25, 9, -6, 21, 9, 2, -9, -16, 6, 6, -10, 46, 18, 22, 6, -2, -31, -22, -23, 19, -13, -22, 33, -4, -37, -42, -8, 23, 42, 5, -14, 11, -36, 14, 29, -14, 10, -17, 6, 3, 2, 15, -10, -18, 6, -8, 7, 13, -2, -6, 23, 11, -18, -11, 13, 26, 37, 23, -15, -30, -23, 13, 19, 1, 18, -2, 27, 3, 1, -1, -51, -29, -29, 14, 30, -12, -8, -14, -28, -2, -49, -17, 16, 29, 35, -24, -18, -45, -17, -4, 10, 36, -4, 12, -8, -29, -32, -38, -55, -31, -39, 20, -12, -15, 35, 15, -32, -7, -2, 4, 4, 37, 32, -8, -23, -26, -27, 13, 15, 20, 6, -25, -13, -13, -5, -6, -46, -32, -44, -22, 6, -15, 9, 13, -38, 3, 4, -5, 15, 16, 37, 17, -24, -17, -15, -6, 1, -3, -18, -39, -10, -37, -11, -20, -63, -51, -31, -30, 12, -5, -8, 19, -7, -27, 3, -1, -7, 32, 19, 19, 6, -12, -17, 0, -1, -1, -4, -33, -51, -44, -14, -36, -41, -49, -7, 26, 8, 14, 13, 9, -11, -24, 9, 23, 22, 18, 24, 28, 17, 14, 16, 5, 20, 5, -10, -60, -60, -54, -22, -26, -42, -5, -6, 9, 12, 0, -4, -11, 2, -38, -22, 8, -4, 20, 10, 21, 32, 21, -11, 8, -22, -44, -32, -11, -4, -13, 8, -5, -5, -20, -14, -26, 4, 9, -15, 9, -16, -7, 7, 4, -16, 4, 19, 30, -3, 31, 2, -21, -55, 15, 27, 34, 7, 27, 25, 7, 3, 1, 11, 8, 13, -8, -13, -1, -20, -15, -25, -30, -42, 25, 40, 37, -8, -11, 25, 20, -40, 7, 26, 6, 44, 28, 33, 18, -3, -14, -13, -11, -4, -11, -6, 12, -29, -18, -39, -8, -48, 11, 43, 32, -8, 16, -4, -49, -13, 35, 14, 6, 15, 17, 7, 9, 3, 14, 13, -2, 5, 8, 7, 3, 4, -7, 23, 7, -30, -17, -20, -29, -16, -9, 1, 12, -12, 49, 28, 2, 13, 0, 8, 13, 8, 17, 5, -6, -4}, { 16, 15, 17, 8, -7, 2, -16, 10, 9, 2, 12, -19, 16, 15, 34, 9, 5, -18, 7, -11, 12, -1, -2, 3, -8, -10, -14, 14, -6, -9, -1, -9, 15, -7, -15, 14, -4, -9, 3, 11, -18, -16, -10, -23, 9, 10, -17, -31, -9, -6, -30, -30, -1, -6, 3, -5, -4, 9, 4, -1, 13, 6, 3, 1, 18, 14, 3, -12, 19, 28, 35, 9, 12, 21, -6, -31, -9, 13, 1, -26, 20, 21, -13, -4, 5, 3, 1, 8, 3, -9, 8, -3, 17, 30, -11, 14, 25, 24, 7, 21, 2, 10, 10, -6, 2, -18, -10, -11, -10, 1, -15, -9, 1, 1, 29, 23, -29, -14, -2, 19, -16, 5, 26, 9, -1, 6, 21, 21, 26, 47, 24, 13, -16, -49, -27, -53, -25, -23, -10, -18, 1, 5, 21, -4, -18, -27, -20, -8, -21, -15, -10, 12, -8, 8, 30, 7, 18, 17, 11, -4, 26, 0, 11, -8, -60, -37, -27, -28, -5, -16, 7, 3, -13, -13, -24, -39, -18, -9, 22, -5, 12, 1, 15, 30, 34, 43, 29, 1, 27, 20, 0, -28, -81, -34, 0, 4, 5, -12, 7, -20, 3, -18, -41, 8, 0, 9, -20, 7, -18, -3, -2, 8, 14, 21, 42, 14, 28, 5, 14, -26, -43, 7, -18, 13, 14, -12, 3, 11, -20, -25, 2, -14, 1, -32, -20, -4, -51, -34, -50, -18, 19, 37, 38, 40, 12, 32, 1, 1, -52, -21, -2, -11, 3, -32, 22, 15, -20, -32, -22, -9, 16, -31, -5, -16, -17, -15, -30, -20, -5, -1, 39, 10, 8, 9, 5, 19, -44, -30, 16, -16, 11, -12, -5, -7, -34, 2, -1, -6, -6, -3, -7, -15, 6, -7, -26, -25, -1, 1, 0, 26, 14, 34, 24, 4, -57, -48, -22, 0, 12, 4, -21, -12, -20, 12, -13, 0, -10, -18, -15, -1, 5, -42, -11, -6, -27, 3, -7, 26, 11, 31, 47, -14, -42, -5, 0, -2, -26, -23, 15, 14, 27, -18, 25, 15, 14, 5, 27, -16, -4, -9, -13, -6, 2, -12, 9, 22, 39, 14, 5, -7, -17, -3, -21, 6, 15, -13, 2, 30, 4, 14, 9, 19, 23, 0, 12, -4, -10, -3, -3, -10, -14, -21, 3, 2, 38, 3, 0, -27, -50, -36, -6, -12, 1, -14, -36, 8, -15, -29, 17, -7, 12, -37, -12, 7, -8, 1, 9, 6, 5, 6, -4, -3, -16, -17, -17, -8, -32, -1, 5, 24, -12, -19, -45, -14, 18, -11, -11, -18, -14, 15, -11, 7, -4, 13, 9, 2, 10, -6, -11, -12, -21, -41, -20, -26, -20, -14, 5, 16, 8, -6, -27, -4, 8, 12, -24, 12, -16, -1, 9, -16, 4, -15, -9, 13, -13, -24, 1, -21, -9, -17, -3, -12, 13, 14, 27, 20, -10, -10, -2, -1, -9, -7, 0, 1, 15, 17, -1, 11, -8, 15, 6, 22, -15, -18, -32, -7, -40, -8, 8, -32, -12, -3, 20, 23, 14, -16, -16, 2, 13, -8, 2, 4, 20, 28, 6, 1, -5, 12, 14, -4, 6, -16, -1, -5, -28, -8, -6, 12, -10, -8, 26, 11, 4, 1, 7, -10, 10, 1, 7, 10, 3, 28, 30, -2, 17, 14, 17, 20, -9, 11, -13, -12, -10, 15, 2, -15, -14, -11, 5, 11, -3, -19, 19, 10, 1, 5, 5, -1, 6, 23, 1, -9, -16, -4, 11, 16, 9, 0, 16, 11, -6, 7, 17, 15, -9, -18, 10, 17, 3, -1, 26, 21, -4, 0, -1, 13, 5, 7, 10, 0, -5, 3, 3, 10, 14, 28, 32, -5, -8, 2, 12, 28, 40, 11, -27, 8, 4, -2, 11, -1, 5, -3, 20, 32, 25, 27, 15, -8, -10, -14, 7, -13, 12, 10, 10, -18, -18, -13, 13, 11, 38, -7, -26, 13, 6, -1, 19, 11, -8, -6, -18, -16, 15, 24, 19, 24, 8, 6, -21, -18, 25, 31, 27, 10, 18, 21, 28, 39, 25, -15, 23, -9, -13, 11, -26, -15, -21, -45, -1, -33, -8, 5, -14, 12, 15, 2, -12, 17, 1, 42, 37, 46, 34, 34, 29, 31, 29, -6, -13, -1, 2, 5, 16, -23, -47, -37, -11, 4, 20, 10, -8, 19, 18, 8, 12, 17, 26, 9, 16, 29, 50, 12, 13, 1, -12, -7, 17, 5, 12, -19, 8, 12, 4, -20, -1, 2, -4, -21, 3, 2, -10, -12, 37, 16, -4, -2, 8, 26, 59, -6, 10, -11, -19, -1, -9, 17, 2, -7, 13, -8, -12, -20, -30, -6, -24, -4, 38, 20, 25, 6, -33, -38, -41, -27, 22, -18, 2, 13, -17, 1, -5, 0, -8, -9}, { -1, 9, -12, -18, 12, -9, -3, -2, 10, 5, -3, 4, 2, 22, 1, -9, 17, -1, -16, 6, 0, 14, 7, 12, -11, 12, -8, -6, 16, -17, 11, 2, 7, 12, 1, -8, 2, 4, 24, 17, 20, 29, 31, 19, -3, 34, 13, 33, 25, 5, 23, 14, -7, 14, -11, -12, -5, 16, 9, 3, 39, 15, 32, 20, -9, -18, -7, -3, -30, 10, -29, -20, 25, -9, 19, 17, -6, 17, 10, 40, -1, -10, 3, 7, 5, -2, -11, 31, 40, -4, 0, -9, 3, -7, 24, -2, 10, 3, -8, 15, -17, 3, 38, 14, 6, -14, 1, 8, 8, -23, -4, -17, -12, 9, 7, 21, -1, -20, -46, 6, 13, -5, 11, 14, -9, -8, 20, 25, 0, 5, 19, 6, 4, -12, -31, 5, 8, 14, 4, -3, -13, -8, 10, -16, 1, -3, -28, -5, 8, -1, 3, 0, -4, 17, 6, 12, 13, 0, -2, 12, 16, -6, -6, -12, -14, 13, 39, 5, 15, -6, -25, -17, -10, -13, -7, 9, 16, -4, 21, -6, 8, 0, 24, 12, 25, 2, -14, 1, 26, 2, -21, -2, 14, 25, 2, -19, -6, -16, -49, -7, 13, 2, -25, 13, 15, -4, 24, -13, 9, -12, 12, 42, -4, -2, -1, 19, 7, 15, -4, -5, 1, -2, 7, 17, 12, -13, 7, 6, 4, 2, 1, -13, -12, 23, -9, -8, -2, 5, 17, -7, 19, 10, 19, 30, -6, 18, -8, 5, 26, 12, 3, 9, -8, -1, -8, -11, -7, -28, 8, 21, 5, -8, 12, -15, -8, -2, 3, -5, -10, 7, -9, 4, 7, -14, -24, 19, 1, 23, 28, -21, -11, -5, -21, -8, 7, -36, -21, 7, 4, 15, 21, -3, -3, -2, -7, -14, -2, -27, -15, -24, 9, 8, 12, 36, 18, 0, -8, -37, 14, 6, -31, -21, -1, -28, -11, 5, -11, 2, -14, -9, -16, 33, 41, 12, 0, -7, -14, 0, -19, -9, -5, 37, 42, 35, 50, -25, -15, -14, -17, -2, 28, 15, 12, -18, 3, 0, 5, -8, 1, 34, 34, 34, 5, -2, -15, 9, 9, 16, -1, 24, 33, -13, 5, -23, -3, 8, -39, -5, 28, 4, -3, -13, 6, 13, 16, 13, 23, 15, 6, 26, 18, -9, -13, -2, -9, -15, 13, -2, -10, -20, -24, -5, 22, -19, -13, -16, -6, 10, 17, 13, -6, 15, -6, 30, -5, 23, 9, 23, -3, -13, -12, -16, 4, 13, -29, -10, -27, 5, -40, -23, -8, 1, -22, -39, 3, 23, 19, 8, 26, -9, 16, 2, 12, 11, 16, 8, -4, -16, 16, -3, 7, -18, -8, -1, 2, 6, -32, -14, -17, 13, 11, -3, 3, 37, 2, -21, 10, 13, -10, 5, -2, 9, -15, -2, -19, 3, -2, -9, -27, -40, 7, 5, -20, -1, -56, 12, -8, 4, -10, 25, -31, 32, 6, 34, 24, 18, 8, -15, 15, 12, 0, -16, 14, -14, -22, 4, 8, -15, -24, -6, 18, -31, -13, 6, 34, 12, -17, 12, -20, 6, 19, 7, 19, 25, 23, 12, 1, -4, 14, -15, -4, 5, -22, -13, 17, -14, -10, 12, -14, -7, -54, -22, 2, 26, 13, 6, -26, 5, 20, 13, 14, 20, 11, 11, -7, -7, 16, 6, -2, -8, 16, 2, 2, 18, -16, 30, 24, -3, -4, -25, 17, 37, 0, -15, -22, -15, 16, 4, -1, 2, 18, -10, 7, 26, 14, 23, -22, 6, 4, 27, 30, 28, 19, 8, 11, 26, -11, -18, 7, -23, -4, 25, 19, -25, 5, 16, -26, -11, -6, -5, -13, 4, 5, 22, -12, 18, -1, 10, 17, 1, -9, -31, 7, 8, -7, -13, -4, 12, -8, 15, -6, -10, 0, -18, -23, -26, -8, -8, -1, 26, 18, 1, 29, 15, 2, 22, 5, 22, 0, -30, -29, 10, -7, 4, -4, 16, 22, 14, -3, 1, -6, -10, 0, -8, 6, -1, 9, 26, -5, 28, 36, 15, 35, 13, -4, 8, 27, 12, -16, -9, -37, 5, 13, -12, 6, 31, -23, -20, 1, 2, 26, -1, 33, 5, 30, 29, -15, 23, 34, 5, 31, 16, 7, -13, 9, 7, -30, -21, -11, -11, -1, 10, 11, -20, -52, -15, 1, 1, -9, 4, 15, 11, 18, 1, 16, -12, -4, 24, 21, 36, 31, 22, -3, 49, 11, 10, -5, -4, 7, -18, 16, 6, 17, 22, 10, -10, 2, 15, 1, 10, 16, -8, 17, -11, -6, 17, 35, 11, 52, -2, -14, 10, 15, 11, 8, -1, 7, 13, 3, -9, -19, -38, 10, 5, -15, 4, -8, 9, -2, 10, 6, 28, -17, -24, -1, -19, -10, -8, -43, -18, -17, 17, -4, -3}, { 8, 17, -15, 17, 18, 5, -14, -4, -7, 13, -16, 12, 20, -12, 7, -17, 8, -12, 9, -17, -2, 6, 8, 9, -16, 15, -18, -4, 1, 14, -9, 9, -12, 14, 33, 29, 13, -7, 21, -18, 3, -31, 9, 9, -37, -11, 6, 25, 16, 18, 26, 7, -11, -14, 1, 4, -9, 16, 2, 5, -22, -14, 29, 24, 36, 18, 40, 6, 17, 8, 9, 51, 8, 32, 47, 44, 12, -20, 5, 24, 4, -20, -3, 12, -17, -4, 15, -5, -7, -1, 12, 26, 32, 9, 10, -8, 8, -13, -16, 36, 5, -5, 22, 11, 5, -16, 22, 26, -1, 11, -4, 7, -15, -7, 24, -18, -5, 1, 23, 28, 17, 8, 28, 30, 31, 27, 26, 10, 43, 19, 26, 27, 24, 0, 5, -1, 9, 4, 0, -24, 16, -11, 14, 20, 6, -3, 15, 42, -1, 5, 9, 16, 18, 3, 20, 12, 17, 9, -23, -5, 2, 1, -2, 31, 38, 11, 13, -7, -4, 18, -22, 11, 16, 1, 16, 28, 18, -3, 10, -15, 3, -12, 9, 15, 4, 2, -7, -46, -16, -39, -31, 6, 37, 44, 34, -20, -16, 12, -3, -7, 0, 7, 5, 30, 38, -3, 1, -11, -10, 10, 12, 22, -19, -42, -24, -25, -44, -29, -34, 18, 3, 28, 62, 6, 11, -15, -10, 0, 5, -8, 11, 21, 5, -19, 6, 10, 11, 22, -8, 6, -15, -18, -45, -34, -12, -25, -18, -4, 20, 60, 49, 17, 5, -25, -13, 8, 7, -11, 11, -7, 6, -12, -6, -8, -17, -8, 1, 1, -24, -13, 3, -13, -17, -25, 9, 7, 21, 21, 60, -28, -13, -9, -34, -9, 14, -13, -16, -4, -15, -17, -2, 4, 20, 20, 3, -12, -9, 4, -7, 11, 7, -5, -14, -13, 1, 23, 7, -10, 13, -20, -9, -5, -12, -15, -2, -25, -4, -26, 5, 16, 6, 17, 7, 6, 24, 10, 4, -4, -13, -2, -2, 2, 11, 22, 45, -15, -13, 0, 9, -36, -35, -26, -9, -13, -15, 5, 10, 12, 5, 23, 36, 30, 20, -9, -21, -28, -1, -19, -23, -29, -27, -5, -31, -38, 5, 8, -28, -24, -28, -27, -16, 21, -12, -10, -1, 14, 18, 42, 53, 12, 32, -23, -12, 0, 2, -7, -26, -11, -6, -8, -7, 28, -8, -9, -29, -1, -31, -17, -15, -3, 18, -5, -8, 2, -10, 27, 30, 17, 26, -16, -38, -20, -2, -10, -10, -9, -36, 15, 20, 24, -10, 6, 15, -20, 18, 3, -25, -39, -20, -2, -8, -2, -4, 1, 24, -12, 18, 8, -24, 9, 9, 6, -7, 3, -22, 40, 14, 20, 3, -7, 23, -11, 12, -14, -6, -28, -33, -42, -22, -4, -2, 21, 1, -9, -5, -29, 2, -16, -15, 33, 26, -4, 12, 32, -1, 4, 15, -16, -11, 2, 4, -15, 1, -23, -17, -21, -11, -13, 2, 17, 5, 0, -32, -26, -7, 8, 11, 36, -13, 23, 13, 42, 22, -1, -14, -8, 11, 30, -4, 4, 6, 20, 8, 4, 17, -5, -9, 18, 27, -25, 3, -21, 10, 10, -1, 5, -16, 10, 13, 46, -18, 25, 22, 7, -26, 25, -5, -2, 10, 28, 10, 10, 18, 18, -28, 17, -3, 22, 13, 9, -11, -12, 9, -16, 7, 17, 25, 62, 34, 3, 5, -12, -9, 33, 17, -12, 21, 19, 19, 5, 20, 11, -13, 11, 2, 19, 6, -3, -3, 12, 32, 27, 19, 28, 20, 31, 24, -11, 1, -5, -6, 28, 12, -11, -14, 0, 7, 29, 1, -3, -21, -13, -9, 16, -1, -4, 21, 12, 15, -2, -3, 49, 50, 30, -42, 15, -10, 20, 1, 1, 2, -10, -23, 21, -12, 5, 7, 7, -25, 1, -7, -15, -17, -13, -15, 9, 31, 1, -14, 32, 53, 9, -33, 3, -5, -15, 20, 31, 31, 1, -11, 4, 17, -3, 10, -13, 18, -15, -26, -30, -28, -11, 13, 34, 44, 16, 2, 24, 22, 28, 34, -17, 17, 13, -10, -12, 10, -26, 22, 6, 5, 12, 14, 25, -9, -34, -21, -30, -3, -42, -2, -8, 5, 21, -16, -11, 26, 19, 1, -13, -16, -15, -1, 14, -34, -7, 4, 15, 7, 8, 37, 8, 15, -3, 21, 14, 7, -17, -23, -28, 7, 8, 14, 15, 12, 10, -9, -11, 19, -11, -15, -10, 13, -38, -27, -18, -16, 12, -1, -11, -8, -22, -20, 15, 4, 6, -5, -35, -30, -2, -13, 23, 17, -10, -3, -8, -7, 17, 13, 7, -1, -9, -22, -17, 10, -19, -5, -21, -4, 1, 23, 42, 36, 4, 5, -3, -32, -31, -20, -17, 17, -12, 16, -14}, { -9, -18, 14, -18, -1, -5, 9, 15, 4, 15, -12, 0, 25, 30, -13, -14, 10, -2, -7, -19, -14, -11, 7, -2, -10, -18, -13, -2, -17, 1, -18, 2, 4, -10, 3, 27, 4, 27, 21, 13, 12, 19, 18, 14, 0, 19, -3, 27, 33, 12, 9, 21, -6, 17, -8, 13, -4, 7, 11, -15, 0, -3, 21, 34, 31, 5, 21, 33, 9, -1, 40, 39, 46, 23, 19, 6, -1, 8, 29, 27, -10, -20, 4, -3, 2, -17, -17, -13, -24, 2, -13, 8, -15, 20, -8, 2, -11, -2, 6, 27, 7, -10, 25, -2, -31, 8, 22, 37, 7, -18, 16, -19, 3, -18, -8, -29, 1, -17, -9, 23, 17, 44, 16, 27, 5, -3, -13, -21, 5, 17, 2, -23, -12, -26, -1, 42, 19, 31, 0, 21, -14, 0, 15, 0, -1, -11, -13, 21, 29, 20, 12, 36, 28, -12, 20, 5, 1, -7, -34, -29, -3, 13, 7, 32, 40, 19, 23, 8, 3, -7, 4, -1, -16, -23, -10, 6, -18, 1, 14, -9, 1, 27, 12, 15, -32, -50, -35, -12, -12, -24, 5, 53, 37, 12, 5, 24, -5, -31, -2, -30, -2, 1, -22, -12, 5, -10, 23, -4, 10, 15, 11, -2, -23, -12, -42, -41, -26, 3, -1, 10, 52, 26, 28, 34, 17, -27, -1, 12, 0, -22, -21, 3, 12, 4, -1, 29, 12, 11, 16, -24, -34, -32, -19, -23, 7, 12, 12, 21, 37, 18, 57, -18, 17, -43, 3, 0, -9, -17, -9, 21, 3, 8, -3, 1, 34, -2, 13, -51, -43, -15, -6, -11, 0, 25, 22, 43, 50, 34, 16, -12, 12, -13, -3, -7, -1, 0, 3, 2, 28, 11, 8, -12, 32, 4, 0, -40, -42, -24, -13, -14, -8, -16, 2, 14, 24, 20, -15, -27, 8, -21, -22, -26, -28, -23, -16, 4, 8, 13, -3, 14, 20, -16, -27, -23, -26, -8, -8, 10, -27, -8, -30, -13, -3, 36, -7, -17, -6, 0, -13, -12, -15, 7, -20, -17, 3, 8, 19, 36, 37, 19, -11, -12, -25, -26, -16, 1, -4, 0, -9, -23, 5, -13, -28, -29, 1, 13, -12, -13, -21, -6, 0, -4, 8, 19, 1, 8, 16, -2, -14, 17, -17, -17, 6, 6, -13, 12, -2, -10, -16, -9, -9, 9, -8, 3, -5, -8, 6, -6, 0, 7, -8, -11, 6, 3, 6, -2, -4, 15, 7, -17, 13, 9, -10, 4, -10, -29, -2, 13, -2, -3, 11, 5, 27, -16, -18, -40, -20, 7, 5, -15, -7, 6, 10, -5, 30, 20, -17, 1, 7, 9, 0, 0, -27, -31, -2, 35, -3, 10, -27, -3, 5, 6, -12, -45, -19, -13, -15, -35, -16, 2, 24, 31, 11, 9, -10, -19, 2, -2, 25, 1, -24, -13, 1, 67, -16, 30, 6, -14, 5, -24, -14, -41, -16, -32, -18, -13, -37, 19, 8, 27, 4, 23, -26, -21, -5, 22, -2, 6, -15, 19, 35, 14, -36, 2, -23, -1, -10, -15, -26, -25, -36, 4, 1, 0, -14, -6, 8, 2, 19, -4, -24, -6, -5, 6, -4, 9, 0, 15, 19, 12, -28, -20, 15, 7, 9, 5, -24, -49, -31, -11, -16, -11, 30, 26, 11, 15, -11, -5, 8, 0, 26, -8, 0, -14, 5, 12, -15, 15, -6, -18, -15, -1, -1, -16, -9, -19, -41, -23, 6, 8, 38, 45, 33, 5, 19, 0, -4, 3, 20, 5, -6, -25, 4, 13, -21, 44, -2, -4, 3, -12, -2, 7, -4, 2, -20, -9, -11, 34, 19, 25, 17, 30, 11, -12, 3, -1, 4, 3, -18, -4, 11, 14, 5, 35, 4, 14, 13, 20, -4, -15, -11, -6, -20, 1, -22, 3, 13, 22, 33, 37, 24, -7, 14, 23, 30, 5, 17, 14, 5, 15, 0, 9, 26, -14, -17, -13, -5, -16, -10, 10, -13, -19, -20, -23, 3, -10, 10, 24, 28, 12, 13, 24, 6, 24, -14, 4, 19, -4, -15, 4, 4, -10, 3, -2, -11, -12, -22, -10, -16, -16, -17, -22, -13, 3, 9, 18, 34, 23, 18, -7, 32, 1, 3, 23, 21, 6, -6, 13, 0, -16, -10, 9, 32, 12, -8, -10, 15, 0, -11, -11, -6, -30, -17, 11, 14, 5, -13, 3, 15, 8, 4, -8, -5, 31, 14, 21, 10, 11, 11, 1, 17, -9, 15, -18, -41, -29, -24, -13, -19, 8, -6, -17, -22, -40, 4, 12, 14, -15, -8, -7, 22, -1, 19, -3, -2, 2, -6, 12, 12, -2, -2, -2, 2, -13, -20, -6, -33, -3, 19, -22, -9, 26, 12, -24, -23, 1, 8, -9, 9, -2, 15, -7, 0, 11}, { 15, -1, 7, -2, -4, -4, 2, -14, 14, 12, -14, 4, -15, 7, 25, 13, 4, 3, 15, -14, 1, -5, -15, -15, 8, 10, -5, 16, -5, -7, 18, -6, -2, 4, -4, 1, 1, -8, -12, 14, 22, 6, -8, 13, 11, 8, -1, 7, 31, 13, -9, -13, -8, 10, 16, 16, -1, -13, 6, 29, 11, 20, 7, -4, 28, 4, -26, -29, 13, 18, 22, -3, 5, -14, -14, 7, 42, 37, 26, 25, 21, 10, -1, 7, -17, 3, -17, 36, 22, -10, 18, -9, -2, -8, -27, -12, -18, 25, 74, 54, 71, 32, 33, -14, 18, -14, -24, 29, 16, -15, -5, 18, -8, 11, -3, -1, -6, -15, -15, -14, -24, -26, -68, -1, 24, 41, 15, -7, -6, -14, 1, 10, -26, -33, -43, -42, -63, -58, -38, -11, -11, 11, -32, -31, -5, 0, -14, 9, 12, -33, 0, -3, -4, 5, -19, -15, -12, -19, 17, 6, -46, -16, -30, -33, -46, -32, 6, -4, -4, -18, 5, -29, -20, -6, 14, -5, -35, -38, -28, -46, -24, -1, -10, 0, 16, 44, 53, 19, -10, 13, -10, -26, -69, -10, -15, 15, 6, 5, 8, -31, -39, -22, -12, -3, -25, -37, -39, -31, 0, -23, -13, 18, 52, 24, 37, 25, 22, 14, -21, -9, -10, -5, -24, 10, -4, 28, -8, 13, -13, -48, -27, -45, -3, -36, -6, 11, 15, -1, 14, 26, 29, 12, 31, 28, 32, 5, 0, 11, -28, -21, 11, 15, -12, 18, 4, 18, -33, -38, -11, -17, -29, 10, -2, 10, -5, 1, 30, 28, 12, -16, -38, 20, 12, 20, 21, 18, 25, 27, 14, 18, 7, -24, 22, 0, -58, -45, -26, -35, -22, -5, -12, -12, 3, 25, 36, -26, -39, -74, 0, 22, 27, 17, 34, 16, 8, -37, -27, 0, 16, 3, 12, 3, -15, -47, -19, 15, 10, 5, 0, 28, -14, 12, -2, -49, -50, -17, -9, 27, 19, 33, 15, 9, -4, 1, 49, 20, -14, -20, 59, 20, -3, 2, -16, -17, 10, 22, 8, -15, -52, -80, -79, -28, 9, 18, 21, 20, 25, 14, 27, 20, 11, -10, 7, 18, -16, -4, 10, 11, -3, -29, -21, -15, -20, 5, 17, -10, -62, -44, 3, 8, 26, 12, 25, 26, 16, 12, 19, 22, -10, 42, 3, 17, -6, -7, -4, -18, -34, -18, -3, 6, -15, -10, -11, -8, -15, -13, 27, 15, -4, 4, 2, 16, 3, -2, -23, -13, -28, -22, 16, -10, -15, -6, -59, -38, -23, -4, 11, -28, 12, -22, 8, 9, -14, 5, 17, 32, 6, 6, -13, 3, -13, -20, -23, -25, -4, -41, 3, 12, 14, -12, -38, -15, 2, 12, 3, -3, -15, 23, 20, 1, 16, -21, -13, 8, 3, -1, -17, -37, -48, -70, -44, -23, 2, -8, -12, 2, 16, 6, 8, -31, 2, 11, -29, 2, 16, 14, 22, 24, 30, 0, 18, 3, 10, -8, -16, -6, -50, -69, -54, -30, -34, -18, 19, 4, 16, -20, 24, -3, -24, -33, 2, 19, 16, -3, 22, 23, -4, 16, 5, 16, -17, 19, 12, -6, -53, -37, -21, -6, -15, -2, -13, -12, 13, 0, 1, -24, 10, -25, -11, -19, 16, 22, 4, -19, 17, 22, 17, -21, -15, 3, 3, 17, -30, -9, -31, -15, 5, 15, -8, -18, 13, 5, 8, -23, 8, -21, 7, 27, 4, -11, 9, -21, 13, 0, 13, 2, -18, 10, -13, 5, -32, -29, -23, -2, -17, -6, 7, 13, 0, 2, -17, -14, -10, -22, -4, 7, 2, 1, -21, -13, 6, 16, -19, -5, -26, 2, 15, -15, -45, -55, -30, -36, -18, -22, -54, 18, -23, -4, 11, -30, -6, -4, 11, 9, -3, -14, -6, -26, 1, 1, 0, -11, -16, -8, -1, -17, -15, -33, -25, -34, -20, -13, -46, 17, 14, 1, -10, -42, -39, -5, -4, 0, -16, -33, -29, -40, -29, 2, -29, -12, 16, 15, -2, -5, -37, -20, -2, -34, -11, -2, -10, 14, 13, -14, -21, 7, 37, 50, 26, 35, 34, -2, -15, 5, -20, 9, -18, 5, 6, 12, -34, -9, -11, -13, -29, -46, -15, -22, 6, -2, 8, 15, 15, 11, 35, 69, 39, 60, 37, 31, 39, 10, 28, 26, 17, 19, 9, 11, 6, 0, 3, -7, -10, -4, 20, -5, -6, -5, -4, 17, -18, 3, 27, 45, 43, 53, 52, 42, 62, 8, -3, 34, 43, -5, 39, -2, 15, 37, 51, 9, -11, -17, -34, -1, -11, 13, -4, 6, -2, 13, 15, -1, -7, 19, 29, 33, 18, 48, 28, 6, 23, 30, -7, 7, 19, 21, 13, 19, 12, 15, -2, 8, -6, 14}, { 11, 0, -3, -10, -3, -17, -9, -15, 2, -5, -8, 14, 31, 0, 3, -14, -12, 4, -5, -10, 13, 14, -14, 2, 6, -14, 6, 9, -5, -8, -10, -5, 5, -2, -6, 10, 8, 21, 23, 10, 26, 22, 2, 17, -19, -7, -1, 7, 26, 3, -3, -5, -8, 11, -16, 15, 8, -3, 2, -19, -15, -2, 9, 37, -12, 5, 7, -1, 9, -14, -2, 2, 28, 13, 22, -6, -6, -10, 40, 50, -7, -19, 17, 12, 15, 12, 5, -3, 11, -12, -3, 10, -30, 11, -8, 0, -12, -23, -16, 5, -1, -6, -13, 12, -20, 6, 44, 27, 10, -6, 9, 14, 14, 13, -2, -14, 5, -1, 4, 12, -6, 1, 15, -1, -10, -5, -1, -12, -11, 4, 23, 5, 11, -1, 20, 62, 50, 18, 10, 11, -12, -16, -18, -26, -13, -2, -21, -11, 9, 17, -7, 4, -17, 6, 1, -12, -6, -12, -21, -5, 6, 10, 20, 36, 44, 22, 4, 3, 5, -13, 3, -23, -20, -4, -23, 7, 11, -13, -13, 7, 18, 7, 11, -11, 8, 26, -4, -2, 8, 7, -5, 14, -1, 9, -3, 16, -7, 7, 5, -29, -22, -22, -9, -7, 18, 5, 14, -5, 17, 12, -2, -13, 12, -1, 3, 3, -2, 26, -5, 9, -10, -38, 4, 0, 8, -26, -14, -8, 4, -16, 2, -8, 20, 17, 30, -5, -1, 7, 1, 0, -5, -18, -24, 1, 14, -11, -28, -36, -17, -16, 11, 5, 10, -6, 7, -12, -34, -22, 2, -15, 10, 16, 5, 14, -11, -15, -22, -4, -23, -20, -39, -25, -19, 0, -11, -16, 18, -34, 4, -37, 12, -7, -2, -18, 0, -31, 7, 17, 4, 5, 13, 12, 18, -19, -24, -16, -16, -35, -23, -35, -21, -21, -6, -4, 53, -30, -17, -24, -12, 6, -27, -2, 1, -25, 15, 35, -2, 28, 18, -24, -1, -4, -21, 4, -17, -25, -44, -44, -13, -10, 18, 23, 43, 13, 45, -21, 11, -5, 1, 11, -20, -13, 7, 2, -2, 18, -18, -3, 0, -5, -17, -16, 4, -16, -10, -29, -15, 6, 17, 46, 35, -11, 11, -34, -4, 7, -13, -1, -14, 6, -11, 15, 18, 9, 14, -13, -25, -35, -29, -7, -17, 8, 18, 8, 25, 41, 25, 19, 23, 13, 4, -11, -9, 10, -10, -24, -22, 8, 15, 9, -6, 16, 14, -12, 2, -6, -7, 19, -3, 18, 30, 26, 27, 27, 17, 12, 12, 18, -27, -17, -8, 7, -6, 3, -23, 9, -6, 28, 23, -1, 5, -1, -5, 3, 7, 31, 20, 14, 17, -16, 0, 7, -2, -7, -39, 12, -12, -9, 2, -21, 6, -14, -28, 6, 22, -7, -3, -4, -19, 6, -5, 16, 20, 21, 48, 10, 6, -24, 5, -1, -7, -8, -41, 38, 6, -26, 16, -2, -17, -13, -42, 13, -9, -20, -23, 3, -12, 26, 14, 30, 20, 22, 29, 4, -16, -4, 1, -12, -1, 5, 10, 4, -5, -3, -11, -24, -33, 0, -24, -4, 9, -21, -6, -22, -21, 1, -5, 27, 36, 5, -22, -20, -7, 9, -14, -12, -2, -32, 9, -4, -32, -28, 11, -21, 20, 23, -3, -15, 0, 3, 14, 13, -3, 17, 3, -12, 3, -14, -26, -37, 5, -13, 9, -13, 4, 9, 9, -12, -29, -4, 3, -20, 23, -2, -27, -31, -11, -21, 3, 11, -5, 27, 22, 6, -23, -15, -3, 5, 16, -3, -22, -26, -10, -6, 8, 16, -5, -1, 2, 8, 10, -7, 4, -9, -14, -10, -22, 7, -3, 22, 16, 13, 7, 12, -17, 12, 25, 13, -15, -31, -7, -9, -14, -9, 14, 0, 8, 2, 4, 20, -20, -13, -22, -24, -30, 7, -7, 15, -8, 0, -2, 25, 2, 32, 10, -15, -7, -18, -7, -16, -46, -19, 32, 18, -18, 0, -13, -1, 10, -22, -7, -19, 2, 3, 3, -24, 7, 9, 13, 13, 8, -5, -16, 13, -11, -15, -7, -21, -33, -1, 1, -13, -16, 12, -14, -33, -22, -13, -22, -31, -38, -13, -9, 11, 0, 10, 19, 13, 8, -32, 1, -18, 16, -18, -15, -22, -11, -13, -17, 8, 2, 8, -1, -12, -19, -44, -44, -29, -51, -45, 10, -36, -37, 2, 15, 2, -7, 14, -8, -30, -22, -9, -15, -15, -2, -3, 3, -3, -17, -17, 15, -4, -8, -21, -34, -2, -18, -27, -29, -11, -11, -15, 0, -38, -9, 24, 17, -12, -15, -6, 5, -5, 21, -13, 9, -13, 4, 3, 9, 7, 9, -9, -1, 18, -8, -18, -29, -16, 7, 3, -16, -27, 2, -5, 6, -21, -3, -10, -27, 2, -1, 15, -9, 11}, { -9, 13, -17, 18, -17, 5, 9, -11, 3, -16, 13, 3, 32, 0, -16, 17, 15, 10, -11, 13, 8, 14, 16, 7, -9, 11, -16, -5, 1, 11, -18, -18, -1, -7, -21, -14, -21, 11, -5, -2, 2, 34, -1, -1, -6, -7, 2, -10, 14, 6, 21, 17, -6, 15, -7, 6, 10, 16, -4, -6, -24, -3, 8, -6, -9, 8, 3, -11, 20, -3, 20, -4, -6, 9, 6, 0, -19, -17, -8, -18, -21, -9, 13, -2, 7, 12, -13, -32, -1, 20, 16, 33, 34, 13, 37, 30, 10, 23, 50, 33, 2, -16, 17, -10, 20, 58, 28, 18, -4, 3, 0, -5, 5, -7, 21, 17, 43, 37, 13, 19, 5, 17, 34, 20, 7, 23, 40, 32, 34, 28, 36, 23, 52, 26, 20, 33, 70, 35, 44, 37, -4, -14, -2, -2, -1, -12, 21, 21, 24, -20, 5, 0, 3, -30, -6, -13, 7, 3, 19, 31, 45, -3, 15, 33, 57, 37, 33, 38, -5, 16, 12, -3, 8, 22, 4, -6, 1, 10, -24, -16, -11, -21, -20, 13, -5, -7, -24, 0, -13, 4, 28, 29, 61, 22, 40, 17, 12, -20, -17, -15, 23, 35, 0, -19, 14, 14, 5, -23, -8, -9, 4, 0, 4, -11, -26, -22, -21, -8, 17, 8, 46, 14, 23, 44, -6, -25, 4, -1, 24, -4, 3, -1, -3, 0, -19, -10, -18, 10, 7, -6, -22, -17, -9, -2, 6, 16, -19, 7, 39, 46, 44, 12, -10, -15, 25, -4, -41, -3, -5, 11, 1, -26, -3, 2, -15, 5, -27, -32, -29, 3, -12, -1, -2, 0, -8, -5, 14, 15, -6, -7, -3, -14, 10, 15, -19, -25, 7, -10, -2, -16, -2, -3, -9, -29, -12, -30, 3, 10, -10, 12, 9, -10, -14, -14, -26, -8, -21, -34, -9, -7, -42, -4, -30, -15, -8, 11, 8, 15, -9, -7, 13, -9, 2, 5, 16, 31, 28, 22, 2, -1, -4, -38, -14, 17, 31, -34, 2, -18, -6, 6, -38, -6, 1, 8, 3, -2, 31, 29, 26, 52, 17, 6, -7, 23, 21, 33, -1, 3, -14, -9, 12, -20, -22, -20, 7, -11, -39, -14, -24, 8, -8, 28, 4, 31, 28, 24, 23, 8, 8, 15, 20, 16, 1, 4, 16, 3, -15, 1, -11, -33, -19, -24, -6, 1, -36, -31, 0, 15, 17, 17, -8, 9, 9, -11, 7, 38, 1, 9, -14, 15, -19, 12, -21, -11, -16, -23, -11, 1, -39, -1, -13, 15, 5, 4, 16, 26, 19, 17, -2, 9, 17, 18, 19, 29, 9, -21, -11, -11, 0, 13, 2, 1, 16, -13, 4, 4, 5, -17, -9, 24, -4, -8, 12, -9, 17, 3, 4, -6, 4, 17, 20, -8, 5, 0, -23, -14, 15, 10, -7, 0, 7, 5, 20, 14, -20, -13, 4, -8, 0, 13, 32, 15, -5, 12, 2, -14, 3, 15, 6, -10, -11, -2, 3, 11, 16, 21, 5, 7, 6, 0, -19, -16, -33, 2, -20, 11, -1, 13, 31, 10, -12, 9, 20, 6, -1, 6, -3, -13, 14, 15, 17, 4, -11, -3, 2, 9, 1, -28, -25, -32, -42, -28, -14, 26, -15, 45, -18, 6, 3, 8, -5, -14, -11, 0, -1, -1, 2, 6, 12, 1, 28, 22, 24, -7, -13, -40, -10, -18, 2, 23, 10, 30, 17, 13, 7, 2, -11, -3, -1, 8, -10, -3, 8, -1, 33, 22, 20, -5, 10, 9, -2, 12, 3, -9, -20, -15, -14, 6, -14, -1, 1, 13, 10, -17, 3, -4, 28, 20, -3, 2, -4, 18, 26, 20, 12, -10, 1, 22, -2, -6, 15, -8, -26, 3, 36, 14, -14, -5, -6, 14, -6, -9, -10, 18, -16, -13, 3, 11, 11, 21, 21, -6, 8, -14, -16, -8, -3, 9, 16, 14, -18, -16, 20, -15, -18, 14, 25, 47, 36, -20, -12, 9, 14, 13, 29, 7, 12, -2, 27, 5, 22, -12, 25, 26, 19, 33, 6, 11, 0, -6, -29, -8, -8, 18, -4, 27, 22, 3, -26, 7, -13, 7, -14, -8, 12, -19, -5, 5, 37, 14, 18, 17, 15, 25, 29, 8, 1, 6, -5, -10, 4, -9, 9, 0, -23, -31, -28, -34, -27, -7, -6, -4, -38, 6, -29, 6, 11, 27, -7, -22, -9, -5, 9, -7, 30, 8, -2, -13, -11, 10, -3, 25, 18, -36, -25, -5, -26, -6, -23, 2, -16, -28, -5, -26, -10, -1, 11, -29, -30, -12, -10, -16, 7, 1, -8, 0, 5, -6, 11, -2, -11, 7, -3, -4, -1, -12, -47, -18, -20, -17, -18, 1, -26, -44, -4, -7, -28, -6, -9, -15, -12, -14, 10, 10}, { 17, 12, 9, -15, -3, 18, 9, -16, 13, -14, -1, -4, 13, -13, 1, -17, 13, -4, 5, 7, -14, -8, -2, -8, 15, 6, -8, 14, -4, 10, -17, 5, -11, -3, 0, -1, -26, -23, 1, 4, -30, -3, -19, -9, -17, -10, -3, -16, 6, -23, -4, -28, 5, 17, -16, 13, 7, -7, -2, -8, -1, 3, -4, -9, -13, -20, -44, -24, -27, -53, -26, -2, -35, -50, -32, -15, 2, -31, 6, -30, -7, -10, 17, -15, 2, -5, 3, -2, -3, -19, 4, -10, -62, -45, 1, -1, -56, -54, -40, -12, -45, -38, -20, 36, 6, -12, 3, 26, -6, -26, -25, -3, -8, 11, -8, -22, -14, -32, -22, -45, -28, 8, 15, 9, 11, -28, -20, -40, -6, -9, 7, 56, 40, 13, 2, -7, -28, -14, -10, -27, -17, 3, -7, 4, -32, 3, -33, -15, -2, 27, 62, 53, 7, 10, -48, -45, -44, 10, 14, 14, 16, -1, -1, 7, -4, 9, -35, -24, -18, -10, 24, 12, 3, 16, 6, -19, 23, 10, 29, 11, 2, -24, -45, -72, -28, -10, -4, 38, 19, -9, 9, 5, 3, -22, -6, -30, 1, -24, 8, 18, 10, -29, -22, -12, 8, 26, 24, 16, 4, -38, -47, -33, -1, 25, 12, 39, 32, 15, 21, 30, 7, -4, 8, -21, -20, 4, -5, 1, 7, 18, -3, 13, 9, 9, 23, 22, -10, -44, -41, -19, 6, 28, 0, 5, -2, 15, -4, 16, 36, 41, 26, 6, -4, 6, -10, -27, 2, -7, -5, -11, 18, 23, 26, 24, -7, -26, -30, -9, 10, 33, 29, 3, 10, -6, 1, -17, 2, 18, -16, 5, 12, 5, -36, -10, -23, -26, -26, -1, -5, 19, 21, 45, 10, -38, -55, -25, -2, 1, 20, -8, -29, -36, -19, -8, 28, 20, -8, 15, 9, 2, -14, -7, -24, 10, -17, 19, 16, 20, 32, 46, 7, -29, -8, -7, 34, -3, -6, 5, -23, -6, -25, 19, 0, -10, -3, 18, -7, 2, 0, -11, -14, 16, -7, 15, -10, 17, 31, 11, 10, -4, 3, 30, 3, 21, 10, -19, -24, 16, 15, 21, 20, -4, -7, 1, 5, -5, -1, 7, 0, 8, 13, 26, 2, -11, 33, 25, -11, -13, -11, 2, 24, 22, 16, 2, 19, 28, 4, -9, 2, -8, -39, -15, -3, -3, -28, -13, 40, 43, 4, -15, -3, 20, 13, -5, 12, 5, -1, 20, 29, 31, 1, 20, 38, 4, 15, 19, -16, -4, -40, 5, 17, -6, -5, 35, 10, 0, 1, -11, -26, -2, -1, -4, 11, -2, 12, 14, 9, 14, 25, -11, -12, -5, 1, -9, -50, -48, -12, -15, 28, -15, -24, -2, 13, -13, 8, -5, -2, -19, -33, -27, 5, 30, 2, 4, 14, -1, -19, -17, 7, -27, -10, -11, -40, -12, -36, -4, -12, 9, -23, 8, 17, -24, 10, -12, -21, -39, -1, 10, 9, -21, -33, -7, 18, -1, -16, -27, -12, -24, -9, 0, -18, 10, -6, -12, -1, 9, 2, -12, -15, -17, -18, -11, -18, -40, -5, 7, 4, -39, -9, -38, 7, -15, -5, -4, -27, -23, -39, 4, -9, -11, 24, -16, 14, 11, -17, -8, -19, -37, -41, -9, -25, -25, 9, 14, -16, -33, -24, -23, 0, -2, -5, -8, -34, -18, -48, -19, -24, -14, 10, -13, 6, -12, -19, -5, -29, -34, -34, -36, 8, -3, 22, 2, -28, -43, -8, -33, -16, -22, 21, 13, -43, -18, -17, -19, -25, -17, -12, 11, 10, -20, -27, -34, -22, 7, 4, -25, 2, 21, 9, 4, -10, -33, -9, -7, 12, 14, 17, 15, -33, -8, 5, 12, 1, 23, -27, -14, 17, 13, -42, -18, -9, 11, 7, 13, 33, 27, 36, -12, -13, -9, -6, -11, -13, 6, 5, -4, -8, -11, -3, -11, -14, -17, -4, -16, 12, 6, -19, -15, -10, -5, -11, 30, 32, 17, 9, 3, -19, -16, 1, 16, 15, -13, 9, 31, 0, -4, -16, 14, -13, -8, 4, 5, -2, -18, 18, -12, -3, -7, 5, 15, 17, 28, -11, -36, -27, -10, 3, -28, -6, -9, 16, 4, 7, 17, 1, -1, -5, 14, -5, -10, 10, 7, 16, 20, 14, 18, -12, 22, 31, 3, -44, -39, -52, -28, -32, -10, 12, -17, -7, 3, 15, 27, 15, 7, -7, -9, -5, -16, 7, -8, 8, 0, 50, 34, 8, 41, 15, 38, 21, -18, -6, -19, -15, -19, -9, -17, -6, -33, -26, -15, 0, -17, 2, -5, 11, -8, 14, 7, -13, -11, 12, 8, 13, -13, -6, -4, -21, 1, 12, -24, -18, 4, 16, -9, 0, -12, 2, -12, -6, 17, -8, -14, 10, 1}, { 12, -2, -10, -11, 18, -14, 18, -6, -7, -5, -11, -1, -7, 26, 13, 8, 11, 3, -3, 12, 5, 10, -10, 11, 4, 18, 9, -11, 19, -14, -6, 16, -8, 12, 4, 5, 20, -6, 4, 11, -6, 5, -23, -16, 6, 1, -1, 20, 24, -4, 25, 9, 0, 5, 7, 18, 11, -10, 5, -26, -25, 4, 23, 39, 29, 46, 26, 7, -14, -22, -1, -21, -9, 26, 16, -7, 12, 49, 24, 32, 10, -11, -18, 11, -11, -9, -17, -36, 12, 25, 51, 13, 12, 24, -5, -6, -29, -19, -6, 3, -18, 1, -27, -9, 9, 79, 49, 42, 16, 0, 33, 13, 13, 18, -32, -11, -2, -4, 16, -7, -5, 3, -12, -18, -61, -12, -16, -17, -27, 12, 14, -1, -2, 31, 32, 68, 20, -1, 11, 32, 16, 10, -18, 1, 8, -32, -28, -33, 14, -12, -35, -16, -6, 0, -11, -10, 8, 7, 24, -19, 37, 37, -3, 37, 49, 36, 25, 5, -11, 9, 20, -26, 25, -1, -24, -18, -9, -1, -17, -7, 17, 11, 11, -2, -14, 11, 11, 29, 19, 12, 30, 14, -17, 1, -2, 29, -1, -35, 5, -42, 10, 33, -10, -2, -28, -27, 13, 23, 15, 19, -9, -6, 3, -19, -27, -19, -22, -1, -19, -14, 29, 35, 22, 14, -1, 3, 2, -18, 18, 9, 12, -4, -4, 5, -7, 33, 21, 6, 9, -13, -16, 4, -6, -4, -5, -2, -1, 21, 32, 20, 9, -6, -8, -19, 30, 18, 0, 22, -10, -5, -20, -20, -11, -4, 17, -5, -1, 0, 3, -18, -29, -23, 5, -7, 10, 7, 48, -5, 4, -23, 0, -16, 12, -7, -22, 51, 14, -3, -27, -19, 6, 12, -10, -6, -23, -7, -34, -9, -40, -47, -42, -14, -21, -25, 45, 31, 5, -17, 6, 8, -14, -29, -7, 46, 35, 21, 14, 9, 13, 11, 9, -14, -15, -18, 0, -38, -68, -23, -23, -11, -12, 9, -9, 42, 17, -23, -7, -19, -45, -14, -5, 26, 18, 22, 7, -2, 16, 0, 6, -10, -34, -21, 13, -34, -43, -27, -8, -3, 19, 0, 4, 33, 6, -17, -1, 13, -23, -22, -31, 17, -2, -6, -12, 17, 32, 23, 28, 6, -13, 14, 32, -9, -5, 15, 3, 18, 25, -3, -5, -27, 13, 46, 0, 9, -16, 27, 22, 13, 10, -16, -34, -36, 0, 16, 1, 2, 29, 27, 30, 0, -15, 4, 24, 25, 9, -7, -4, 20, 4, 5, 0, 6, -3, 49, 15, 17, 30, -29, -47, -20, -18, -13, -1, 13, 15, 53, 17, 5, -13, 13, 17, 9, -24, -30, -15, 42, 19, 41, -13, 5, -29, 22, 13, 18, 38, 6, -5, -36, 13, -7, 25, 7, 45, 37, 41, 41, 31, 10, 20, 12, 10, -16, 8, 83, 60, 18, 2, -13, -16, 5, -7, 17, 7, -16, -21, 5, -5, 10, 9, 7, 24, 24, 18, 29, 14, 25, 2, 23, 11, 2, -20, 50, 9, 20, -30, 9, -29, 2, 29, -16, 3, -3, -1, -26, -12, -2, 7, 32, 43, 4, 27, 2, 18, 31, -3, 21, -20, 0, 36, 30, 16, 29, -10, 9, -1, 0, 25, 12, 16, 3, 9, -9, -4, 19, 14, -2, 8, -1, 8, 1, -3, -8, 9, -1, -1, 30, 5, 6, 21, -19, -2, 15, 11, 35, 27, 35, 13, 23, 22, 11, 0, -11, -2, -15, -16, -9, -34, -5, 4, 2, 4, -4, -11, 14, -5, -13, -17, 8, -2, -6, 20, 7, 57, 14, -12, 20, 18, 30, -4, -5, -2, 4, -9, -35, -22, 18, 14, 8, -32, -6, -9, 4, -6, 0, -29, 3, -10, 1, 5, 43, 46, 6, -23, 10, 16, 5, 5, 21, 19, 28, -20, -35, -2, 9, -6, 8, -16, -32, 6, -1, 13, 2, -51, -15, 8, -5, -4, 36, 44, 25, 9, -25, 21, 14, 14, -14, 8, -23, -8, -31, -4, -22, 0, 27, -20, -3, 8, 16, -10, 12, -2, 11, 0, -2, -26, -9, 5, -37, 13, 34, 11, 0, 1, 17, -14, 29, -21, -5, -2, 5, 26, -1, 13, 3, -8, 3, 27, 20, 15, -6, -4, 11, 12, 10, 17, -29, 27, 37, -9, -7, 62, 37, 19, 7, -13, 35, -11, -11, 17, -39, 3, 39, 10, 33, -14, 16, 22, 14, -10, 16, 4, 33, 18, 2, 9, -13, -6, -17, -4, -7, 24, 7, -12, 10, 47, -15, -31, -23, -17, 30, -3, 4, 5, -1, -1, -3, -16, 4, -18, 2, 10, 7, -6, -18, -8, -7, -7, 18, 15, -32, -26, -14, 3, 11, 0, -16, 34, 23, -5, -1, -17, 5, 9, -19}, { -18, 0, -2, 12, 9, 8, 11, 11, -8, -13, -7, 17, 2, 20, -8, 6, 16, 11, 7, -1, -19, 15, 1, 16, -4, 2, -4, 8, -8, -18, 3, -10, 13, 17, 3, 19, 11, 12, 9, 27, 59, 43, 6, 14, 29, 58, 16, 35, 25, 2, 10, 15, -4, 4, 5, -10, -17, 11, 0, 9, 29, 28, 37, 33, 12, -12, -7, 9, -7, 9, -6, 22, 54, 28, 25, 34, 22, -18, 1, 31, -25, -1, 3, 10, 6, -12, 15, -7, 15, -25, 40, 27, 7, 9, 1, -29, -27, 29, 24, 12, -4, 5, 47, 60, 27, 7, 16, 1, 58, 7, 10, 2, -2, -15, -28, -22, -19, -37, -4, -18, -39, -24, -8, -12, -26, -10, 45, 23, 19, 7, 24, 49, 24, 42, 30, 22, 18, 28, 45, 15, -1, -1, -39, -46, -14, -18, 3, -36, -22, 17, 4, 34, 12, 28, 24, 32, 35, 49, 41, 4, 18, 30, 52, 36, 19, 15, 28, 3, 5, -13, 17, -32, -31, -23, -19, -1, 41, 25, 19, 21, 37, 39, 55, 58, 52, 17, 12, 11, 29, -13, 4, -8, 0, 21, 0, 15, 12, -52, -9, -16, -37, -28, -12, 9, 12, 24, 26, 13, 39, 31, 32, 15, 6, -19, -6, -12, -35, -25, -49, -59, -79, -13, -22, 24, -2, -10, -20, -7, -56, -29, 6, -3, 25, 20, 19, 10, 8, -11, -24, -58, -54, -80, -73, -70, -86, -75, -73, -69, -41, -46, -7, -8, 2, -2, -37, 13, 15, -27, -8, 13, 17, 13, 0, 26, 17, -45, -65, -90, -84, -85, -65, -91, -67, -99, -92, -39, -13, -25, 36, -33, 1, -18, -19, -6, 18, 34, 2, 13, 2, 20, -5, 20, 5, -35, -39, -37, -38, -37, -8, -17, -27, -16, -62, -28, 5, -31, 3, 2, -9, -6, 9, 12, 18, 15, 3, 7, -7, -19, 17, -15, -17, 8, 5, 43, 37, 36, 42, 17, 45, 11, 5, 21, 16, -17, 30, 23, -13, -8, 36, 29, 32, 30, 18, 11, 14, -14, -1, 1, 4, -1, 5, 27, 26, 30, 42, 23, 18, 7, -13, 29, -22, -44, 5, -11, 2, 3, 41, 51, 20, 15, -18, 12, -28, -14, 18, -1, -5, -30, 2, 5, 22, 2, 2, 12, 41, 13, 16, 18, 13, -11, 26, 12, -5, -7, -5, 29, 21, -3, -1, -16, 6, 1, 25, 1, -16, -7, -26, 1, 8, 20, 22, 13, 5, -9, 25, 39, 2, -14, -19, 3, -2, 13, -33, -14, 10, 4, -3, -9, -11, 13, 8, 10, 6, -6, -30, 9, 15, 28, 20, 5, 15, 38, -6, 13, 21, 24, -27, -13, -3, -13, -10, 38, 12, -11, -2, -21, 0, -30, -31, 2, -25, -12, 14, 15, 24, 13, -7, 11, 27, 7, 31, 13, -5, 5, 6, -33, 0, -14, -41, 28, -27, 24, 14, -29, 1, -24, -39, -6, 7, -15, -5, 25, -31, -14, -5, -9, 7, 12, 6, 20, 11, -5, -14, -21, 17, -26, -19, 2, 10, 15, 8, -8, -1, -14, 8, -3, -11, -9, 15, 6, -21, -27, -7, 5, 2, 32, 1, -6, -30, -21, -12, -23, 4, -7, 32, 19, 23, 21, -7, -29, 19, -10, 5, 6, 26, -2, -6, -5, -20, -24, -27, 17, 23, 27, 10, -4, 4, 0, -8, -35, 5, -12, 0, 13, 42, 10, 14, -18, 28, 11, 1, 0, -10, -8, -15, -2, -2, -18, -10, 20, 5, 24, 24, 8, 29, -5, -21, 17, 11, 4, -38, 14, 31, 30, -1, -26, -16, 24, 8, -7, 16, -8, -14, 22, -1, 7, 1, -13, 13, -9, -5, -10, 17, 6, -49, -19, 17, -14, -19, 16, 35, -2, -12, -31, -10, -8, 5, -9, 24, 15, -7, 13, 17, 14, 8, -20, -5, -7, -6, 9, -15, 6, -24, 9, -6, 12, 10, 29, 25, 26, 8, -9, -9, 9, 8, -11, -12, 15, 17, -3, 2, 9, -2, -1, 10, -22, 18, 6, 27, -2, -16, -2, -12, -4, -21, 21, -13, 20, -7, 26, 8, 3, 8, 2, 3, 8, -6, 15, 1, -14, 12, 7, 28, 12, 21, 25, -13, -7, -21, 2, -5, 2, 20, 3, 13, -13, 1, 7, 29, 7, -22, -19, 26, 16, 45, 46, 5, 12, 12, 42, 13, 8, 16, 18, 23, 10, 9, -5, -17, -2, 6, 18, -10, 1, 18, 9, 17, 36, -12, -2, -16, 20, 64, 48, 13, 11, -2, 41, 37, 52, 36, 29, 3, 13, 5, 17, 15, 18, -1, -4, 8, -4, 11, 5, -9, -8, 7, -6, -8, -2, -43, -31, -8, 8, 1, -6, -6, 4, -7, -14, -4, 14, 16, 1}, { 9, 1, 14, -4, 18, -18, -9, 15, -1, 17, -10, -1, -5, -2, 9, 3, 14, 10, -10, -5, -5, -17, 2, -2, -8, 9, -15, -8, -9, -19, 2, 19, 2, -4, 1, 3, -18, 13, -16, -8, -5, 3, -12, 1, -36, -19, 1, -13, 29, 24, -8, -6, 11, -1, -7, 18, 7, -1, 2, -12, -7, -2, 3, 1, 3, -28, 3, 29, 11, -14, -20, -19, -38, -49, -7, 19, 11, 26, 30, 24, 18, 12, -13, 7, 6, 6, 2, 14, 2, -11, -1, 26, -22, -63, -9, -21, -38, -40, -12, -84, -85, -24, -7, 12, 23, 0, 11, -15, -5, 46, 46, -18, 9, 15, -1, 27, 43, 8, -13, 20, -30, -49, -10, -27, -16, -26, -60, -92, -58, -36, -5, 6, 13, 4, -22, -11, 28, 2, 3, 1, 16, 4, -17, -9, -24, 6, 14, -1, -2, 13, 2, 29, 43, -17, -33, -27, -20, -8, -23, -8, -41, -7, -16, -2, 2, -7, -15, 24, 7, 2, -29, -17, -17, 11, 13, -3, 29, 24, -7, 11, 22, -18, 6, -20, 10, 18, 6, -4, -12, 2, 8, -12, -18, -35, 12, 26, -10, -35, -9, -17, 0, -7, -2, -3, 9, 33, -4, 11, 32, 8, -4, -12, 17, 26, -22, 7, 31, -18, -6, 16, 7, -21, 5, 37, -10, -29, -18, 2, 10, -29, -48, -12, 46, 45, 16, 43, 30, -8, -2, -25, 2, 16, 8, 19, -15, 0, -14, -5, -15, 29, -24, -6, -7, 23, 6, -1, 0, -39, -45, 5, 37, 12, 43, 33, 25, -22, -29, -5, 6, 13, 28, 2, 8, -9, -5, -16, 10, -9, -6, 22, -19, -13, 13, -45, -29, -34, -85, -30, 36, 25, 3, 11, -31, -26, 0, 43, 32, -9, 12, 9, 0, 1, 25, -21, -5, 5, -12, 32, -18, 4, 32, -15, -24, -50, -56, 14, 39, 10, 11, -14, -2, 3, 18, 24, 7, 9, 11, -11, -7, -6, 2, -5, -6, -60, -32, 36, -12, 19, 24, -15, -40, -42, -25, -1, 12, 7, 29, -9, -15, 20, 32, 48, 45, -8, -9, -8, 6, 11, -25, -21, 9, 2, -6, 26, -13, -19, 4, -15, -52, -51, -17, 42, 13, 1, 13, 10, 10, 13, 43, 33, 17, -1, 14, 22, 10, -15, -13, -21, -5, -21, -33, -11, -8, -5, -30, -13, 1, -42, -39, 11, 16, -8, -20, 12, 9, 29, 46, 32, 4, 26, 35, 13, 12, 9, -37, -30, -12, -2, -45, 6, 0, -16, -38, 8, -5, -8, -33, -10, -24, -21, -26, -5, -9, 21, 47, 24, 2, 14, 30, 18, 5, -10, 0, -16, -45, -53, -44, -5, 5, 11, -46, 0, 15, 15, -8, -15, -40, -14, 2, 20, 19, 33, 16, 33, 29, -7, 4, 15, -8, -31, -50, -33, -49, -61, -29, -31, -14, -10, -10, -10, 2, -6, 7, -12, -33, -25, -10, 5, -3, -9, 6, -6, 7, 4, -38, -12, -25, -20, -31, -8, -12, -12, 5, -4, -13, -9, -23, -11, -18, -14, -80, -45, -59, -47, -20, -14, -27, -4, -1, -5, -16, -41, -64, -56, -38, -61, -49, 1, -28, 9, 49, -12, -16, 10, -23, 11, -14, -42, -40, -31, -43, -55, -36, -16, -30, -11, -12, 18, -17, -32, -45, -64, -62, -11, -1, -22, -38, 23, -11, 14, -7, -17, 11, 38, 42, -16, -4, -44, -29, -12, -35, -11, -30, -22, -6, -8, -16, -27, -62, -62, -30, 3, 35, 11, -22, -12, 14, -4, 14, 4, 26, 21, 53, 23, 2, 0, 14, 22, 3, -24, -4, -30, -23, -30, -36, -26, -20, -47, -19, -7, 6, -20, -27, -7, -39, 8, -7, -16, 28, -6, 13, 32, 42, 16, 15, -5, 26, -12, -1, -34, -14, -17, -30, -30, -32, 1, -2, 11, -14, -13, -12, 26, 9, 16, -1, -1, -12, -44, 9, -2, 37, 26, 1, -6, -4, 2, -1, -14, -28, -39, -27, -28, -6, -24, -14, -26, -45, -23, -3, 27, 19, -17, -11, 12, 13, -20, 47, 38, 14, 20, -1, -4, -16, -16, -34, 10, 9, -14, -6, -12, 0, -31, -43, -37, -34, -16, -21, -2, 21, 18, 18, 17, -13, 13, 56, 49, -5, 7, 5, -9, -4, -11, -26, 0, 15, -10, -27, -22, -7, -28, -31, -44, -27, -13, -4, 26, 10, 7, 15, 3, -18, 19, 75, 65, 21, 30, 14, 16, 41, 9, -24, -24, 43, 28, 23, 42, -9, -3, -20, -19, -50, -2, 1, 2, 9, -6, -12, -17, 15, 8, -10, -13, 21, 24, -5, 3, -26, 4, 5, 16, 3, 52, 16, 48, 27, 2, 35, 23, 5, -16, -17, -14, -14, 13}, { -16, -10, 9, -13, 8, -3, 15, 11, 4, -5, -5, -3, 29, 20, 6, 0, -5, 2, 14, 9, 12, -5, 17, 4, 2, 0, 4, 13, -7, 0, 14, 8, 5, -4, 4, 3, 28, 1, -12, -28, 1, 14, 26, 26, -34, -15, 16, 10, 2, 8, -13, -5, -8, -2, -14, 12, 14, 12, 7, 7, 9, 4, 3, 9, 24, -6, 6, -7, -2, 4, -9, 20, 22, 8, 6, 11, 5, 29, 7, 29, 21, 4, -6, -7, 14, 18, 8, 9, 8, 6, -15, 9, -14, 6, 2, -2, -27, 7, 15, 9, 31, 50, 44, 26, 50, 14, 27, 6, -11, -9, 8, -7, -16, 13, 11, 14, 25, -18, -21, -14, 0, -10, 4, -4, 9, 28, 0, -15, 1, -28, 8, 26, 26, 9, -3, 3, 16, 15, 2, -9, 7, 10, 11, 12, 13, -10, -5, -34, -6, -1, 19, -4, -16, -1, -21, 1, -18, -1, -6, -4, 14, -5, -5, 12, 3, 2, -21, -17, -11, -3, 0, 28, 14, -22, -28, -31, -10, 26, -8, 6, 1, 14, -5, 2, 0, 0, 28, 2, -7, 15, -18, -15, 16, -17, 6, -15, 9, 57, 8, 28, -7, -25, -32, -13, 6, -10, -5, -24, -15, -16, 24, 5, 27, -4, 8, 6, 12, -11, 3, -31, -35, -26, 30, -11, -14, 36, -28, -13, -3, 8, -3, -4, -13, -31, -2, -15, -10, -26, 5, -7, 15, 2, -4, -17, -16, -5, -5, -18, -29, -32, -26, 8, 3, 37, -22, -8, 11, -3, 5, -11, -1, -21, -9, -1, -9, -6, 12, 15, 21, -1, 7, -1, -28, -15, 6, -42, -30, 7, -3, 25, -12, 25, -10, 27, 2, -8, -3, 2, 16, -15, -8, -24, -3, 16, 33, 9, 24, 18, -9, -6, -11, -28, -3, -19, 15, 16, 14, 24, 9, 3, 17, 33, 6, -6, -15, 5, -4, -21, 14, 22, 17, 33, 43, 6, 15, 1, 3, -4, -7, -8, -3, 4, -22, -29, -9, 29, 7, 7, 28, -21, 18, 1, -10, 13, -16, 1, 8, 0, 6, 29, 17, 41, -9, 15, 15, -25, -19, -4, -19, -14, -53, -5, 12, 35, -12, -10, 28, 0, -1, 1, 1, -1, 8, -4, -11, 11, -11, 28, 13, -6, 16, 7, 17, 1, 15, 7, -27, -7, 9, -10, -1, 11, -18, 3, 20, -2, 23, -9, -4, -12, -6, 6, 1, -8, 11, -2, 10, -4, 4, -22, 17, 7, 24, 6, -8, -31, -35, -11, -29, -14, -3, -12, 13, 4, 13, -3, 2, -2, -9, 7, 25, -6, 2, 2, 6, -10, -14, -6, 16, 34, 13, 1, -6, -19, -35, -41, -16, -12, 19, 5, -9, 17, 8, 7, -20, -9, -6, -7, 30, 7, -5, 3, 8, -27, -24, -5, -1, 10, 13, 10, -5, -18, -30, -46, -46, -31, 7, 19, -12, 7, 17, 21, 6, -11, -10, -13, -1, -24, 7, 12, -4, -7, 0, 12, -3, 9, 6, -1, -18, 4, -16, 19, 15, -46, 17, -11, -1, 14, -14, 13, 11, -3, -13, -21, -36, -4, 2, 5, 18, 25, 1, 15, 20, 23, -18, -27, -27, -34, -33, 1, 40, 18, -15, -20, 6, -3, -30, 21, 15, 16, -14, -9, -28, 4, 16, 24, 8, 9, 8, 7, -14, -11, -43, -40, -43, -30, 8, 8, 0, 6, 1, -15, -32, 22, 2, 2, 3, 1, -15, 15, -13, -26, 0, -6, -1, 15, 17, -1, 4, -37, -22, -20, -28, -19, 2, 17, -1, 7, -5, -2, -7, -6, -17, -30, 10, -1, -7, -4, 18, 8, 11, -15, 17, -6, 18, -11, -7, -31, -39, -31, -30, -26, 9, -11, -20, 19, 13, 7, -18, -14, 3, -9, -21, -20, -7, -1, 15, -4, -20, -6, 4, 9, 10, -5, -22, -19, -2, -28, -6, 8, -5, 9, -2, 7, -14, 9, 19, 23, -19, -4, -16, -10, 7, 1, -2, 4, -6, -18, -20, -26, -9, -13, -24, -28, -18, -30, -10, -5, -4, 4, 10, -18, -17, 17, 5, 16, 42, 40, -17, 7, 19, 7, 16, -9, -3, -14, 18, -14, -17, 6, -19, -5, -8, -39, -16, -12, 8, 1, 24, -12, -18, -4, 13, -12, 44, 66, 16, 61, 54, 42, 12, 20, 3, 19, 2, -15, 34, 0, -9, -3, -35, -13, -14, -11, 9, -6, 17, 18, -15, 12, 7, 27, 26, 58, 40, 63, 30, 40, 31, 19, 37, 54, 47, 23, 53, 19, 15, 0, 13, 21, 9, -1, -11, -6, -8, -7, -12, -5, -15, -15, 16, 6, -10, -2, 31, 31, 19, 18, 24, 38, 28, 7, 25, 28, 10, 25, -9, 10, -11, -11, -1, 8, 13, 16}, { 0, -4, 0, 17, -10, 11, -2, -7, -9, 8, 6, -1, -15, 4, 13, 5, -4, -11, -10, 3, -17, -14, 11, -9, 9, -14, 2, 0, -9, 9, -11, 4, 7, 19, -14, -16, -17, 3, 10, 7, -8, 14, 12, -7, 3, 2, 14, 10, -11, -7, 4, -5, 8, 10, -5, 12, -17, -9, -17, -5, 9, -9, -13, 13, -8, 16, -13, 8, -3, 8, -15, -11, 12, 12, -15, -14, 8, 16, -8, 6, -18, 3, -2, -15, 5, 12, 3, -14, -16, 9, -1, -18, -3, 6, 18, 11, -4, -16, -6, -7, -6, -10, -6, 1, 1, 15, -18, 14, 18, -11, -12, -16, -7, 13, -3, 7, 18, 11, -10, 0, -3, -13, 14, 16, 7, -10, 16, -7, -9, 6, 4, -5, 12, 6, 14, 0, 15, -1, -8, -6, -12, -17, -3, 9, -12, 8, 13, 10, 7, -16, -5, 8, -15, -1, -10, -20, 0, 8, 16, -6, 9, 11, -3, -16, 10, 9, 9, 18, 1, 0, -12, 17, -11, -6, 16, 3, -1, 11, 7, 1, -3, 11, -7, 5, 6, -9, -16, -18, -21, -1, -14, 7, -12, 15, -7, -17, 0, -6, 7, 4, 13, 8, 3, 11, -1, 2, 4, -11, 12, -8, 1, 2, -10, -6, 13, -15, -10, -13, 7, 5, 15, 12, -4, 18, 5, 2, 19, -12, -6, 3, -3, 5, -10, -19, 1, -11, 4, -16, -11, -22, 10, -14, 3, -16, -6, -17, -20, 13, 6, 6, -18, -2, 4, 14, -16, 0, -3, -7, 8, -11, 2, -2, 1, -16, 10, -2, 4, -17, 4, -21, -8, -4, -17, -3, 0, 10, 3, -14, 8, 0, -8, 1, -15, -10, 8, 14, -13, -2, -6, 16, -5, 12, 4, -19, 2, -6, 16, -6, 4, -1, -11, 1, -14, -9, -15, 6, 10, -16, -9, 16, 12, 1, 10, 6, 5, -17, 17, -18, -22, -13, 12, -15, 11, -6, -20, -8, -18, -16, -9, -9, 11, 10, 16, -10, 11, -9, -2, -9, -18, -4, 6, 9, -13, -20, -20, -2, -1, 1, -16, 1, 4, 3, -17, -14, -12, 3, 13, -13, -6, 15, -8, -14, 13, 18, 8, 10, -3, 14, 11, -11, 15, 8, 13, -14, 1, -16, 8, -8, 1, 5, 7, -7, -3, 2, 14, 9, -16, 2, -15, 13, 9, -7, 12, 6, 9, 12, 14, -18, -5, 17, -19, 13, 5, 8, -12, -16, 6, -11, -12, 14, 6, -1, 7, -14, 5, 12, -10, 11, -5, -16, 3, 10, 8, -17, -8, 6, 11, 1, 3, -18, 13, 7, 8, 0, 1, -15, -2, 3, -1, 6, -4, 19, 5, -17, 7, 7, 1, -11, 17, -17, 8, 2, 19, 11, 8, -11, -14, -2, 5, -17, 14, -17, -8, -20, 0, 6, 10, -13, 13, 7, -5, -10, 1, -8, -2, -2, 14, 15, 2, 18, -14, 5, 7, -18, -18, 13, -3, 5, -10, 11, -13, -21, -17, -19, -18, -10, -10, 0, -15, 17, -16, 8, -14, 14, -4, -9, -17, 1, 1, -11, 4, -6, 12, -16, -16, -15, -9, 6, -12, -13, 1, -13, -6, -15, 6, -12, 13, -13, -12, 17, 11, 16, -13, -2, 11, -12, 0, -1, -2, -9, -13, -7, -20, 7, 13, -8, 4, -20, -20, -8, -7, 12, -17, -15, -11, 2, 16, -4, -2, -8, -14, 12, -15, -13, 5, -7, 7, -3, 12, -8, 10, -10, -20, 12, -21, -2, -2, -14, -19, -3, -17, 11, -16, 17, 17, 17, -2, -3, -14, 5, -2, -2, -5, -11, -16, -20, -3, -17, -11, -17, -17, 12, -16, 9, 5, 14, -8, 4, -10, -6, 7, 5, 17, -12, 14, -7, -16, 17, -14, 13, 1, 7, 17, 0, -12, 10, -8, -3, -1, 6, -2, 5, 1, -19, 13, -13, 12, -11, -17, 0, -8, -17, 2, 11, 0, -10, 4, 18, 2, 17, 8, 15, -11, 2, 10, 16, 6, 9, -10, 5, -22, 10, -10, -6, -13, -18, 0, -15, -5, -1, 3, -4, 2, 12, -1, 1, -17, 15, -3, 7, -18, -14, 7, -11, -3, -17, 12, 2, -17, 4, -17, 6, 15, 7, 6, 14, 0, -3, -3, -13, -14, 7, -2, 12, 4, -16, -17, 0, -15, -10, -2, 14, 13, -15, 12, 13, -6, -1, 18, -10, -17, 7, 14, 19, -5, 18, -7, -14, 6, -12, 9, -14, 18, 15, -9, -19, -2, 6, 6, -13, -7, 11, 12, -6, -9, -10, -17, 4, 0, 16, -2, 0, 2, -3, -10, -16, 0, -17, 9, -3, 6, -8, -16, -11, -19, -3, 14, -12, 10, -14, -18, -1, 7, -5, -5, 2, 11, 19, 6, 0, -15, -10, 5, -2}, { 3, -8, -2, 9, 1, -16, -2, -2, -3, -17, 3, -13, -3, -9, -11, -13, -15, -8, -16, 17, 18, 11, 2, -2, -10, 2, 8, 19, -5, 1, -5, 11, 8, -9, -15, 1, -19, -22, -10, 3, -19, -9, -4, -6, 17, -3, -12, -27, -22, 2, -20, 9, 9, -17, -17, 18, -4, -8, -17, 8, 6, -22, -19, -17, -6, -42, -25, -28, -1, -4, -9, -21, -45, -18, -3, -35, -15, -33, -15, -24, -24, -18, 16, 18, -3, 14, -6, 18, -23, -27, -35, -10, -21, -2, -17, 0, 17, 20, -11, -18, -31, -25, -41, -21, 8, 9, -11, 1, -17, 0, 14, -3, -5, 0, 15, -11, -31, 4, -8, 10, -8, 4, -18, 6, -17, 13, 5, 1, 9, -14, -4, -3, 3, -1, 31, 12, 25, -9, 27, 4, -1, 13, -8, -24, -40, 4, 12, -22, 25, 12, -12, 24, 1, 9, -25, 4, -31, -35, -11, -44, -11, -3, 21, -12, 7, -21, 10, 8, 6, -26, 39, -6, 11, 22, 10, 7, 10, -4, 13, 7, 3, -1, -5, -36, -26, -23, -10, -13, -8, -1, 2, -10, 0, -15, 2, 0, 7, -13, 31, 24, -4, 13, 31, 16, 6, 9, 2, 34, -5, -3, -22, 6, 2, 1, 7, -16, -2, 5, 10, 29, -8, 23, -14, 2, 1, 5, 11, 32, -7, -5, 25, -7, 24, 22, 3, 0, 7, -19, -17, 15, 21, 12, 4, 6, 3, 11, -31, 35, 31, 2, 8, 8, -16, 30, 19, 4, 18, 24, 14, 13, 2, 22, 35, 39, 4, -27, -11, -3, 32, 30, 39, 17, 18, -12, -13, -2, -1, 16, -22, -2, -4, 27, 26, -1, 21, 26, 0, 9, -9, -12, 19, 10, 17, -9, -28, 2, 9, 25, 5, 2, -18, -4, -21, -7, 7, -3, -13, -11, -10, 20, 32, 12, 15, 12, 23, 27, -10, -13, 15, 31, -16, -40, -51, -21, 19, 15, 19, 1, -6, 0, -24, -21, -33, -34, -12, -26, 19, 1, 1, 8, -20, -13, 11, 5, 23, -17, -18, -2, 21, -15, -42, -19, 1, -7, 19, 32, 12, -10, -1, -36, -32, -42, 3, 8, 9, 16, 33, 36, 11, -17, -15, 0, -12, 6, 22, 15, 2, -34, -38, -13, -12, 21, -10, -9, 8, 20, 15, -9, -15, 1, -8, 10, 26, 12, 22, 9, 0, -6, 10, 20, 4, -2, 36, 34, -1, -27, -34, -33, 3, 7, 12, 17, 11, 11, 18, 1, -6, 8, 13, 18, 3, 13, 40, -4, -25, 0, 11, 19, 17, 14, 39, -1, -9, -34, -55, -39, 6, 24, 32, 22, 27, 7, 24, -11, -9, 12, 4, -3, 21, -24, 13, -23, 13, 0, -11, -2, 19, -15, 16, -17, -31, -66, -17, -9, -3, 18, 12, 11, 6, 20, 11, -12, -4, 1, 20, -4, -12, -6, 6, -43, 5, 8, 23, -16, 3, 12, 8, -20, -67, -27, 6, 16, 42, 39, 17, 10, 20, -3, -2, -1, 30, 9, 22, 35, -29, 16, 12, -27, -36, 8, 13, 10, 19, 6, -24, -42, -61, -31, 27, 11, 10, 11, 25, -9, -17, -25, -40, -36, 25, -5, -3, 5, -16, 8, 2, -10, -6, -13, 2, -7, 1, 5, -28, -41, -48, 2, 9, 34, 0, -11, -7, -5, -11, -35, -30, -7, -17, -17, -6, -1, -19, 36, 22, -28, -23, 7, -8, -13, -33, -41, -33, -4, 1, 2, 7, -4, -6, 4, -6, -4, -32, -29, -19, -15, -12, -23, -2, -7, 0, -14, 22, -23, -18, -3, -23, -42, -14, -13, -2, -9, 14, -3, 12, 1, 16, 0, 4, -36, -10, -17, -1, -9, -5, -17, 53, -1, -7, 12, -1, 7, -19, -26, -8, -6, 6, -2, -11, -6, 7, 10, 15, 3, 12, -17, -19, -21, -27, -3, -19, -4, 7, 9, 16, 20, 14, 5, -32, 13, 3, -21, -15, -9, 10, -10, -15, -15, 4, 23, 26, 4, 3, 5, -7, -8, 0, 32, 5, 7, -19, -20, -11, 2, -17, 5, 20, -7, -6, -20, -30, -49, -19, -25, -12, -15, -2, 12, -6, 16, 0, 33, 7, 10, 43, 11, -1, -4, -18, -15, -11, -1, 10, -16, -24, 18, 3, -12, -41, -54, -30, -8, -40, -5, -10, -13, 28, 11, 11, 28, -2, -22, -12, 3, 26, -20, 3, 0, -2, 11, 13, 11, 7, -12, 14, -46, -14, -45, -27, 14, -27, -37, -28, -25, 2, -4, -17, -14, 0, 7, 14, 21, 8, -36, -28, 22, 14, 2, 13, 14, 0, 10, 16, 1, 15, 10, -16, 21, 28, -9, 6, 11, 13, -4, 11, 54, 41, 32, 21, 29, 29, 25, -9, -14, 9, 7}, { -16, 15, -11, -14, 8, 3, 1, 9, 15, 9, 18, 18, 13, 14, 11, -13, -4, -5, 12, -11, -1, 10, 15, -5, 8, 12, -18, -3, -13, -11, 10, 5, 1, -18, 11, -11, -8, -5, -45, -5, 24, -4, -19, 6, 2, 26, 16, 21, -4, 6, -12, 5, 8, 15, 13, -14, 12, 5, -7, 30, 22, 12, 7, -11, 4, -3, -40, -34, 10, -9, -39, -1, -3, -3, 11, -1, -22, -22, 1, 30, 6, -10, 5, 9, 9, 7, -6, 18, -2, 5, -22, -17, -25, -23, -4, -4, 14, -7, 37, 9, 29, 33, -4, -6, 28, 24, -7, -15, -14, 14, -2, 1, -10, 16, 9, 1, -16, -2, -35, -12, -31, -41, -38, 4, 16, 28, 13, 32, 6, 8, 10, -13, -17, -2, -5, -11, -18, -4, 18, -14, 2, -18, -4, 7, 3, -19, -2, -21, -42, -44, -36, 8, 5, 26, -11, 7, -5, 4, -2, 0, 11, 4, 10, -9, -13, -20, -21, -25, 10, 8, 0, 3, 14, -4, -9, -31, -39, -20, 9, -23, -11, 10, 7, -33, -11, 6, -20, 13, 13, -7, 31, -15, 9, -23, -6, -35, 7, 12, -1, 14, -20, -24, -18, -27, -26, -25, -13, -12, -2, 9, -7, -13, 15, 2, 2, -9, -2, 5, 9, 47, 18, -8, 24, -23, 1, 25, 2, -15, -28, -4, -10, -5, -48, 1, -1, -7, 18, 15, 17, 37, 26, 34, 30, 3, 14, 16, 19, 16, 37, 10, 8, 10, 7, 19, 13, 26, -17, -22, -25, -14, -10, 6, -12, -13, 1, 1, 12, 2, 24, 40, -2, -7, 22, 9, 37, 56, 22, 35, 0, 9, 20, 18, 30, -3, 0, -43, -3, -12, -19, 19, -11, -7, 8, 18, 21, 31, 35, 18, 22, -17, -1, 23, 35, 29, 34, 45, 51, -26, 13, -5, 23, 2, -10, -30, -9, -8, -15, -15, -8, -14, 15, 19, 16, 26, 20, 8, -8, -5, -6, 22, 19, 29, 35, 8, 58, -20, 20, -12, -9, -2, -8, -16, -17, 13, -13, 25, 15, 7, 10, 4, 11, 17, -13, -6, 22, -9, 4, -21, -15, 19, 0, 4, 3, -34, -11, 23, 11, 18, -16, 26, 21, -25, 2, -10, 1, -4, 5, -9, -20, -14, 2, 1, 11, -10, 0, -26, -6, 0, -14, 2, 2, -4, -8, 8, 15, 29, 3, 24, 33, 3, -2, -15, 6, 0, -13, -22, -31, -39, -30, 8, 11, 7, -2, 5, -18, 5, 37, -28, -12, -21, -8, 12, 10, 6, 33, 30, 25, 28, -1, 7, -26, -34, -9, -41, -39, -24, -5, 14, 13, 11, 0, -19, 7, 19, 28, -27, 8, 6, -28, 8, -7, -6, 57, 23, 4, 11, 16, -24, -16, -26, -43, -27, -21, 5, 2, 10, 10, -4, -11, -27, -13, -52, -44, -34, -27, 23, 6, 14, -18, 25, 41, 36, -4, 4, -16, -4, -15, -19, -31, -27, -19, -19, -7, 26, 12, 10, -3, -32, -43, -24, -36, -41, -25, 12, 6, 9, -5, 9, 10, 25, 4, 17, -8, 11, -24, 0, -21, -29, 5, 4, 22, 28, -6, -31, -59, -61, -34, -32, -51, -33, 3, -42, -17, 11, 39, 8, 10, 16, 22, 0, 24, -1, -4, -3, 11, 8, 21, -8, 8, 18, -20, -44, -67, -61, -36, -43, -17, -9, -14, -13, 6, 18, 13, -1, -19, 11, 17, -2, 6, 10, 22, 0, 11, 19, -1, 14, -12, -7, -29, -84, -80, -41, -32, -21, -14, -13, 2, 18, -3, 0, 7, -21, -22, 19, 43, 45, 36, 0, 30, 11, -7, -14, 0, -18, -38, -50, -56, -77, -75, -49, -37, -16, -25, 6, 57, 6, 4, 10, -3, 0, -29, -4, 19, 13, 1, 7, 29, 0, -4, -23, -6, 3, -17, -40, -78, -61, -31, -56, -40, -28, -33, 14, 21, 10, 5, 14, 23, 3, -9, -20, -25, -15, 14, 3, 18, 20, 10, 2, -3, -3, -24, -42, -42, -25, -39, -26, -32, -2, -9, -1, -37, -3, -11, 6, -11, 32, -10, 31, 10, -35, -8, -18, -5, -13, 5, 12, -9, -14, -8, -34, -20, -40, -29, -20, -26, -41, -21, -4, -19, -17, -2, 4, -11, 15, 21, 33, -7, 7, 10, 8, 30, 5, 19, -1, -12, -19, -4, -6, -6, 6, -3, 0, -15, -29, -26, 6, -8, -15, 4, 15, 5, -9, -40, -17, 11, -11, 23, 14, 31, 20, -5, 15, -19, -2, -13, -15, 5, 7, 8, -2, 14, -7, -11, -1, 10, -2, -1, -7, -9, -12, -13, -15, -12, 4, -9, -2, 17, 19, 10, 16, 20, -5, -16, 1, -12, 20, 4, -1, -14, 17, 14, 2, 4, -4}, { -13, 3, 8, 16, -16, 16, -18, 16, -11, -16, -14, -15, -5, -6, -1, 16, 12, -3, -7, -17, 7, 0, 4, -6, -14, 15, -5, -6, 0, -2, -12, -17, 9, 6, 7, 4, 21, -2, -4, 17, -1, -4, -35, -22, 11, 29, -4, -32, -9, -7, 15, -13, 13, 11, 0, 10, 5, 6, -18, -12, -11, -11, -3, -6, 36, 0, -2, -12, 26, -4, -36, -60, -17, 17, -43, -50, -28, -47, -22, 7, 0, -2, -5, 10, 13, -19, -15, -17, -6, -26, -17, -11, -23, -7, -6, 28, 17, -21, -42, -58, -47, -8, -55, -37, -45, -47, -5, -1, -7, 43, 40, -6, 13, -11, -9, -25, -11, 2, -22, 2, -19, -19, -15, 18, 29, -9, 0, 4, -29, -16, -20, -41, -31, -15, 4, -4, 9, -14, -32, 7, -12, 2, -34, -13, -18, -22, -18, -20, 32, -7, 9, 24, -12, 3, 5, 7, -47, -41, 10, -21, -55, -29, -37, -28, -46, -43, -22, 5, -9, -17, 15, 1, -1, -18, -18, -13, 30, 45, 15, -7, 2, 7, -9, 17, 17, 5, -12, -35, -15, 8, 20, -32, -71, -54, -13, 21, 0, -37, 28, 15, 0, -34, -24, -7, 13, 14, -20, -11, 4, -1, 3, -1, 8, 0, 6, -22, 10, 5, 8, -10, 7, 4, -8, -9, 6, -13, -7, -14, -12, -9, -7, 0, 19, -14, 5, 0, 2, 0, 12, 11, 12, -1, 13, -38, -26, -19, -14, -8, 2, 19, -14, -29, 2, 24, -10, -19, -8, -21, -3, 4, -9, -2, 23, 29, 19, 11, -5, -2, -10, -12, -6, -15, -41, -36, -11, -5, -8, -16, -23, 1, 4, -8, 12, -49, -18, 13, -6, -13, 13, 12, -7, -11, 6, -2, 28, 45, 24, 9, -5, -11, -40, -16, -41, -27, 5, -35, -28, 32, 22, 20, 11, -20, -28, -17, 18, 7, 21, 24, 11, 24, 33, 21, -2, 8, 34, 43, 26, 3, -33, -18, -30, -52, -16, -41, -43, 36, 19, -8, 9, -9, -37, -18, 11, 6, 3, 24, -7, 14, 10, 16, -18, 6, 36, 20, 45, 25, -43, -42, -37, -44, 10, 7, 0, 29, 2, 35, 13, -34, -8, -25, -33, -12, -21, -13, 21, 14, 13, -7, -18, 6, 39, 27, 37, 16, -77, -63, -19, 9, 8, 2, -7, 11, -22, -4, 28, -43, -25, -30, -42, 11, -40, -6, 11, -13, 9, -3, -36, 7, 10, 43, 38, -21, -74, -58, -10, 9, 14, 28, 26, 2, 9, 17, -28, -37, 10, -25, -7, 0, -38, -28, 19, -16, -9, -20, -4, 33, 31, 39, -11, -44, -58, -45, -4, 21, 17, 20, 34, -16, 12, 11, -33, -38, 8, -27, -42, 4, -24, 4, -6, -6, -25, -24, 10, 24, 32, 21, -7, -65, -29, -14, 8, 13, 5, -14, 40, 30, 0, -11, 15, -54, -28, -15, -10, -10, 1, 6, 16, -10, 4, -8, -1, 37, 34, 7, -18, -25, -14, 2, 35, 26, 34, 26, 23, 55, 29, -4, 4, -34, -26, -6, 8, -2, -7, -4, 7, -6, -23, -9, 18, 25, 8, -32, -17, -5, -2, 37, 42, 26, 39, 10, 39, 49, 5, 23, -18, -43, -2, -24, -34, -14, 10, 9, -11, 15, 21, -10, 13, -8, -27, -7, -21, 23, 26, 32, 13, 1, 1, -1, 35, 36, -9, 41, -6, -62, -1, -9, 4, -17, -22, -16, 6, 3, 28, 4, -6, -14, -25, -20, -49, -2, -20, -29, -31, -21, -11, 2, 35, 8, 0, -6, -23, -37, -7, -10, -26, -27, -14, 28, 25, -1, 7, -4, -6, -13, -13, -36, -45, -32, -19, -35, -51, -34, -37, -18, -2, -18, -3, -13, 16, -9, -54, -51, -29, 7, -1, 13, -11, 4, -1, -1, -27, -4, -9, -15, -26, -41, -19, -22, -31, -28, -19, -15, 6, -7, 3, -14, -6, -33, -78, -56, 1, 12, -1, 6, -12, -1, 20, -4, -1, -26, -15, 4, -14, -9, -47, 2, -6, -1, -9, -30, -15, -18, 3, -10, -6, -29, -35, -11, -15, -20, 1, -38, 0, -7, -5, -15, -16, -14, 8, -8, 17, 5, 6, 0, -7, 9, 12, 12, 21, 14, 13, 3, -1, -16, -7, 12, 16, 41, -7, -12, -4, 28, -1, -10, 15, -16, 21, 4, 10, -30, -24, -15, -6, -4, -21, 1, 2, -15, 14, -5, 10, 11, 24, 38, 36, 51, 48, 63, 45, 48, 45, 13, 42, 24, 17, 7, -9, -25, -18, -27, -35, 8, -16, 20, -17, -7, -9, -8, -9, 4, 15, -8, 17, -2, 6, 17, 59, 39, 39, 26, 49, 49, 16, 30, 39, 7, -3, 18, 1, -12, -5, 2, 1, 3}, { 18, 16, -1, 12, -9, 16, 9, -18, 4, 19, 6, 17, 8, 9, 0, 6, 5, 3, -7, -11, -16, -14, 8, -11, 3, 16, -1, 1, 16, 15, 2, 14, 16, -6, -11, -28, -22, -4, -20, -17, -28, -38, -5, -11, -37, -44, -2, -5, -15, -14, -6, -18, -1, 0, 16, -11, 3, 3, 15, 13, -1, -6, -15, -28, -23, -21, -28, 9, -20, 17, 1, 16, 13, 9, -34, -8, 7, -32, -44, -16, -7, 22, -7, 9, -4, -10, -18, -22, -25, 11, -15, 5, -6, -21, -17, -25, -14, -3, 19, 36, 24, 23, 27, 2, 1, -25, -21, -27, -19, 0, -23, 3, 16, 7, 19, -1, 7, -6, 2, -3, -6, 13, 3, -21, 2, -9, 5, 22, 26, 25, 23, 9, -18, -12, -24, -53, -8, -9, -31, -18, -18, 16, 21, 12, 8, 3, -15, 0, -23, -21, -25, -22, -13, -5, -7, 4, 1, -15, 3, 20, -7, 15, 27, 20, 31, 11, -20, -38, -4, -8, 5, 9, 17, -21, 26, -6, 1, 7, -9, -11, -24, -1, -23, -14, -11, 22, 38, 12, -10, 6, -2, 13, 2, 10, 2, 0, 13, 39, -30, 0, 45, 32, 33, 25, 4, 4, -5, -10, -6, -21, -1, -11, -1, 9, 0, 51, 22, 3, 8, -6, -15, -44, -2, -20, -2, -18, -7, 24, 13, 32, -13, -8, 4, 12, -13, 8, -1, -8, -38, -15, 16, 25, 17, 13, 15, -6, 1, -21, -66, -26, 9, 12, 7, -10, -1, 0, -9, 22, 16, 3, 12, -28, -32, -24, -17, -13, -23, 3, 37, 22, 23, 4, -9, -27, -16, -38, -78, -4, -1, -1, -22, -17, 7, 27, 27, -7, -22, -21, 8, -13, -28, -19, 4, -28, -14, -8, 29, 42, 28, 29, -27, -52, -49, -67, -26, -20, 30, -8, -11, -8, -3, 25, -9, -6, 2, -9, -21, -22, 12, 1, -17, -36, 1, 26, 27, 40, 33, -10, -49, -75, -60, -59, -45, -18, 29, -6, -8, -14, -10, 10, 4, 1, 1, -26, -53, -9, 6, -17, -8, -13, 9, 35, 9, 12, 23, -3, -36, -38, -51, -19, 1, 33, 8, -7, -3, 4, -38, 12, -29, -6, 5, -27, -22, 1, -5, -13, 21, 30, 3, 17, 14, 25, -4, -37, -26, 5, -21, 11, 10, 22, 24, 8, -15, -6, -16, 33, -15, -2, -15, -1, 7, 1, 13, 3, 8, -4, 4, 1, -3, 16, -6, -22, -4, 16, 36, -17, 11, 27, -9, -11, -22, -5, 28, 27, 26, 11, 2, -16, 3, -13, 1, 14, -14, 19, 3, -13, -10, 10, 3, -3, 22, 12, 13, 1, 21, 36, 31, 11, -16, 12, 33, 26, 23, 20, 35, -3, 17, -21, -11, -12, -21, -18, -12, -19, -20, 7, 20, 47, -7, 43, 31, 35, 32, 10, 35, -6, -14, 8, 26, 21, 6, 16, 11, 22, 2, -13, -30, -20, -7, 6, -4, -14, -7, 9, 4, 38, 24, 11, 5, 7, 17, 3, -14, -22, -24, -7, 24, 34, 22, 37, 25, 22, 5, 15, 12, -13, -15, 12, -28, -10, -3, 9, 4, 25, 9, 17, 15, 4, 9, 2, -29, 27, 14, -19, 19, 33, 4, 25, 35, 24, 23, -1, -10, 7, -11, 16, -20, -14, 8, -3, -4, 10, 26, 16, 3, 24, 36, 31, 24, 16, 18, -17, 7, 44, 23, 13, 13, 21, 7, 22, 8, -4, 4, -5, -13, 6, 5, 8, 17, 12, 28, 22, 28, 13, 12, 12, 26, -17, 20, 14, -7, 33, 19, -6, 9, -3, 15, -3, 15, 7, -17, -23, 7, -6, -22, 8, 37, 20, 1, 34, 30, 23, 13, -7, -32, -1, -12, -10, 15, 12, -3, -4, 3, -10, -17, -14, -10, -20, -20, -10, -21, -23, -19, -13, 7, 31, 9, 26, -3, 11, 33, -21, -10, 17, -13, -8, 7, 44, -11, 11, -25, 13, -5, -4, -19, 5, -18, -5, -9, 1, -5, 8, 12, 27, 18, 11, 25, 6, 12, -21, 8, 15, 5, 7, -15, 30, 8, 18, 23, 12, 3, -9, -8, -7, -16, 20, 30, -20, -10, -22, -6, -15, 10, 12, -9, 38, 13, 0, 23, 15, 15, 8, 20, -18, -2, 15, 12, -6, 26, 26, -5, -15, 15, 44, -8, -47, -3, -25, -14, 13, -37, -36, -38, 1, -30, 21, -1, 5, 7, 3, 17, -16, 12, -21, -14, 9, -11, -13, -9, -5, -13, 2, -17, -19, -23, -44, -45, -10, -43, -23, -36, 1, -6, -4, -1, -10, 12, 2, 6, 14, 13, 11, 3, -13, -21, 7, -25, -29, -17, -21, -20, -18, -24, -9, -27, -33, 20, -17, -30, -27, 5, -7, -11, 1}, { 2, -5, 10, 4, -18, -9, 3, 6, -2, -6, -16, 7, 13, 10, 35, 13, -14, 11, -12, -11, 13, 17, 13, -18, -5, 4, 5, 13, 11, -2, 10, 19, -16, -4, 4, 7, -19, -3, 11, 9, -11, 9, -3, 20, 38, 26, 0, -3, 19, 9, 11, -7, 7, 15, 17, 5, 16, -16, 11, 8, 28, -2, -21, -8, -29, -4, -11, -8, -8, -16, -7, -13, 1, 19, 23, 25, 7, 12, 8, -15, -10, -5, 1, 1, 10, 12, -12, 11, -1, -7, -38, -27, 19, 38, 2, 16, 23, -1, -39, -21, -25, 6, -8, 23, -15, -18, -16, -20, 7, 20, 1, 0, 13, -13, -25, -31, -28, -6, -7, 8, 12, 16, 22, 14, 7, -15, -17, -5, 4, 4, 25, -3, -8, 7, -17, 0, 2, 10, 11, -32, -7, 13, 0, 1, -11, -5, -8, 5, -18, 8, -17, 20, -4, 24, -11, -3, -10, -10, -33, -7, -3, 14, 20, 12, -16, -23, -7, -3, -17, 24, -24, -13, -4, 20, 2, 22, -14, -2, -21, -10, -1, -7, -9, -15, -26, -4, -30, 1, 12, -15, -12, 23, 7, -9, 11, -28, 11, 41, -13, -7, -16, -30, -1, 25, 19, -13, 5, 8, 4, -22, 5, -15, -32, -37, -18, -6, 2, 4, 15, -8, 1, -17, 32, 0, 1, 3, -14, -12, -24, -4, 6, 7, -10, -12, 23, 14, 14, -11, -14, 8, -2, 3, -4, 2, 7, 13, 1, 10, -9, 3, 11, -6, -2, -36, -9, -12, -30, -5, 25, 28, 20, -16, 20, 7, 23, 18, 21, -3, 10, 8, 24, -5, 2, 20, 7, 5, 21, -6, -16, -23, 17, 16, -10, 7, 24, 14, 28, 17, -1, 22, -2, 12, 4, 39, 29, 29, 27, 24, 13, 14, 1, -8, 11, 9, 22, 24, 24, -3, -14, -9, -16, -8, 22, 14, 23, 23, 17, -11, -12, -6, -21, -23, -1, -13, -22, -8, 1, -17, -24, -14, -27, -23, -17, 42, 10, -5, -19, 13, -17, 24, 12, 15, 1, -9, -12, -15, -34, -22, -14, -29, -14, -29, -34, -18, -16, -15, -8, 12, -29, -35, 13, 13, 37, -9, 8, 39, 10, 26, -16, -16, 15, 8, -13, -14, -29, 7, 14, 6, 1, -33, -15, -1, 8, -1, 27, -16, -7, 7, 2, -18, 20, 30, 7, -8, 12, 7, -6, -7, -25, 2, -21, -9, 7, 4, -1, -3, 13, -12, -12, -7, 6, 5, -21, -15, -10, -18, 13, -16, 42, 10, -9, 7, 27, -17, 13, 8, -11, -7, -25, 10, -1, 5, -8, 20, 22, -2, -15, -18, 3, -11, -16, -26, -1, 14, 30, 32, 32, -9, -11, -2, 10, 22, -2, -4, 10, -5, -19, -1, -5, -22, 15, -8, 16, -3, 15, 18, -10, -1, 10, 1, 19, 23, 19, 49, 49, 39, -8, -6, -19, 11, 25, 16, -1, -19, 6, 1, 4, -18, 6, -16, 3, 19, 1, -9, 30, -2, -7, -3, 2, -8, -18, 33, 28, 25, -5, -14, -26, 15, -1, 31, 18, 8, -4, 5, -3, 1, -3, 22, 33, 29, 16, 1, -5, 0, 11, -25, 6, -1, 21, 23, -24, 14, -14, 9, -23, -13, -4, 28, 21, -7, -1, 2, 18, 13, 32, 28, 10, 2, -2, 2, 27, -10, -7, 17, -15, 10, 13, 32, 16, 8, -17, -9, -6, -28, 6, 15, 12, 3, 9, 13, 31, 21, 2, 13, 11, 4, 8, -4, -4, -9, -10, 17, 13, 30, -11, 14, 11, -10, 14, -11, 17, 16, -9, -5, 1, -2, 9, 17, 22, 28, 3, 16, 26, 12, 16, 0, 6, -17, 6, 4, 3, 36, 24, 39, 23, -6, 12, -2, -10, -5, 18, 15, -1, -8, 2, 18, 19, 29, 29, 19, 15, 6, -9, 6, 4, -4, -10, -2, -25, 10, 26, 3, 46, -16, 15, 18, 25, 33, 24, -20, -21, -27, 17, 29, -6, -2, 14, -21, 11, 13, -7, -4, -3, 19, 7, -12, -1, 32, -5, 15, 34, -11, -4, -4, 0, 19, -13, -14, -41, -44, -36, 12, -22, -14, -28, -30, -22, -27, -32, -14, 2, 29, -11, 9, 9, -6, 31, -11, 1, -15, 12, -17, 17, -26, -29, -42, -44, -50, -30, -29, -37, -54, -39, -19, -59, -56, -32, -28, 17, 13, -13, 14, -4, 21, 19, 15, 11, -4, -7, -4, -4, -18, -1, -44, -33, -36, -21, -28, -3, -33, -24, -44, -44, -25, -27, -20, -6, -10, -17, -24, -14, -22, 11, -6, 13, -8, 18, -11, -5, 16, -9, 6, -18, -10, 0, -2, -52, -25, -31, -36, -31, -11, -36, -18, -21, -19, -29, -12, -15, -9, -1, 1, -1, 1}, { -1, -17, 17, 9, -8, 18, -11, 7, 3, 14, -18, -9, 5, -13, -3, -12, 0, 6, 0, -14, 0, 9, 13, 17, -18, -15, -9, 16, -3, -12, -3, 17, 10, 13, -2, -13, -31, -9, -31, 1, 1, -21, -17, -12, 16, 1, -20, -29, -12, 8, -3, -18, 2, -18, -9, -15, -17, 2, -19, 31, 15, -14, -2, -14, -19, 1, -15, -16, 15, 5, -1, 10, -28, -28, -29, -22, -38, -3, -13, -16, 7, 1, -14, 0, -12, -18, -10, 25, -2, -27, -27, -8, 12, 36, -2, -5, -5, 19, 3, 12, 5, -8, -11, -51, -35, -35, -19, -22, -3, 28, 10, 17, 14, 10, 13, 7, -20, -3, 24, 15, 14, 46, 1, 14, -6, 1, -18, 3, 7, 15, 10, 2, -45, -18, -22, -12, -13, 18, 0, -18, -9, -14, -20, -2, 3, 15, 25, -6, 10, 7, 20, -20, -21, 12, -7, -7, 3, -16, 2, 5, 3, 1, 8, -17, -41, 6, -35, -24, 4, 25, -18, 24, 16, 7, 16, 15, -4, 35, 5, 21, 11, 4, 0, -3, 24, -5, 20, -3, 3, 3, 8, -9, -55, -36, 3, 3, -13, 41, 12, 32, 27, 28, 24, -12, 3, 19, -3, 29, 13, 19, -2, -11, 0, 17, 23, 1, 0, -7, -6, -25, -23, -22, -36, -18, 18, 22, -1, 10, 19, 0, 3, 12, 27, 9, 30, 23, 7, 30, 28, 25, 30, 13, 3, 10, 21, 12, -4, 13, -42, -36, -31, -19, -1, 7, 9, -17, 12, 10, -7, 8, 15, -9, 8, 9, 22, 13, 21, 1, 22, 20, -7, 6, 25, 3, 10, 16, -46, -33, -22, -14, 10, 2, 27, 1, -23, -12, -17, -1, 16, -20, -8, -14, -3, 1, -5, -7, 14, 37, 11, -1, 13, -4, 31, -13, -15, -21, -10, 9, -14, 22, -9, -18, -21, -4, 2, -5, 5, -17, -19, 16, -6, -4, -4, -31, -26, 26, 2, 10, 1, 2, 13, -3, -5, 6, -48, 4, -6, -1, 4, -8, -39, -35, -3, -22, -22, -6, -19, -27, -3, -16, -45, -41, -10, 2, 0, 19, -5, -20, 2, -12, -28, 14, -18, 7, -5, 4, 12, -16, -32, -34, -15, -5, -17, -22, -1, -7, -9, -14, -30, -38, -20, 9, 11, -20, -4, 18, 13, -12, 7, 13, -14, 27, -15, 4, 8, -12, -3, 10, -3, -8, -1, -6, 0, -17, 1, -17, -27, -17, -19, -22, -8, 9, 11, 10, 0, 7, 36, 5, 31, 1, 14, -2, -14, -17, -19, 22, -4, -16, -22, -10, 7, -23, -22, -1, -22, -21, -17, -36, -12, 6, 12, 18, 26, 10, 43, 7, 1, 6, 23, 4, 16, -1, -4, -25, -4, -9, -38, -22, -5, 7, 5, -26, -27, -27, -25, -2, 3, 5, 19, 23, 17, 24, 29, 18, 1, 26, 11, -1, -6, -24, 4, -3, 7, 4, -15, 24, 18, -3, 12, -12, -18, -31, -21, -1, -32, 11, -9, 18, 16, -5, 22, 35, 27, 27, -11, 15, 4, -14, 15, -14, -2, -13, 11, 3, 32, 22, -13, -10, -12, 5, 0, -9, 0, -12, -21, -16, 19, 5, 2, 17, 41, 42, 3, 26, 4, -6, 12, -10, -15, -12, 4, 0, 27, 19, 10, 28, 29, 21, 5, -9, -11, 13, -12, -10, -4, -2, -28, -4, 33, 21, 6, 12, 8, 6, 0, -17, -2, 19, 7, 16, -3, 30, 32, 24, 5, -11, 4, -5, -25, 7, 8, 2, -32, 10, -8, -16, -2, -12, -8, 24, 31, 19, 9, 4, -11, 15, 0, -8, 16, 9, 28, -2, -8, -14, -7, -7, -5, 3, -8, -9, 15, 12, -17, 16, 45, -14, -21, -17, 34, 10, -27, -9, 27, 13, 16, 37, 26, -6, 27, 23, 5, -2, 0, 5, 15, -11, -10, -1, 6, 26, 10, 1, 42, -8, -11, -11, 2, -26, -23, -7, 5, 17, 5, 33, 9, 21, 23, 30, 18, 0, 1, 25, -10, -25, -40, -13, 37, 9, -4, -10, -18, 5, 5, 16, 5, -12, 13, 12, 39, -1, -12, -2, -25, 14, 8, 13, -7, 27, 18, 2, -11, -17, -13, -2, -25, 3, 17, 21, -13, 12, 16, -2, -31, -18, 33, 2, 13, 22, -13, 0, 2, 5, -7, -19, 1, 4, 3, -3, -26, -6, -7, -25, -20, -24, -10, -15, -1, 16, 1, 6, -5, 4, -11, -17, -15, 17, 33, -5, 25, 5, -3, 0, -17, 10, -9, -13, -12, 18, -15, -11, 3, -13, 7, -4, 9, -8, 13, -13, -10, 2, -3, -16, -10, 15, 15, 23, 0, -27, -5, 9, 11, 13, 20, 19, 10, 17, -4, 7, -11, 8, -3, 11, -9, -6}, { -17, 11, 15, 14, 11, 4, -1, -15, 18, 0, 3, 0, 5, 4, -13, -15, -17, -5, -8, -11, 7, -1, 10, -18, 12, -4, 8, 3, 10, -18, -10, -6, 2, 3, 16, 3, 2, 21, 1, -4, 6, 5, 22, 34, -17, -8, -4, 10, 28, -2, -3, 12, 9, 8, -4, -16, 6, 11, 16, -8, -20, 6, 31, 18, 21, -13, 46, 57, 17, 17, 17, 41, 41, 26, 8, 16, 24, 25, 17, 19, 20, 11, -19, 16, -17, -8, -12, -13, -11, -4, 41, 41, 0, 0, -8, 8, 9, 23, 0, 8, -10, -33, -30, -15, -17, 5, 0, 9, 7, 20, 36, -1, -3, -10, -22, -12, 23, 6, 5, 11, -3, -6, 9, 21, 22, 26, 39, 0, -31, -44, -49, -5, -30, -16, 8, 19, 19, 11, -11, 7, -5, -18, 0, -6, 32, 18, 23, -3, -14, 12, -2, 24, 23, 3, -2, -25, -36, -27, -12, 8, 11, -33, -9, 2, 11, 28, 5, 9, -2, 12, -4, -11, 21, -2, -7, -32, -41, -12, 16, 24, 16, -8, -7, -40, -49, -37, -16, -6, 6, -11, -15, 5, 13, -3, 29, 25, 10, 11, 15, -43, -3, -22, -7, -22, -12, 13, 29, 39, 3, 6, -45, -71, -49, -8, 7, -4, -16, 7, -27, -47, -9, 18, 42, 30, -9, -16, -21, -37, 6, -3, -24, -21, -26, 4, 4, 17, 20, 1, -22, -57, -44, -14, -17, 10, 12, 4, -41, -18, -47, -6, -15, -25, -14, -4, 17, -4, 16, 16, -30, -37, -28, 16, 4, 28, 10, -17, -41, -50, -30, 15, 20, -11, 4, 10, 1, -46, -19, -47, -24, -23, -6, 1, 9, -2, -15, 20, -38, -8, -5, -7, -13, 28, 4, -14, -26, -9, -20, 1, 19, -13, -28, 2, -24, -44, 8, -13, -26, -4, -12, 6, 2, -9, -4, 17, -12, -12, -7, -36, -31, -2, 21, -4, 7, -14, 23, -7, 23, 7, -18, -5, -28, -4, -16, 13, -24, -25, -11, 27, -4, -24, -4, -34, -15, -31, -9, -38, 5, 10, 11, 34, 18, 10, -8, 10, 8, -7, -9, 10, 9, 3, 32, -3, -34, -47, -2, 30, -13, -5, -47, -20, -33, -13, -32, -6, -11, -10, 8, 20, 2, 19, -8, 4, 5, -9, -4, -2, -2, 34, 18, -12, -16, 48, 7, -7, 31, 26, -42, -24, -1, -10, 3, 21, -9, 9, 29, 18, 13, 15, 19, 7, -3, -18, -7, 3, 20, 7, 12, 49, -4, 21, -9, -8, 42, 24, -29, -14, -29, 21, 22, 11, 0, -12, 14, 41, 24, 27, 22, 12, 1, 13, 19, 19, 22, -13, 12, 26, 14, 10, 3, -21, 17, 24, -39, -5, -9, 24, 27, 20, 10, -2, -6, 9, 34, 35, 11, 19, -2, 18, 0, 25, 5, 20, 8, 59, 24, -3, -15, -6, 4, 4, 0, -5, 13, -3, 37, 0, -2, -1, 16, 19, 16, 4, 14, 15, 40, -10, 23, 50, 33, 32, 20, 49, -3, -10, 10, 18, -26, 30, 33, -1, 19, 35, 29, 17, 0, -13, -10, -4, 27, 32, 9, 22, 12, -2, -20, 1, 8, 11, 14, 17, -38, -11, 15, 7, -19, 59, 31, -2, 6, 8, 11, -5, -14, 3, -22, -21, 32, 35, 30, 33, 10, 23, -10, 20, 13, 48, 22, 31, -17, -24, -16, -21, 25, 76, 60, -14, 9, 10, 11, -1, 1, 3, 2, 1, 8, 17, 38, -8, 17, -1, 25, 3, 28, 11, 1, -17, 5, -2, 14, -5, 14, 23, 29, -17, -13, 0, 14, -9, -10, -30, -29, 12, 4, -9, -3, 3, 21, 6, 29, -21, -18, -25, -26, -7, 35, 7, 6, -19, 3, -12, 6, 14, 7, 5, 5, 6, -7, -6, -22, -26, -35, -3, -10, -26, -31, 10, -13, -31, -19, -24, -52, -6, 44, 9, -17, -19, 26, -12, -7, 1, 21, 2, -8, -32, 4, -29, -23, -26, -14, -29, -30, -45, -50, -15, -9, 2, -34, -51, -46, -21, 36, -2, 12, -13, 0, -8, -4, 10, -11, -3, 14, -7, -5, -27, 1, -6, -31, -25, 4, -11, -57, -66, -55, -11, -23, -32, 7, 5, 20, 19, -6, -4, 11, 10, -43, -43, -41, -11, -38, -4, 10, 14, 9, -7, -29, -22, -16, -42, -26, -47, -71, -32, -9, -15, 3, 9, 23, 15, -2, 11, 11, -21, -49, -26, -18, -30, -55, -33, -47, -48, -10, -18, -37, -47, -33, -47, -26, -2, -36, -28, -24, 6, 1, -11, 5, 1, -3, 9, -16, 8, 8, -7, -16, -2, -31, -6, -33, -22, -16, -23, -48, -26, -3, 2, -28, -25, -6, -3, 5, 1, 14, -2, 14, -18}, { -16, 11, 19, 14, -13, -4, 18, -8, -1, -10, 6, -13, 21, -9, -14, 4, -2, 17, 16, -5, 17, 8, 2, 13, -5, 13, -1, -12, 5, -4, 2, -6, -18, 8, 14, 1, 24, 5, -2, -24, -5, -13, 30, 16, 3, -1, 19, 14, 22, 17, 23, 6, -5, 10, -8, 18, -2, 11, 11, -27, -30, 4, 36, 37, 24, 4, 12, 59, 26, 30, 24, 51, 48, 34, -16, 7, 0, -9, 10, 42, 1, -19, 4, -14, -18, -18, 11, -7, -11, 13, 26, 11, 22, -26, -13, 23, 13, -21, 6, 4, 31, 6, 17, 19, 32, 0, 22, 31, 17, 11, -3, -15, -15, -15, 27, 11, 48, 19, 18, 3, 32, 8, 15, -16, 0, 12, 6, -13, 19, -26, -19, -23, -17, 9, 9, 14, -4, -5, -28, -20, 13, 13, 7, 42, 51, 10, 13, 48, -10, -12, -12, -23, 22, 17, 4, 17, 36, -12, -17, -22, -48, -17, 13, 7, 36, 7, 14, -18, -14, -6, 2, 31, 36, 38, 50, 11, -18, 19, 20, -4, 22, 25, -3, -3, -16, -22, -33, -9, -34, -27, -14, -11, -6, 10, 6, -9, -13, 33, 12, -10, 35, 16, 10, 7, 0, 12, 26, 20, 9, 18, 14, -12, 4, -23, -25, -21, -3, -20, 1, -19, -24, -22, 36, 17, -1, 20, -13, -19, 13, 23, 8, 38, -27, -7, -7, 11, 26, 26, -4, 28, -14, -5, -18, -19, -18, -32, -15, 10, -30, -18, 17, -3, -6, 26, 8, 14, -16, -13, -22, 5, -9, 5, -4, -23, 9, 15, 34, -2, 6, 11, -30, -2, -13, -12, -3, 14, -4, -6, 38, 17, 19, 24, -30, 17, -30, -56, -37, -20, -9, -13, 8, -20, -7, 19, 11, 5, -15, -8, 0, 4, 19, 4, 13, -14, 17, 6, -1, 45, 0, -2, -38, -9, -20, -55, -48, -9, 20, -4, -24, -21, -24, 3, 16, 9, -18, -39, -3, -10, -13, -11, 0, -22, -21, -17, -8, 26, -2, 12, -36, -28, -48, -26, -29, -18, -9, -10, -15, -13, -8, 4, 32, 20, -19, -19, 8, -1, 2, -3, 13, -7, 8, 13, 4, 60, 5, -21, 13, -12, -50, -52, -9, -41, -20, -28, -44, -14, -10, 1, 36, 10, -12, -1, 11, -7, 18, 29, -19, -22, 21, 20, 14, 7, 12, 5, 4, -30, -44, -23, -16, -15, 21, -14, -24, 2, 16, 27, 32, 9, -10, -5, -31, 26, 23, 35, 2, -7, -29, 9, -34, -6, -12, -5, -6, 27, -16, 11, 12, 6, -24, -18, -28, 3, 39, 44, 61, 6, -1, 3, -6, 20, -15, 4, 40, -3, 6, -22, -5, -19, 0, 8, 7, 26, 15, 10, 21, 4, -11, -2, -3, 2, 23, 60, 39, 24, -5, -28, 18, 2, -17, 5, 26, -1, 39, 15, -35, -30, 16, 13, 10, 9, 33, 10, 34, -4, 3, -41, -35, 24, 22, 52, 21, 5, 10, -15, 18, 24, 12, 18, 18, 27, 48, 37, 6, -19, -6, 24, 7, 41, -1, -3, -19, -17, -10, -3, 10, 2, 44, 53, -4, 0, 20, -2, 9, 9, -7, 10, 6, 11, 9, 27, 27, 1, -14, -43, -6, 8, 3, -15, -11, 5, -4, 20, 5, 5, 19, 2, 8, -2, 2, 14, -6, -4, -3, 5, 5, 8, -3, 12, 5, -17, -2, -20, -32, 18, -6, -26, -5, 17, -11, 17, 17, 20, 11, 18, 2, -1, -20, 2, -10, -8, 24, 24, -12, -32, -13, 6, -13, -11, -1, -5, 22, 8, -17, -18, -9, 9, 2, -19, -1, -10, -1, -15, -7, -10, 14, -16, -24, 11, -10, 6, -1, -25, -39, 19, 26, 1, 18, 8, -3, -18, -5, -1, -16, -3, 11, 24, 9, 0, 7, -12, -4, 6, 5, -14, 4, 18, 3, -25, -14, -37, -39, 12, 32, -2, 18, -17, 16, -27, 22, -20, 20, 9, -27, -1, 7, 4, -9, 24, 4, -10, -1, -12, -8, -1, -4, -47, -30, -36, -20, -18, 10, -12, -12, 1, 4, 3, 3, 4, 32, -18, -31, -25, 3, 25, 19, -3, 11, -15, 5, -1, -21, -43, -35, -45, -39, -41, -28, 15, 19, -6, -12, -10, -1, -5, 34, -1, 2, -1, -12, -16, 1, 4, 4, 14, 14, -9, -24, -7, -40, -28, -12, -51, -37, 2, -19, 1, 6, -16, -13, -9, 3, -10, -26, -32, -4, 0, 30, -4, 10, 5, -42, 14, -29, -1, -10, -13, -25, 13, -30, -31, -22, -19, 7, 23, 14, -14, -8, -7, -6, 13, 28, 19, -28, -21, 10, -6, 1, -36, -29, -26, -27, -21, 9, -33, -31, 7, -6, -9, -11, 11, 6, 2, 3, -13}, { 12, -4, 5, -19, -11, -17, -1, 8, 11, 5, -15, 12, 18, -4, 5, 2, 2, -6, -6, -15, 1, -4, 11, -10, -15, 9, 1, -8, 4, 4, -10, -11, 18, 16, -16, -1, -1, -4, 13, 10, -5, -33, -12, 10, -17, 7, -1, 3, -11, -5, 17, -10, -7, -2, 5, 3, -15, -7, 2, 20, -4, -16, 5, 7, 1, 28, 25, -1, 9, 25, 21, -2, 5, -32, 13, 6, 12, 19, -9, -17, -8, -9, -7, -13, -12, -15, 2, -1, -20, 25, 2, 29, 19, 34, 17, -3, 24, 23, 36, -5, 5, 17, -17, -17, -4, 10, -23, -26, 16, 28, 7, 14, -17, -4, 32, 0, 12, 31, 37, 53, 7, 23, 27, 27, 31, 13, 27, 23, 34, 39, 12, 8, -2, 4, 8, -38, -13, 13, 14, -13, -4, -16, 13, -8, -20, 4, 32, -7, -4, 12, 31, 41, 17, 33, 6, 19, 24, 0, 19, -1, 7, 21, 25, -24, -20, 13, 26, 13, -8, 6, -26, -3, 4, 2, 25, -7, -5, -7, -1, 33, 7, 32, 16, -8, 3, 18, 13, 9, 25, 14, 18, -14, -12, -1, 10, -8, 12, 38, -31, 3, 20, 31, 17, -18, -3, -4, -13, 19, 8, -4, 11, -3, -6, -9, -1, 8, 5, 11, 5, -6, -19, -2, 4, -19, 16, 9, 4, 12, 50, 18, 3, 10, 3, 1, 8, -15, -5, 12, 1, -8, 36, 11, 27, 14, 29, -3, -5, 10, 8, 7, 12, 23, 6, -20, 11, 9, 14, 44, -13, -5, -18, -6, -16, -28, 1, -17, 1, 16, 26, 27, -2, 15, 29, 4, 9, 13, -2, 23, 4, -2, 0, -7, 7, 28, -3, 5, -14, 0, -20, -34, -9, -20, 0, -24, -19, -20, 6, 1, -5, -28, -13, -1, 34, 27, 12, 34, 33, -18, -17, 0, -27, 11, -15, -39, -18, -9, -26, -41, -15, 30, 10, -6, 4, -27, -38, 6, 3, 10, 9, -6, 13, 14, -20, 4, 11, -16, -16, 14, -15, -6, -8, -29, -25, -12, 4, 3, 9, 11, 13, 6, -3, -23, -42, -34, 1, 7, 1, 10, -25, -11, -4, -3, 16, 10, 11, -16, -3, 2, -5, -3, 8, 23, -1, 13, 17, 21, 9, 24, -14, -13, -19, -21, 5, 24, 15, 8, -2, -15, -35, 0, 15, -11, 4, -21, -22, -12, -4, 1, -4, -4, -16, -9, -4, -2, 6, -7, -9, -20, -39, -7, -13, 6, -9, -19, 9, 18, 7, -6, 2, -6, -6, 11, 4, 10, -2, -14, -7, 4, -6, -2, -9, -2, -1, -11, 1, -32, -16, -30, -22, -4, 2, 7, 9, 15, 11, -15, 30, 21, -15, -8, 18, 14, 10, -24, -22, -37, -52, -41, -17, -31, -10, -9, -24, -11, 7, 3, 2, 13, 19, 9, 13, 6, 19, 2, 13, 15, -4, -3, 21, 18, -2, -12, -3, -26, -41, -44, -55, -49, -54, -39, -36, -18, 13, 24, 16, 5, 7, 21, 26, -6, 9, 17, -7, -3, 35, 13, 5, -2, -23, 5, -24, -27, -17, -8, -4, -22, -46, -57, -8, 6, 15, 2, 19, -10, -1, 19, 25, -3, 7, 28, 7, 31, -17, 16, 22, -33, -2, 1, -9, -12, 8, -16, -18, -13, -11, 25, -5, 10, 14, -13, 4, -13, 6, 17, 6, 11, -8, -3, 24, 7, 4, 12, 24, 23, 27, 37, 17, 15, 17, 5, 7, 13, 26, 25, 3, 18, 13, 11, -27, -23, -8, 10, -27, 26, 1, -16, -18, 14, -4, 16, 51, 39, 8, 27, 13, 6, 35, -6, 26, 12, 9, 43, 21, 20, 1, -11, 7, 10, -12, 2, 0, 15, -16, -2, 23, 4, -1, -12, 34, 31, 9, 33, 26, 36, 56, 29, 29, 29, 31, 39, 7, 29, 4, 6, 19, 34, 14, -26, 13, 28, 27, 3, 13, -10, 10, 0, 14, 34, 3, 17, 29, 51, 44, 36, 69, 39, 30, 35, 17, 8, 5, 21, 16, 1, -13, 11, 20, 20, 24, 28, -21, -9, 6, 5, -2, 37, 19, -1, 20, 19, 30, 26, -8, 14, 6, 1, 31, 15, -1, 20, 34, -12, -16, -7, -7, 19, 38, -9, -5, 6, 0, 11, -7, 8, -13, 6, 7, 13, 4, 6, 19, -12, -27, -26, -28, -10, -9, -1, 35, 44, 9, 1, 32, -9, -17, -6, 7, 8, -17, -14, 5, 14, -14, -16, -28, -56, -68, -69, -36, 5, -29, 0, -18, -23, -14, -32, -35, -13, -2, -1, -1, -11, 3, -8, 8, -18, -5, -9, 16, -2, 2, -34, -34, -59, -34, -10, 12, 18, 3, -16, -3, 9, 8, 6, 1, -13, 12, -1, -8, -15, 1, 3, 8, 2}, { -1, -13, -15, 5, -18, 3, 13, 9, 9, 5, -5, -15, 28, -8, -6, 15, 14, 4, 12, -4, 11, 7, 17, 0, -12, -1, 4, -13, -12, -7, 9, 4, 2, -9, 27, 5, 5, 4, 2, 1, 11, 28, -7, -27, -24, -5, 33, 9, 14, 31, 22, 35, 14, 3, 6, -1, -13, 10, 1, 15, 20, 18, 20, 22, -4, -8, -12, 6, -12, -46, -16, -4, -14, -2, 47, 13, -17, -19, 20, 12, 7, -22, -17, -17, -13, 1, 9, 25, 25, 25, 29, 31, 5, 8, 8, 39, 2, 10, 14, 9, -9, 4, -1, -1, 48, 39, 34, 18, -7, 3, -16, -10, 2, -3, -13, 11, 10, 18, 4, 14, 8, -15, 17, 10, 36, -7, 6, 8, -8, -5, 3, -8, 21, 33, 20, -5, 0, -14, 32, 9, -4, 18, -21, 2, 10, 18, -12, 14, 20, 9, -20, -10, -2, -8, -9, 7, -12, 15, 8, -7, -30, -27, -33, -44, -4, -17, 33, 23, -7, 12, 27, 23, 11, 6, 0, 16, 19, -4, -20, 25, -10, -1, -12, -21, -20, 10, -15, -10, -16, -1, -34, -33, 3, 23, 5, 35, 6, 20, 7, 27, -9, -18, 22, -6, 21, 0, -11, 16, 4, -18, -10, 17, -18, -6, 7, 16, -9, -30, -27, -21, -11, 22, 25, 19, -12, 26, 10, 18, -19, 22, 8, 1, 9, -7, 10, 11, 5, 28, 24, -2, 20, -8, 9, 8, 12, -3, 19, 20, 36, 25, -11, -6, -5, 26, -15, 18, 5, 5, 19, -20, -3, 13, 2, 0, 8, 24, 17, 16, 5, 22, 1, 6, 12, 3, 29, 11, 52, 49, 27, 35, 23, 6, 19, 26, 20, 4, 16, 11, 21, 23, 13, 36, 19, 27, 4, 5, 4, 15, 15, -12, 22, 24, 19, 4, 27, 59, 11, 14, 19, 16, 29, 40, 15, 26, 18, 13, 7, 22, 17, 15, 12, -8, -18, -4, -15, 12, 22, -1, -6, 2, 11, 19, 21, -25, 49, 46, 9, -4, 13, 17, 38, 16, 17, 17, 13, 14, 25, -2, 9, -18, -15, 17, -2, 1, 12, 17, 16, 5, 9, -9, 0, 0, 27, 33, 5, -7, 22, 13, 20, 31, 28, 10, -10, -1, 28, 11, -29, -10, 11, -2, 12, 10, 11, 22, 11, -5, 13, -17, 9, -4, -3, -13, -18, 22, 20, 11, 18, 20, -1, 5, 16, 1, 26, 30, -4, -17, -18, 14, 8, -2, 26, 10, 17, -2, 24, 27, 11, -47, -33, -27, 16, -8, -22, -12, 21, 29, 3, -6, 12, -4, 30, 38, -13, -17, 7, -16, -34, -3, 35, 29, 32, 15, 14, -1, -2, -9, -24, -10, 13, 2, 7, 6, 3, 18, 4, 7, 6, 14, 13, 21, -15, -4, -3, -9, -20, 4, -2, 26, 33, -8, 16, -25, -8, -35, -19, -41, -6, -8, -22, 10, 15, 32, 3, 3, 19, -15, -2, -2, -2, 9, 13, -23, -15, 9, -7, 19, 24, 8, 1, 9, -17, -34, -36, -42, 31, 12, 18, -6, 7, 21, 6, -8, -16, 1, -7, 8, -7, -10, -18, 6, 10, 12, -4, 21, 26, -3, -19, -17, -40, -41, -8, -14, -13, 5, 30, -6, 6, 23, 17, -12, -5, -4, -17, 11, -9, -17, -1, -36, -31, 2, 4, 33, 24, 3, -16, -36, -2, -35, -27, 1, 17, 17, -2, -10, -8, 15, -15, 8, -13, -1, -20, -11, 5, 0, -11, -17, -15, -8, -9, 36, -4, -35, -14, -26, 1, 3, 2, -10, -10, 6, -24, -27, -27, -7, 7, -4, -5, -2, -13, -10, 7, -2, -12, 7, -10, -13, 25, 21, 14, 3, -14, -53, -18, -24, -15, -14, -7, -16, 0, -26, -2, -34, -30, -1, -7, -19, -23, -2, 14, -21, -17, 12, 17, 14, 12, 24, -16, -13, 2, -24, -37, 1, -18, 18, 8, -2, 4, -10, 26, -3, -20, -21, -9, -29, 7, 10, -4, -1, -17, 29, 32, 15, -8, 1, -5, 1, 9, -21, 6, -13, -23, 1, -6, -18, -4, 9, 6, 38, 29, 10, -14, 8, -10, 18, 0, 2, -2, 10, 23, 8, -16, -6, 4, 4, -6, 6, -27, 2, 9, -17, -9, -9, -1, 7, 40, 14, 11, 7, 16, -8, 8, 16, 19, 11, 14, -4, 17, 29, 3, 33, -7, 9, 30, 18, 5, -22, 2, -11, -9, 11, -18, 0, -25, 7, 15, 12, 35, 31, 4, -11, -8, 44, 19, 31, 9, 33, 46, 63, 44, 42, 16, -15, -18, 9, 4, 13, -6, -13, 1, -4, 0, -2, 17, 3, -2, 4, 27, 10, 23, 3, 18, 1, 7, 45, 8, 43, 17, 23, 23, 42, 12, 1, -4, 9}, { -12, -2, -3, 0, -15, -9, -3, 1, -14, 13, -2, -8, 0, 14, 22, 2, -10, 15, -18, 13, 15, -4, -8, -3, -10, 1, -15, -16, -3, -6, 18, -18, -2, -6, 12, -8, 22, -13, 19, 0, -31, -7, 31, 19, 39, 32, -10, 32, 9, 16, -10, 12, 0, -17, 6, 0, -11, -6, -17, 5, -20, 12, 18, 14, 26, 25, 14, 31, 38, 48, 27, 25, 34, 32, 52, 29, 17, 26, -8, 10, 26, 17, 12, 17, 4, -3, -17, 6, -9, -7, 25, 22, 5, 41, 3, 14, 15, 29, -3, 2, 18, 10, 20, 51, 8, -13, 9, 15, 13, -1, 5, 2, -8, -1, 5, -30, -21, -15, 8, 34, 46, 57, 45, 9, 9, -9, -2, 18, 12, 21, 5, 35, 6, -7, -31, -6, -32, -32, -1, -19, 18, 8, 41, 4, 12, 5, -5, -5, -3, -4, -19, 6, 8, 1, -6, -12, 22, 14, 27, 2, 34, 17, 18, -1, 31, 9, 26, -21, -11, 4, -30, -12, -1, -19, 6, -12, -9, -16, 2, 1, 10, -2, 4, 0, -4, 11, -8, -7, 7, 0, 19, 30, 11, 37, 14, 5, -13, 35, -34, 3, 31, -2, -5, 20, -8, 10, -17, -9, 23, -1, -2, 0, 27, -24, 21, -18, -17, -1, 11, 10, 0, -3, -10, 26, -19, -1, -4, -3, 8, -3, 7, 14, -14, -12, -11, -14, 8, -11, -1, 18, -8, 7, 8, 18, 11, -13, -9, 25, -25, -24, 34, 16, -8, -14, 12, 13, -6, -13, 6, -2, -12, -29, -9, -22, -1, -24, 0, 2, 34, 22, -28, -7, -23, -16, -2, 13, -5, 2, -6, -27, -7, 0, -20, -30, -14, -15, 10, 6, 0, -15, -11, -13, -13, -32, 5, 14, 17, -5, -1, 10, -25, 15, -4, 14, -26, -39, 4, -15, -9, -3, -36, -35, 7, -18, -17, -1, 6, -23, -7, -15, 9, 11, 9, 6, 21, 4, 5, -4, 18, 5, -1, 4, 10, 15, 36, -7, -21, -11, -33, -10, -19, -3, -8, 18, -19, 23, -4, -19, 20, 30, 25, -20, 10, -11, 6, 6, -11, -4, -13, -6, 26, 5, -28, -29, 11, -16, -22, 14, -26, 10, -5, -14, 7, -2, -2, 4, -2, 10, -6, -6, -19, 10, 2, -1, 7, -10, -12, -29, -3, -24, 4, 5, 18, -5, -18, -5, -37, -18, 1, 9, -5, -34, -11, -10, -10, 23, 2, 5, 7, -33, -10, -1, -12, 1, 2, -26, -1, 1, 41, 6, -14, 5, 27, 2, -11, -11, 5, -14, -18, -34, -26, -8, 20, 13, 37, 6, -8, -27, -32, -19, -17, -21, -14, -23, -4, 10, 0, 25, -26, -19, 15, -13, -12, -15, -1, -23, -15, -23, -11, -16, 21, 27, 24, -12, 11, -20, -1, -8, -41, 17, 18, 5, 18, 31, 9, 15, -6, 11, -2, -9, -18, -13, 12, 8, -1, 8, 11, 19, 15, 21, -8, 3, -24, -2, -9, 17, 3, -10, 3, 7, 21, 54, 10, 44, -17, 0, -14, 25, 5, -2, -9, -10, 1, 10, -8, -7, 20, -6, 9, 4, -10, 21, -2, 3, 11, -10, -17, -1, 19, 23, 7, 2, 19, -33, -23, 4, -1, 6, -9, 13, 11, 22, 9, 14, 3, 7, 5, 28, 35, 34, 33, 11, 27, 25, 22, 8, 2, 34, 16, -3, -5, -6, -7, 21, -15, -19, 7, 25, 21, 20, 33, 12, 27, 20, 25, 39, 28, 26, 13, 30, 23, 40, 3, 40, 9, 25, -6, -18, 12, -3, 15, 22, 8, -15, 4, 22, 11, 26, 15, 11, 29, 35, 23, 28, 14, 0, 15, 3, -5, 11, 21, 20, 12, 22, 25, 10, 23, -12, -18, 11, 5, 6, -4, 12, 14, 22, 32, 4, 18, 3, -3, 2, -15, 6, 12, 26, 2, 8, -16, 16, 13, -4, 36, -20, 8, -10, 32, 16, 18, -21, 4, -15, 17, 1, -5, 28, 43, 11, 7, 11, 27, -7, 27, 15, 17, 18, 24, 24, -5, 6, 36, -16, 7, -10, -12, 7, -23, -41, -22, -22, -3, -21, -11, 10, 31, 8, 27, 19, -9, -5, 24, 21, -8, -8, -35, -32, 27, 6, 17, -4, 2, 19, 16, -27, -43, -40, -20, -2, -12, -42, -6, -40, -4, -1, -16, -2, -5, 17, 1, 1, -1, -8, -37, -11, 10, 4, -1, -10, 9, -13, 4, 7, -10, -35, -30, -25, -43, -39, -18, -5, -27, -39, -26, -3, 14, 19, 24, -34, -34, -15, -25, 4, 17, 1, -18, -16, 12, 16, 13, -17, 3, -15, -6, -26, -26, -42, -30, -33, -23, -36, -28, -2, -8, -30, -38, -12, -3, -11, -25, -7, -12, 8, 5, 2}, { 3, -10, 9, 15, 7, -11, -9, -14, 1, 4, 15, -9, 3, -7, -21, -8, 15, 15, 0, -8, 11, 15, -16, 0, -5, -1, 14, -1, 0, -3, 1, -15, -17, 16, 10, 17, 14, 3, 5, 16, 7, 8, -5, -34, 33, 6, 32, 7, 33, 26, 13, 28, -13, -18, 16, -1, 10, 14, 14, -10, 19, 35, 40, 38, 37, 37, 23, 39, -2, 1, 37, -9, -28, -3, -12, -2, -18, 12, 20, 39, -18, -18, -8, 9, -4, -10, 11, -20, 22, 13, 55, 19, 1, 12, -5, 15, -23, 15, 5, -15, -11, -3, -25, 10, 27, 25, 26, 10, -4, -6, 28, -10, -2, 7, -22, -23, 6, 22, 33, 33, 17, 21, 3, 21, -18, -4, -9, 1, -19, 4, -7, -1, 26, -5, 8, 27, 12, 5, -15, -12, -12, 7, 16, 8, 1, -8, -10, 32, 56, 24, 36, -6, -3, -4, -16, -20, 5, -23, -14, -9, -5, 5, -12, -3, 3, 22, -3, -11, -16, 14, 3, -36, 4, 21, -4, 25, 52, 21, 16, -5, -4, -25, -22, 1, -16, -1, -12, -8, -22, -22, -6, -26, -14, 5, -11, -14, 16, -21, -3, -5, -1, 27, 28, 14, 39, 17, 3, -24, -33, -23, -1, 1, 10, 9, -33, -20, -38, -14, -28, -61, 8, 31, 0, 14, -7, -2, -16, -18, 33, 32, 25, 24, 21, 16, -4, -33, -33, -25, -14, -17, -2, -14, -18, -18, -20, -11, -32, -38, -20, -22, -9, -10, 1, 9, 8, 26, 2, 17, 10, 29, 42, 11, -32, -32, -54, -19, -3, 15, 10, -6, 8, -27, 3, -12, -14, -27, 28, -32, -28, -22, 16, -15, 9, -1, -16, 35, 6, 15, 33, 8, -4, -63, -59, -37, 4, -1, -11, -8, -2, 10, -16, -1, -23, -15, 25, -9, -11, -13, -12, -14, -4, -13, -11, 5, 11, 24, 8, 22, -15, -53, -29, -26, -3, 13, -15, -12, -27, 8, -16, 1, -7, 19, -1, 3, -6, -9, -3, 10, 0, 29, -19, -12, -11, 15, 37, 5, 11, -12, -17, -1, -20, -9, -1, -4, -28, 2, -3, 6, 2, -4, 31, 14, -6, -48, -8, -1, 7, 9, -4, -4, 11, 19, 26, 3, -3, -17, 9, 22, 13, 8, -2, 9, -7, 25, -9, 22, 33, 11, 3, 17, -7, 38, 4, 2, -13, 20, 11, 9, 25, 25, 16, -4, -11, 21, 23, -3, -4, -13, -8, -1, 31, 24, 3, 21, 20, 0, 1, 49, 14, 24, 18, -15, -7, 25, -6, 1, 40, 11, 5, -8, 19, 34, 7, 27, 11, 2, 20, 29, 26, 15, 16, -4, 24, 12, 0, 19, 2, 12, 17, -7, 1, -9, 8, 0, 29, 32, -6, 0, 9, 30, 29, 23, -6, 5, 25, 10, 15, 19, -9, -9, -12, 9, 1, 63, 16, 11, 4, 8, 13, 5, -9, 7, 12, 7, 9, -36, 7, -4, 15, 0, -5, 4, 18, 20, -2, -1, 18, 16, 5, -3, -11, 66, 32, 13, 8, 1, 8, 20, -5, 11, 4, -4, -14, -8, -3, 1, 31, 25, 7, 23, 16, 34, 28, -15, 3, -1, -17, 8, 4, 56, -1, -3, -13, -8, -10, -6, -16, 11, -5, 1, -8, -11, 3, 7, 16, -1, 19, 49, 39, 16, 15, -9, 12, -3, -3, 16, -8, -4, 32, 4, 4, -7, -1, -13, -18, -3, 2, 31, -5, 1, -6, -14, -11, 13, 6, 38, 12, -7, 12, -14, 20, 27, 9, 20, 17, -1, 23, -9, 16, 3, -9, -7, -8, 16, -1, 0, 5, -1, 14, -17, -1, 33, 8, 21, 33, 2, 0, -12, -4, 5, 33, 22, 11, 1, 34, 12, -17, 9, 17, 18, 0, 9, 4, -11, -14, 1, 10, -4, 7, -6, -12, -12, 11, 7, -12, 9, -10, 28, 22, -1, -36, 5, 30, -11, 3, -2, 8, -6, 27, 17, -49, -26, -6, -24, -40, -39, -21, -28, -21, -17, -13, -12, 8, 26, 29, 58, -1, 15, -31, -2, 25, -16, -5, -11, 29, -26, -14, -17, -51, -63, -60, -21, -30, -25, -53, -55, -26, -11, -2, 15, -1, 14, -4, -12, -9, -7, 0, 12, -10, -4, 10, -8, 11, 18, -15, 5, 8, -12, -23, -51, -55, -56, -54, -52, -54, -10, -13, 12, 7, -23, -3, 18, 16, 1, 4, 14, 15, -14, -2, -8, 17, 6, -17, -17, -4, 5, 2, -1, -15, -9, -24, -18, -12, -3, -19, 10, -25, -47, -28, -22, 4, 2, 5, 1, -2, 11, 13, -3, -16, -10, -7, -8, 11, 3, 13, -8, 6, 15, 15, -15, -18, -27, -18, -26, 9, -9, 13, -43, -24, -25, 1, -14, -15, -18}, { -13, 16, -3, 4, -13, -19, 2, -6, -6, 12, -11, -18, -11, -22, 7, -6, -1, 14, -12, -15, -12, -16, 4, -8, 4, -7, -8, 8, -16, 9, 18, -3, 13, 6, -28, 2, -12, 6, 6, 13, 0, 5, -32, -25, -10, -4, -9, -21, -35, -32, -23, -10, 1, -5, 9, 3, 9, 0, 1, -5, -27, 5, -7, -35, -38, -2, -25, 2, 16, -13, -8, 6, -9, -35, -43, -19, -22, 4, -42, -33, 2, 3, 15, -18, 11, 0, -15, -8, -12, -13, -39, -20, -6, -3, -28, -29, -15, 9, 29, 16, 19, 17, -2, -40, -19, -9, -17, -15, -6, -4, -13, 8, -1, -18, 4, -3, -16, -23, -13, 7, -21, -12, -30, -8, -22, -7, -7, 12, 13, 16, -10, -15, -8, -22, -2, -28, 1, 8, -35, 17, -7, 17, -22, -12, -40, 2, -4, -9, -27, -16, -7, 11, 22, 34, 26, 19, 24, 12, 11, 38, 33, -5, -12, -12, -33, -20, -26, 9, 0, -16, -21, -11, -16, -31, -28, -36, -31, -30, 4, 3, 9, -4, -19, -7, -17, 29, 13, 44, 4, 12, 3, -22, -38, -25, -25, 4, 15, -29, 13, -5, -20, -14, -13, -21, -30, 9, -16, 0, 6, -8, -13, 3, 4, 20, 24, 20, -8, 14, -9, -1, -9, 11, -34, -22, -10, -15, -2, -8, -7, -50, -30, -20, -21, 6, 2, -1, -21, -15, -1, -6, -1, -2, 31, 38, 17, 7, -12, 26, -9, -5, -9, -5, -9, 6, -1, 20, -12, -21, -5, -3, -16, 1, 7, -31, -10, 15, 10, -4, -21, -9, 17, 23, 42, 26, -20, 11, 12, -18, 5, -20, -5, -14, 30, 31, -12, -1, -11, 2, -5, -1, -11, -6, -21, 7, 22, -11, -37, -3, 2, 21, 15, 32, 16, 8, -19, -35, -2, -16, 6, -18, 10, 45, 2, -8, 2, 7, 6, -5, 4, -11, -5, -6, 8, 19, -22, -19, -16, 25, 25, 10, 8, 3, 27, 8, 14, -16, -10, -5, 1, 43, 34, 23, 20, 11, 11, -26, -27, -4, -13, 14, -6, -40, -36, -28, -5, 0, 20, 21, -14, 38, 29, 22, 38, 20, 18, -1, -18, 46, 38, 8, 0, 0, 30, 8, -9, -5, 9, -13, -25, -18, -36, -26, 5, 4, -6, 13, 11, 0, -12, 21, 30, 31, -20, 7, -29, 16, 46, 28, 3, 17, 23, 1, 18, 12, -41, -37, -12, -7, 3, -5, 17, 13, 27, 33, 12, -2, 9, 17, 37, 28, -9, -21, -34, 24, -9, 20, 15, 34, 29, 48, 38, -1, -7, -32, -32, -32, -21, -27, -3, 39, 11, 0, 19, -11, -7, 11, 58, -1, -15, -7, -13, 11, 4, 6, 29, 38, 34, 46, 17, 14, -11, -7, -10, -4, -6, 5, 37, 5, 8, 24, -8, -12, -9, 32, 70, 16, -11, -9, 5, -3, 14, -14, 16, 44, 31, 39, -1, -5, 8, -1, 13, 14, 10, 14, 26, 23, 5, 9, -2, 4, -23, 1, 9, 27, -17, 3, 12, 4, 29, -11, 38, 48, 27, 19, -28, -41, -20, -4, -22, -18, -18, -4, -1, 18, -7, 7, 17, 17, 3, -6, 18, 31, -5, 44, 5, -9, 18, 22, 33, 54, 32, 16, -40, -15, -14, -14, 1, 10, 5, 17, 19, 8, 14, 33, 46, 16, 12, -14, 31, 39, -9, 28, 8, 39, 17, 24, 26, 41, 16, -13, -38, -8, 3, -23, -8, 1, -1, -9, 4, -9, 13, 21, 21, 25, 2, -15, 34, -10, 13, 6, 5, 19, 35, 33, 42, 19, 3, -26, -23, -26, -45, -17, -20, -9, -14, 4, -24, 10, 20, 19, 36, 34, 33, -13, -41, -12, -11, -19, -2, 30, 21, 41, 53, 36, 12, -16, 3, -16, -1, -14, -15, -28, -15, -7, 0, 2, -11, 5, 13, 23, -4, 6, -29, 11, -16, 0, -8, -4, -16, -26, 0, 22, 19, 9, -7, -15, -2, -12, -11, -34, -34, -22, -34, -7, 5, -22, -44, 3, -10, -5, 14, -17, -6, 3, -11, -4, -19, -24, 2, 23, 16, 10, -3, 23, 5, -21, -21, -4, -40, -30, -17, -28, -26, -24, -37, 9, -31, -9, 21, -3, 14, 10, 16, -17, 12, -18, 14, -20, 6, 19, -22, 7, -15, -26, -18, 7, 0, -27, -7, -11, -4, -40, -39, -27, -29, -5, 13, 10, -9, 1, -10, -13, 33, 43, 29, -3, 21, 9, 6, -3, 0, 2, 28, 8, 4, -8, -36, -26, 4, -4, -12, -11, 29, -23, -9, 3, 2, -15, 13, 19, 12, 15, -9, 0, 10, -21, -2, 7, 28, -13, 11, -34, -7, -14, 10, -7, 1, -9, -10, -37, -4, -6, 7, 3}, { 13, 13, -15, -14, 14, 15, 8, 17, 17, 3, 15, 7, 10, -8, -9, 13, -11, 9, 15, 12, 8, 9, -17, 3, -8, -13, 10, -3, -3, 1, -6, 16, 15, -2, -2, 15, 9, 17, 45, 18, 19, 20, -11, -5, -19, -20, -2, 25, 7, 1, 7, 25, 3, -8, 15, 5, -10, -9, 14, -14, -28, 2, 5, 30, -11, -18, -9, 27, 30, 27, 32, 3, -23, -8, -42, 3, -14, 9, 18, -11, 4, 16, -7, -10, 12, 4, -14, -13, -35, 0, 7, -4, -7, -2, 3, 6, -16, -8, -4, -35, -6, -6, -8, -6, -6, 16, 30, 4, -5, -7, 20, -1, -7, -7, -1, -11, -16, 20, 1, 25, 19, 15, -14, -19, -16, 25, -3, -36, -15, 1, -11, -8, 39, 35, 54, 62, 25, 16, -13, 26, 13, 15, -16, 4, 14, 21, 17, 18, 28, 21, 28, -6, 12, 11, -24, -13, -23, -19, 15, 16, 12, -3, -2, 41, 34, 17, 6, 0, 6, 10, 9, 8, 16, 10, 11, 5, 2, -19, -18, -7, -5, -3, -29, -26, -19, -15, 0, 31, 41, 19, 9, -6, 7, -12, 1, 3, -1, -19, -7, 13, -14, -12, 21, 0, -8, -4, -6, -5, 23, -2, -33, -51, -38, 12, 14, 22, 41, 40, -5, -1, 2, -45, -6, 6, 6, 0, 6, 1, -24, 15, 20, -19, -11, 25, 7, -15, 18, 6, -37, -24, -19, 35, 27, 9, 12, 6, -1, -37, -24, -35, -16, -2, -14, 20, -1, -26, 0, 12, -12, -14, 12, 3, -5, -9, 30, -16, -39, -46, 0, 27, 35, 17, 29, 12, -27, -7, -6, -19, -45, 2, -8, 9, -16, -24, 12, -1, -53, -31, -15, -5, -7, 13, 9, -21, -64, -53, -3, 43, 4, 2, 10, -19, 8, -11, -21, -19, -28, 2, 5, 4, 3, -7, -25, -18, -7, -5, 1, 10, 14, 3, 20, -36, -54, -44, 32, 42, -12, -34, -18, -16, 0, 6, -11, -18, -16, 8, -17, 20, 18, -6, -28, 5, -6, 0, 25, 32, 30, 16, 1, -36, -48, -33, 27, 18, 21, -50, -16, 22, -7, 3, 24, -17, 10, 7, -14, -6, -8, -6, 9, -4, 0, 1, 5, 26, 4, 2, -30, -36, -42, 0, 4, 30, -3, -37, -14, 19, -8, 1, -12, -30, 8, -10, -7, 6, 15, 0, 19, 17, 5, 5, 28, 4, 19, -13, -28, -22, -33, -4, 20, -4, -13, 16, -7, 1, 9, -1, 0, -31, -5, -10, -10, 25, 44, -2, 13, -10, 29, 15, 13, 20, -9, -6, -39, -36, -1, 2, -5, 36, -12, 8, 16, 18, 22, -13, -48, 3, -5, -2, -2, 23, -14, -28, -40, -11, 19, 55, 42, 14, -10, -32, 1, 14, 11, 20, 4, 21, 21, 13, -1, -15, 0, -32, -28, -2, -20, 0, -15, -2, -20, -24, -37, 6, 25, 28, 28, 13, -4, -18, -25, 0, -3, 23, 8, -5, 24, -2, 10, -1, -4, 5, 2, 11, -14, -37, -20, 15, 3, -10, -5, -23, -4, 38, -3, 2, -17, -6, -6, 4, -9, 10, 14, 12, -8, -5, -3, -1, 5, 2, -9, -5, -38, -17, 7, 4, 4, 8, 3, -8, 1, 24, -6, -2, -10, -5, 1, -25, -20, 16, 3, -8, 9, 22, 20, 17, 18, 11, 8, -22, 5, 2, 2, 15, 2, 15, -19, -8, -24, 12, -13, -7, 11, -1, 5, 12, 4, -16, -25, -17, -9, 2, -6, 5, -11, 9, 12, -8, 3, -17, -16, -1, -28, -12, -11, -19, 16, 1, -5, 11, 29, 22, 22, -4, -7, 6, -32, 4, 15, -2, 26, 13, 24, 14, -13, -4, 8, 12, 5, 5, -3, -22, -17, -13, -4, -7, -19, 13, 23, 6, 27, 1, -3, -5, -9, 2, 15, -1, 12, 15, 14, -3, -23, 2, 13, 4, 0, -4, -32, -39, -59, -34, -10, 17, -30, -11, -10, 14, -16, 13, -29, 7, 11, -25, -1, 2, -3, -2, -2, 14, 1, -24, -20, -12, 8, 9, 0, -18, -2, 15, 9, 20, 14, -14, 2, 0, 19, 27, -15, -22, 28, -14, -39, -30, -31, 8, -5, 0, -18, -1, -6, 5, 12, -4, -36, -13, 16, -13, -26, 4, 7, 8, 0, 14, 26, 19, -25, -18, 35, -7, 6, -55, -45, -2, -17, -21, -7, -8, -7, -14, -3, 11, -10, -7, -10, -8, -5, 0, -18, -16, -53, -27, 6, 51, -4, -8, 3, 25, 5, -2, -45, 20, -3, -16, -2, -4, 18, -3, -3, -14, 5, -13, 21, 52, 20, -6, -16, -22, 7, -8, 1, 6, -32, -13, -2, -3, -6, 4, 25, 32, 14, 4, -17, 8, 16, -2}, { 15, 10, -7, -6, -11, 1, -10, -15, -18, -15, -7, 11, 5, 7, 1, -15, 4, 14, 9, -18, -18, -10, 0, -17, 1, -2, 18, 13, 11, 4, -18, -5, -15, 16, 21, 9, -1, 38, 45, 7, 10, 10, -4, -11, -9, 8, 23, 9, 17, -1, -3, 14, 0, 17, 16, 7, 5, 7, -16, -1, -15, 34, 2, 9, 24, 3, -8, 3, 18, -25, 30, 17, -10, 32, 28, -9, -11, 14, 25, 48, 14, 3, -17, 15, 11, 2, 3, -7, -13, -3, 20, 4, -7, 18, 14, 33, -4, 16, 11, 34, -3, -24, -4, -14, -3, 36, 12, 27, 3, -3, 32, 0, -14, -14, -30, -24, -20, -17, -10, 8, 3, 4, 4, 5, 6, -31, 5, 7, -13, 1, -12, 14, 12, 33, 14, 33, 44, 35, 2, 14, -6, 8, -25, -28, -32, -44, -16, -24, -1, 15, -2, -7, 22, -5, 6, -18, 7, 0, 2, -23, 3, 14, 12, 23, 38, 45, 28, 12, 12, 11, 27, -28, 12, -19, -9, 5, -5, -26, -28, -9, 20, -10, 17, -10, 5, 4, -5, -18, -1, -9, -3, 47, 48, 39, 31, 14, 17, 8, 29, 0, -27, -12, 11, 10, 6, -1, -8, 2, -9, -25, -17, -13, 15, -4, -12, -9, -9, -18, 15, 4, 6, 47, 48, 45, 3, -19, 7, -17, -35, -7, 12, 7, -8, 3, -15, 24, -12, -2, -22, -12, -11, -15, 3, -13, 13, -2, -18, 9, 37, 29, 3, 1, 14, 1, 10, -15, -24, 11, 25, 2, -34, -31, -8, -4, 4, -26, -26, 6, -30, -6, 11, 9, 5, 12, -5, -20, 8, 23, 38, 2, -9, -31, -16, -28, -8, 7, -12, 15, -16, -5, 20, 13, -21, -69, -53, -14, -28, -14, -17, -29, -23, -26, -49, -21, 8, 19, 39, -17, 3, -8, -19, -21, -13, 13, 3, 12, 17, 0, 2, 3, -26, -46, -48, -37, -34, -33, -32, -17, -52, -74, -57, -44, -45, 15, 2, -33, 11, -15, 23, -29, -22, -10, 6, 13, 16, 6, 9, 13, 9, -2, -30, -10, -8, -3, -9, -11, -37, -34, -40, -25, -31, -39, -18, -23, 15, -2, -23, -31, -37, -32, -6, 21, 38, 22, 10, 11, 7, -22, -17, -1, 27, -1, 24, 15, 17, -1, -3, -3, -25, -50, -38, 10, 21, -7, -29, -1, -15, -4, -5, 5, 29, 31, 25, 14, -8, 21, 8, 8, 21, 29, 23, 8, -15, -18, 21, 9, 21, -7, 10, 1, 17, -18, 1, 18, 8, 8, 9, 27, 20, 7, 2, 12, 29, 26, 14, -2, 24, 12, 11, -19, -21, 17, -1, 28, -9, 26, 11, 20, 0, -12, 9, -11, 2, 23, -5, 0, -1, -2, 1, 17, 36, 29, 17, 25, 46, 17, 4, -2, 20, 2, 24, 12, -12, 60, 32, 19, -16, 1, 18, 8, 16, 12, 17, -1, 6, -3, -1, 6, 24, 2, -14, 29, 10, 18, 12, 2, 2, 17, 16, 18, -2, 29, 15, 11, -8, -20, -11, 32, 18, 12, -6, 1, -2, 11, 9, 17, 15, 33, 25, 9, -4, -1, -12, -21, -16, -1, -6, -3, 25, 3, -14, -3, -11, 3, -12, 20, -20, -17, -13, -18, -27, -1, 0, 40, 34, 0, 6, -8, 4, -9, 2, -10, -15, -14, 7, 24, 24, -5, 6, -21, -11, -21, -4, 10, -28, -16, -6, -13, -4, -14, 12, 15, 8, 7, -15, -4, 2, 7, 0, -1, -25, -14, 13, 18, 21, 34, 7, -4, -3, 14, 7, -2, -30, -31, -34, -14, 36, 32, -17, 26, 37, 9, 7, 3, 11, 11, -5, -16, 6, 15, 25, 3, 39, 24, -38, 8, -12, 6, 2, -12, -4, -11, -39, -9, 1, 20, -6, 8, 25, 10, -18, 0, -1, 17, -2, -6, -22, -13, 24, 13, 20, -5, -43, 3, -14, 6, 11, -11, -38, -35, -45, -42, -6, 13, -11, -12, -4, 0, 25, 20, -2, 2, 2, 4, 10, 18, 38, 39, 11, 20, 14, 10, 10, 15, 10, -13, -3, -16, -44, -40, -51, -18, -18, 12, 11, 2, -9, 6, 19, -27, -12, -20, 7, 7, 38, 28, 8, -7, -1, -18, 15, -16, 38, -9, -20, 1, -37, -11, -41, -18, -8, -1, -10, -4, -16, 6, 11, -13, 25, -7, 21, 9, 7, 28, 21, 23, 5, -9, -9, -12, 3, 13, -4, 1, 22, 18, 4, -13, -30, 9, 34, 17, -9, -6, -18, -31, -19, -26, -12, 26, 5, 0, 15, 15, 9, 5, -12, 6, 8, 8, 9, -8, 16, 9, -14, -26, -5, 17, -5, 6, -7, 0, -14, -40, 0, -31, 13, -6, -6, -12, -6, 2, 14, -7}, { -13, -11, 3, -10, -14, 3, 1, -6, 2, -14, -1, -14, 2, -6, 1, 16, 10, -8, 13, 13, 11, 7, -18, 7, -16, 17, 5, -15, -2, -7, -17, 3, -10, -9, 5, 11, 6, -7, -10, -8, -4, 15, -15, -45, -18, -2, 8, -20, 2, 13, 12, 1, -12, -2, -9, -10, -12, -15, -5, -8, -9, 21, -8, -14, 23, 45, 14, 7, -3, -19, -1, -11, -17, -14, -43, -24, -5, 2, 32, -7, 11, 6, 14, -7, -8, -7, 0, -33, 17, 6, 19, 52, 52, 54, 51, 39, 31, 10, 44, 19, 1, 8, -24, 1, 0, 20, -10, -2, -14, -20, 14, 8, -1, -9, 17, 9, 29, 45, 32, 23, 27, 38, 43, 8, 5, 13, -4, 14, 3, -9, 16, 1, 21, 31, 22, 22, 2, 17, 10, 11, 12, -12, -12, 26, 19, -12, 5, 49, 6, 22, 17, -4, -10, 7, -8, 7, -6, -9, -2, -8, 0, 25, 0, 45, 20, 38, 18, 3, 9, 8, 39, 18, 29, 45, 34, 8, -4, 8, -2, -8, 13, 1, -18, -28, -15, -31, -30, 8, -20, 14, 25, 23, 30, 5, 8, 27, 13, 43, 60, 36, 11, 19, 45, 43, 21, 7, -6, -15, -18, 12, -8, -12, -21, -26, -6, 2, -12, -25, 3, 21, 31, 15, -11, 8, 3, 16, 45, -2, 18, 38, 25, 23, 20, -3, -23, -22, -4, -10, -23, 3, -24, -29, -21, -16, -11, 11, -9, -15, 0, 4, -30, -17, -10, -8, 39, -7, -1, 32, -3, -19, -21, -29, -31, -12, 14, 3, -4, 0, 3, -10, -3, -1, 35, 5, -7, 7, 8, -31, -29, 1, 14, 1, -2, 32, -36, -9, -4, -17, -42, -33, -11, -19, 19, 26, 15, -11, 7, 14, 2, 9, 19, 1, 9, 1, -29, -10, -28, 9, 6, 8, -19, -1, -37, -27, -48, -61, -41, 9, -7, 11, 44, 7, -22, -14, -28, 13, 13, 13, -3, -21, 3, -58, -51, -2, -7, -24, -3, 6, -1, -9, -69, -12, -32, -23, 5, 17, 38, 52, 26, 22, -4, -15, -6, -2, -7, -8, 3, -5, -13, -18, -26, -5, -29, -26, 4, 5, 16, -12, -49, -27, 1, 4, 48, 23, 42, 33, 17, -21, -7, 3, 25, 0, 29, -14, -2, 11, 2, 27, 13, -17, -14, 2, -11, -9, -14, -11, -5, 2, 11, 13, 42, 43, 19, 12, -4, -14, -20, -19, 16, 1, -6, 16, -6, 9, 20, 22, -7, 5, -11, -8, -18, 10, 22, 23, 30, 2, 22, 31, 21, -6, 1, -17, -29, -46, 2, 2, 15, -5, 15, 23, 31, 0, 36, 54, 8, -7, 3, 5, 13, 14, 9, 19, 13, -1, 1, 25, -9, 12, -17, -18, -37, -32, 5, -11, -18, 13, 22, 20, 23, 46, 37, 25, 42, 25, 14, -8, 15, -17, 5, 21, 15, 1, -9, 22, 18, -22, -5, -26, -4, 20, -16, -15, -10, 1, 3, 33, 23, 41, 44, 30, -28, 2, -27, -17, -18, -7, 23, 8, 32, 16, 33, 6, 18, 23, -5, 31, 13, 30, 2, 20, 13, -10, -13, 5, -3, 38, 42, 9, -33, -17, -11, 14, -18, -16, -2, 11, 31, 22, 28, 16, 8, 18, 37, 15, 26, 32, 21, 15, -9, -10, -10, 2, -10, 0, 7, 5, -29, 9, -3, 21, 12, -1, 4, 2, 7, 3, -15, -2, -5, 30, 17, -4, 5, 20, 5, 4, -27, -34, -16, -16, -11, 5, 14, -35, -38, -34, 13, -4, -21, 13, -30, -9, -3, -31, -2, -6, 9, 31, 4, 21, 13, 17, -2, -5, 13, -17, 10, 0, 7, -10, 17, -11, -28, -1, 14, 11, -17, 2, -9, -9, -45, -29, -37, -18, 11, 11, 11, 12, 19, 0, -2, 11, 17, 9, -17, 11, -14, 17, 10, -15, -5, 1, 23, 10, -18, -13, 17, 25, -28, -41, -28, 4, -12, 3, 18, 17, 10, -4, 0, 2, 15, -15, -5, -8, 1, 0, 27, -20, -15, 8, 0, -10, -15, 6, -24, 15, -23, -19, -23, 7, -14, -48, -36, -31, 2, 3, 24, 21, -7, -33, -24, -15, -12, 5, 5, 13, 9, -16, -21, 5, -1, -9, -7, 11, 16, -20, -4, 2, -18, -15, 3, -19, -16, 12, -6, 0, -23, -33, 9, -1, -30, -19, 3, 1, 27, -5, -6, -7, 3, -11, 7, -26, -36, -7, 7, -55, -10, -20, -15, -38, -23, -10, -27, -33, -19, -9, -1, 11, -28, -35, -29, -17, -6, -8, -16, 0, -12, 12, -15, 11, -16, 0, -16, -13, -3, -16, -34, -28, -24, 3, -39, -54, -24, 15, -34, 4, 19, -14, -39, -13, 16, -7, -9, -2}, { -10, -10, 2, 18, -6, 17, -16, -19, 16, 8, -5, 7, 0, 14, 6, 10, 9, 10, 11, -11, -7, -15, -4, -1, -12, 11, -1, 14, 14, 1, 9, 3, -16, 10, -8, -11, 25, -11, 14, 18, 25, 20, -8, 28, 25, 9, 1, -2, 8, 11, -5, -2, 5, 7, -8, -17, 6, -7, 11, 20, 22, 0, 26, 27, 32, 43, 47, 32, -10, 24, 29, 50, 30, 22, 26, 11, 15, 12, 3, 8, 22, 9, 18, 11, -12, -10, -10, -3, 9, 29, 22, 10, 24, 47, 7, 3, 30, 20, 45, 12, 2, 33, 44, 19, -20, -15, -6, -5, 9, 2, -16, 7, 11, -18, -6, -2, -7, 30, 27, 0, 19, 12, 15, -2, 0, 1, -10, 18, 7, 26, 5, 21, 22, 9, -21, -50, -60, -43, 2, 17, -10, 2, 21, 9, 11, 5, 24, 0, 32, 41, 7, -5, -13, 34, 16, 18, 8, -8, -6, -19, -10, 11, -4, 8, -53, -25, -33, 9, 11, -8, 29, 36, 25, 19, 34, 8, 13, 8, 33, 25, 31, 1, -6, 1, 11, 7, -9, -19, -13, 15, -16, -55, -31, -32, -11, 10, -2, 22, 7, 41, -14, -22, -12, 24, -1, 21, 14, 5, -2, 18, 28, 18, 28, 32, 25, 10, 27, 30, 20, -14, -40, -4, 1, 9, 0, 2, -19, -15, -16, -40, 0, 5, 11, 0, 25, 7, 5, -3, 13, 16, 31, 35, 13, 22, 2, -2, 24, 4, -17, -26, 11, 5, -10, 21, -31, -17, -2, 17, -2, 11, 25, 1, 11, 2, -2, 0, -12, 27, 7, 28, 0, 0, 23, 16, 6, 6, -35, -52, -19, 3, -1, 28, 2, -31, 0, -9, 12, -2, 3, 2, 16, 0, -24, -19, -31, -7, -11, 17, 18, 7, -8, 3, -27, -30, -49, -46, -24, 13, 14, 18, 12, 15, -44, -4, 14, 8, 6, 19, 10, -8, -9, -50, -53, -48, -4, -15, 12, -6, 17, -11, -26, -28, -47, -35, 0, -5, 20, -7, -32, 5, -46, -31, 15, 3, -11, -6, -12, -4, -45, -79, -60, -35, -19, -16, 21, 14, -11, 1, -33, -22, -39, -39, -1, 15, 8, 19, 9, -4, -44, -11, 14, 0, -4, 12, 0, -18, -21, -50, -26, -1, -5, -9, 4, 2, -35, -9, -31, -18, -13, -29, -4, -16, 6, 14, 32, 1, -23, -34, -3, -2, -26, -27, 4, -1, -25, -22, 12, -7, -13, 12, 7, 14, -2, -11, -41, -33, -29, -23, 17, -8, 14, -21, -9, -19, 4, -44, -39, -6, -34, -5, -18, 17, -39, 1, -11, 13, 0, -3, 7, -14, -10, -17, -31, -33, -6, 19, -6, 1, 10, 18, -17, -15, -17, -26, -28, 6, 1, -17, -21, -12, -27, -10, -10, -25, 12, 21, 11, -30, -17, 4, -24, -28, 2, 17, 7, 5, -1, -19, 16, -2, -39, -33, -30, -9, 23, -17, -2, -5, -7, -18, -19, -11, 29, 25, -1, -17, -39, -13, -5, -28, 4, 62, 20, 28, -4, -4, 14, 36, -4, -23, -14, -4, -6, 20, 15, -4, -22, -19, -3, -1, 8, 25, -13, -11, -33, 3, -13, 22, 17, 34, 35, 39, -12, 5, 2, 26, 1, -18, 8, 9, 16, 10, 15, 25, 7, -1, 9, 22, 18, 14, -19, -25, 20, 1, -5, 0, 30, 46, 1, 11, -4, -2, 27, 41, 6, -13, 26, 7, 19, 21, 36, 19, 13, 15, 15, 1, -23, -26, -38, -21, 23, 10, 7, 4, 7, 5, 16, -16, -2, 23, 4, 17, 28, -11, 3, 10, 7, 0, 35, 28, 27, 30, 23, -15, 8, -12, 4, 18, 4, -4, 18, 27, 32, -2, 46, 2, -14, 10, 22, -13, 26, 10, 10, 34, 18, 5, 34, 27, -4, -10, -2, -4, 4, 14, 15, 8, -6, -11, 24, 12, 4, 21, 19, 5, -3, -17, -18, -37, -5, 0, 32, 14, 10, -9, 2, -8, -5, 12, -3, -17, -6, -6, 14, 1, -1, -22, -15, 26, 1, 18, -20, -7, 6, -1, 24, -13, 2, 21, 34, 14, -12, -6, -14, -12, 1, -1, 10, 5, -14, -15, 0, -7, -17, 5, -20, -20, 27, 27, -1, 17, 15, -6, -41, 25, 22, 24, 23, 7, 5, 11, 2, -5, 5, -10, -20, 21, -20, -6, -7, -16, -19, 23, 2, -8, 7, 15, 6, -4, -8, 8, -6, -30, -32, -7, 10, 0, 23, 0, -17, -33, -37, 20, 23, 2, 29, 3, 24, 24, 3, 0, -14, -8, 0, 19, -3, 1, 10, 13, -16, 18, 21, 23, 46, 14, 4, 5, 19, 2, 15, 6, 32, 38, 46, 1, -10, 11, -18, 14, -19, 7, 10, 5, 3, 7}, { -2, 13, 16, 17, -15, 4, -17, -6, 11, 4, 8, 15, 4, -15, -20, 0, 7, 18, -3, 4, 14, 0, 12, 4, -3, -13, 0, 19, -7, -13, 8, -1, 2, 3, -16, -10, -9, -7, 4, -31, -32, -24, 23, 9, -26, -29, 15, 0, 14, 34, 6, 8, 9, 5, -17, -11, 11, 0, -16, -22, -34, -7, -17, 5, 0, -5, -7, -11, -18, 27, -13, 15, -8, -20, 3, 17, 24, -19, 5, -26, -8, -23, -12, 2, -14, -13, 16, -30, -18, 1, -4, 12, 38, -6, 6, 19, 23, 3, 34, 9, 4, 28, -16, -3, 16, -12, -16, 14, -1, 5, 15, 6, -7, 5, 14, 32, 27, -5, -15, -2, -8, 4, 0, 11, 3, 4, 9, 20, 2, -23, 13, 23, 21, 31, 8, -6, 48, 43, 19, -2, 15, 8, 10, 5, 23, 27, -16, 16, -3, -2, 10, 16, -7, -9, -2, -28, -4, -4, 18, 5, 10, -15, -4, -3, 47, 10, 0, -6, -15, 5, 26, 44, 11, 10, 20, 9, 20, 18, 12, -7, 9, -1, -30, -41, -9, 10, -2, 21, 33, 32, 3, 18, 35, 43, 30, 23, -16, 7, 7, 5, -4, -5, 16, 33, 2, 34, 17, 3, 15, -14, -8, -6, -16, -4, 16, 15, 42, -13, -15, -5, 7, 26, 12, -5, 7, 6, 3, -15, -10, 32, 17, 31, 1, 13, -7, 12, 2, 13, 13, 24, -7, -8, 22, -18, 1, 20, 8, 7, -4, 16, 8, -10, -1, 20, -14, 17, 28, 16, 28, -9, 18, 8, -17, 21, 17, 16, 15, 6, 3, 3, 9, -7, -6, 10, 1, -21, -39, 27, -14, -8, 9, 8, -10, 28, 30, -8, 13, -16, 3, 19, -4, -4, -16, 9, -8, 27, 7, -8, 13, 3, 11, 0, -18, -39, -64, -26, -35, -12, -4, 18, 14, 24, 20, 19, 14, -11, 16, -5, 18, -4, 6, 3, -7, 24, 15, 6, 16, -3, -2, 0, -9, -32, -57, -36, -39, 13, -8, 21, 0, 21, 8, 13, -1, 13, 2, -12, -3, -10, -8, -8, 12, 15, 7, 0, 24, -7, -18, -13, 5, -15, -31, -18, -41, -3, -24, 15, 11, 11, 4, 48, 11, 11, 3, -11, 2, -21, -17, -6, 13, 19, 24, 11, -11, -24, -14, -1, -32, -26, -5, -15, -21, -38, -25, 14, 11, 6, 17, 12, -13, -21, 1, 26, 24, 13, 5, 0, -5, 22, 4, 9, -18, -6, -16, -16, -14, -7, -19, -23, -15, -26, 5, 10, 24, -4, 6, -14, 21, 7, 6, 10, 9, 23, 5, -22, 20, 36, -2, -4, 10, 1, -3, 3, 32, 0, -31, -36, -14, -11, 7, 25, 14, 16, -7, -7, 0, 18, -5, -9, -4, -20, 1, -9, -5, 38, 17, 15, 17, 21, 32, -18, 14, 7, 5, -35, -17, -48, -6, -1, 11, 17, -18, -2, 29, 24, 16, -19, -24, -17, -16, -14, 9, 38, 18, 28, 39, 32, 3, 15, -1, 5, 3, -57, 1, -33, 2, -13, 36, -18, -14, 11, -16, 2, -1, -22, -32, -40, -22, -11, 31, 17, 32, 17, 36, 32, 31, 10, 29, 30, 3, -22, 17, -23, 16, -16, 10, -10, -1, 2, 7, -1, -3, -9, -18, -32, -9, -14, 22, 20, -1, 11, 10, 12, 9, 10, -29, -17, -1, -59, -15, -10, -10, -16, -21, -14, 7, -4, -12, -15, -12, -19, -53, -14, -20, -5, 39, 11, 25, 20, 8, 19, 0, -19, 2, -25, 13, -27, -31, -3, -15, -2, -32, -22, -17, -11, -4, 1, -16, -40, -35, -24, -2, 19, 37, 24, 21, 20, 36, 33, 3, 1, -27, -31, -28, -33, -63, 16, 0, -18, -10, -37, -29, -26, -47, -24, -51, -33, -24, -18, 12, 12, -2, 34, 39, 19, -3, 2, 11, -9, -4, 7, 11, -18, -41, 15, -16, -2, -12, -1, -9, -9, -21, -39, -66, -30, -25, -2, -15, 0, 14, 18, 7, -6, 24, 11, -12, -9, -8, -22, 37, -28, -26, 10, -14, 8, 4, 17, 34, -3, -3, -23, -19, -19, 18, 8, -13, 29, 11, 6, -2, 29, -8, -17, 2, -11, -14, -31, -18, -2, -22, -7, -9, -17, -18, -13, 33, 19, -3, 10, 47, 37, 35, 31, 44, 40, 34, 2, 3, 14, 13, 9, 10, -15, -6, 7, 13, -4, -5, -18, 16, 18, 14, -2, -17, -15, -9, -20, 6, 36, -5, -7, 10, 37, 6, 13, 29, 28, 7, 27, 8, -2, 20, 3, 0, 7, 10, -15, 15, 16, 11, 11, 22, 7, 5, 3, -8, 16, 5, -15, -16, 13, 7, -32, -3, 41, 5, 15, 16, 22, 33, 29, -16, 18, -3, 9}, { -14, 15, 3, 16, -5, -6, 13, 2, -13, 11, 16, -12, 12, -9, -36, 4, 19, -16, -10, -9, -16, 5, 14, 0, -1, -15, 4, -1, -15, -3, 5, -4, -17, -12, -1, -12, -4, -28, -35, -37, -25, -8, -20, -28, -34, -2, -2, -2, 2, 20, 15, -21, 9, 12, -10, 16, -3, 14, -2, -9, -16, 0, -33, -13, -15, -41, -42, -42, 0, 50, -4, -1, -60, -33, -62, -37, -20, 0, 9, -32, -13, -21, -6, 10, -8, 7, 13, -8, -19, -11, -43, 0, -41, -37, -27, -4, 4, 29, 23, 7, 12, -34, -18, -34, -13, -9, 5, -35, -31, -16, -12, 1, 17, -3, -18, 34, -15, -34, -30, -27, -43, -57, 7, -6, 43, 16, -2, -8, -30, -56, -72, -39, -26, 34, 58, 36, 19, -2, -3, -6, 14, -9, 2, 22, -27, -17, 2, 6, -4, -29, 28, 41, 20, 23, -8, 14, -11, -44, -74, -51, 13, 29, 29, 23, 0, -27, -28, -34, 13, -2, 33, 11, -3, 9, 19, -18, -9, -6, 43, 25, 41, 18, -27, -30, -10, -17, -3, 3, 30, -21, -32, -37, -17, -18, 25, 4, 1, -14, 43, 20, 13, -6, -19, 15, -33, -16, 3, 34, 28, -5, -7, -57, -42, -30, -18, 2, 1, -31, -20, 29, 29, -14, -4, -1, 13, -1, 22, 42, 11, 6, -10, 15, 6, -9, -12, 40, 47, 14, -36, -27, -34, -23, 12, -12, -14, 4, 8, 29, 8, -3, -18, 6, 10, 6, 26, -17, -17, 16, -7, -2, 9, -24, -9, 15, 30, 1, -14, -18, -13, 32, -7, 3, 6, 16, 4, 15, 11, -37, 14, 23, 17, 15, 35, 24, -14, -18, -55, -24, -36, -20, -18, 23, 13, -17, -50, -23, -11, 10, -6, 20, 10, -11, 23, 20, 60, 24, 21, 39, 5, 24, 29, 21, -59, -37, -48, -45, -37, -35, 14, 15, 5, -31, -35, 6, 8, 13, 6, 32, 4, 13, 15, 39, 54, -31, -37, -4, -5, 15, 31, -11, -42, -43, -75, -67, -46, -13, 11, -2, 7, -13, -12, 13, 9, -5, 12, -5, -11, -48, -7, 28, -38, -46, -13, -23, -11, -19, -18, -12, -37, -51, -99, -48, -15, -5, 23, -4, 2, 28, 18, -21, -6, 17, -30, -26, -27, -51, -4, 15, -31, -7, -26, -13, -13, 6, 1, -9, -53, -26, -69, -63, -4, 37, 32, 9, 4, 14, 0, 12, 0, 32, -36, -30, -21, -22, -42, -8, 0, -10, -29, -9, -6, -2, -5, 5, -19, -46, -44, -15, -20, 11, 22, 19, -5, 14, -10, 5, 11, 33, -7, -17, -10, -39, -38, -42, -64, -32, -77, -5, -2, -17, -14, -8, -20, 1, -27, -28, -12, -12, 31, 13, 13, 13, -11, 1, 19, -10, 23, 35, 2, -48, -73, -60, -61, -53, -69, -34, -13, -18, 4, -34, -27, 4, -25, -9, -1, 28, 56, 25, 31, 17, -2, 8, 9, -21, 17, 10, 12, 5, 20, 16, -1, -114, -57, -56, 4, 15, -24, -57, -6, -16, -47, -15, 17, 39, 57, 46, 39, 34, 29, 4, -11, 4, 20, 32, 25, 24, -9, 14, -16, -89, -57, -33, -13, 4, -15, -74, -21, -7, 2, 12, 23, 32, 23, 27, 11, 22, 6, 0, 14, -18, -8, -7, -4, 20, 3, -2, -27, -109, -66, 10, 12, 14, -10, -95, 9, -18, 12, -13, -1, 13, -10, -37, -43, -2, -6, 0, 38, 20, -1, 8, -2, -19, 0, -8, -28, -106, -45, 2, -2, -16, 9, -44, -63, 0, -5, 8, -12, -16, -39, -52, -41, -64, -16, 2, 24, -5, 1, -26, -19, 21, 15, -44, -59, -68, -31, 11, 8, -8, 17, -41, -62, -16, 12, 4, -4, -14, -68, -47, -5, -47, -41, -10, 14, 22, -6, 0, -15, -14, -13, -56, -37, -27, 18, -11, -9, 2, 7, -47, -30, 7, 43, 35, 13, 2, -12, -31, -11, -3, 5, -7, 20, 34, -6, -24, -40, -30, -40, -59, -28, -12, -1, 16, 4, -13, 6, -30, -16, -4, 26, 19, 20, -4, 1, -1, -34, -12, 8, -7, 29, 37, 11, -13, -11, -29, -36, -11, -26, -5, -18, 10, -18, 16, -10, -14, -1, -21, -9, -6, -39, -32, -24, 0, 28, 23, 0, 19, 21, 16, 13, 43, 10, -7, -16, 44, 26, -30, -33, 10, -17, 7, -12, -15, 24, -3, -23, -5, -27, -25, -30, -5, -7, 5, -18, -4, 28, 0, -13, 9, -22, 15, 11, 17, 23, -16, 13, -11, -15, 2, -1, -3, 9, -5, -17, 0, 10, -7, -21, 7, -22, -50, -30, 9, 0, 17, 18, -2, -13, -9, 8, 9, 17, -19, 7, 17}, { 2, 13, 6, 0, 3, -13, -2, -13, 12, -13, 8, 1, 24, 1, 5, -16, -12, -11, -11, -2, 9, -18, 0, 5, 4, -7, -18, 9, -5, -7, 6, -3, 5, 4, 2, 7, 19, -9, 22, 4, 16, 32, -15, 33, 21, 11, 20, 6, 32, 14, -6, 11, -13, 5, 15, -3, 16, -11, 9, 25, 38, 25, 32, 25, 17, -20, 0, 15, 21, 11, 0, 5, 27, 13, 38, -1, -8, 21, 32, 30, -18, -6, 15, 4, -18, 15, 14, 6, 8, -5, 20, 13, 14, 1, 23, 35, 33, 16, 18, 12, 20, 15, 30, 34, 14, 3, -20, -4, 8, -12, -15, 18, -10, 3, -16, 8, 11, 12, 10, 20, 2, 6, 10, 16, -25, -5, -6, -23, 7, -11, 12, 26, 18, -10, -10, -20, -13, -27, 9, 7, -5, 7, 14, -14, -27, -9, 9, -3, 12, 9, -14, -27, -3, -26, -1, 14, 7, -6, 20, 27, 26, -2, -1, 1, 12, -13, 39, 19, 3, 14, 30, 6, 11, 21, 9, 0, -6, -10, -10, -19, -31, -9, -22, -16, 0, 7, 6, 19, -2, -14, 16, 20, 48, 16, 16, 32, 10, 5, -8, -12, 13, 7, -8, 8, -17, 8, -28, -15, -18, -11, -11, 11, 9, 10, 7, -5, 17, 11, 3, 16, 7, 8, 13, 8, 0, -29, -7, -8, -22, -5, -37, -12, -7, -1, -6, -4, -14, -17, 6, -25, 2, 12, 17, -16, 20, 3, 12, 17, 12, 11, 2, 18, -6, -4, -19, -19, -11, -19, -19, 6, -3, 2, -12, -8, -3, -17, 4, -13, 10, 10, 7, -4, -1, 6, -7, -19, 24, 18, -9, -32, -18, -9, -23, -4, -2, 2, -12, 13, 8, -12, -19, -20, -17, -1, -3, 18, 29, 12, -16, -10, -9, -17, -3, 12, 43, 4, 16, -14, 5, -4, -5, 13, -1, -13, -4, -16, 9, 5, -19, -11, -9, 14, 15, 11, 20, 4, 15, -8, -29, -8, -23, 3, 16, 9, -5, -21, -13, -24, -24, -35, -14, -37, -8, -31, -19, 12, 20, -21, -11, 21, 43, 35, -9, -19, -7, -36, -36, -10, -17, -9, -3, -8, 7, -26, 24, -8, -39, 1, -2, -19, 1, -3, 1, 13, 16, 32, 34, 24, 28, 10, -30, 15, -3, -34, -30, -14, 13, 39, 4, -24, -12, -16, 7, 2, -18, -6, 4, 15, 4, 2, 17, 42, 10, 10, 28, 9, -1, -20, -19, 6, 17, -16, 12, -6, 2, -16, 4, -10, -40, -30, -12, 8, -12, -7, 14, 27, -18, 26, 17, 1, -4, 3, 15, -2, -10, -34, 13, 0, 12, -8, 19, 8, 3, 3, -10, -5, -10, 3, -18, 0, -26, 9, 31, 19, 12, 6, 6, 13, -13, -19, -10, 1, -5, -2, 17, 5, 3, 16, 22, 20, 5, 26, -22, -7, -12, 9, 1, 15, -6, 16, 17, 39, 29, 37, 8, 24, -28, -44, -26, -8, -10, -5, -2, 17, 28, 17, 15, 4, 16, -27, -21, -22, -34, 25, 5, 13, -14, 26, -9, 35, 30, 29, 39, 11, -19, -26, -40, -8, -16, -1, 15, 20, 17, 11, -27, -18, -10, -32, -45, -6, -60, -26, 3, 2, 21, 13, 0, 7, 35, 37, 21, 28, 12, 21, 6, 2, -9, -9, 21, 16, 5, -9, 12, -21, 1, -23, -18, -14, -18, -8, -14, 21, 19, 4, 8, 31, 15, 17, 7, 41, 49, 22, 30, 12, 2, 14, 11, -6, -1, -6, -24, 10, 2, 11, -11, -7, 3, -12, 7, -20, -4, 14, -13, -4, 3, -1, 25, 34, 23, 43, 42, 34, 10, 17, 5, 11, -10, 4, 19, 36, 13, -27, -4, 9, 14, -7, 10, 1, -18, 3, 8, -1, -29, -30, 1, -5, 31, 17, 34, 26, 27, 31, -10, -19, 3, 7, 12, -9, 6, 1, -44, 0, 26, 15, 0, 5, 15, 19, -2, 4, -42, -28, -11, 19, -12, -9, -5, 3, -4, 11, 4, 4, 4, -1, -23, -14, -29, -4, -8, 7, 5, 4, 18, 6, -4, 26, 29, 10, -34, -33, -15, 15, -28, -31, -15, -30, -7, -16, -5, -18, 1, -24, -21, 3, -18, -5, -12, -13, -11, 8, 16, -17, 14, -13, -16, -31, -32, -34, -65, -27, -25, -24, -21, -52, -33, -38, -37, -33, -14, 19, 13, -13, 5, -2, 1, -6, 3, 18, -7, -14, -15, 6, -10, -13, -43, -49, -51, -22, -38, -23, -6, 1, -48, -30, -6, -25, -27, -29, 5, 11, -28, -4, 17, -11, -17, 17, 4, 2, -1, -10, -8, 19, 19, -9, -17, -27, -30, -23, 3, 3, 6, -9, -6, -17, -8, 4, -1, -13, -15, -13, 13, 10, -9, -17}, { 12, -10, -14, -1, 1, -14, 5, -14, -2, -2, 17, 5, 8, 4, -15, 6, -11, 18, 10, 9, 9, 4, -7, -7, 10, -12, 8, 12, 15, -15, 15, 12, 6, 15, -8, -27, -2, -10, -14, -15, 4, -9, -11, -6, -16, -11, -9, -30, -12, -6, -12, -33, -3, -11, -16, -8, -16, -11, 3, 10, -25, -1, -13, -15, -21, -6, -40, -37, -18, -49, -38, 14, -2, 22, 17, -53, -24, -18, -23, -13, -15, 13, -5, 7, 3, 18, -9, -16, -26, -19, 4, 4, -20, -52, -22, -22, -24, -22, -4, 13, 33, 8, -3, -11, -13, -12, -16, -41, -7, -14, 3, 13, 2, 10, -5, 1, -31, -11, -22, -18, -52, -30, -43, -15, -21, 3, 1, 18, 15, 2, 1, 11, 15, 0, 21, -9, 33, 17, 41, 4, -3, -3, 3, -10, -8, -33, -17, -26, -41, 1, 3, 33, 4, -32, -27, -4, 7, 21, -14, 25, 14, 5, 18, 13, 13, 22, 0, -11, 14, -5, -21, -34, -5, -22, -13, 1, 4, 13, 20, -8, -22, -18, -4, -4, 2, 10, 1, -2, 16, 6, 25, 44, 30, 16, 25, -17, -4, -4, -22, 2, 2, 12, 10, -25, 41, 27, -4, -3, -13, -15, -4, 8, -5, -18, -16, -26, 8, -2, 0, 23, 9, 12, 33, 13, -19, -5, 6, 19, -3, 2, -37, -11, 13, -2, -15, -28, -25, 4, -8, 18, 9, 4, -7, -20, -5, 2, 16, -1, 35, 58, 21, -2, 3, -20, 6, -1, -12, 3, -25, -21, 12, 13, -21, -10, -15, -15, -18, 6, -7, 8, -14, 4, -13, 7, -18, 30, 24, 42, 24, -8, -5, -16, -18, -10, -7, 3, -9, 1, 16, 11, -7, -11, -21, -44, -21, 1, -20, 12, 16, 3, 7, -16, -2, 7, -4, 1, -13, -18, 4, -1, -16, -10, 3, 11, -8, 13, 22, 7, 1, -1, 0, -19, -25, -35, 20, 7, 10, 11, -15, -18, -22, -25, 8, 22, 17, -4, -20, 2, -24, 17, -12, 25, 21, 25, 5, 1, 18, 16, 6, -27, -23, -47, -10, 7, 5, 28, 21, -2, -37, -15, -35, -31, -30, -47, 2, -9, -37, -3, 15, 17, 27, 6, 1, 29, -1, 6, 16, 2, -20, -18, -22, -13, -10, 14, -4, -13, -19, -35, -35, -44, -16, 19, -1, -14, -25, 13, 15, 11, 34, 32, 41, 1, 23, 21, 12, -9, 7, -4, -14, 23, -10, -24, -16, -6, -19, -44, -34, -24, 0, 0, 1, -14, -6, -8, 10, 43, 33, 28, 17, 33, -4, 21, 24, 6, 13, 18, 16, 12, -18, -6, -29, -23, -30, -6, -25, -16, 8, 17, 14, -13, -23, 11, 7, 5, 36, 9, 24, 25, -8, 9, 30, 49, 37, 6, -1, -30, -23, -28, -32, -34, -5, -18, 0, -21, 1, 10, 0, -3, -2, 16, 21, -9, 34, 31, 31, 32, 10, 4, 30, 42, 34, 25, -16, -33, -45, -19, -34, -39, -14, 13, 7, -19, -3, 7, 6, -9, -13, 22, -18, 6, 10, 8, 14, 16, 1, 15, 19, 6, -8, 19, 16, -22, -32, -18, -15, 1, -15, 18, 0, -53, -9, 4, 13, 8, -15, 20, 5, -12, -8, -4, 3, -10, -21, 7, -6, 8, -19, 29, 3, 6, 3, 16, -15, 21, -10, 12, 11, -45, 15, -5, -8, 10, 23, -17, -8, 32, -23, -26, -32, -19, 2, -6, -12, 2, 7, 1, 34, -2, 20, 18, 0, 24, 26, 44, 28, 9, 1, -2, 1, -5, 2, -22, 1, -22, -10, -30, -47, -37, -29, 8, -27, -29, 1, 24, 27, -4, -8, 2, -10, 35, 23, 47, 42, 14, -25, -6, -16, -16, 2, 4, -5, -27, -17, -27, -40, -21, -24, 8, 4, -5, -19, 13, 33, 2, 21, 4, 17, 53, 45, 69, 64, 2, -26, -5, 3, 13, 6, -5, 22, -5, -37, -10, 5, -9, 24, -17, -21, -8, -2, 14, 18, 9, 19, 28, 31, 63, 68, 79, 58, -12, -1, -11, 18, -12, -13, -4, -13, -15, -33, 14, -3, -5, 22, 32, 12, 35, 25, 15, 24, 8, 18, 52, 23, 53, 35, 59, 3, 21, -23, -8, -18, 7, 21, 6, -21, -18, 10, 3, 5, 10, 6, -10, -12, 13, 1, 24, 41, 18, 11, 11, 35, 42, 16, 34, 29, -1, -9, -16, 0, 4, -15, -6, 11, -12, 22, 54, 9, -30, -8, -14, 22, -19, 0, -7, -2, -9, 4, -21, -2, 4, -31, 22, 13, -1, -17, 14, -9, 0, -18, 1, -9, -5, -3, -7, -7, 10, -1, 18, 22, -14, -17, 18, -30, -21, 7, -9, -5, -26, -25, -20, -8, -16, 8, -17}, { -13, -3, 3, -7, -1, -13, -5, -7, 4, 7, 10, -6, 0, 3, -1, 3, -15, 10, 16, 8, 17, -15, -16, -4, -8, 0, 13, -9, 13, 10, -9, -1, -1, 15, -15, 5, -12, 3, 1, 6, -2, -18, -8, -25, -38, -37, -11, -7, -29, 5, 8, -7, 8, 18, -11, 1, -3, -5, 12, -19, -13, 11, -25, -19, -21, -19, -18, -9, -22, -41, -24, -38, -10, 16, 28, -22, -5, -21, 2, -23, 11, 0, 14, 14, 11, -4, -3, -26, -14, 4, -50, -49, -16, -58, -58, -36, -40, -27, -38, -40, -29, 5, -7, -4, -23, -29, 10, 14, -3, -18, -1, -12, 16, 16, -13, -4, -22, 6, -39, -19, -24, -37, -37, -19, -16, -29, -48, -41, -27, -24, -28, -28, -26, -1, -18, -10, 15, 8, 3, -13, -11, 15, -17, -16, -15, -14, -31, 7, -2, -5, -17, -19, -28, -3, -6, -8, -23, -27, -22, -12, -43, -24, -26, -20, -1, -25, -18, -18, 10, -19, 0, -5, -9, -9, 9, 21, 6, 10, -5, 5, -13, -1, -15, -21, 14, 4, 4, -5, -4, 25, 1, 1, -40, -21, 18, -12, 5, -37, 17, 30, -20, -16, -15, 6, 11, 19, -1, 5, -19, 2, -11, 10, 17, 9, 5, -4, 14, 6, 17, -4, -10, -3, 2, -40, -10, -17, 15, 13, -8, -2, 35, 3, 3, -14, 2, 7, -15, -30, 3, -5, -12, -2, 9, -4, -8, 5, -1, 16, 22, -7, 19, -4, 11, 13, -5, -1, 31, -8, 25, -5, 21, 12, 9, 19, 11, -10, -3, 31, 2, 0, 8, 12, 8, -8, -6, -8, -14, -18, 0, 24, -6, 31, -9, -34, 2, 4, 12, 3, 5, 0, 1, 28, 17, 20, 14, 27, 26, 12, -23, -10, 3, 11, 36, -19, -26, -4, -33, -4, 22, 15, 49, 22, 16, 0, 12, 34, 23, -10, 16, 18, 11, 14, 27, 31, 6, -12, 6, -2, 8, 36, 6, -18, -7, -46, -29, 13, -9, 0, 32, 13, 23, 14, 17, 14, 18, 4, -2, 19, 13, 6, 14, 22, 3, -1, 6, -12, 28, 8, 0, -5, -19, -6, -10, 27, 7, 11, 24, -10, 47, 3, 17, 29, 21, -18, 5, 0, -17, 22, 20, 13, 12, -11, 1, -4, 33, 26, 11, -16, -1, -17, -36, -2, -15, 4, 27, 27, 18, -11, -9, 4, -4, -1, 8, 14, 16, 12, 12, 11, 1, 2, 7, 10, 8, 11, 17, 8, -32, 7, -15, 2, 4, -9, -7, 29, 16, -12, 10, 16, 26, 4, 3, 6, -16, -19, 5, 31, 19, 27, 33, 30, 17, 26, 36, -9, -22, -25, -6, -28, -1, -12, 5, -5, 29, 4, 10, 1, 33, -8, 2, -2, -4, 15, 2, 36, 2, 37, 7, 16, 14, 16, 15, 19, -5, -57, -36, -39, 8, 21, -16, 0, -9, 35, 12, 13, 19, 15, 10, -7, -31, -2, 19, 27, 4, -10, 18, 9, -20, 14, 22, 11, 10, -36, -51, -26, 4, -3, 30, -20, 3, 5, -10, 1, -21, -28, -50, -28, -38, -2, -6, -2, -7, 2, -23, -33, -19, 16, -17, 9, -41, 6, 32, 21, -6, 15, 23, -24, -24, -41, -29, -2, -51, -57, -61, -64, -27, 4, -11, -3, -21, -19, -46, -32, -12, -38, -29, -36, -44, 19, -2, 21, 6, -3, 17, -35, -32, -30, -46, -34, -62, -54, -48, -29, -5, -5, 14, -18, 8, -2, -36, -26, -19, -9, -18, -10, 15, 28, 6, 9, 7, -8, 1, -57, -26, -8, -36, -40, -40, -7, 1, 1, -8, 15, 5, -1, 9, -43, -9, -34, -31, -18, -3, -4, -7, 10, -13, -9, -16, -12, -23, -35, -40, -39, -33, -39, -18, 12, 20, 21, -3, 3, 10, -9, 2, -22, -11, -25, 0, -16, -28, -31, -23, 22, -19, -17, -8, 0, -14, -53, -51, -40, -34, -35, 7, 1, 3, -3, 20, 3, -3, -5, -7, 9, -16, 15, 19, 10, -4, -15, 1, -26, -7, 5, 17, -6, 23, 9, -5, -6, -20, -1, 3, -11, 13, 14, -8, -11, -31, -20, -28, -20, -19, 9, 30, -3, 2, 14, -40, 8, 13, -12, -13, 11, -9, 9, -16, 6, 1, 20, 28, -5, 0, 32, -3, 4, 8, 7, -6, 5, -9, -17, 23, 1, 25, -34, -43, -16, 9, 13, -2, -1, 7, 0, 47, 23, 22, 16, 34, 41, 34, 13, 2, 10, 64, 14, 2, -7, -8, 27, 35, 19, 6, -4, -27, 4, 16, -8, -8, -7, 18, -14, -12, 6, 26, 11, 26, 39, 43, 33, 32, 16, 37, 27, 48, 36, 25, 27, 51, 18, 36, 18, -11, 0, -8, 1}, { -12, 7, 0, 5, -10, 6, 11, -4, 8, 0, 6, 8, 20, 23, 6, 14, 2, -3, -15, 18, -15, 10, 4, 19, -6, -10, 11, -12, 13, -4, 0, 10, 3, 9, 7, 13, 0, 6, 21, 2, 10, -1, -18, -13, 3, -25, 8, 41, 21, -11, 13, 20, 11, -1, -3, -11, 0, 3, -15, -25, -4, 32, 27, 12, 29, 14, 13, 29, 27, 2, 39, 9, 21, 13, -6, -17, -16, 14, 15, 7, 26, -15, 5, 1, 19, -19, -8, -13, 1, 37, 44, 18, 21, 8, -6, -6, 17, 14, 28, 12, 18, 19, -2, 12, 18, -9, 30, 3, -18, 7, 2, 18, -9, -10, 36, 14, 14, 47, 33, 16, 14, -8, -6, 16, 20, 16, 11, -21, -3, -26, -10, 16, 8, 11, -3, 10, 33, 36, 13, 21, 3, -6, -14, 9, 33, 1, 21, 9, -6, 14, 2, 21, 22, 17, 10, 6, 13, 14, -23, 3, -13, -18, 4, 8, 18, 26, 25, 5, -10, 22, -5, 20, 32, -15, 12, 0, 6, 20, 5, 14, -15, -2, 2, 27, 25, 14, -10, -16, -3, -15, -11, -27, -30, 16, 11, 5, 3, 24, 30, 9, 2, -3, 19, -12, -6, 4, 11, -23, 6, 6, 16, 3, 15, 17, 6, -1, -1, -14, -25, 7, -5, -16, 1, 16, -9, 4, 0, 9, 12, 1, -17, 11, -14, -25, 7, 11, -3, -16, -10, -7, 5, -17, 4, -6, 8, -11, 17, -39, -11, -2, 19, -11, -4, 15, 12, 23, -6, -2, 25, -8, 13, -11, -25, 9, 8, -30, -25, -8, -9, 20, -1, 19, 23, 13, 11, -27, -25, -20, 3, -29, 11, 4, -43, 34, 14, 16, 12, 4, -13, -10, -26, -18, 1, -28, 4, -44, -14, -17, 8, 7, 30, 1, 13, 13, -2, -13, -37, -10, 0, -8, -5, 27, 10, -7, 11, 14, 11, -6, -10, 4, -10, 20, 18, 6, 22, 2, 26, 13, 11, 0, -3, 15, 10, 3, 8, 1, -3, -20, -14, -29, 28, 42, -12, 14, 10, -10, -8, 20, 4, 13, 1, 12, 2, 2, -9, 13, -3, -4, 1, 37, 6, 3, -12, -2, -13, -5, -25, -20, 15, 8, 3, 17, 12, -18, 12, 5, 25, 30, 41, 7, 8, 10, -3, 4, -25, 2, 14, 22, 4, 8, -12, 2, 13, -13, -2, 2, 2, 4, -1, 16, 4, 18, -3, 12, 27, 16, -2, 20, 28, 28, 2, 21, -14, 13, -17, 1, 0, -2, -28, -9, 3, -11, -3, -6, 9, 23, 8, 27, 23, -12, 19, 31, 19, 1, 19, 30, 12, 14, 34, 12, -1, 17, -6, 4, 10, 21, -15, 1, 22, 9, 26, 2, -3, -6, 32, 5, -2, 5, 16, 30, 12, 11, 0, -5, 31, 27, 34, 5, -20, 10, 13, 0, -3, 0, -49, -34, -18, -4, 12, 17, -14, -15, -6, -8, -12, -16, 9, 14, -13, -6, -15, 18, 32, 6, 1, 1, 3, -7, 1, 3, 8, -36, 0, -36, 12, 4, 17, 38, -6, -15, -6, 1, -31, -32, -33, -21, 0, 3, -18, 21, 31, 31, 13, -11, -16, -5, -15, 15, -9, -26, 22, -16, 14, 3, -4, 7, 43, 8, -3, -10, -1, -35, -11, -41, -9, -21, 5, 6, 2, 6, 19, 23, -3, 1, -2, 3, 3, -34, 1, -7, 13, 7, 2, 38, 28, 7, -16, -19, -7, -23, -6, -22, -31, -15, 23, -8, 0, 24, 21, 3, -26, -7, -18, -23, 2, 2, -12, -13, -21, 11, 20, 0, 6, 1, -6, 16, -25, 0, -17, -16, -6, 17, 18, 14, -7, 2, 2, -20, -8, -2, -22, -41, -18, -32, -33, 10, 9, 4, -7, 14, -11, -16, -16, -17, -16, -12, -9, 13, 14, -11, 0, 12, -13, -3, 1, -2, 4, -18, -1, -9, -16, 0, -28, -9, 16, 5, 9, 33, 17, -10, 7, -3, -12, -26, -14, 4, 5, -1, -24, -11, 0, -12, 7, 10, 16, -16, -5, -11, -6, -5, -47, -6, 1, 7, -11, 24, 36, 10, 8, -2, 25, 11, 24, 29, -2, 0, -16, -9, 17, -9, -5, -5, 10, 1, -13, 4, -36, -27, 0, 1, 14, 2, 5, -7, 20, 37, 12, 26, 30, 14, 23, 12, 32, -2, -6, 1, 26, 33, -11, 10, 26, -12, -33, -14, -18, -7, 9, -2, 9, 11, 11, -5, 15, 39, 7, 30, 24, 63, 48, 21, 50, 61, 53, 37, 40, 69, 22, 2, 15, 6, 17, 7, -9, -19, 6, -6, -13, -4, -11, 13, 1, -22, 2, -1, 6, 13, 40, 34, 23, 2, 40, 34, 32, 13, 27, 12, -3, -9, 7, -22, 6, 8, -10, -6}, { 7, -13, 9, -15, 10, 3, 0, 17, -8, 4, -14, 0, -7, -13, -11, -18, -14, 14, -4, 1, -16, 8, -15, 17, 13, 9, -18, -18, 18, 15, 13, 17, 10, -4, 10, -11, 5, -9, -16, 10, 23, 22, 29, 46, 13, -7, -17, -17, -4, -4, 4, -1, -15, 11, -10, -11, 12, -8, 15, 15, 7, -23, 19, 3, -35, -18, -27, -5, 0, 2, -30, -6, 16, -44, -50, -7, -13, -27, -2, -13, -28, -8, -13, 18, -7, -6, 4, 29, -1, 8, -2, 12, -27, -11, -11, 2, 9, 9, -4, -4, -14, -44, -48, -35, -31, -41, -55, -61, -29, 1, -12, 16, 13, -6, -29, -25, 7, -17, -14, -25, -48, -23, -46, -34, 10, 35, 33, -26, -26, -26, -8, -16, -7, -37, 7, -13, -49, -37, -31, -20, 11, 15, 10, -1, -2, -6, -44, -73, -64, -29, -43, -8, 29, 17, 2, 6, -20, -31, -7, -27, -5, -20, 2, -5, -10, -40, -42, -43, 2, 2, -1, -13, 7, 5, -61, -75, -84, -71, -14, 5, 45, 43, 23, -29, -41, -47, -19, -25, -28, 6, 3, -8, 7, -47, -31, -29, 13, -34, -25, 6, 2, -5, -50, -68, -67, -42, 2, 19, 42, 22, 5, -25, -21, -27, -11, -9, -8, -4, 26, 30, 6, -25, 10, -40, 5, -17, -23, -32, 3, -30, -2, -34, -59, -70, -13, 2, 29, 23, 14, -28, -39, -5, 8, -7, -28, -15, -1, 0, 17, 21, -16, -6, -13, -17, 5, -39, -24, -30, -9, -31, -51, -72, -28, 21, 5, 37, -3, 1, -18, -21, -10, -4, 2, 3, 1, 18, 15, 1, -6, -10, 10, 0, -14, -20, -35, -33, -37, -37, -30, -54, -4, 19, 25, 24, 44, 39, -12, 11, 1, 14, -9, 11, 48, 36, 19, 21, 11, -7, 16, -1, -46, -14, -18, -15, -30, -40, -35, -33, 1, -3, 6, 22, 35, 19, -28, -23, -3, -11, -22, 23, 44, 71, 22, -6, 4, 2, -11, 3, -35, 23, -26, -37, -25, -43, -45, -16, -27, 33, 56, 58, 48, 9, -6, -4, -14, -5, 20, 51, 58, 31, 32, 6, -26, -3, 28, -6, -35, 22, -4, -41, -27, 19, 18, -15, -7, 21, 27, 24, 32, 2, -14, 28, 21, 1, 24, 21, 14, 20, 9, 27, -18, 1, -2, 14, -11, -16, -17, -19, -12, 26, 14, -4, 1, 6, 10, 2, 27, 12, -7, 9, -5, -3, -13, 4, 19, 36, 8, 7, -45, -4, 15, -5, 7, -13, -21, -3, 17, 14, -4, 5, -11, -15, 20, 14, 21, 9, 8, 13, 31, -30, -4, 12, 17, -4, -7, -16, -25, 6, 7, -2, 21, -3, -11, 31, -2, -8, -12, -31, -22, 1, 15, 32, 30, -4, -31, -6, 15, 2, 15, -8, -18, -16, -17, -24, -65, -8, 0, 6, 11, 1, 15, 37, 18, 0, -24, 11, -6, 3, 5, 7, 24, -13, -5, -26, -2, 3, 4, 13, 15, -8, -9, -13, -22, 11, -17, -7, -14, -30, 18, -11, 1, -10, 3, -4, -8, 17, 6, 16, -10, -14, -20, -13, 7, -21, 28, -2, 6, 1, 25, 10, 11, -2, -7, 30, -22, -19, -27, 7, 27, 18, 10, -6, -11, 24, 12, 2, -9, -11, -14, -12, -18, -15, 1, -25, -29, -47, 28, 37, 6, 16, -5, 41, -14, -33, -18, 22, 27, 9, -6, -25, -15, 12, 1, -10, -23, -32, -9, -18, -17, 5, 9, -35, -45, -26, 17, 3, 27, -15, 5, -8, -6, 3, -24, 9, -11, -35, -10, 5, 4, -3, -10, -21, -17, -14, 14, -11, -7, 17, 24, -19, -21, -15, 33, 8, 43, 0, 22, 18, -27, 16, 1, 5, 8, 11, 8, -9, 0, -16, -5, -16, -12, -10, 14, -10, -9, 15, 19, 19, -5, 29, 13, -15, 32, -5, 7, 6, -18, -27, 5, 7, 38, -10, 22, 1, 23, -16, 19, 4, -8, 11, 14, 19, -7, -2, 11, 11, 1, 18, -7, 19, 10, 2, -16, 10, -19, -21, -36, -9, -4, 4, 14, 17, 13, 9, 15, -6, 17, 5, -13, 2, -9, 12, 16, 39, 14, 14, 22, 4, 10, 11, 11, -4, -1, 32, -13, -16, -43, -20, -35, 7, -18, 25, -21, 12, -1, 1, -36, -78, -41, -38, -42, 19, 8, 17, 23, 25, 33, 10, -11, -16, -7, 18, 3, 7, -23, -20, -10, -23, -9, -22, -37, -58, -57, -16, -39, -64, -53, -26, -10, -29, -15, -15, -12, -6, 17, -3, 0, -11, 11, 13, 12, 18, -23, -8, -33, -43, -54, -26, -11, -31, -61, 0, -12, -22, -33, -1, 2, 7, 5, 5, 5, 6, 18, 11}, { -12, -5, -6, -17, 13, -5, -8, 2, 9, 0, 9, -9, 9, 22, 13, -9, 6, 0, 13, 16, -4, -4, 11, 11, 7, 4, 1, 14, 13, 2, -11, -6, 14, 11, -11, 16, -2, -11, -8, -19, -11, -17, -15, -12, 1, 26, -14, 3, -21, 3, -6, -13, 13, -15, -18, -16, -3, -2, -18, 1, -4, -11, -12, 16, 25, 56, 41, 12, 13, -1, 16, -14, 7, 4, 2, -49, -33, 2, 3, 21, 18, 4, 18, 9, -7, 15, 3, -7, -6, 17, 2, 1, 34, 45, 31, 23, 22, 6, 29, 27, -12, -4, -6, 0, -14, -25, 3, -10, 0, 7, -14, -16, -11, 10, -21, -5, -31, 2, 18, 5, 3, 4, 30, 26, 15, -10, -17, 14, 4, -13, 3, -7, 12, 27, 13, 31, -20, 3, 2, -20, -8, -6, -5, 5, -8, 3, 7, -22, 13, 41, 36, 26, 6, 2, 5, 12, 8, -7, 1, -24, -2, -14, 9, 20, -10, -10, -42, -8, 8, 15, -4, 14, 14, 30, 23, 0, 39, 36, 49, 38, 36, 5, 22, 8, 23, -17, -1, -16, 10, 15, -3, -3, 14, 2, 3, 0, -10, 25, 7, 38, 9, 7, 22, 10, 16, 14, 39, 9, 21, 35, 21, -6, 32, 26, 27, 23, 10, 5, -4, 21, 13, -22, 6, -23, -14, 4, 1, 12, 11, 11, -2, 25, 28, 22, 42, 35, 49, 40, 42, 23, 3, 6, 11, 11, 11, -16, 11, 8, -26, -13, 18, 8, 4, -12, 8, -23, -4, 24, 15, 2, 8, 32, 33, -7, 17, 6, -8, -3, -9, -11, -6, -11, -14, -33, 16, 11, -48, -28, -9, 17, 17, -20, 4, -25, -9, -7, 7, 18, 16, -13, -18, -55, -32, -61, -69, -48, 8, -1, -19, -22, -27, -22, 15, -46, -25, 5, 20, -6, 14, -11, 7, -22, -8, -15, -3, -15, -30, -41, -50, -58, -86, -91, -61, -5, 14, 14, -5, -43, -27, -13, -12, -20, -17, -11, 4, -19, 11, 20, -17, 7, -33, -30, -39, -38, -60, -58, -55, -64, -40, -25, -48, -23, 6, 21, 8, -35, -29, 27, -1, -25, -26, 3, 19, -1, 0, 26, 23, 5, -24, -40, -67, -71, -54, -59, -47, -41, -15, 24, 10, -13, 11, -4, -5, -13, 7, -8, -26, -22, -22, -7, 4, -6, 20, -3, 12, -21, -30, -63, -31, -31, -36, 6, -13, 3, 26, -4, -2, -16, -3, -13, -4, -6, 1, 4, -3, -40, -26, -8, 29, -7, 23, -10, -36, 2, -43, -14, -31, -18, -4, -9, 3, 20, 26, 3, -17, -16, -12, -14, -3, -8, -20, 5, -36, -30, -8, -8, -6, 21, 17, -17, -19, -20, -34, -22, 9, -1, 7, 2, 7, -17, 10, 15, 13, 13, -8, -22, -13, -26, -18, -9, -15, -8, -12, 10, -20, 16, 12, 17, 17, 1, -7, -4, 5, 9, 7, -1, -15, 1, -14, -1, 17, 21, 0, -2, -32, 11, -13, 2, -21, -15, -13, 8, 26, -8, -14, 0, 12, 27, 21, 25, -12, 27, 3, -2, 6, 5, -5, -14, -8, 15, 3, -9, -5, 3, 9, -11, -39, -26, 16, 36, 45, -1, -14, -12, 18, 28, 49, 4, 0, 0, -6, -1, 16, 4, 11, 6, -8, 16, -8, -9, -27, 11, 15, 5, -23, -35, 21, 26, 12, 15, 17, -10, 29, 18, 10, 12, 16, 5, -17, 13, 22, 22, 15, 23, -4, 10, 10, 20, 13, -12, 3, 22, -2, -4, 22, -2, 23, -8, -6, 18, 16, 5, 23, -8, -11, -34, 0, -14, 37, 7, 2, 5, -5, 9, 27, 10, 17, -16, 9, 24, 3, 49, 24, 26, 22, -16, -9, 14, 8, -6, 28, 8, 12, -8, 5, -8, 11, 3, -1, 3, -1, 32, 11, 15, -30, 9, 24, 3, 16, 58, 28, 20, 13, 13, 8, 19, 13, -24, -18, 14, 25, 25, 22, 21, -3, 15, 15, 10, 28, 30, 5, -18, -22, -22, -1, 19, 21, 43, 10, 37, 3, 18, -12, -19, 0, -3, 17, 10, -1, 30, 26, 19, -37, -2, 31, 29, 26, 33, 3, -14, -13, -8, -9, -16, 21, 18, 35, 29, 13, -5, 8, -12, -13, 20, 18, 27, 4, 15, 14, 25, 11, -1, 9, -20, 1, 31, 24, 5, 5, -25, -5, -22, -5, -8, 20, -14, -6, -13, -6, 17, 7, 0, 9, -28, 10, 48, 30, -19, -18, 4, 15, 12, 15, 18, 32, -13, 18, 33, -13, -19, -27, -20, 2, -4, 4, 2, 0, -5, -8, 17, 13, 1, 11, 9, 25, 15, 35, 29, 38, 36, 28, 29, 32, 31, 15, -12, 7, -9, -10, 1, -12, 13, -5, 13}, { 3, 0, -10, 16, 15, 8, -8, -12, 9, 11, 13, 0, 30, -4, -6, -14, 13, -5, -4, 11, 17, 3, 17, 17, -18, -4, -15, -5, 0, 0, -17, -12, 4, -7, -3, 23, 0, 19, 37, 11, 10, 31, 18, 29, 28, 27, 30, 12, 25, 0, 9, 15, -18, 8, 15, 12, 3, 8, 15, -8, -23, 16, 36, 32, 49, 23, 48, 39, 39, 15, 47, 28, -22, -20, -11, -26, -18, 23, 11, 35, -18, -16, 8, 8, -17, 19, -11, -5, 13, 8, 8, 25, 5, 7, 2, 31, 28, 29, 39, 14, -19, -7, 9, 11, -26, -20, -20, -13, -24, -14, -12, -11, 13, 11, 1, -17, 15, -7, 21, 25, 11, 28, 21, 3, 15, 34, 5, 16, -3, -8, 27, 27, -13, -6, -9, -12, -44, -36, -11, -1, -9, -18, 12, -1, -7, 0, 17, 10, -9, 15, 29, -2, -13, 12, -1, 3, 11, 17, 17, -19, -5, -16, -15, -18, 0, -37, 1, 26, 1, -9, 22, 20, 14, 18, -26, -12, 6, -26, 11, 17, 10, 7, 2, 13, 1, -29, -35, -21, -10, -10, 4, -34, 5, -23, -31, -11, -9, 4, -6, 19, 12, 16, -2, -13, -19, 12, 19, 44, 12, 35, 9, -9, -14, -2, -12, -5, -11, 4, 6, 10, 26, -10, -13, -38, -2, -9, 12, 7, 37, 13, -22, -29, 27, -1, 16, 12, 12, 23, -6, 16, -17, -8, 5, 5, -9, 4, 15, 16, 20, -1, -23, -7, -14, 11, 43, -11, 38, 8, -12, 23, 1, 13, 24, 18, 23, -21, -23, -34, -16, -7, 2, 3, 22, 12, 24, 25, -5, -19, -15, 25, 6, -15, 45, 15, -10, 4, 8, 6, 27, 18, 31, 6, -14, -22, -24, 14, 34, 16, -3, -6, 19, 15, 20, 5, -1, 6, -34, 4, -7, -5, -1, -5, -2, 9, -13, -14, 17, 37, 7, -3, -48, -49, -55, -15, -4, 9, 7, 4, -1, 7, 10, -1, -4, -4, -49, 2, -11, -3, -29, -12, -22, -9, 3, 12, 44, 37, 6, -18, -67, -56, -34, -23, -25, -9, -16, -22, -2, 15, 6, 8, 11, 0, -37, -3, 1, -6, 15, -7, 25, -11, 19, 25, 38, 35, 4, -62, -63, -11, -21, -20, -21, -37, -32, -28, -20, 19, 18, 29, 37, 30, -19, -16, 9, -22, -1, 9, 30, 31, 19, 19, 28, 40, -18, -35, -34, -3, -30, -26, -6, -24, -21, -16, -12, -5, 9, 27, 33, 7, 2, 17, 15, -7, 7, 21, -3, -2, 10, 27, 27, 10, 0, -21, -34, 10, 7, -12, -20, -33, -5, -10, 14, -2, 1, -11, -10, 0, -4, -5, 1, -18, -12, 32, -7, 21, 15, 43, 44, 16, -15, -30, -31, -4, -9, -8, -34, -20, -23, -15, 15, 28, 7, 23, 1, 33, -15, -2, 14, -3, 10, -1, 3, 38, 3, 20, 34, 15, 23, 21, 8, 5, 12, -17, -17, 5, 19, -1, -10, 28, 19, 1, -7, 57, -18, -31, 6, 10, 5, -7, 16, 9, -3, 32, 16, 12, 15, 12, 21, 12, -4, -32, -8, 3, -7, 2, -11, 3, 2, 5, -15, 45, -5, -33, -17, -6, 22, 6, 24, 7, 24, 40, 29, 32, 23, 46, 22, -2, -12, 11, -2, 26, -3, -26, -2, 19, 11, -10, -36, 5, 24, -2, -7, -19, 25, 20, 17, -16, 6, 9, 12, 24, 8, 20, 10, -14, 8, -1, 28, 17, 7, 4, -2, 4, 25, 6, -21, 15, 18, 10, -4, 11, 1, 13, 22, 25, -20, 3, 5, 26, 10, 11, 0, -3, 7, 24, 17, 11, -2, 13, 15, 19, 28, -11, 4, 35, 62, 6, -13, -13, 15, 11, 1, 17, 20, -10, 32, 28, 4, 20, 24, 23, -1, 0, 1, 21, 1, 18, 32, 26, -5, -1, -32, 10, 65, -11, 3, 16, 12, 6, -15, 31, 44, 14, 20, 23, 33, 2, -1, -16, 21, 18, -11, -8, -13, 17, 8, -19, -25, -25, -22, -5, 4, 0, 15, 4, -17, -11, -8, 0, 9, 4, -6, 10, -5, 16, 2, -29, -43, -9, -16, 4, -15, -14, -13, -37, -21, 2, 6, 11, 12, 7, 4, -12, 29, 46, 68, 17, -29, 13, 18, -1, 3, -17, -11, -17, -32, -24, -9, -20, 4, -42, -32, -54, -31, -47, 4, 25, 16, -8, 8, 4, -17, -19, 41, -14, -23, -7, -17, -50, -24, -18, -21, -42, -11, 13, 5, 15, 6, -10, -47, -47, -41, -4, 3, -7, -1, -18, -11, -17, 15, -13, 22, 18, 52, 22, 9, 0, 37, 33, 14, -13, 5, -15, -32, -7, -17, 3, 12, -17, -12, -15, -10, 2, 1, 4}, { 9, 3, 6, 7, 19, -10, -15, 6, -1, -3, -16, -13, 0, 19, 11, -16, 5, 8, 8, 0, -11, -14, -10, -7, 7, -2, -3, -11, -15, -14, -9, -4, 1, 16, 30, 3, 5, 28, 4, 46, 33, 27, 24, 23, 16, 50, 23, 22, 19, -21, -5, -13, 15, -7, -6, 0, 13, 8, 18, 16, 13, 16, 21, 16, 13, 6, 28, 7, 14, 6, 4, 20, 23, 5, 13, -7, -27, -6, -3, 15, -7, 14, 13, -11, 1, 17, 18, 27, 20, -14, -12, -13, -4, 0, -13, 0, -10, -2, -15, -9, 44, 33, 0, -33, -12, -8, 18, 37, 3, -14, -7, -6, 8, -15, -1, -18, -17, -10, -5, -8, -10, 14, 11, 19, -10, -8, 15, 13, 8, 24, 3, -8, 19, -1, -1, 0, -19, -12, -22, -4, 9, 8, -1, -13, -3, -22, 9, -20, -1, -7, 6, -4, -8, -15, -8, 8, 1, -20, -12, 0, 4, 1, -18, -34, -20, -1, 6, -4, 18, 6, 8, 11, -19, -44, -37, -14, -14, -16, -7, 14, 15, 20, -1, -14, 4, -23, 3, -6, -25, -11, 19, -22, -25, -5, 1, -4, -6, -1, 32, -8, -26, -43, -33, -33, -4, -14, 5, 2, 13, -19, -1, 7, -8, 19, -9, -17, -22, 4, 14, 6, -36, -21, 9, 8, -10, -11, -10, -14, -3, -3, 19, 27, -3, 12, 11, -15, 11, 4, 23, 8, 20, -10, -10, -9, -9, 8, -16, -12, -34, -8, -3, 7, 9, -30, -11, -21, -14, -33, 17, 2, 21, 1, -7, -7, -17, 7, 2, 18, -8, -3, 14, 2, 17, 10, -39, -16, -5, -16, -22, -36, -14, -27, 25, 6, 11, 19, 12, 16, 22, 12, 19, -5, 5, 5, 25, 9, -12, -15, 8, -25, -31, -16, 11, -2, 20, -49, -29, -7, 8, 3, 2, 7, 7, 7, 4, 13, -3, 15, 10, -12, -27, -3, 10, 16, 2, -1, -20, -12, 4, 22, 8, 28, 39, 2, 38, -21, -3, -18, 7, 16, 7, 3, 23, 11, 8, -3, -14, -13, -24, -27, -18, -7, 10, 2, -20, -3, 7, 16, 45, 39, 62, -12, -14, -33, 18, -20, -3, 13, 4, 23, 6, 5, 2, 15, -19, 4, -15, -25, -15, 25, 13, 23, -13, 24, -5, 40, 60, 63, 41, 20, 2, -4, -6, -6, -28, 5, 2, 27, 20, 4, -7, 25, 13, -1, 25, 1, 13, -2, 12, 8, -9, 18, -2, 40, 39, 42, 10, 38, -1, 18, 7, -7, -6, 24, -6, 13, 7, -8, 14, 31, 15, 11, 38, 10, 29, 11, 23, 16, -10, 6, -3, 16, 23, 3, 3, 45, 3, 4, -9, -20, -1, -17, 1, 22, 4, -3, 19, 8, 19, 24, 22, -1, 7, -2, 22, 15, 10, 10, -4, 9, 18, 17, 2, 55, 14, 0, -16, 2, -13, 4, -17, 19, 5, -10, -18, 18, 2, 42, 26, 23, 8, 15, 31, -20, -25, -9, 19, 1, 6, -19, 27, 36, -24, 27, 2, -2, -21, -5, -8, -17, 8, 6, -5, -5, 0, -10, 25, -1, -6, 12, -3, 2, -16, -9, -3, -12, -3, -18, 2, 32, -42, -17, -3, 10, -13, 3, -18, -9, -9, -22, -8, 21, -6, -20, -4, 6, -24, 14, -9, 24, 19, 13, -12, -20, -6, -11, -12, 7, -12, -32, 10, 22, -6, -22, 19, -5, -16, -2, 20, 12, -2, 25, 15, -15, -16, 18, 13, 24, 20, -23, -5, -2, 16, 7, -25, 17, 9, 16, 16, -10, -33, 12, -12, -2, -12, 15, 3, 24, 10, 10, -4, 7, 5, 2, -1, -18, -5, 5, 10, -14, -5, -9, 4, -2, 59, 12, 9, 11, -1, -4, 8, 21, 2, -6, 11, 17, -6, 16, -7, -3, -22, -24, 7, -2, -4, 2, -25, 3, 8, -4, -27, 3, 33, -4, -8, 16, 1, -9, -31, -34, -13, -13, -13, 7, -16, -12, 12, 18, 1, -13, 3, -5, -12, -9, -19, 1, -12, -21, -59, -5, -12, 13, -6, 2, 10, -35, -36, -6, -36, -25, -3, -8, -4, 23, 31, -6, -15, -7, -8, -37, -28, -28, -19, -23, -7, -14, -21, -12, -2, -16, 16, 13, 4, -5, -42, -20, -17, 4, -34, -20, -20, 1, 1, -18, 6, -42, -42, -46, -37, -27, -19, -20, -35, -16, -9, 2, 19, 10, 0, 16, 5, -10, -15, 8, 32, -12, -18, -30, -37, 10, -4, -3, -47, -49, -43, -20, -18, -39, -3, -40, -27, -14, 7, 15, 14, -17, 16, 0, 7, -17, -16, -21, -6, 13, -3, 2, -22, 2, -2, -20, -14, -22, -30, -18, -23, -8, -21, -7, -13, -38, -13, -9, -4, 4}, { -14, 8, 9, -4, 15, 16, 1, 13, -1, 11, 15, 3, 16, 22, 1, 8, 14, -8, -18, 0, -17, 2, 0, -3, -15, -7, 8, -16, 0, -5, -8, 10, -2, -15, -12, -10, -14, -5, -8, -12, 3, 13, 40, 37, -20, -23, 24, 22, 10, -1, 7, -12, -3, 6, -5, -16, -1, 12, 9, 10, 13, -3, 0, -6, -11, 4, 8, 41, 29, 42, 32, 42, -4, -22, 1, 31, 12, 24, 47, 41, -13, -3, 7, 7, -11, -3, 16, -11, 5, -16, 4, -1, 25, 29, 5, -6, 27, -14, -7, -22, -47, -41, -37, 10, 3, -3, 4, 44, 37, -29, -21, -2, -16, 6, -13, -3, -16, -3, -23, -26, -38, -3, 4, -10, 14, 5, -32, -18, -35, -15, -17, -1, -1, -16, -12, 30, -22, -49, -22, 12, -12, -16, 29, 12, 12, -15, -31, -34, -32, -27, -56, -59, -36, -34, -29, -26, -25, -22, 4, 19, 22, 43, 16, 23, 31, -24, 15, -7, -6, -15, -30, 13, -6, -44, -27, -22, -19, -7, -50, -46, -44, -43, -23, -1, -7, 12, 40, 26, 41, 14, 3, -13, -10, 2, -23, 25, -2, -16, -15, -12, -33, -19, -28, -24, -20, -38, -60, -56, -15, 8, 34, 23, 11, -2, 15, 17, 30, 50, 36, -20, -14, 10, 16, 33, 6, -20, -43, -41, -10, -17, -24, -40, -46, -52, -40, -41, -31, 8, 12, 29, 36, 18, 6, 33, 33, 58, 25, 45, 6, -22, 2, -10, 7, -33, -14, -13, -13, -28, -56, -47, -42, -36, -46, -25, 6, 22, 21, 13, 12, 10, -15, -2, 5, 22, 27, 2, 32, 0, -2, -24, -10, -13, -30, -23, -3, -32, -59, -21, -40, -48, -6, 22, 25, -6, 9, 39, 6, -5, -27, -22, -34, 5, 7, 17, 3, 18, 5, -20, 3, -19, 2, -45, -2, -35, -25, -10, -43, -37, -10, 1, -27, -5, 19, 18, 5, -30, -3, -23, -27, -9, -44, -19, -14, 21, -10, -23, -7, -11, -3, -13, 8, -8, 11, 11, -12, 41, 18, -2, -12, -14, 4, 8, 2, -8, 17, -7, -36, -45, -39, -59, -40, -4, 3, 5, 35, -3, -8, -22, 3, -11, 10, -2, -4, 13, -17, 11, 14, 0, 29, 5, 16, 5, -6, -50, -52, -70, -66, -74, -17, -26, -1, 16, -3, 3, -6, 2, 19, -19, 18, 20, 14, -5, -13, 3, 8, 23, 1, 3, 32, -4, -4, -42, -63, -45, -48, -43, -39, 14, 46, 12, -11, -19, -4, -37, -28, 12, 12, 27, 5, 32, 15, 19, -8, 0, 2, -24, 14, -6, -16, -19, -35, -61, -72, -44, -7, 22, 12, 12, 15, -7, 15, 31, 15, 41, -9, 6, 18, 28, 29, 38, 10, -8, -16, -24, 5, -24, -43, -53, -36, -39, -7, -42, -25, 27, 34, 8, -3, -11, -52, 29, 14, 33, 15, -2, 13, 1, 19, 2, 7, 13, 7, -30, -32, -55, -53, -21, 0, -8, -13, -15, -23, 32, 17, -2, 19, 5, -37, 1, 21, 12, 17, -1, -2, 20, 23, 1, 15, 0, -1, -21, -31, -35, -12, 0, -1, -12, -45, -17, -8, 35, 23, 12, -4, -23, -42, 3, 0, 7, -13, 0, -22, 26, 27, 11, 15, -1, -14, -21, -38, -4, -28, 11, 27, 6, -6, 32, 26, 50, 42, 32, 17, -19, -29, 10, 11, -24, -11, 9, 10, -1, 8, -2, 13, -25, 1, -20, -5, 0, -21, 7, 25, 24, 40, 25, 29, 0, 8, 3, 8, -12, -16, 2, 13, 0, -39, -23, -17, -4, 4, 26, -2, -2, 17, 9, -3, 24, 36, 37, 39, 10, 29, 55, 21, 8, 14, 11, 2, 10, -25, 19, 34, 10, -11, -10, -6, 6, 7, 9, 7, 10, 24, 48, 50, 33, 9, 32, 34, 20, 9, 31, 2, -4, 7, 5, -13, 9, 7, 11, 11, 13, 16, -4, 22, 17, -1, -14, 18, 5, 5, 29, 25, 4, 24, 10, 45, 6, 25, 7, 4, -3, 9, -12, 16, -13, -19, -20, 6, -47, 21, -14, 5, -16, 2, 4, 12, 14, -6, 8, -10, 23, 7, 9, 3, 31, 1, 1, -14, 27, 24, -10, -4, 11, -10, 6, -37, -40, -25, -5, 23, -4, -14, -5, 1, 39, 14, 8, -33, 0, -2, -5, -9, 24, 13, 7, 5, 28, 10, -18, 10, 6, -10, 18, 52, -7, 10, 36, 2, -19, -19, -3, -2, 0, 30, 28, 42, 32, -2, 21, 51, 35, 5, -4, 12, -16, -9, -3, 18, 6, -8, -13, -2, -20, 10, 26, 12, 17, 54, 36, 11, 36, 65, 17, 14, 18, 39, -1, 7, 16, -15, 1, 2, -8, 2, -10}, { 1, -10, -17, -14, 16, 14, 9, -9, -19, -4, -18, -18, 19, 14, -6, 6, -5, 2, 2, -2, 2, -7, -4, -4, -9, -8, -16, 5, 18, 10, 13, 0, -11, 6, 6, 6, 13, 12, 19, 17, 7, 13, 6, -6, 38, 16, 1, 11, 19, 19, -13, 15, 4, 6, -16, -12, -11, -1, -15, -12, -7, 16, -7, 30, 36, 21, 27, 16, 3, 13, 12, 21, -1, 0, 24, 6, 1, 35, 3, 5, 18, 18, -3, -15, 19, -4, 3, -6, 20, -11, 3, 18, -12, 32, -2, 13, 23, 25, 0, 2, -18, 9, 27, 24, 3, -18, -2, -13, 40, 30, 23, 1, -5, 9, -27, -21, -16, -19, -15, 5, 11, -1, -13, 29, -2, -10, 4, 11, -14, 3, -2, 4, -4, -4, -20, -20, -11, -29, 10, 11, 15, 0, 6, -8, -27, -3, 1, -14, -12, -12, -7, -23, 11, 8, 22, 8, 0, 15, -5, -22, -8, -10, 6, 14, -2, -34, 27, 0, 16, -6, -3, 8, -3, 7, 11, 10, 7, -4, 26, 4, -2, 0, 21, 0, 11, -12, -3, 16, 14, -1, 18, -2, 16, 15, 4, 22, 4, 31, -9, 17, -11, 12, -3, 28, 9, 2, 16, 34, -3, -1, -2, -1, -6, 0, 11, -8, 14, 21, 33, 20, -1, -16, 5, -1, 10, -4, -1, -13, -2, 11, -20, -2, 10, 23, 36, 20, 15, 19, 30, -7, 3, 8, -13, 5, 1, 1, 26, 10, -2, -2, -15, -5, 8, 15, 15, 4, 6, -2, 10, -12, 1, 3, 16, -2, -21, 12, 15, 22, 2, 0, -7, -18, 0, -10, 14, 33, 6, 24, -2, -18, 7, 9, 25, 5, 6, -11, 13, 10, -12, -31, -11, -6, 1, 5, 26, -3, -8, -14, -9, -7, -24, -7, 2, 27, 33, -4, 1, -13, 12, -2, 6, -5, -23, -7, 13, -13, 6, -25, -24, -1, -16, -25, 8, 19, -8, -15, -25, -8, -27, -2, 15, 22, 8, 27, 25, 21, -13, 7, 6, -15, -44, -40, -7, -18, 5, 13, -21, 17, -10, -27, -27, -37, -13, -10, -25, -23, -17, 25, -1, -8, 21, 17, 27, -6, 7, -10, -2, -26, -36, -29, -1, 0, -4, -13, 22, -10, 3, -20, -3, -20, -20, -5, 6, -8, 13, 2, 10, -14, 9, 30, 9, -1, 1, -12, -16, -22, -33, 3, 16, -9, 6, 6, 2, 29, 23, -23, -20, -1, -41, -2, -8, -12, -3, -2, 25, -10, 18, 1, 16, 6, 6, -5, -20, 14, -19, 35, 14, 6, 10, 0, 23, 13, 11, 7, -2, -16, -5, 8, -19, -13, -6, -1, -3, 7, 27, 11, 5, -7, 8, 17, -18, 29, -1, 19, -2, -17, -4, 3, 32, 31, -6, -15, -41, -14, -12, -8, 10, -1, -20, 5, -9, 10, 18, -3, 2, 24, -16, 4, -12, 38, 10, 17, -5, 12, 8, 4, 22, 4, 4, -18, -32, -23, -21, -9, -19, -17, -6, 21, 10, -8, -13, 16, 9, 4, -6, 6, -13, 30, 3, 10, 11, 7, -2, -9, -4, -23, -26, -54, -22, -21, -16, -16, 5, -2, -9, 16, 3, -21, -18, 11, 2, 34, -8, 17, 21, -10, -12, -20, -22, 11, 13, -19, 5, -18, -24, -7, -30, 5, 4, 17, -10, -10, 30, 22, 10, -17, -14, 7, 29, 27, -16, 4, 26, 26, 14, -13, -5, 15, 25, 4, -16, -5, -8, 4, 1, -5, -8, 2, -1, 12, 25, 25, 14, 27, -23, -17, 1, -11, 12, -11, 12, 50, 12, 6, -11, 21, 3, 16, -1, 29, 23, 29, 16, -3, -15, -1, 17, 1, 6, -8, 44, 54, 7, -9, 30, 0, -13, -11, 40, 42, 21, 36, 17, 25, 17, 28, 35, 10, 21, 15, 4, 2, -1, 7, 13, 5, 0, 10, 29, 15, -7, -16, -2, 14, 3, 17, 14, 3, 31, 10, 19, 2, 28, 51, 27, 7, 14, 22, 20, 27, 4, -1, -2, -9, 11, 16, 27, 43, 11, 12, 4, -6, 8, -9, -9, 14, 11, 23, 5, 18, 26, 14, 13, 0, 20, 22, -4, 10, 28, 17, 28, -18, -14, -12, 20, 10, 33, 8, -6, 17, 3, -4, 4, 8, 4, 6, 26, 22, -19, -3, -3, -3, 4, -7, -9, 0, -3, 10, -5, 42, -15, 21, 16, 23, 19, -12, 3, -9, 11, 12, 5, 5, -12, -9, -20, -39, -9, -35, -1, -7, 0, 14, -27, 16, 55, -9, -10, 18, 15, 3, 18, 21, -13, 5, -19, 14, 3, -13, 2, -18, -4, 7, 13, 19, 13, 8, 24, 2, -8, 11, -1, -10, -6, -12, -19, -15, 0, -27, -33, 1, -12, 13, -14, -13}, { -13, -5, 12, 15, -13, 4, -9, 2, -3, 3, 12, -5, 3, 18, 17, -16, -1, -18, 12, 15, -14, -17, 1, -1, 10, 10, -9, 16, -15, -14, -1, -7, 2, 2, 20, 3, 19, -5, -12, 27, 31, 47, -3, 21, 40, 12, 20, 32, 18, -11, 10, -11, -15, -3, 3, -1, 15, -4, 11, 36, 23, -6, 13, 8, 11, -22, 7, -6, 30, 6, -2, -8, 9, -31, -25, 7, 22, 8, 4, 26, 1, -5, -18, 2, 1, -11, -9, 28, 32, 21, 24, 18, 12, 15, 12, 12, 28, 15, 29, 6, 14, 31, 21, -34, -15, -19, -32, -12, 6, 3, -32, 5, 2, -4, 24, 12, 20, -3, -20, 11, 21, 10, 9, 27, 38, 23, 6, -7, -3, -12, -10, -11, -20, -40, -22, -63, -49, -34, 15, -17, -1, -8, 12, -6, 9, -4, -16, -13, 14, -3, 11, 10, 13, -2, 18, 23, 13, 8, -11, 9, -7, -12, -13, -43, -17, -35, -18, 2, -8, 15, -21, 17, -14, -13, -20, -21, -22, -1, 1, -19, -8, 19, 4, 5, 9, -8, 15, 0, 4, 14, -28, -40, -45, -14, -5, -4, 5, 21, -25, -9, -6, 0, 17, -2, -18, 0, 1, -3, -5, -8, 15, 12, 16, 9, 21, 13, -8, 6, 0, 11, -16, 20, -33, -30, 13, 17, -9, -21, -4, -9, -7, 16, -4, -15, 13, -2, 14, -14, 18, 6, 22, 22, 22, 13, -8, 5, 33, -5, 1, -38, -38, 3, -13, 33, -23, -1, 4, 18, 11, 0, -4, 3, 8, 24, 16, 21, 12, 13, 21, 9, 7, 19, 46, 7, 8, 42, -31, -12, -31, 0, 1, 24, 28, 18, 1, -1, -8, 19, -4, -6, 6, 11, -13, 31, 40, 12, 12, 8, 20, 1, 11, 10, 34, 39, -15, -34, -46, -20, -9, 9, 16, 43, 18, -52, -16, 8, 13, -4, 10, 12, -1, 34, 2, 8, 15, 0, 14, 26, 39, 14, 19, 4, 1, -51, -7, -9, 5, -5, 37, -13, -13, -29, -10, 0, 4, 11, 1, 2, 10, -11, 10, 10, -9, -8, 27, -2, -2, 0, 10, 3, -13, -38, -33, -9, -12, 4, 11, -14, 9, -12, 10, 0, 8, -11, -7, 4, -5, 8, -24, 4, -5, -18, 5, 7, 6, 1, 5, 5, -21, -14, -26, -13, -22, -7, 1, -14, -1, 11, 18, 14, 7, -14, -19, -12, -2, -10, -21, -5, -22, 21, 21, 17, -3, 25, 13, 19, -9, -13, -30, -6, -22, -12, -19, -19, -5, 23, 18, -2, 8, -9, 4, -34, -46, -17, -20, -6, -25, 4, -16, 8, 17, -5, 26, 34, 17, -11, -24, -16, 2, -9, 12, 2, -1, 34, 4, 9, 21, 8, 13, -46, -35, -44, -26, -8, -17, -4, -10, -6, -12, 0, -3, 7, 4, -13, -49, 7, -8, 4, 5, -4, 17, 5, 10, 32, 7, 0, -1, -3, -17, -16, -15, -35, -17, 4, 1, -1, -19, -23, 16, -2, 13, -25, 1, -6, 25, -8, -3, 2, -15, -10, 6, 3, 14, 25, 6, 15, -19, -21, -26, 5, -13, -4, 3, 14, -5, -12, 7, -8, -9, -29, -34, -18, -2, 37, -2, 0, 9, 27, 15, -3, -5, -10, 19, -3, 10, -13, -17, 1, -3, 24, 8, -9, -18, 4, 4, 6, 6, -28, -8, 11, -11, 32, 4, -6, 13, 20, 6, 30, 9, -11, -9, 5, 14, -8, 17, -4, -10, -9, 3, -5, 3, -5, -37, -26, -22, -19, -11, 15, -9, -2, 0, 18, -1, -9, 5, 20, 15, -12, -21, 9, 10, -8, 6, -7, 16, -1, 9, -12, -36, -58, -41, -51, -62, -11, 25, 0, -16, 3, 1, -9, -3, 2, 17, 16, 14, 4, 1, 1, 10, 3, 0, 12, 14, 10, 4, -33, -43, -33, -48, -6, -42, -4, 1, 10, 12, -17, 14, 6, -33, -30, 12, 30, 2, -14, -17, -18, -2, 11, 10, -9, 14, 4, -12, -40, -72, -39, -9, -17, -3, -18, -16, -11, 4, -12, 2, 41, 16, 17, 44, 28, 16, -27, -11, -9, 3, -17, 1, -1, 27, 10, -15, -40, -38, -49, -33, -13, -12, -28, 3, -10, 11, -12, 13, 0, 19, 25, 26, 5, 24, 21, 26, 19, 3, 9, 10, 5, 21, -27, -39, -8, -18, -5, -8, -13, -1, -4, -14, 4, 2, 7, -15, -7, -23, 4, -14, 17, -2, 13, 55, 15, 9, 35, 10, 6, 13, 6, 22, 7, -6, 7, 16, 4, -11, -11, 16, -7, 0, -13, -5, 8, 18, -14, 19, 13, 12, 1, 6, 18, 8, -18, 26, 7, -2, 10, 31, 3, -18, 10, 12, 34, 2, -7, -18, -5}, { 8, -7, -6, 1, -5, -11, -4, 18, -12, -2, -11, 14, -4, -19, 4, 0, 7, -3, -16, 11, 14, 0, 16, -5, 16, 13, 17, 10, 13, -9, 9, -14, -5, 0, -17, -9, 13, -8, 12, -11, -18, -29, -48, -43, -8, 34, 18, -23, -17, -10, 8, -7, 14, 2, -17, -14, -17, 14, -8, -21, -28, 28, -5, 3, 24, 25, 4, -14, -10, 4, 23, -24, -13, 27, -18, -11, 25, 20, 23, 15, -1, 7, 11, -9, -17, -14, -3, -26, -11, 26, 20, -19, -3, 7, -25, -11, 0, -7, 57, 33, 21, 1, 9, -14, 13, 40, 11, -6, 24, 4, 7, -15, -15, -8, 4, 0, -2, 8, 4, -14, -27, -23, 8, -16, -3, -22, 3, 5, -10, -7, 10, 18, 27, 20, 18, 7, 21, 7, -15, 8, -12, 3, -4, -17, 19, 17, -4, -33, -10, -2, -19, -25, -20, -23, -3, 3, -4, -2, 8, 12, 20, 15, 16, 24, 45, 11, 39, 35, -7, -17, -4, 16, 29, -3, -18, -35, 0, -38, -34, -46, -33, 0, 1, -14, 17, -22, -6, 7, -9, 10, 8, 1, 16, 25, 16, 22, 4, -21, -5, -7, -1, 20, 33, -15, 0, 2, -42, -27, -36, -22, -20, -19, -12, 6, 6, -19, 23, 8, 29, -6, 33, 35, 27, 6, -11, -31, 0, -22, -29, -11, 6, -28, -19, -15, -47, -26, -17, 0, -14, -7, 7, 7, -1, -9, -25, -8, -11, -35, 12, 9, -9, -17, 17, -27, 14, -8, -10, 4, -25, -14, -29, -48, -11, 7, -18, -4, -1, 10, -9, -19, -24, -2, 2, -7, -24, -36, -28, -37, -11, -29, 0, -1, 0, -13, -13, 5, -6, -2, -26, -29, -35, -13, 8, -5, -26, 13, -26, -13, -12, -20, -8, -6, -24, -44, -36, -7, -19, -10, 13, -13, 2, -8, -55, -14, -17, 1, 10, -2, -17, 25, 3, 3, -12, 5, -22, -12, -2, -7, -14, -28, -12, -54, -59, -26, -60, -8, 3, -13, 12, -21, -38, -28, -6, -5, 10, 14, 28, 22, 37, -4, 15, -7, -1, -22, -19, 17, -6, -26, -19, -39, -22, -16, -41, -42, -1, 3, -23, -1, -9, -14, 15, 32, 29, 6, 24, 28, 31, 7, 5, -10, 1, 28, 22, 18, -34, -18, 0, 7, -23, -51, -35, 13, -18, -18, -11, 14, 1, 15, 18, 40, -15, 30, 19, 5, 18, -18, -4, -3, 21, 17, 12, 7, -9, -34, -16, 2, 5, -9, 6, 2, 15, -16, 20, 4, -8, -2, 17, 18, -6, 13, 10, 18, 25, 9, -7, 27, 11, 32, 6, 16, 2, 5, 23, 10, 11, 31, -1, 39, -12, -30, -5, -10, -28, -20, 1, 26, 3, -8, 28, 34, 11, -14, 1, 50, 34, 56, 24, 24, 9, 43, 25, 39, 10, 28, 28, 8, -14, 4, 12, -18, 8, -1, 13, 28, 28, 35, 18, -8, -3, 1, 15, 37, 49, 45, 27, 29, 11, 36, 2, -13, -31, 6, 13, 10, -1, 14, -6, 18, 21, 18, 12, 13, 30, 16, 2, -17, 18, 1, 13, 49, 29, 19, 12, 20, -4, -10, 0, 20, -8, -50, -52, -13, 12, -5, -24, 5, 25, 47, -3, 4, 7, -5, -23, -8, 6, -4, 20, 11, 25, -20, -10, -11, -8, -16, 18, 7, -15, -39, 7, -14, 15, -8, 26, 19, 29, -11, -7, 16, 5, 15, 3, 5, 8, 8, -2, -31, -6, -28, -8, 8, -30, 2, -12, 23, -1, -6, 1, 19, -4, 8, 25, 24, 22, 41, -16, 1, 10, 0, 9, -9, -1, 3, -15, -50, 6, 11, -1, -3, 2, 1, 29, 24, -4, -28, 42, 12, 7, -9, -9, -16, -12, 2, -14, -3, -19, -3, -4, 3, 9, -4, -16, -18, -12, 6, -16, -12, -21, 11, -10, 10, 9, -12, 24, 18, 16, 12, 2, 20, -9, -35, -21, -2, -2, -20, -4, -16, -10, -15, 4, -4, -26, -6, 13, -23, 1, -7, -7, -5, 1, -19, -15, 9, -7, 3, -10, 23, -17, -21, -23, -54, -34, -19, -43, -24, -46, -43, -3, -8, 24, 41, 15, -12, 9, 22, 6, -4, -5, 31, 30, 9, 5, -3, 8, 2, -4, -4, 18, 20, -5, -3, -12, 26, -33, -6, -13, -8, 10, 10, 19, -20, 0, 5, -23, -20, -6, 25, 10, -16, 15, 4, -16, 3, 32, -6, 9, 12, -4, -13, -17, 33, -4, -24, -29, -21, 30, -1, 10, -36, -55, -14, 0, 6, 8, 7, 10, 6, 13, 9, 3, 15, 6, 2, -3, -30, -28, -26, -25, -3, -4, -13, -8, -49, -5, -20, -7, -20, 7, -1, -20, 5, 10, 6, 19, -11}, { 11, 18, 9, -10, -12, 1, 18, 5, 10, -11, -10, 10, 10, 34, 16, 22, 13, -11, -14, -18, -15, 5, 4, 6, -6, -14, -16, -9, -11, -15, 12, 18, -6, -4, 37, 5, 27, 8, 25, 9, 15, 31, -11, -23, 10, 29, 8, 8, 21, -5, -1, 10, -9, -13, 7, -14, 13, -6, -10, 19, 21, 5, 14, 40, 47, 27, 47, 53, 26, -17, -4, -15, 22, 17, -12, 7, 0, 14, -19, 7, 18, -17, -10, 9, -8, 10, 18, 23, 34, -5, 50, 23, -10, 39, 45, 62, 3, -23, -57, -41, -26, -5, -26, -26, -3, 25, -16, -15, 11, 5, 13, 7, -4, 11, -3, -17, 51, -3, 10, 7, 14, 19, 30, 10, 1, -13, -3, -27, 8, 6, -29, -32, -37, -5, -25, -32, -16, -3, -1, -2, 0, 3, -14, -4, 25, 3, -4, -10, 14, 11, -10, -22, 11, 2, -2, -19, -14, -16, -54, -85, -57, -25, -41, -32, -19, -30, 36, 34, -2, 3, -1, -2, 38, 49, 5, 4, 0, -14, -31, -9, -14, -14, -10, -56, -45, -27, -37, -71, -64, -45, -49, -34, -22, -11, -11, 15, -4, 19, 27, -15, -9, 16, 9, 31, 1, 3, -32, -27, -54, -65, -54, -68, -70, -47, -64, -80, -33, -38, -24, -18, 0, -19, -16, -11, -5, 51, 20, 15, 7, -7, 35, 35, 17, 14, -1, -28, -54, -60, -46, -39, -45, -43, -29, -23, -5, -18, -27, 19, 11, -67, -47, 11, 5, 22, 55, 44, 28, 20, 43, 13, 5, 7, 7, 12, -9, -5, 10, 0, 9, 15, -10, -5, -7, 25, -3, -29, -2, 9, 0, 31, -1, 10, 47, 22, 5, 30, 23, -3, 19, 9, 14, 24, 20, 36, 48, 38, 41, 36, 43, 35, 30, 31, 3, 4, 28, 11, 23, 34, 0, 26, 10, -5, 45, 21, 7, 9, 10, 21, 22, 34, 17, 49, 41, 40, 20, 34, 28, 29, 50, 39, 16, 18, 32, 37, -33, 4, 18, 11, 16, -2, 16, 20, -5, 20, -3, 14, 9, 16, 1, 5, 9, 25, 28, 15, 4, 3, 21, -5, 15, -6, 39, 65, 54, 24, -3, 24, 45, 10, 13, 4, 5, -12, -11, -1, 9, 16, -12, -16, -2, -16, -10, -29, 17, 0, 3, 24, 30, 45, 41, 57, 41, -3, 7, 20, 15, 23, -19, 5, 4, -21, -16, -39, 13, 18, -11, 8, -25, 13, 2, -13, -5, -26, -6, -8, 44, 58, 28, 24, 25, -2, -15, 14, -9, -25, -11, -12, -4, -39, -12, -34, -3, 29, 23, 26, 0, -13, -23, -28, 1, -6, -7, -1, 15, 45, 18, 37, -23, 4, -13, -12, -13, -25, -19, 2, -20, -34, -16, 22, 5, 6, 13, -1, 34, 14, -12, -19, 17, 10, -6, 18, 19, 31, -14, 42, 18, 53, 12, -16, 16, -36, -14, 15, -3, -8, -20, 4, 7, 16, -4, 23, 31, 34, -1, 6, 9, -7, 21, 37, 3, 13, 11, 35, -10, 24, 11, 14, 16, -50, -32, 16, -14, 0, -19, 17, 9, 37, 20, 5, 18, 7, 11, 21, 14, 3, 5, 22, 22, 33, 5, 47, 24, -28, -23, -51, 12, 2, 10, 1, -3, -13, -34, -14, 39, 46, 9, -19, -11, -10, 9, 14, -20, -4, 2, 12, 7, 15, -42, 4, 21, -20, 0, -51, -17, 43, -16, -19, -34, -22, 0, -2, 39, 32, 11, -13, -2, -20, -35, -29, -15, -36, -22, -4, -4, -43, -47, -21, 4, -10, -5, 9, 5, 25, -1, -22, 11, -23, 19, 4, -1, -2, -5, 10, -26, -13, -20, -5, -1, -16, -43, -42, -42, -73, -55, -14, 31, -2, -4, -6, -2, 16, -10, -28, -22, -14, -10, 18, -5, 22, 24, 9, 16, 18, -9, -21, -1, -39, -34, -44, -59, -67, -21, -2, -7, -10, -9, -12, 2, 8, -2, -28, -36, -41, -12, -7, -10, 9, 34, 0, 5, -5, 10, -23, -55, -30, -10, -40, -59, -35, -46, 4, -27, 15, 0, -15, 17, 29, 5, -1, -28, -61, -14, -30, -3, -15, -31, -13, -7, -9, 0, -5, -17, -25, -8, -13, -26, -1, 22, -20, -25, 6, 12, 13, 17, 11, 11, 27, 23, 8, -51, -53, -3, -9, -7, -7, 11, -15, -4, 18, -6, 2, 7, 1, 4, 18, 14, -8, -8, 18, -6, 10, 0, 13, -10, 28, 28, 13, 9, -15, -24, -26, 2, 35, -26, -26, -36, -52, -19, 36, 18, -3, 15, -23, -15, 0, 15, 7, -5, 17, -10, -15, -10, 25, -1, -1, -7, 17, 39, -14, 6, -18, 2, -26, 10, 17, -13, 9, -10, 32, 46, 27, 12, -19, -4, 0}, { -13, -2, 3, -14, 0, -14, -12, -16, -9, 16, -13, 10, 10, -1, -14, -12, 19, 1, 10, 7, 13, 13, -4, 7, 0, 11, 3, 16, -3, 10, -14, 6, -1, 15, -8, -7, -10, 19, -2, 8, -14, 4, -34, -18, -21, 8, 20, -9, 22, -6, -4, -6, -16, 13, -7, 5, 7, 4, 13, -31, -25, 17, 20, 24, 10, 36, 16, 7, 44, -6, 30, 11, -20, -13, -5, -1, -6, 22, 1, -6, 20, -10, -12, 1, 2, 12, 1, -23, -18, -2, -12, 7, 6, 10, 7, 13, -1, 6, 9, 7, 20, 12, -2, 29, 13, 16, -2, -20, 11, -38, -27, -18, 3, 1, -1, 1, 27, 15, 5, -5, 6, -19, -1, -33, -27, -28, 5, 22, 0, -2, 12, 4, 15, 5, 24, -13, -42, -42, -35, -18, -11, 11, 2, 3, 20, -5, -19, -13, -31, -5, 0, -42, -43, -41, -21, -4, 10, 7, 20, 26, 10, -8, -17, -20, -19, -19, -42, 0, 6, 19, -8, 29, 2, 12, -3, -7, 13, 20, 8, -29, -15, -25, -10, -6, 11, 17, -9, -12, -1, -14, 7, -12, -11, -14, -43, -10, -3, 35, 13, -24, 1, 23, 14, 13, -2, 12, 1, -18, -14, -32, -10, 11, -5, -10, 14, 1, -6, 3, -6, -28, 5, -10, -32, -13, -12, -4, -5, -32, 11, 24, -9, -1, 5, -18, -8, 1, -20, -4, -14, -11, 3, -7, 7, 5, 0, -5, -7, -16, -23, 3, 7, -26, 2, -12, 7, -22, -30, 22, 2, -9, 3, -14, -18, -17, -15, -9, 4, 6, -24, -3, 3, 20, 11, -9, -26, -12, 2, -5, -8, 0, -2, 15, -24, 16, -50, -19, -6, 0, -9, 0, -7, -16, -9, 15, -17, -39, -26, 8, -4, -5, 11, -20, -24, -27, -10, 4, -19, 11, 10, -3, 1, -32, -36, -29, -4, -23, 10, -15, -14, -10, 24, 5, -10, -33, -32, 3, 29, 15, -1, -2, -34, -28, -39, -28, -37, 9, 8, -10, -1, -23, -22, 13, -14, -38, -18, -12, 11, 9, -4, 14, -7, -43, -1, 0, 5, 7, -4, 5, -5, -4, -5, -1, -10, 4, -19, 8, -25, -9, -22, 3, -17, -8, -12, 26, -9, 10, -11, -15, -34, -26, -14, -11, -7, 2, -12, -14, -6, 19, 34, 0, -6, 21, 6, -3, -21, -4, 15, 14, 11, 0, -7, 25, 8, 8, -5, -19, -11, -10, -7, 2, 25, 33, 12, 22, 20, -10, 16, 37, 28, -4, -6, 21, 23, -2, 28, 5, 7, 12, 20, 16, 25, 11, 28, 10, -1, 6, -2, 23, 38, 45, 7, 29, 14, -16, 16, 50, 0, 37, 26, 2, 29, -17, -2, 23, 6, 29, 20, 9, 11, 10, 10, 7, -15, -22, -2, 35, 34, 58, 13, 23, 38, -8, 37, 64, 27, 0, 12, 7, 32, -4, 18, -9, -22, 9, 38, 37, 14, 41, 12, -2, 12, 9, 6, 43, 52, 14, -18, 44, 21, 10, -7, 22, -3, 10, -20, 8, 14, 46, 29, -10, 7, 0, 8, -3, 0, -8, 2, 2, -3, 31, 37, 34, 20, 29, -10, 22, 26, -17, 11, 4, -11, 52, 12, -9, -13, 56, 22, 12, 4, -17, -16, 15, 16, 25, 1, 3, 27, 46, 35, 19, 17, -1, 2, 13, 21, 12, -24, -5, 50, 38, -13, 0, -9, 47, 14, 11, -14, -6, -24, -3, -4, 10, 25, -3, 23, -14, 10, -13, 21, 6, 3, 1, -9, 9, -20, -6, -7, 5, 18, 4, 28, 19, -22, 2, 0, -5, -8, -29, 1, -15, 22, 7, -13, -18, 3, -6, 20, 12, -11, 3, 0, 5, -16, -27, -22, 18, 11, 8, 23, -2, 5, -24, -6, -9, -17, -28, -34, 2, 7, -1, -25, 17, 12, -11, 8, 14, 6, 18, 6, -25, -33, -20, -20, -5, 4, 0, 33, 23, -31, -11, 7, 2, -19, -35, -19, 0, 12, -16, -2, 9, -6, -11, -9, -24, -5, 0, 2, -11, -2, 0, 32, -18, 16, -3, 4, 28, 12, -8, 11, -13, 8, -7, 1, 9, -6, -20, 4, 8, 19, 22, -36, -46, -13, -2, -19, -4, -3, 5, 20, -10, -18, 15, 21, 1, -6, -10, 6, -6, 8, 16, -17, 23, 10, -1, -13, 3, 18, 17, -1, -13, -1, -4, -10, -46, -18, -8, 11, -1, -15, -3, 17, -13, -6, -5, 10, 35, 33, -22, -33, -20, 17, 8, 21, -3, -24, -9, -35, -41, -17, -17, -19, -10, 25, 2, -1, 18, -18, -1, -13, -4, -6, -3, 8, -5, 2, 27, 30, 8, 4, -9, -4, 13, -1, 0, 23, 1, 3, 8, 3, -25, -5, 2, -12, -2}, { -3, -15, 19, -5, 2, -19, -11, -10, -6, 17, -4, 14, -2, -16, 1, 13, 14, 9, -2, 12, 1, 5, 0, -11, -10, 6, 18, 12, 3, 10, -14, -7, 11, -8, -24, -22, -34, -18, -2, -17, 11, -13, 5, -24, 4, -14, -8, 7, -18, -6, -11, -5, 11, 2, -2, 5, 5, -15, -16, 22, 24, 3, -15, -15, -22, -45, -24, -35, -53, -24, -50, -48, -7, -3, -18, -13, 0, -10, -30, 1, -29, -18, -12, -16, -8, -13, 2, 12, 33, 11, -32, -29, -35, -9, 6, -6, -7, -38, -32, -30, -2, 18, -28, -32, -12, -10, -6, -20, -6, 17, 28, -8, -5, 15, -2, -17, -5, 10, -8, -18, -33, 7, -30, 28, 3, 9, -2, -21, -26, 2, 9, -13, -18, 2, -1, -12, 12, 29, 46, 9, 8, 1, -7, -5, -12, -25, -7, -29, 4, 3, 20, 45, 25, 15, 9, -9, -14, 3, 0, -46, -36, -2, -10, -3, 5, 4, 29, 27, 12, -2, 34, 8, 4, -7, -22, -20, 16, 37, 0, 25, 15, 21, 1, 10, -2, 36, -5, -1, -21, 8, -1, -5, 6, 29, 25, 48, -3, -7, 43, 34, -18, -16, -3, -18, 29, -6, 23, 18, 21, 18, -6, 21, 9, 34, 21, 5, 8, 3, -6, 30, 13, 29, 29, 14, -14, 27, 2, -6, -22, -9, 25, 24, 32, 10, 27, 30, -9, 3, 25, 31, 38, 37, 37, -12, 25, -12, -8, -1, 36, 7, -14, 0, -17, 9, -3, 22, 18, -3, 35, -7, 21, 11, 4, 5, 3, 13, 16, 10, 15, 27, 13, -12, 17, 16, 4, -12, 28, 22, -4, -3, 11, 13, 11, -16, -9, 0, 48, 22, 32, 25, 24, 34, 0, 33, 11, -3, 7, 23, 14, 6, -3, 5, 2, -13, 41, 15, -11, -21, 3, 22, 13, -2, 7, 3, 16, 25, 22, -14, 19, 33, -4, 24, -13, 28, -3, -2, 8, -8, -8, -4, 5, 8, -5, -12, -1, 1, 13, 19, 29, -5, 21, 11, 8, 6, 29, -3, 23, 0, -10, -11, -24, -12, -9, 7, -4, -3, 5, 25, 11, 3, -22, -24, -9, -19, -3, 12, 2, -3, 31, 11, -14, 32, 15, -2, 9, -2, 7, -4, -7, 5, 12, -24, 0, -9, 14, 14, 18, 10, -19, -29, -5, -10, -10, -8, 11, 14, 0, -4, -7, 5, 17, -3, -10, 3, 27, -18, -7, -22, -16, 1, 7, 2, 30, 8, 26, 34, 7, -14, -40, -10, 9, -8, -3, -17, 18, 17, 13, 14, -2, 4, -3, 20, -8, -10, -24, -9, -28, 11, -10, 9, 13, 28, 6, 33, 25, -11, -5, -19, 14, 18, 5, -10, 13, -18, -22, 1, -16, -12, 16, 6, -20, -20, -30, -23, -7, 24, 8, -11, 14, 18, 0, -8, -16, -37, -21, -6, 12, -9, -24, -16, -17, -5, -3, -18, 1, -16, -7, -24, -4, -17, -13, -8, -10, 45, 20, 11, 9, 15, 7, -4, 14, -28, -28, 1, 8, -12, -10, -22, -19, -13, 7, -18, -26, -23, -33, -35, -53, -28, 0, 10, 3, 16, 6, 19, 21, -8, 12, 4, 7, 8, 12, 13, 5, -1, 38, -3, 19, 3, -15, 2, -11, -52, -47, -50, 6, 0, -7, -15, -3, -4, 15, 13, -3, -27, -28, 3, -9, -7, -8, 18, -7, 9, 33, 5, 0, 20, -3, -20, -25, -4, -31, -2, -7, 13, 4, -3, 11, 12, -13, 22, -25, -29, -17, 2, -11, -3, 7, 0, -13, -7, 30, -3, 17, 17, 25, 10, -6, -14, 5, 17, 18, 9, -17, 11, -8, -17, -40, -11, -25, -58, -37, -10, 0, -18, 5, 15, -13, 6, 0, 21, 5, -6, 38, 0, 12, 26, 24, 16, 22, 0, -20, 5, -28, -15, -33, -42, -16, -72, -18, 27, 32, 5, -9, 20, 18, 7, -2, 37, 11, 17, 32, 30, 21, 40, 33, 30, 11, 2, 7, 8, 5, 4, -19, -15, -11, -36, -7, 8, 38, -1, -40, -9, -16, -8, -18, 11, 32, 28, 4, 22, 34, 37, 18, 18, 1, 9, -7, 1, -16, -11, 4, 15, 20, 10, 8, 48, 7, 0, -4, 13, -3, 0, 8, 9, 12, 5, 35, 20, 17, -2, 2, 22, 19, -20, 1, 4, 28, 26, 0, 38, 32, 35, 12, 24, 15, -2, -3, 6, 7, -17, -1, 24, 19, 21, 6, 30, 18, 37, 2, 6, 31, 21, 39, 30, 30, 31, 25, 48, 62, 73, 35, -4, -14, -7, 7, -13, 3, -3, -12, 8, -17, -8, 25, 21, 19, 24, 54, 28, 17, 29, 19, 35, 34, 46, 25, 26, 15, 14, 38, 30, -2, 13, 15, 12}, { 14, -2, 4, -8, 10, 3, -8, -14, -13, -14, 18, -17, -27, -27, 8, -13, -4, 11, -11, 13, 0, 4, -4, 15, -11, 8, -13, 3, -7, -18, 2, -9, 1, 16, 20, 21, -17, -1, -14, -4, -2, -18, 2, -3, 27, 0, 11, -15, -5, -21, 19, 1, 8, -4, -6, -3, 5, 5, -11, 13, 1, -1, 12, 11, -2, 18, 5, -14, -21, -34, -39, -39, -54, -31, -51, -26, -6, -20, -17, -1, 15, 4, 1, 2, 2, 18, 15, 14, -2, -11, 12, 5, 40, 47, 61, 53, 29, 2, -7, -12, -34, -5, -11, -38, -6, -21, 1, 1, -15, 5, -23, -2, 16, -6, 15, 9, 22, -5, 1, 16, 27, 58, 41, 49, 48, 42, 11, -11, -27, -26, -12, -30, -5, -22, -2, -14, -17, -26, -2, 23, -6, -9, 3, 0, 25, -7, -9, 43, -3, 11, 7, 39, 4, 14, -1, 9, -14, -15, -6, 15, -10, -5, -22, -9, 5, 12, 18, 2, 4, -1, 9, -7, 11, -21, 4, -13, 11, -2, 11, 14, 1, 34, 32, 40, 26, 6, -1, -18, -21, -9, -12, -6, -7, -18, -2, -19, 10, 3, -14, -29, -17, -25, -11, -15, 18, 1, 13, 15, 21, 33, 16, 32, 32, 25, -9, 6, -11, -13, -46, -14, -21, -14, -32, 2, 7, -22, 21, -9, -19, 11, 14, 8, 27, -13, -6, 7, 8, 3, -3, -12, 19, -3, 21, 10, 8, 14, 7, -21, -59, -19, 4, 3, 0, -16, -17, -11, 5, -1, 4, 2, 16, 5, 20, 13, 0, -27, -15, -14, 10, 15, 32, -5, -2, 4, 12, -1, -46, -11, -21, 8, -17, -35, -6, 9, 9, -5, 19, 16, -4, -2, 8, -17, -17, -29, -21, -7, 33, 8, 18, 16, 7, 10, 21, 11, -12, 0, -7, 3, 13, -18, -27, 4, 12, -8, -2, 15, 21, -16, 1, -7, 6, 3, 17, -7, 27, 40, 29, -4, 8, 7, -2, -4, -29, 23, 11, -6, -21, -33, -9, 12, 30, -29, -1, -10, 6, -21, 4, -35, -2, 37, 29, 14, 12, 10, 9, -18, 8, -17, -30, -32, -50, -10, 25, 11, -9, -27, -28, 30, 31, -19, -21, 8, 11, -20, -33, -7, 10, 6, 13, 3, 7, 14, 0, 16, 1, 0, 5, -18, -46, -5, -24, 17, -14, -9, -21, -16, -12, -7, 3, 15, -4, 8, -7, -23, 19, -8, 9, -20, -17, -4, -3, 4, 2, -6, -31, -6, -31, -8, 13, -27, -17, 3, -39, -8, 4, 0, 19, 21, 7, -3, 4, -13, -9, -18, 8, -10, -1, -21, 7, 0, -14, -17, -17, 12, 2, -5, -14, 7, -4, -10, 22, 14, 30, -11, 8, -20, 10, -4, 23, 6, 3, -28, -7, -2, 5, 8, -4, -17, 21, 0, 10, 24, 9, 6, -24, -5, -18, 11, 13, 14, 27, -14, -2, -23, 7, -15, -14, -33, 23, -2, -19, -29, -9, -1, -8, 1, 20, 4, -19, -3, -12, -4, -15, 7, 22, 16, 27, 29, -12, -11, -3, -10, -29, -19, -26, -13, 21, -9, -13, -25, -14, -14, -7, 28, 29, 3, 26, 4, -3, 16, 2, -16, 4, 10, -11, 4, 7, 7, 9, -8, -12, -21, -8, 13, 10, -2, -20, -22, -25, -8, -2, 10, 23, 19, 10, 17, -28, -13, 32, 15, 16, 0, 0, -10, 8, 16, -1, 1, 1, 6, -7, -6, -10, 5, -9, -7, 7, -12, 9, -14, 8, 2, 13, -22, -28, -40, -11, -1, -12, 2, 3, 15, 13, -3, 20, 10, -11, -7, 4, -4, -1, 8, 18, 3, 5, 3, -12, 21, -5, -4, -17, -12, -39, -14, 19, -12, -23, 16, 17, 16, 12, -7, -22, -11, 13, 7, -12, 5, 19, -9, 27, -3, 1, 17, 0, 14, 7, 19, 37, -8, -12, -12, 7, 6, -17, 10, 0, 20, -11, -22, 7, -2, 8, -22, 6, 6, -18, -4, -5, 9, 7, 0, 15, -19, 17, 5, 33, 12, 14, -3, -32, -1, 11, -18, -12, 44, 11, 9, 11, 21, 29, -20, 22, 2, -3, -8, -4, 7, 27, -14, 25, 13, 11, -15, -10, 25, 9, -25, -9, 14, -17, 7, 42, 0, 7, 24, 46, 19, 4, 6, 24, -3, -2, 11, 4, 14, 6, 6, 12, 5, 35, -1, -6, -16, -33, 19, -23, 7, 17, 6, -3, 20, -3, 33, 28, 16, -12, 17, 46, 27, 26, 16, 10, -26, -1, 21, 32, 0, 41, -9, -8, 16, -19, -19, 1, 6, -2, 11, -3, -2, 0, -12, 1, 19, 10, -19, 11, -19, 6, -22, -1, -18, -11, -41, 7, -14, -5, -2, -16, -28, -10, -14, -8, 3}, { 14, 2, -4, 7, -19, -17, 18, 2, 12, 3, -14, -8, 1, 24, 1, 2, 3, 4, 12, 13, -5, 9, -8, 5, 15, 12, 16, -3, -7, -15, 10, -7, 18, 7, 6, -7, -4, 16, -2, 38, 6, 27, -3, 6, 31, 17, 12, 25, 29, -23, -24, 15, 8, 1, 8, -13, 10, -17, 7, -19, -19, 14, 27, 2, 19, 58, 48, 40, 46, 15, 29, 20, 20, 6, -27, -21, -18, 6, 6, 14, 9, 29, -13, -9, 6, -2, 11, -18, 6, -15, 25, 0, 1, 16, -7, 13, -7, 3, 40, 3, 30, -12, -22, 2, -9, -27, -32, -2, 18, 5, 25, -15, 14, -13, 1, -12, 4, 11, 35, 21, 10, -2, 17, 13, 4, 4, 11, 14, 5, 23, 0, 25, -4, -4, 7, -14, -13, -34, -19, 13, 16, -3, 31, 15, 1, 8, 14, 2, 16, -5, -2, -2, -25, 0, -21, 12, 11, 14, 27, 20, 10, 8, 3, 25, 5, 23, 24, 25, 1, 9, 10, -18, -2, -13, -15, -38, -19, -22, -11, -21, -15, -13, -28, -10, 18, 11, -2, 0, -9, 10, 23, -15, 4, 13, -4, 3, -5, 11, -13, -22, 34, -40, -22, -36, -26, -2, -8, 2, 6, -11, -19, -18, 6, 0, 12, 16, -4, -7, 15, 10, 9, 0, -10, 4, 9, 0, 20, -7, 3, -7, -7, -32, -19, -21, 16, 8, -6, 1, -5, -27, -6, 19, -2, -10, -9, -13, -20, 2, 8, -16, -31, -15, 7, -15, 14, 7, -3, 9, -26, -4, -12, 8, 11, -9, -16, -10, -24, -16, 5, 8, 8, 22, 6, -11, -24, -24, -43, -59, -36, -12, 0, -19, 4, -4, -12, 28, 18, -7, -15, -16, -17, -11, -21, -44, -24, -3, 2, 5, 24, 0, -9, -27, -21, -13, -29, -39, -20, -15, -16, 11, -13, -19, -4, 29, 34, -10, -19, -4, -6, -23, -40, -27, -36, 1, 3, 8, 22, 25, -10, 10, 0, -12, -8, 10, -43, -29, -13, -24, -10, 8, -2, -3, 18, -7, 4, -11, -1, -4, -37, -34, -23, -8, -11, -2, 5, 13, -24, 15, -5, -20, -21, 17, -9, -9, -4, 3, 4, -3, 14, -23, 8, -6, 17, 13, -8, -13, -11, 15, -16, -23, -12, -4, 9, -5, 5, 24, 25, -9, -4, 8, -11, 11, 25, 1, -44, 31, 17, 26, 22, 26, 21, 3, 19, 34, 19, 21, -16, -18, 12, 16, 22, -23, -15, 25, 15, 5, -1, 31, 37, 4, 11, 13, 19, 10, -6, 26, 9, -7, 20, 28, 36, 28, 28, 28, -12, 0, -14, 9, -17, 21, 9, -12, 10, -10, 1, 29, 22, 10, 18, -5, 20, 18, -5, 0, -17, 7, 13, 23, 27, 46, 33, 16, 6, -5, 12, 15, -7, 6, 3, 12, -5, -13, 2, 58, 27, 11, -13, -9, -10, -4, 14, 10, -25, 11, -9, 1, 22, 31, 23, -3, 8, 19, 15, 17, 10, -16, -1, 11, 11, 8, -12, 27, 25, 50, 1, 4, -15, 34, 1, 4, 6, -10, 10, 16, 32, -1, 16, 21, -4, 2, -18, -12, -6, 5, -12, 6, 20, 0, 8, 21, -13, 41, 8, -16, 2, -2, 29, 4, 5, -11, -11, 9, 9, 24, 18, -9, 22, 10, 15, -16, 3, 6, -9, 4, 28, 8, -12, 11, 19, 13, -7, -8, 10, 23, 29, 25, -10, 22, 10, 6, 26, 6, 15, -11, 18, 25, -2, 9, 12, 12, 14, 25, 18, 14, 1, 7, 17, 12, -6, 12, 24, 28, 45, 4, -11, -4, 26, 17, 12, 8, 19, -6, 15, 14, 38, 32, 18, 12, 2, 6, 24, 42, 12, 3, 58, -7, 2, 5, 2, 36, 36, 44, 13, -3, 15, -10, 20, 26, 10, -3, -5, -9, 11, -9, -9, 17, 7, 17, 11, 20, -18, 13, 52, -16, -1, 15, 3, 5, 5, -16, -5, 5, -1, 3, -8, -12, -1, 3, 7, -22, -18, -23, -9, 5, 7, 22, 19, 14, -17, 15, 11, 16, -5, -2, -8, 14, 9, -31, -36, -27, -18, 5, 7, -23, -22, -48, -13, -12, -7, -11, -14, -14, -16, 3, 1, 9, 9, 12, 3, -4, 3, -1, 45, -18, -57, -34, -37, -27, -25, -37, -54, -41, -14, -18, -14, 2, -20, -25, -32, -14, -12, -11, -19, -11, -20, -8, -4, -3, -15, -4, -19, 6, 18, 6, -1, 9, 24, 8, -30, -5, 34, -5, -26, -42, -7, -21, -13, -13, 10, 1, -40, -2, 17, 17, 5, 3, 12, 4, 6, 17, 6, 12, 8, 7, -6, 20, 1, 1, 24, -19, 15, -37, -33, -30, 27, 8, 23, -21, -8, -35, 6, -7, 15, -7}, { 0, -14, 7, 16, 0, -18, 5, 11, 1, 12, -16, 4, -7, -9, -20, -9, 0, 8, 8, -5, 10, 0, 14, 11, 15, 9, -7, -12, 7, 16, 11, 4, 17, -18, -21, -22, 9, 15, 35, 7, 13, 20, 3, -22, 9, 22, 34, -2, -10, 15, -7, -26, -17, 8, -14, -10, 4, 14, 5, 7, 20, -9, 8, -11, -27, -37, -22, -1, -27, -10, 3, 15, 6, 13, 16, 16, -1, -32, -20, -14, -5, -6, 4, 14, 19, -7, -4, 4, -26, 15, 17, -6, -12, -44, -10, -38, -23, 7, 1, -4, 1, 0, -1, 21, 33, 13, -6, 15, 30, 7, 11, -2, 10, -16, 25, 24, -19, -14, 56, 42, 12, 11, 4, 7, -1, 22, 28, 25, -4, -10, 4, 15, 23, -11, -25, -2, 14, -11, -35, -12, -2, -6, 8, -5, -22, 11, 23, -7, 0, 39, 8, 19, -16, 25, 26, 21, 7, -5, -27, -20, -2, -10, -7, -17, 33, 5, 13, 8, -6, 10, -13, 4, 13, -2, -8, 13, 26, 4, -21, 16, 15, 8, 17, 24, 14, -1, 9, 5, -13, -29, -19, -43, 17, 8, -35, -26, -6, -30, -17, 19, 7, -2, 5, 2, 11, 8, 7, -3, 25, 23, 10, 25, 32, 30, 21, 1, 15, 11, -19, -21, 9, 23, -25, -6, -2, 14, -49, -9, -33, 5, -4, 26, 7, 8, 15, -21, 3, 10, 8, 1, 9, 5, 21, 2, 4, 13, -11, -27, 40, -1, -51, -5, 5, -16, -19, -35, -22, -9, -5, 8, 31, 37, 13, -9, -14, -9, -7, 8, 0, -13, 1, 8, 36, 4, -3, -25, 11, 1, -7, -16, 14, -25, 1, -28, 21, 6, -12, 6, 16, 23, 15, -21, -43, -44, -30, -9, 13, 27, 1, 15, 5, 28, 14, -2, 15, -13, 0, 4, 21, 17, 19, -14, -26, -1, -7, 11, 13, 31, 19, -37, -80, -53, -52, -15, -20, 0, -9, -12, 10, 13, -24, -24, -10, 2, 12, -13, 1, 0, 19, -24, -25, -13, 3, 3, 28, 43, 0, -30, -53, -52, -57, -5, 10, 2, -2, 1, -22, 5, -36, -27, -11, -13, -2, 3, -7, 6, 14, -21, 3, -7, 17, -1, 39, 34, 51, -8, -35, -48, -64, -14, -16, -7, -6, -3, 0, -13, -11, -19, -34, -37, -20, -21, -3, 4, 17, 6, 20, 22, 3, -21, 30, 39, 45, 21, -33, -50, -52, -20, -26, -17, 23, 5, -16, -26, -29, -22, 30, -13, -8, -1, 2, -6, 2, -1, -16, 27, -1, 12, 14, 36, 36, 15, -10, -18, -44, 2, -33, -35, 1, 2, 4, 8, -14, -8, -6, -21, -8, -12, 14, -12, -19, -18, -18, -3, -10, 12, 25, 7, 21, -12, -46, -46, 3, 0, -26, -45, -26, -6, -1, 14, -3, -13, -49, 12, 19, -8, -15, -7, -24, -34, 22, -7, 7, -17, 17, 25, 14, -19, -36, -37, 16, 6, 7, -38, -9, -16, -1, 11, 6, -2, 8, -38, -20, -43, 14, -16, -51, -19, -15, -4, -30, -14, 25, 27, -6, -35, -32, -31, 16, -5, -4, -19, 12, -19, 19, 23, 5, 12, 5, -37, -33, -31, -17, 16, 10, 17, 2, -11, 0, -5, 23, 38, 8, -14, -17, -11, 25, 10, 4, 28, 22, 7, 0, 40, 14, 5, -1, -4, -32, -22, 15, -14, 13, 4, 17, -8, -13, 23, 33, 11, 23, -15, 17, 8, 4, 28, -2, 8, -14, 14, 25, 22, 17, -6, -30, 2, -23, 8, 18, 9, 9, 40, 34, 45, -1, 23, -1, 2, 6, 5, 0, 9, 24, 8, -14, 6, -10, -9, 25, 4, 6, -5, -6, -1, 31, 8, 3, 13, -11, 44, 22, 6, -2, 0, -2, -9, -1, 3, 2, 10, -22, -18, 5, -1, 8, -4, 11, 26, 20, -1, -39, -6, 61, -1, 0, 10, -22, 14, 44, 15, -1, 22, 25, 21, 10, -14, -14, -21, -2, -10, -6, -28, -24, -21, 6, -11, 1, 8, -32, 5, -21, -15, 14, 11, 27, -19, -18, 6, 9, -12, 2, 3, -5, 3, -13, 16, -6, -2, -26, -15, -19, -13, 0, -33, -33, -13, -14, -22, 15, 7, 8, -14, -51, 29, 1, -30, -2, 15, 50, 27, -6, -5, 2, 9, 45, 33, 19, -27, -19, -13, -61, -26, -3, 20, 22, 14, 0, 16, -13, 8, 16, 0, 45, -1, -9, 26, 50, 18, -5, 25, 12, -7, 21, 21, -7, 15, 58, 56, 8, 20, 18, -11, 14, -1, -2, -12, -15, 16, 14, -2, -10, 32, 66, 54, 79, 61, 85, 39, 34, 74, 25, 64, 33, 50, 0, 9, 28, 56, 19, 37, -2, 16, 11, -13}, { -5, 9, 16, -17, -2, -15, -15, -5, 9, 11, -4, 15, 7, -18, -4, -11, 10, 19, 2, -12, 1, -17, 17, -10, 4, 14, 2, 17, 17, 13, -18, 1, 10, 14, -22, -16, 14, 18, 29, 3, 20, 9, 12, 8, -23, -15, 3, 1, 7, 7, 16, 9, -7, -11, 0, -11, -10, 0, -8, -1, 5, -7, -2, 14, 11, 49, 65, 48, -12, -60, -32, -9, -27, -50, -20, 27, 17, -4, 8, -10, 11, 5, -17, -12, 17, 2, -1, -2, -23, 8, -14, 2, -18, 4, -18, -6, -19, -63, -67, -23, 7, 34, 9, 32, -10, -24, -18, -4, -4, 19, 20, 2, 15, -18, -8, -20, -4, 40, 7, 19, 26, 41, -2, -20, -13, -33, -12, 17, 41, 41, 19, 41, 7, 2, 0, -45, -27, -36, 24, 13, 18, 15, 25, 29, 11, 43, 20, 14, 64, 30, 13, -38, -51, -73, -38, 9, 26, 47, 32, 24, -19, -15, 1, -1, -42, -5, 25, 15, 10, -15, -3, -19, -27, -6, 17, 25, 26, -15, -7, -17, -66, -84, -64, 17, 9, 21, 39, 12, -23, -10, 9, -13, -32, -2, 15, 12, 6, 8, -17, -10, -27, 22, 12, 5, 7, 10, 18, -24, -45, -64, -23, 24, 23, 40, 27, -22, -21, 3, 13, -29, -27, -8, 13, 7, 11, 25, -43, -10, 17, 11, 9, -7, 16, 6, 10, 1, -41, -33, -27, 22, 41, 56, 1, -14, -39, -6, -25, -24, -35, -7, 5, 16, 19, 15, -5, 2, 12, -24, -20, 11, -5, 10, 17, -19, -48, -53, -2, 20, 46, 37, -20, -26, -42, -53, -19, -8, -25, -4, -26, -8, 6, 35, 12, 2, 14, -22, -29, -15, -5, 23, 16, -17, -18, -57, -13, 43, 45, 11, -20, -37, -31, -56, -23, -32, 5, -36, -4, 18, 13, -4, 24, 13, 28, -14, 23, -14, -8, 11, 6, -22, -60, -24, -9, 25, 35, -19, -44, -26, 5, -5, 6, 9, -16, -12, 18, -3, -18, 15, -3, 18, 5, -7, 24, 21, 13, 11, 23, -5, -42, -11, 18, 5, 14, -10, -18, -13, 19, 13, 29, 8, 28, -16, -14, -22, 22, 18, 3, 13, -12, -1, 25, -14, -6, -21, -3, -3, -31, -5, -15, 26, 23, -1, 5, 33, 35, 27, 13, 6, -5, 9, -35, -22, 16, -4, -9, -14, -35, 37, 2, 3, -4, 1, -16, 0, 7, 2, 2, 11, 21, -9, 13, 14, 10, 27, 1, -3, 27, 40, -13, -22, 12, -13, 30, -35, -13, -11, -3, 10, -17, -9, 6, 16, 10, -4, 21, 5, 3, 16, 10, 10, -11, 18, 8, 19, 20, 34, 29, -16, -3, -12, -2, -55, -7, 1, -23, 8, -9, -9, -7, 16, 18, -12, 4, 1, 15, 6, -20, -6, 12, 27, -8, 14, 24, 19, -17, -28, 12, -13, 22, -7, 6, 17, -6, -10, -27, 26, 13, 17, -17, -9, 6, 5, -21, -3, -19, -17, 7, 28, 16, 34, 24, 16, -13, -34, 16, -10, -17, -32, -24, 19, -19, -48, -13, 48, 40, -3, 0, 8, 23, -4, -5, -16, -14, -33, -12, 5, -2, -30, 26, -8, 9, -1, -2, -30, -17, -45, -35, -11, -9, -11, -7, 10, -1, -9, -15, -6, 4, -4, 0, 12, -19, -13, -1, 10, -11, -23, 22, 28, 24, -13, -6, -13, -4, -33, -20, -37, -12, 10, 8, 5, 20, -10, -16, -14, 13, -6, -9, 22, 13, -4, 13, 16, 15, 16, 7, -2, -2, 9, 22, 20, -41, -33, -25, -21, -6, 7, 20, 0, 1, -12, -4, -13, -11, -24, 15, 26, 1, -8, -25, -5, -6, -8, 32, -8, -13, -1, 19, 1, -18, -5, -38, 3, 2, -8, 7, 17, -8, -5, 10, 4, 14, -2, 5, -3, -12, -1, -24, 4, 19, 16, 8, -23, 36, -11, -9, 9, -15, -4, -11, -6, -16, 6, -12, 40, -14, 9, 21, 29, -5, 0, -32, -12, -5, 10, -17, -1, -18, 14, -26, 1, 29, -12, -10, 4, -10, -20, 2, -17, -30, -1, -11, -6, -19, -5, 7, -7, 7, -35, 0, 26, 21, 13, -3, 24, 5, -18, -3, -9, 5, -5, 0, -12, 15, 8, 3, 2, -12, -33, -15, 2, -37, 3, 23, 10, -4, -12, -22, -18, -15, -8, -10, -16, -35, 12, 34, 12, 22, 3, -7, -7, 13, 13, -14, -27, 3, -18, -6, -21, -35, -14, -62, -40, -33, -12, -42, -62, -29, -61, -57, -20, -35, -26, -10, 10, -3, -7, -6, 7, 15, -10, 16, -3, -1, 11, 11, -16, 50, 11, 1, -17, -22, -10, -30, -56, -45, -12, -22, -11, -15, -11, 9, -3, -18, -4}, { -10, -12, -10, -11, 2, -10, 17, -16, -7, -14, -8, -3, -12, 2, 5, 2, -4, -14, -5, 3, -16, 6, 4, 10, -17, -12, 6, -15, -12, 5, 13, -14, -1, -18, 18, 16, -16, -8, -21, -35, 2, 11, 31, 12, -19, -18, 21, 19, 26, 1, -11, 6, 0, -17, 15, 2, 1, -13, -11, 18, 2, 7, -30, -8, -21, -22, -25, 13, 20, 4, 2, 0, 3, 10, 19, 17, 20, 9, 6, 26, -9, 8, -12, 13, 13, -8, -2, 10, 3, 23, 10, 20, -13, -39, -38, -37, -10, -4, -4, -9, 11, 27, 13, 28, 12, 13, 23, 9, -12, 1, -26, 8, -6, -14, 13, 10, 30, -2, -21, 1, -13, -14, -17, -33, -13, -11, 1, -6, 1, 18, 12, 2, -15, 7, -9, 14, 24, 13, 41, -32, -12, 18, 9, 21, -3, -6, -3, 16, -17, -12, 5, -26, -19, 10, 15, -20, 11, 19, 1, 28, 35, 19, 6, 0, 8, -10, 15, -25, 6, 14, 26, 11, -4, -9, 5, -36, -23, -23, 9, -6, 6, 18, -10, 25, -5, 10, -5, 7, 46, 2, -15, 11, 23, 33, -13, -4, -6, 8, -7, -6, -20, -7, -13, -32, -27, -4, -5, -3, -12, 3, 7, 26, 0, -4, -14, 11, -9, -20, -13, 24, 8, 26, 61, 3, 14, 8, 13, 19, 10, -4, -2, -1, -15, -2, -26, -17, -1, -14, -4, -15, 10, 17, 6, 2, -8, -20, -3, 2, 40, 57, 29, 7, -18, 16, 15, 16, 16, -10, -8, 10, -27, -21, -35, -25, -37, -11, 8, 10, 14, 19, 21, 31, 3, 16, 15, 31, 35, 67, 31, -4, -18, 14, 33, 65, 19, -3, -1, -22, -12, -39, -12, -48, -8, -12, 10, -13, 5, 20, 8, 28, 39, 16, 39, 55, 49, 49, -3, -24, 5, -8, -13, 45, 62, 18, -2, -47, -45, -31, -25, -38, -2, 26, 12, 24, 18, 0, -8, -3, -4, 2, -3, -21, 28, 20, 45, 7, 6, 23, -20, 46, 16, 5, -17, -3, -27, -17, -29, -18, 2, 30, 43, 2, 7, 17, 5, -34, -47, -53, -20, -48, -13, -38, -3, -17, 2, 10, 15, 64, -7, -11, -21, 3, 9, 22, -24, -1, 24, 15, 28, 6, 13, -12, -18, -26, -65, -78, -83, -61, -45, -10, 16, -18, 5, -6, 44, 80, 39, 35, -12, -16, 33, -12, -6, -27, -2, 34, 11, 15, 5, -18, -36, -44, -36, -84, -106, -66, -39, 2, -9, -25, -6, 18, 45, 28, 53, 45, 8, 13, 7, 20, -20, 12, 9, 41, 42, 15, -8, -31, -22, -31, -24, -37, -77, -38, -38, -20, -1, -2, -9, 11, 5, 9, 63, 9, 3, 15, -13, 1, -33, 9, -7, 40, 23, 21, -21, 1, 30, 22, -16, -46, -37, -62, -42, -42, -20, -12, 9, 1, 12, 28, 31, -8, -9, 3, -4, -2, -34, 3, 1, 2, -4, -2, 7, 22, 46, 40, 2, -4, -32, -48, -16, -15, -11, -39, -28, 24, 11, 4, 13, -10, -14, 20, 1, -12, -14, 18, -2, 20, -5, -8, 30, 37, 17, 31, 11, -29, -71, -63, -55, -23, -3, 4, -9, -24, 4, 0, -25, 9, 3, -11, -7, -25, -20, -20, -16, 20, -14, 20, 12, 40, 24, 23, 5, -59, -63, -53, -43, 8, -1, 15, -8, -13, -13, -3, -5, -9, 7, -9, -7, -20, -15, -4, 6, -8, 14, 26, 14, 32, 33, 21, -7, -11, -69, -53, -41, -15, 14, 7, -10, -7, 4, 6, 2, -11, -12, -7, -25, -7, 0, 2, 16, 3, 6, -11, 17, 11, 24, 9, -5, -35, -60, -46, -13, -39, -10, -6, -10, 18, 5, 33, 37, -17, -12, 10, 9, 0, -12, 24, 23, 29, 26, 28, 23, 27, 8, -8, -29, -27, -41, -37, 0, -15, 14, 12, 15, 18, 30, 25, 37, 23, 5, -11, -5, -5, 8, 30, -6, 9, 17, 20, -1, -20, -7, -9, -25, -50, -38, -33, -6, -1, 13, 15, 2, 14, 14, 31, 7, 18, -10, 25, 34, 37, 14, 13, 40, 17, 10, 20, -11, -9, -52, -48, -40, -38, -16, -37, -13, 5, -7, -12, -2, -6, 14, 10, -29, -12, 0, 9, 6, 34, 25, 11, 14, 10, -35, -22, -31, -46, -59, 7, -43, -19, -2, -22, -4, -9, 2, -18, 18, 0, -14, -17, -10, -22, -31, -30, -27, -23, 9, -17, -34, -31, -77, -34, -16, -15, 6, 11, -18, -4, 0, 10, 3, 6, -4, -11, -15, 7, -14, 17, 18, 4, 7, -5, 19, -19, -20, -42, -10, -19, 4, -3, 3, -11, -33, 0, -14, -3, -8, -19, 14, 13, -2, -12}, { -10, 10, 11, -11, 17, -5, -17, -4, -14, 13, -17, -9, 6, 7, 14, -5, -15, 9, 6, 10, 4, -1, -1, 1, 18, 1, -13, 11, -6, 11, 15, -6, -5, 3, 2, 32, 28, 8, 45, 51, 36, 56, 39, 57, 82, 64, 29, 1, -2, 19, 1, -1, -12, -17, -9, 10, -4, -12, -9, -14, -1, -12, 49, 42, 41, 2, 18, 21, -44, -3, 31, 22, 7, 2, -53, -3, -6, 30, 24, 3, -1, 18, 18, 16, -2, -17, 9, 15, -5, 20, 22, 29, 18, -32, -26, -16, 4, 7, -2, 11, 0, -11, 26, 15, -2, -19, -28, -10, -25, 27, -22, 10, -10, -1, -9, 14, 17, 20, -10, 19, -6, 0, 3, 8, -11, -15, -12, 16, -20, -33, 8, -7, -41, -43, -43, -28, 1, 14, 10, -6, -10, -7, 5, -45, -4, -17, -8, -22, 12, 2, 23, 8, 13, -28, 15, -7, -8, -43, -33, -37, -14, -31, 13, -29, -34, 8, -1, -5, 17, 0, -4, -53, 5, 21, 0, -1, 25, 4, 21, -4, 8, -2, -26, -24, -23, -25, -19, 14, -2, 11, 36, 32, 34, 52, 1, 2, 17, -20, -10, -6, -21, 6, -11, 6, 17, 28, 18, 4, 4, 15, 18, 12, 25, -6, 21, 13, 23, 42, 44, 22, 4, 10, 16, -15, 16, 0, 6, 44, 0, 7, -5, 15, 41, 11, -13, -13, -10, 4, -3, 39, 26, 38, 27, 16, 32, 33, -8, 4, -2, -30, 8, 20, -16, -9, 31, 36, -8, 5, -2, 2, 27, 37, -6, -14, -36, -24, -1, -4, 20, 10, -2, -1, -8, 6, -22, -42, -5, -18, 39, 51, -16, -13, -19, 28, 6, 2, 0, 23, 28, 55, 6, -31, -59, -55, -31, -24, -44, -8, -17, -14, -46, -21, -50, -38, -30, -20, 49, 34, -13, 6, -47, -2, 20, 15, 16, 22, 52, 43, 2, -14, -17, -32, -23, -24, -50, -30, -28, -17, -18, -29, -48, -48, -60, -14, 27, -6, -9, -34, -14, 1, -12, -7, -11, 37, 35, 44, 37, 36, -1, -3, -15, -35, -24, -41, -35, -21, 8, 12, -19, -38, -55, -27, -35, -9, 11, -39, -16, 27, 7, 4, 17, 29, 20, 46, 26, 24, 26, -2, -19, -13, -16, -40, 0, -1, -11, 11, 9, -12, -48, -53, -38, -24, 11, -32, -67, -13, -19, 2, 21, 7, 18, 37, 39, 19, -22, -14, -20, -5, 10, 0, -2, -28, 7, -11, -8, 1, 17, -15, -43, -25, 2, -9, -16, -27, -50, 26, 6, 21, 0, 49, 24, 29, 7, -27, -7, 2, 16, -22, 0, -6, -40, 2, -29, -7, 22, -9, 19, -29, 18, -15, -18, -26, -34, -19, -20, -51, 5, 8, 67, 38, 40, 17, -17, -9, -6, -13, -22, -30, -45, -15, -1, 22, -21, 10, -14, -9, 2, -16, 24, -24, -59, -38, -22, -33, -10, 24, 37, 44, 17, 14, 1, -8, 6, -8, -13, -17, -2, -28, 2, -2, 2, -9, -34, -35, 6, 2, 14, 5, -26, -11, -31, -15, -19, -11, 20, 9, 7, 10, -8, -18, -24, -30, -18, 1, 17, -19, -3, 19, 8, 5, -49, -25, -13, -23, -39, -11, 17, -7, 7, -26, -16, 5, -19, -15, 10, 24, -1, -9, -14, -13, 12, 5, 7, 3, 15, 21, 9, 22, -75, -37, -8, -1, -21, -25, 3, 28, 17, -11, -3, 7, -24, -18, 5, 31, -4, 0, -1, -15, 7, 11, 14, -4, 17, 16, 6, 9, -62, -1, -3, 11, -2, 2, 11, -1, 12, 5, 7, 15, 1, -22, -40, -13, 0, 17, -15, -13, 1, 16, 29, 5, 11, 23, 17, 1, -58, 11, 9, -7, 3, 13, 44, 12, 20, -16, 10, 37, 11, -5, -4, -9, -12, 11, 15, 4, 34, 33, 17, 30, -6, 2, 18, -12, -14, -11, 5, -13, 1, 33, 46, 34, 22, -15, 20, 15, 40, 1, -36, -15, -15, -12, 36, 30, 29, 12, 18, 12, -2, 27, -6, -9, 24, 10, -3, 16, 10, 12, -28, 3, -2, 39, 33, 27, 18, 24, 9, 10, 6, -13, 14, 13, 20, 31, 44, -1, 24, -1, -2, -29, -17, 17, -16, -14, 32, 13, -50, -25, -3, -11, -2, -11, -15, -7, 20, 11, 6, 9, 41, 54, 28, 19, 17, 39, 19, 20, 50, -37, -43, 12, 9, -2, -10, 1, 34, 5, -48, -34, -37, 4, 1, 36, 73, 45, 6, 42, 27, 42, 31, -1, 35, 28, -6, 58, 15, -9, -6, -6, -2, 14, 18, -2, -7, 18, 25, -5, 0, 26, 21, 32, -8, -5, -7, 22, -20, -31, 0, -33, -32, -29, -23, 1, 17, 2, -7, 11}, { 18, -2, 18, -17, 8, 16, -12, 5, 6, -18, 3, 16, 29, 13, -18, 3, 11, -15, -15, -10, -8, -8, 7, -1, -9, 2, -14, 12, -12, 15, 14, -4, 13, -8, 16, -10, 17, 27, -5, 3, 19, 41, 4, 23, 26, 16, 34, 38, 41, -2, 3, 6, -7, -1, 8, -17, 6, -5, -17, 3, 43, 17, -2, 24, -8, -5, 8, 12, -14, -9, 26, 30, 34, 37, 44, 38, 19, 32, 40, 43, -9, -13, -11, -10, 15, 1, -8, 4, 10, 4, -11, -9, -7, -14, -2, 2, -46, 20, 4, -17, 6, -8, 5, 40, 30, 5, -6, 25, 26, 6, 5, -17, 6, 1, -23, 5, 7, -18, -25, -30, 6, 8, 9, -20, -15, -18, -27, -7, -16, 9, -6, 0, 2, 26, 23, 20, 11, 38, 16, 4, 14, 15, -25, -25, -18, -28, -46, -35, 8, 26, 23, -16, -10, -16, -8, 9, 16, 15, 18, 15, 29, 9, 19, 32, -15, -7, 7, -10, -4, 2, 2, -8, -1, -6, -35, -12, 9, -25, -4, -22, 3, -16, 27, 9, 22, 40, 44, 28, 43, -6, 22, 4, 55, 17, 24, 10, -13, -17, 6, 22, -23, -11, -44, -21, -8, -1, -7, -16, 4, -14, 9, 53, 42, 50, 45, 27, 31, 37, 3, 20, 23, -11, 1, -2, -16, -8, -15, 3, -37, -28, -6, -17, -22, 19, 4, -8, 7, 21, 23, 17, 11, -12, 6, 3, 16, -14, -24, -37, -5, -37, -3, -15, -15, 12, 0, -19, -34, -26, -14, -4, 1, -7, 10, 8, 29, -1, 10, -40, -42, -52, -84, -62, -83, -73, -73, -54, -40, -37, -30, -4, 13, 0, -6, -38, 1, -22, -7, 1, -7, 10, 4, 3, 30, -15, -39, -29, -69, -93, -75, -80, -63, -82, -81, -63, -74, -37, 18, 16, 10, -4, -1, -32, -29, -34, 5, -21, -5, -15, -4, 22, -6, 15, -32, -1, -11, -26, -8, -38, -46, -66, -64, -47, -45, -36, -20, -5, -5, -19, -18, 21, -12, -13, -6, -13, 5, 14, 21, 0, -1, 9, -25, 4, 1, 9, 29, -18, -39, -35, -13, 0, -7, -46, 0, -10, -14, 9, -9, 22, -16, -22, -34, 15, -34, -19, 5, -9, 25, -21, 4, -15, -15, 15, 16, 17, 6, -21, -11, -1, -17, -19, -30, -21, 9, -9, -28, -18, -23, -39, -14, -18, -4, -9, 21, 19, 18, -10, -6, 13, 11, -16, 26, 15, 42, -16, -23, -2, 3, -6, -48, -21, 3, 16, -16, -29, -16, -1, -2, 13, 9, -1, -2, 9, -8, -18, -1, -22, -2, -4, -3, 34, 17, 14, -6, 2, 21, -3, -57, 3, -6, -7, -35, 22, 21, 6, -18, 1, 5, -5, 23, 16, 25, 7, 8, -35, -11, -14, -6, 16, 19, -11, -11, 4, 6, 27, -36, -14, -9, 10, -20, 16, 4, 19, -10, 17, -6, -24, 18, 0, 16, -1, -12, -26, -8, -14, -1, 17, 26, 16, -2, -17, 26, 16, -14, -34, 15, -4, -23, 27, 7, 24, -3, 27, -13, 10, -2, -10, -7, 1, -18, -24, -6, 14, 8, 23, 7, 25, -14, -6, -8, 11, -9, -31, 2, 11, 9, 0, 21, 20, 7, -13, -14, -15, 18, 21, 6, -3, -13, -12, 3, 3, 4, -12, -5, 32, 3, 5, 25, -2, -38, -15, -1, 17, -2, -16, 25, 38, -26, -10, 2, 3, -3, 20, -7, 9, 13, 7, 6, -5, -14, 2, 24, 14, 9, 1, 20, 33, -3, -7, 9, -4, -5, 11, 18, 16, -21, 15, 13, -20, 21, 2, -1, 24, -9, 34, 20, 19, 26, 16, 26, 21, 15, -11, 0, 6, -21, 1, 15, -15, -8, 20, 23, 5, -16, -5, 12, -18, -20, 22, 16, -9, -3, 1, 2, -11, -18, 5, -12, -16, -44, -11, -16, -2, 9, 13, -13, -3, -2, 47, 30, 23, -6, -22, 10, -9, 22, 1, 5, -14, 3, 1, 12, -1, -3, 4, 9, -18, -13, 18, 19, 28, 8, 0, -18, -6, -9, 22, 40, 35, 2, 20, -22, -4, 28, 2, 25, 18, 15, -2, 0, -7, -1, -23, 42, 8, 17, 4, -22, -5, 6, -13, 1, -3, 17, 10, -18, 10, -11, -22, -18, 3, -12, 16, 41, 59, -1, 19, -15, 2, -19, 22, 27, 17, 47, -1, 0, -15, -14, 3, 1, -8, -14, 1, -11, 5, 4, 1, -33, -36, 13, 43, 12, 55, 34, 32, 18, 4, -27, 17, 26, 1, 32, 2, 1, -3, 5, 12, -11, 5, 17, 9, 4, 12, 17, 16, -2, 11, 8, -13, -3, -22, 14, -6, -3, -16, -6, -13, -30, -17, -35, -18, 15, 9, -7, -17}, { -12, 16, -11, 3, 16, -8, 7, -3, 10, -5, 16, 10, -14, -15, 4, -1, 8, 9, -15, 13, 17, 15, 15, -10, 15, 6, -1, -14, -10, 11, 17, -2, 0, 5, -3, -26, -33, -4, -10, -4, -45, -31, 0, -11, -29, -30, -21, -17, -10, -18, -5, -19, 13, 5, -1, -15, -2, -3, 17, -8, -29, -25, -9, -18, 5, 12, -6, -31, -7, -6, -24, -4, -28, 5, 10, -13, -27, -27, -33, -41, -16, -10, -7, 3, -18, 7, 6, -16, -33, -10, -30, -42, -22, -19, 10, -11, -20, -20, -42, -15, -33, -19, -10, -6, -15, 28, 7, 25, -26, -14, -13, -4, 1, 14, -14, -30, -17, -23, -19, -25, -25, 16, 4, -7, -7, -18, -13, -11, 18, 21, -11, -7, 5, 12, 34, 31, 51, 35, 2, -16, 7, 1, -5, -20, -24, -39, -15, 4, -1, -12, 5, -2, 2, 15, 10, 12, 15, 26, 10, 5, 2, 29, 26, 3, 34, 49, 30, -20, -7, 9, -9, -28, -15, -36, -11, 12, 8, 9, 9, -7, 6, -7, 7, -2, -6, 15, -13, 17, 7, -11, 1, 29, 35, 54, 14, -7, 16, -31, -27, 12, 19, 9, -5, 2, 14, 27, -2, -6, 9, 5, -13, 28, -3, -11, -18, -22, 9, -10, -3, 18, 20, 38, 34, 15, -16, -32, 17, 35, 25, 3, 2, 18, -8, 22, 14, -5, 15, 4, -12, 3, -10, -27, -18, -2, 14, 1, 0, 1, 21, 35, 44, 6, -20, -41, 7, -1, -22, 4, 3, 12, 16, 13, 5, 31, -1, 10, -15, -6, 5, -10, -7, 0, -1, -3, -8, 1, 25, 24, 12, -33, 10, -40, -30, -20, 13, 22, 22, -1, -11, 24, 27, 11, 9, 7, -3, -20, -6, -8, 10, 18, 5, -12, -17, 9, 12, -16, 14, -10, 15, -10, -45, -22, -5, 1, 12, -3, 21, 23, -9, 8, 27, 9, 17, 17, 4, -2, 13, 3, -4, -8, -17, 0, -7, 30, 58, -17, -18, -6, 2, 15, 13, 7, 9, -5, 4, -10, -8, 11, 6, -2, 17, 16, -8, 0, -12, 4, 0, 6, -18, 1, 20, -6, -7, -41, -9, 2, -12, 12, -6, 9, 4, 16, -17, -12, -17, -11, 25, 15, 27, 13, 27, -3, -4, 1, -2, -6, -3, 2, -18, -14, 13, 33, 16, 6, -19, -22, 12, 0, 7, 16, 9, -30, -11, 9, 13, 19, 11, -9, 4, 23, -16, -7, -10, -16, -5, -19, -11, 11, 5, 15, 15, -15, -29, 14, 16, -18, 21, 9, 28, -13, 5, -13, 2, 17, 19, -5, 17, 7, 10, -20, 1, -21, -14, -8, -23, 4, 13, 17, 4, -23, 6, 13, -16, -25, 13, -12, 7, -2, 17, 11, 5, 20, 13, -4, 1, 0, -5, -3, 7, -4, -27, 6, -16, 26, 15, 3, -3, -18, -6, -1, 7, -16, 2, 18, -13, 1, 10, 20, 16, 19, 22, 10, 17, 14, 5, -1, -8, 14, 0, -15, 8, -19, -18, 0, 5, 0, -10, 31, 18, 25, 14, 4, -6, 19, 1, -2, -3, -12, 27, -11, 9, 10, 6, -10, 10, 9, -5, -18, -4, 8, -8, 4, -5, -28, -22, 15, -16, -10, -4, -22, -4, 5, -19, -3, -13, 8, -6, 15, 14, 7, -2, 1, 15, 12, -15, -2, 32, 16, 0, -3, -3, -24, 9, 5, -2, 1, 6, 6, 7, -17, 7, -23, -16, -11, 1, 9, -7, -3, -10, 26, 24, 16, -1, 35, 34, -3, -24, -11, 11, -11, -14, -2, -19, -2, 15, -2, -7, -15, 1, 9, -1, 8, 17, 10, 0, 19, 2, 4, 20, 20, 18, 35, 37, -4, -39, -19, -2, 12, -7, 9, -6, -8, 0, -5, -25, -1, 7, 31, 8, 12, -6, 19, -4, -15, 7, -3, -9, 20, 26, 38, 58, -4, -44, -14, 4, -2, 7, 11, -5, -23, -34, -24, -6, -4, 5, 26, 34, 24, 27, -10, 13, -7, 15, 6, 20, 23, 63, 42, 11, 6, 1, 1, -7, 15, 2, -1, -35, -42, -18, 1, -1, -2, 2, -1, 45, 6, 11, 10, 14, -5, 20, 4, 8, 16, 7, 13, 13, -10, 5, -8, -10, -5, 40, -7, -48, -32, -18, -17, -30, 5, 9, 3, -22, 5, 8, 29, 8, 36, 0, 2, 33, 16, 4, 10, -13, -19, 5, 13, -16, -12, -6, 24, 12, 1, 4, -20, -27, 1, -22, 3, 6, -30, -6, -6, 1, 6, 17, -45, -21, 18, -27, -7, 0, -7, 5, -16, 8, 16, 10, -4, -22, -10, -24, -7, 2, -6, -53, -9, -7, -4, -18, 13, -24, -47, -31, -30, 10, -10, -5, -37, -9, 9, -9, 4}, { -16, -13, 13, 14, 7, -10, -3, -4, -8, 8, -18, -2, 5, -16, -2, 17, -14, 17, -7, 14, 14, 15, -8, 19, -5, 17, -18, 13, 0, 6, -13, 6, -3, -9, -14, 10, -16, -2, 7, 13, -4, -1, 1, -26, -8, -25, 14, 10, 16, 11, 1, 14, -4, -12, -13, -17, 12, 5, -3, -20, -11, 3, -21, -11, 4, -11, -16, -7, -10, -28, -50, -36, -24, -22, -7, -8, -1, 5, 9, -12, -8, -15, 15, 11, 12, 9, 6, -27, -29, 0, -4, -21, -42, -49, -3, 13, -31, -25, -5, -18, -42, -6, -9, -11, -16, 32, 16, 8, -41, -17, -5, -1, -17, -10, -12, -18, 13, -16, -19, -33, -40, -26, -40, -36, -3, -3, -28, -20, 8, 10, 16, 7, 12, 30, 14, 28, 51, 2, 3, 14, 12, 9, 0, -10, -20, -28, -43, -22, -24, 8, -4, -3, 0, -10, 15, 9, -20, 8, -3, 1, 9, 3, -15, 20, 61, 2, 39, 19, -13, -1, -1, -24, -5, 6, -5, -19, -17, -19, -19, -10, 5, 26, -2, 13, 9, 16, -18, -1, 15, -11, 11, -11, 13, 9, 0, -3, 11, -14, -7, 11, -9, -12, -33, -14, -21, -18, -5, 2, -16, 26, 4, 15, 1, -15, -5, 1, -5, -8, -9, 7, -3, 18, 14, 3, -16, -17, 2, 20, 8, 14, -16, 5, -21, 5, -22, -10, -5, 18, -6, 12, 1, -8, -9, -16, -27, 25, 0, -2, 26, 77, 13, -9, 7, -8, 17, -31, -30, -25, -11, -16, -1, -16, -12, 13, -14, 3, -2, 1, -33, -8, -5, 24, -3, -10, 11, 9, 58, 38, -7, -50, 4, -33, 0, -13, -26, -29, -12, 2, -1, 3, -14, 15, 3, 15, 4, -19, -17, -30, 22, 13, 12, 18, 8, 18, 29, 1, -28, -42, 9, 3, 7, -39, -7, 0, 1, -32, -24, 12, -2, -1, 17, 15, -19, -18, -8, 8, -2, 0, 1, -5, 20, 17, 37, 25, 26, -21, 3, 9, -17, -16, -35, -11, -33, -15, -10, -13, 11, 35, 24, 4, 2, -20, 1, -7, 6, 15, 10, 21, -3, 45, 32, -37, -24, -25, -13, -11, -31, -5, -7, -29, -26, 2, 13, 12, 20, 15, 22, 18, -15, 1, -10, -1, -2, 3, 20, -25, -4, -10, -8, 9, -17, 7, -1, -1, -29, 0, -18, -37, -30, -25, 22, 13, 26, 8, 19, 0, 13, 8, 11, 1, -26, 2, 13, -27, -17, -27, -25, -3, -12, 7, -2, 15, -19, 1, -11, -18, 14, -9, 14, -18, 2, -12, 13, -2, -14, -7, 5, 12, -10, 1, -28, -13, -2, 4, -31, -24, -34, -20, -25, -15, -6, 9, -20, 21, -11, -21, -13, -9, -11, -12, 15, 15, -13, 17, 19, 16, 4, -23, -14, -41, -24, -4, 0, -30, -14, -5, -10, -13, -8, -13, -16, -8, 10, 21, 6, 27, -1, 12, -3, 21, 3, -12, 9, 19, -15, -3, -20, -45, -26, -8, -35, -37, -20, 2, -5, -19, 5, -8, -10, -16, -21, -19, 14, 13, 14, 12, 21, 11, 26, 11, 16, 20, -2, -17, -23, -18, -31, 2, -15, -42, -23, -33, -16, 14, -6, 3, -51, -10, -25, -6, -3, 4, 23, 13, 21, 2, -3, -1, 1, 26, -9, -1, -18, -34, -38, -14, -14, 1, 4, -31, -14, 11, 22, -28, -21, -35, -35, -24, -23, -20, -7, -16, 1, -5, 8, 4, -1, 10, 10, 0, -7, -28, -30, -14, -21, -5, 5, -16, -4, -4, 26, -21, -45, -44, 0, -27, -8, -22, -30, -17, -23, 1, 9, -16, 3, -4, 6, -24, -7, -15, -26, -29, -15, -6, -52, -2, 8, -9, -12, -23, -49, -21, -20, -2, -27, -2, 10, 1, 10, 26, 23, 2, -9, -9, -21, 7, -23, -12, -34, -25, -13, -10, -42, -2, -18, 0, -14, -18, -24, -31, -26, 21, -1, 2, 6, 5, 4, 12, 22, 6, 0, -5, -20, -9, -26, -3, 15, 15, -12, 4, -24, 5, 5, 15, -14, 13, -6, -5, -15, 32, 33, 16, -6, -2, -6, 2, -8, 12, 35, 1, 16, -16, -15, -14, 7, 6, 7, -31, 3, -17, -9, -8, 36, 9, -7, -22, -3, -13, -14, -14, 22, 4, 1, -5, -8, 3, -9, 0, -10, -2, 8, -1, -2, 35, -10, -16, 4, -12, -18, 8, 17, -1, 34, 35, -11, 8, -2, 11, 19, 16, 21, -5, 4, 3, 20, 23, 4, -21, -12, -1, 14, 3, 15, -27, -13, -8, 11, 6, -5, -4, -10, -6, -12, -7, 2, -22, -26, 12, -1, -8, -6, 21, -21, -24, 26, 17, -16, -6, -5, -21, 4, 10, -11, -18}, { -13, -10, -5, 9, 17, -12, 12, -6, -12, -10, 16, 3, 23, 28, -2, -14, -3, -10, -18, -13, 18, -2, 6, -12, -1, -7, 7, 14, 11, 16, -18, 13, -7, 1, -9, 7, 11, -7, 8, 4, 23, 33, -9, 33, 30, 33, 21, 4, 21, 2, -6, 3, 10, 6, -2, -10, -11, 4, 19, 11, 26, 4, -5, 3, -25, -39, -26, -24, -1, -24, -6, -10, 15, -2, -8, -20, -3, 4, 8, 34, -4, -12, -16, 1, 6, -3, -8, 35, 26, 3, -4, -19, 6, 22, 19, 10, 3, 34, -3, -10, -27, -36, -15, -25, 10, 34, 7, 16, -14, -19, -15, 18, -11, 0, -1, 28, 8, -28, -28, 5, -4, 1, 16, 10, 5, 31, 15, -21, -32, 6, 10, 5, 18, 13, -13, 7, -5, -2, 27, 15, 5, 10, -19, -12, -13, -15, -10, -8, 2, -7, 6, 21, 9, 19, 2, -16, -17, -15, 15, 17, -14, -19, 9, 4, -4, -19, 30, 31, -2, -3, -2, -18, -7, 7, 5, -11, 18, -10, 7, 16, 26, 3, 13, 8, 4, 17, 3, -2, 3, 21, 22, 1, 22, -8, 0, -17, 9, -33, 11, -32, -23, -9, -35, 9, 14, 16, -10, 24, 20, 29, 6, 4, 29, -7, 24, 0, -10, -9, 5, 23, 22, 0, 5, -32, 10, -11, 3, 4, -38, -38, -29, -21, 12, -3, 11, 12, 11, 23, 7, 6, 24, 11, 27, -7, 1, 7, 7, -17, 30, 8, -6, 6, 12, 18, -20, -15, -6, -33, 5, -2, 10, 11, 28, 11, -13, 8, 18, -13, -16, 2, 0, 2, 16, -18, -3, 21, 4, 21, -15, 2, 10, -23, 11, -8, 5, -7, -9, 20, 0, 18, 8, 24, 6, 34, 31, 3, 13, 3, 18, 20, 11, 0, 16, 24, -4, 17, -3, -19, -16, -27, 0, -7, -2, -29, -25, 2, -15, -1, 19, 2, 10, 4, 21, -7, -15, 3, -5, -10, -14, -5, -11, 13, 22, 19, 32, -17, -16, -5, 9, 8, -17, -35, -4, -4, -19, 7, 14, 2, 13, -6, 15, 4, -16, -1, -16, 9, -19, -19, -10, 4, -4, -33, 11, -27, -10, 11, -1, 11, -1, -23, 4, 11, 18, 18, 1, -3, 6, 13, -5, 16, -16, -12, 14, 18, -6, 3, -6, -20, -13, 3, -15, -4, -9, 6, 23, -16, -3, 19, 15, 20, 15, 12, 19, 8, -6, 12, 0, -16, -33, -25, 19, -15, 21, 13, -8, -6, 17, -30, -17, -7, 1, 7, -34, -26, 0, 32, 20, 16, -2, 0, 3, -7, 13, -24, -14, -8, 1, 10, 5, -10, -2, 8, -19, 20, 24, -22, -24, -33, -6, 16, -17, 8, -7, 31, 24, 21, 14, -7, -3, 5, 13, -2, 0, -30, -34, -25, 2, -20, 3, -16, 9, 4, 2, -33, -48, -14, -8, 16, -4, 21, 9, 17, 22, 17, -17, 6, 19, -10, 15, -11, -15, -17, -18, 16, -23, -2, 11, -30, 4, 20, 11, -29, -9, 11, 21, -2, 15, -27, -15, -9, -13, 21, -5, 1, 19, 21, -6, -20, 1, 1, 16, 4, 3, 3, 28, -1, 9, -8, -17, -40, -20, -12, 11, 5, 7, 12, -9, -16, 11, -14, 4, -11, 17, 0, 30, -6, -9, -3, 1, 3, -1, 12, 15, -10, -21, -9, -16, -3, 1, -9, -7, 5, -13, -8, -10, -9, -20, -1, -5, -9, -4, 1, 33, 33, -4, -21, -7, 10, -17, -1, 4, -3, -6, -25, -20, -2, -26, 1, 13, 2, -1, -10, -22, -5, -9, -23, -18, 5, 4, 2, 23, -1, 0, 2, -21, -5, -7, -18, -2, -6, -8, -39, -37, -8, 20, -17, -20, -9, -30, 0, -17, -23, -12, 2, -29, -21, -23, -11, 33, 19, 24, 13, 14, 4, -13, -14, -15, -1, -4, -10, -9, -4, 11, -3, 0, -16, 14, 38, -3, 1, -15, -18, 11, 1, 6, -2, -2, 19, 24, 22, 12, 35, 6, -23, -8, -34, 9, 22, -4, -8, -14, 15, -5, 13, -8, 44, 21, 7, 1, -17, 15, -1, 0, -17, 20, 3, 6, 6, 23, 9, -13, 7, 5, -6, -3, -6, -18, -9, 6, -19, -4, -7, 37, 25, -9, 6, -9, 8, -5, 1, 24, 16, -21, 12, -29, -15, -12, -4, 14, 20, 4, 4, 28, 21, 35, 11, -10, 3, -9, -7, 1, -1, 49, 40, 19, -34, -25, 20, 27, 54, 35, -13, 2, -8, 16, 32, 14, 27, 11, 6, 25, 19, -11, 15, 10, 10, 18, -12, 0, 15, 16, -2, -3, -5, 16, -3, -15, -11, 2, 16, 1, 26, -18, -32, 38, 22, -15, -9, -2, -23, 15, 7, 9, 14}, { -17, -3, -3, 3, -17, -18, 14, -6, -9, -11, 7, 9, -30, 9, 12, 19, -6, -17, 8, 8, -16, 3, 7, -9, 18, -11, 5, -16, 3, -16, -15, -2, -18, -13, -2, 3, -34, 1, -1, -24, -19, -33, -56, -34, 21, -6, -30, -31, -10, -7, -32, -9, -14, 17, -9, 2, 0, 8, 12, -12, 5, -4, -7, -18, -23, 11, -3, 4, 6, 12, 1, 30, 30, 50, 13, 9, 11, -12, -12, -22, -18, -20, -15, 10, -15, -17, 10, -9, 0, -22, -46, -16, -15, -8, -33, 9, 1, 12, 31, 9, 42, 38, 8, 23, 28, 34, 7, 21, 18, 43, 17, -17, -5, -2, -25, -5, -18, -3, -12, -22, -31, -6, -8, -8, 15, 9, 23, 11, 23, 9, -8, 6, -20, 21, 20, 53, 44, 18, 14, -15, -4, -4, -11, -26, -10, 22, 10, -18, -20, -40, -30, -20, -2, 0, 11, 27, 33, 19, 13, -8, -11, 25, 7, 30, 12, 22, 10, -1, -12, 18, -6, -15, -21, 7, 9, -21, -26, -8, -45, -54, -40, -21, 22, 18, 3, -21, -5, -28, -30, -30, 3, 14, -31, 0, -2, -10, 15, 32, 5, 20, 19, -17, 9, 4, -22, -22, -22, -6, -37, -18, 7, 13, -6, 3, 0, -34, -25, -9, -22, -30, 7, 59, 31, -11, 16, 13, -15, 11, 23, -25, -20, 11, -16, -31, -11, -18, -56, -13, -19, 15, -1, -27, -23, -9, 7, -20, -34, 4, 31, -16, -1, -12, 12, 23, -15, 34, -11, -25, -22, -21, -24, -23, -24, -35, -40, -48, -21, -23, -12, -33, -18, -15, 7, 2, 33, 12, 17, -8, 4, -27, 9, 1, 1, 18, 2, -17, -8, -2, 20, -26, -4, -47, -33, -48, -19, -16, -21, -26, 18, 11, 10, 6, 36, 7, -21, -16, 25, -21, -18, 8, -5, -5, -12, 20, 13, 26, 10, 13, -16, -9, -30, -23, 24, 13, 9, -30, -8, 14, -1, 0, 17, 9, -21, 42, 26, 19, 12, 2, -11, 26, -40, 1, 6, 15, 12, -4, 40, 35, 45, 14, 0, 4, -3, -17, 7, 18, -5, -1, 29, -16, 29, 40, 11, 31, -25, -16, 23, 8, -35, -3, 11, -4, 10, 26, 47, 52, 47, 39, 8, 17, -4, -4, -6, 10, 13, 24, 11, -3, 14, 46, 31, 42, -1, -3, 30, 26, 3, 17, -4, 20, 31, 21, 29, 26, 52, 14, 12, -10, 23, 11, 9, 2, -13, -3, 11, 24, 7, 22, 44, 22, 21, -11, 21, 46, -17, 5, 18, 10, 28, 37, 13, 3, 32, 16, 23, 41, 1, 33, 6, 16, 3, 2, 8, 22, 23, 2, 25, 15, 3, -14, -13, 6, 12, -1, 14, 42, 47, 40, 8, 5, -21, 26, 30, 50, 37, 16, 16, 25, 16, 32, 3, -6, 5, 14, 49, 34, -10, 8, -1, -11, 44, 19, 52, 12, 46, 25, -17, -29, 7, -3, 21, 21, 18, 29, 18, 15, 33, 44, 1, -2, 4, 14, 8, -4, -1, -6, -11, 3, 31, 44, 24, 19, 14, 2, -35, -20, -6, -2, 9, 13, 13, -5, -3, -2, 25, 11, 13, -4, 6, -21, -2, 22, 1, -35, 5, -7, 21, 66, 27, 25, 26, -33, -56, -39, -47, -49, -23, -11, -20, 9, 11, -6, -17, 17, 28, 31, -15, -30, -9, -5, -4, -34, -4, -22, 15, 28, -6, 6, 5, -34, -51, -26, -36, -34, -61, -7, 0, 7, 6, -35, -12, 4, 22, -14, -14, -45, -2, 11, -19, -17, -7, -22, 18, 26, 15, 27, 25, 12, 6, -29, -35, -47, -35, -15, -11, -7, -17, -29, 1, -6, -2, 1, -18, -55, 30, 3, -4, 7, -20, -14, -10, 18, -7, 15, 27, 20, 11, 5, 19, -4, -31, -5, -26, -12, -12, 26, -3, 3, -33, -33, 0, -29, 1, 11, 15, 15, -8, 13, -4, -5, 3, 13, -4, -1, 0, 10, -19, -15, 3, -16, -21, -14, -7, -18, -24, 5, -35, -40, -35, -37, 1, 7, 1, -4, -10, -44, -59, -37, -6, -23, 14, -13, -24, -33, -6, -21, -22, -7, -5, -8, -22, -9, -22, -21, -39, -67, -12, -9, -15, 0, 14, -8, -10, -14, -28, -55, -28, -34, -48, -42, -37, -15, -44, -14, -15, 1, -33, -34, 0, -38, -41, -47, -33, -27, -6, -17, -4, -18, 17, 6, -6, 10, -49, -45, -78, -74, -66, -23, -47, -41, -48, -9, -31, -10, -36, -33, -37, -43, -64, -19, 18, -30, -3, -16, 18, 10, -15, 9, -18, 18, -3, -11, -14, -20, 0, -23, -47, -46, -35, -35, -32, -32, 15, -11, -23, -6, 10, 25, 53, 17, -8, 3, -7, 3} };
_ssdm_SpecConstant(l1_weights);
# 185 "pipelined_mlp.cpp"

    const int8_t l1_biases[128] = { 64, 70, -47, 102, 97, 127, 0, 0, 16, 70, -47, 102, 97, 127, 0, 0, -32, 69, -47, 102, 97, 127, 0, 0, -80, 69, -47, 102, 97, 127, 0, 0, -128, 69, -47, 102, 97, 127, 0, 0, 80, 69, -47, 102, 97, 127, 0, 0, 32, 69, -47, 102, 97, 127, 0, 0, -16, 68, -47, 102, 97, 127, 0, 0, -64, 68, -47, 102, 97, 127, 0, 0, -112, 68, -47, 102, 97, 127, 0, 0, 96, 68, -47, 102, 97, 127, 0, 0, 48, 68, -47, 102, 97, 127, 0, 0, 0, 68, -47, 102, 97, 127, 0, 0, -48, 67, -47, 102, 97, 127, 0, 0, -96, 67, -47, 102, 97, 127, 0, 0, 112, 67, -47, 102, 97, 127, 0, 0 };
_ssdm_SpecConstant(l1_biases);
# 186 "pipelined_mlp.cpp"

#pragma HLS RESOURCE variable=&l1_weights core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=&l1_biases core=RAM_2P_BRAM
#pragma HLS ARRAY_PARTITION variable=&l1_weights factor=128 cyclic dim=1
#pragma HLS ARRAY_PARTITION variable=&l1_biases factor=128 cyclic dim=1

 const int8_t l2_weights[64][128] = { { -55, 16, 30, 41, 17, 2, 58, 36, 30, 49, 44, -71, 67, -3, 1, -47, -41, -6, 2, 13, -4, 93, 30, 6, -2, 3, -35, -1, 51, 51, -22, 34, -22, -25, -28, -29, -11, -1, -13, 5, 3, 0, -4, 1, -19, -29, -19, 13, 23, -16, 75, -10, -12, -48, -34, 50, 0, 35, 0, 9, 76, 31, 104, 1, -38, 23, -8, 19, 38, -22, 37, -4, 21, 27, -26, 11, 9, 40, -10, -8, -38, 27, 8, -25, -14, 12, 47, 17, -17, -13, 29, -9, -25, 40, -24, -20, -7, -17, 2, -8, 27, 50, 16, 17, 21, -15, -16, 12, 41, -13, 25, 42, -2, -6, -23, 1, 25, 0, -16, -29, -14, 35, -12, 33, 6, -23, -13, -21}, { -58, 50, -72, 46, -1, 33, -25, 39, 40, 28, 45, -43, 14, 25, 6, -34, 28, -4, 12, 14, 48, 38, 45, 1, -13, -29, 3, -69, 73, 11, 81, 24, 26, 11, -22, 33, -11, -68, 33, -48, 42, 41, -33, 1, 44, 43, 8, -62, 35, 25, 97, -7, 17, 7, -25, -17, -3, 32, 53, 10, 9, 41, 70, 60, -37, -20, 51, -27, 79, -51, -8, 28, 20, -47, 48, 3, 8, 1, 19, 37, -18, 38, -10, -22, 70, -12, 32, -16, 11, -74, -29, 15, 23, 14, -34, -42, 9, 2, -30, -15, 52, 28, -5, 34, 21, 50, -28, 2, -51, 14, -25, 3, -14, -35, -14, -39, 24, 47, 15, 2, -43, 32, 22, -29, 30, -10, 15, -4}, { 101, -11, -32, -42, 45, -2, -2, -38, 29, 61, -34, -63, -23, 24, 1, -47, -22, -45, 13, 25, 10, -65, -5, 12, 33, 20, -22, -13, 57, -20, -21, 2, 46, 52, 72, 29, 44, -51, 20, -11, 4, 45, 50, 27, -2, 23, -2, 60, 22, 19, -26, 51, 14, 19, 33, -32, -21, 21, 48, -30, 51, 12, -23, -4, 77, -26, -20, 15, -47, 52, 15, -41, 14, 6, 51, 31, 0, 16, 43, 5, 2, 0, 25, 71, -26, 55, 34, -39, 9, 10, 21, -19, 30, 16, 37, -3, 2, 12, -17, 48, -30, -85, -45, -10, 52, 3, 21, 26, -16, -43, 9, 0, -9, -38, 9, -15, 43, -17, 9, 27, -39, -60, -82, -76, -2, 23, 15, 39}, { -18, 29, 6, 3, 0, 54, -1, -25, -10, -6, -19, 21, 33, -2, 20, 59, 37, 28, 51, 26, 26, 18, 4, -28, 41, 27, -20, -23, -31, 32, -76, 5, 21, 50, -14, 13, -66, 33, 40, 4, -4, -35, 17, -3, 37, -33, -52, 31, 6, 2, -25, -37, -19, -41, 21, -5, 29, 4, -30, 53, -35, 9, -56, -5, 39, 9, -26, -30, 4, 64, -47, 37, -16, 4, -2, 27, 30, -12, -13, 88, -73, 24, 10, -22, 10, -53, -32, 13, -51, 25, -19, -53, -1, 43, 48, -22, 13, 18, -31, -18, 21, 14, 45, -29, -36, 20, 26, -21, 7, -12, 15, 20, 10, -31, 38, -25, -23, 0, 4, 19, 10, 75, 30, 70, 10, 42, 29, -18}, { -6, 9, -57, 7, 80, 46, -6, -25, 7, -11, 14, 8, -78, 22, -6, 3, 48, 50, -100, 52, 3, -47, 37, 3, -88, 41, -18, -24, -26, -11, 48, 31, -7, -4, 54, 39, 44, 19, 46, -39, 12, 42, 58, 27, 26, -8, 14, -65, 31, 96, 35, 58, 3, 26, -38, -35, 28, 29, -84, 9, -19, -13, -55, -18, -4, -13, -9, 49, -12, 30, 8, -1, -14, -18, 42, 13, 3, -10, -29, -18, 49, -14, 1, 24, -4, 63, -7, -51, 28, -70, -10, -7, 34, -13, -12, 33, 23, -10, 1, 26, 3, -20, 2, -10, 47, -2, 2, -2, -28, 17, 10, -9, 33, -4, -26, 33, 10, 11, 21, 37, -30, -48, -45, -18, -10, -24, -15, -76}, { 16, -26, -62, 37, 55, 12, 60, 21, 2, 4, 24, 22, -60, 15, -34, -31, 1, -10, -63, 23, -25, -44, -26, 17, -61, 47, -29, 2, -9, -58, -14, 5, -46, 10, -5, 19, 44, -27, 38, 21, 8, 38, 15, 24, -20, 39, 38, -73, -21, 99, 39, 12, -30, 37, 30, 27, 14, 29, -78, 18, -27, 11, -15, 60, -15, 36, 22, 25, -69, 54, 48, -7, -10, 30, 29, 39, 12, 0, -7, -27, 50, 5, 8, 26, -6, 62, -29, -7, 20, -13, -53, 22, -11, 19, 32, 33, -37, -33, 15, 14, -14, -56, -8, -29, 16, 9, 11, -41, 12, 11, 52, -33, 11, 41, 26, 42, 0, 39, 25, 10, -45, -68, -39, 16, 30, 22, 33, -11}, { -40, -30, 10, 8, 52, 45, 12, 16, 8, -20, -20, -17, -4, -16, -7, 7, 24, 6, -27, -21, 23, 22, -39, -22, 28, 42, -3, 65, -52, 33, -50, 7, 24, 18, -42, 18, -17, 36, 7, 26, 29, -15, -18, 30, -8, -3, -4, -31, -36, -10, -7, -31, -14, 16, 21, 37, 25, -6, -26, 24, 18, 8, -12, -32, -16, -8, -41, 36, -9, 53, -5, 8, 4, 38, -62, -27, 10, -21, 31, -27, 13, -33, -10, 3, -2, -10, 10, 42, -14, 49, 37, 31, -7, 31, 44, 31, 24, 47, 49, -28, -10, 54, 24, -37, -61, -14, 17, -7, 62, 30, 33, 33, -2, 40, -10, 45, 3, 1, 45, 21, 33, -7, -29, 9, -24, 26, 8, 25}, { 22, -3, 81, -35, -28, 38, 16, 10, -4, 45, 26, -10, 4, -56, -26, -30, 5, -13, -34, -3, -27, 5, -29, -19, -73, 42, -72, -19, 41, 41, -48, 19, 14, -1, -26, -43, -30, 39, -19, -50, -54, -19, 12, -4, -11, -21, 10, 80, -67, -25, -19, 70, 40, -14, -30, 69, -80, -4, -39, 38, 31, 32, 29, 48, 24, 2, -43, 13, 22, -13, 5, -9, 19, 71, 16, 3, -23, -14, 18, 30, -6, -11, -13, 27, -16, -8, -39, 19, -42, 21, -24, 10, 6, -61, -63, -15, 36, 24, 48, 20, 17, 85, -35, -9, 12, -4, -59, 18, -10, 14, -75, -28, 26, -18, 8, 23, 34, 10, -39, 11, -33, -65, 21, -24, -9, -17, 20, -22}, { -41, 19, -6, 37, 21, -8, 38, 36, -29, 2, 11, 95, -15, -31, -11, 1, -29, 56, 19, 37, -34, -27, -13, -32, -26, 44, 16, 11, -69, -3, 50, -41, -46, 35, -64, 35, 10, 21, 12, 21, -20, 41, -22, 9, 47, -12, -19, 11, -39, 45, -24, -21, -18, -5, -6, -36, -20, -42, -78, 33, -24, -17, -38, -48, 26, -27, -22, -5, -32, -54, -48, 48, 13, 17, -8, 37, 16, 34, -40, 52, -6, -16, -19, 11, -19, -20, 31, 4, -3, 14, -22, -52, 39, -33, 34, -25, 31, 39, 13, 5, 41, 15, 11, 20, -28, 38, -22, -18, 19, 37, -3, 1, 38, -18, 46, 23, 10, 47, 32, 4, 2, -45, 39, 25, -25, 0, 47, -82}, { -2, 3, 5, -20, -16, -25, 46, 39, -4, -2, 18, 3, -31, -68, 3, 22, 40, 17, -15, 16, -14, 7, 17, -48, -19, 75, 28, -10, -25, 13, 17, 1, 7, 40, -9, 13, -2, -17, -31, 6, -15, -7, -26, -2, -18, -2, 8, 22, -11, 35, -58, 8, 24, 21, 14, 28, 26, 7, -58, 38, 41, -23, -13, 4, 78, -31, 36, 16, -41, 40, -12, 29, 13, -21, 25, 13, 25, 5, 9, 32, 65, 1, 9, -30, -55, -21, 27, -34, -38, -28, 6, -63, 28, 4, 41, -25, 28, 29, 22, -13, 16, 67, -27, 13, 13, 21, -10, -54, 8, 3, 47, 16, -15, 29, -21, 29, 12, -27, -18, 7, -12, -16, 24, 60, -13, 2, 7, -16}, { -21, -3, -32, 36, -5, 16, -13, 52, 5, 58, 16, -42, 51, 22, 13, -37, 20, -47, 30, 4, -30, 9, 55, 28, 21, -36, 27, -10, 34, -15, 14, 40, 34, -19, -18, 38, 18, -2, 20, 2, 29, 9, -61, -11, 28, 1, -42, 1, 19, 23, 119, -18, -16, -28, 1, 12, -14, 20, 122, 19, 6, -11, 17, 29, -22, -27, -1, 14, 61, -31, 16, 23, 26, -6, 22, 16, -5, -49, -2, 41, -24, -18, 16, 19, 45, 32, -23, 6, 33, -49, 24, 21, -14, 5, 3, 33, -30, 11, 31, 9, -21, -27, -30, 44, -11, 41, -35, 55, -45, -14, 3, -9, 0, -17, 63, -36, 49, -18, -25, -9, -91, 26, 20, -17, 8, 2, 17, -9}, { 32, -21, -18, 24, 14, 0, -12, 14, 8, -16, 20, -43, 29, 38, 23, 3, -35, 0, -25, -25, 25, 30, 14, 2, -50, 20, 63, -47, -30, -45, 58, -63, -7, 60, 75, 26, 76, -48, 7, -10, -52, -20, -6, 3, 4, -32, 7, 9, 39, 64, 40, -42, 49, 24, -38, 6, -63, 38, -5, -5, 61, 8, -21, 67, -31, 0, -9, -49, 14, -82, 21, -6, 38, 6, 22, -12, 36, -40, -59, -41, 7, 14, 10, -49, 9, -18, 26, -17, 31, -29, -13, 1, -25, 33, -53, 11, -36, -1, 28, 14, 12, -4, 49, 22, -33, 14, -90, -10, -32, -20, 31, -15, 40, 4, -67, -13, -3, 2, 22, -42, -44, 50, 2, -11, 23, -21, 31, -30}, { 63, 51, 62, 23, 3, -62, 3, -8, -28, -61, 66, 44, 45, -60, -16, -32, 23, 47, -52, 7, 7, -29, -3, -49, 13, 21, 27, 11, 5, 38, 15, 74, 64, -5, 23, -10, -11, 48, 13, 25, 4, 45, 31, -36, 28, -4, 22, -1, 30, 36, 39, 33, 44, 33, -42, -6, -10, -15, 31, 4, -1, 4, 13, -24, 70, -44, 49, 16, -62, -25, -38, -5, 13, -69, -44, -63, -20, 63, -39, -27, 92, 22, -13, 53, -27, 35, 7, -21, -30, -67, 20, -36, 19, -24, -49, -18, 59, -34, -9, 3, 16, 74, -23, -41, 29, 25, 76, -24, 57, -8, 33, -13, -26, -16, -37, -18, 28, -20, -12, 48, 3, 10, -8, -56, 8, -7, 30, -9}, { 36, 11, 16, 9, -29, -62, -41, -21, 66, -7, 1, -50, 74, 4, 5, -33, -26, 40, 21, 28, 35, 44, 20, -13, 65, -11, 51, 21, -3, 24, -36, 25, 4, 48, -3, 21, 64, -12, 21, 60, -36, 10, 40, 39, 5, -27, 44, -2, -34, -77, -85, 30, 5, 0, -20, 83, -31, 46, 72, 14, -27, 48, 32, 4, 28, 15, -2, 22, 29, -79, 22, 24, 32, -23, -22, 11, -11, 40, -32, -37, 1, -13, -18, 6, -1, -43, 8, 34, -25, 30, 51, -10, -4, 36, -48, -48, 29, -47, 33, 48, 45, 31, -3, -16, 34, -20, 3, 12, -45, 24, 22, -23, -26, -65, -51, -8, -33, -30, 19, -17, 91, 40, -56, -41, 23, -6, -19, 18}, { -19, -30, -2, -27, 50, -72, 13, 14, -2, 21, 39, -96, 79, 26, -10, -60, -15, 3, 7, 26, -15, 35, -7, 8, 56, 8, -2, 14, 44, 39, 21, -47, -41, 47, -15, -20, 35, 3, -19, 66, -26, 55, 38, -34, 9, 8, 30, -50, 29, -42, -17, 6, -33, 16, 37, 70, 31, 54, 66, -29, 74, 44, 4, -3, -8, 22, -5, -20, 37, -40, 27, 7, -15, -37, -22, -23, 14, 27, 10, -50, 27, 20, -37, -21, -4, -24, 34, 34, 42, -4, 35, 23, -35, 14, -1, 14, -8, 10, -32, 38, 27, 11, 25, -21, -12, 7, 7, 52, -20, 29, 20, 20, -29, -6, 59, 55, -34, -30, 48, -31, 10, -32, -70, -68, 15, -38, -35, 74}, { -56, -14, -28, 4, -16, 69, -45, -34, 0, -26, -12, 12, 3, 40, 56, -10, 22, 3, 33, 32, -14, 35, 36, 31, -5, -81, 28, -60, -2, 15, 52, 9, -28, -16, 17, -38, -8, -51, 52, 25, 23, 25, -99, 29, -27, 42, 18, -2, -28, -18, 62, -46, 6, 2, -1, -1, 1, 13, 66, -31, 19, 31, 53, 29, -54, 10, 35, -24, 38, -53, 0, -12, 26, 7, 14, 12, 28, -21, 11, 50, -44, 20, 22, -73, 0, -84, 33, 35, 20, 17, 48, -9, 65, 49, 5, -66, -52, 8, 67, 13, 48, 32, 53, 4, 25, 42, -29, 30, -51, 41, -45, -11, 8, -13, 28, 5, -11, 20, 29, -35, -53, 43, 96, -2, 42, 39, 3, -20}, { 14, -10, -32, -26, 31, 6, -14, -12, -33, -28, -13, -15, -31, 22, 31, 5, -35, -44, -40, -26, -16, -1, -10, -21, -6, -32, 20, 8, -13, 39, 3, -9, -35, -11, -23, 12, 29, 3, 9, -7, -19, -36, 45, 9, 2, -32, -13, -10, -27, -15, -2, 43, -14, -29, 27, -46, 5, -15, 16, 18, 29, -1, 68, -22, -42, -10, 1, 1, -39, 13, -28, -16, -33, 26, -7, 26, -17, -22, 8, -16, 58, -38, 28, -28, -6, 30, -1, 16, -18, -8, 30, 38, 19, 9, 4, 8, 30, -10, -8, -6, 32, -31, -19, 35, -53, 24, -20, 19, 12, -12, 8, -27, -40, 8, -16, 31, -26, 36, -9, 16, 28, -19, 15, -19, -33, -50, -37, 22}, { -7, 20, -44, -17, -8, -35, 32, 16, 6, -46, 36, -1, 6, -50, 45, -28, 1, 12, -52, 6, 14, -48, -53, -53, -25, 21, -14, 60, -35, 8, 53, 20, 9, 14, 34, -23, 11, 37, 18, 39, 36, -19, 41, 50, 12, -34, -33, -10, 2, 27, -34, 1, 17, -33, -16, 18, 40, -27, -26, -6, 67, 20, 1, -16, -14, -16, 12, 34, 0, -13, -5, 8, 45, 9, -5, -8, -10, 17, 55, -62, 33, -5, -20, -19, -84, 42, 29, -24, 3, 44, -36, -69, -36, -23, 41, 49, -21, 33, -22, -3, -17, 25, 2, 55, 40, 24, 8, -38, 14, -9, 12, -26, -12, 56, -63, 62, -17, -42, 53, 17, 30, -43, -15, -27, -5, -2, 7, -37}, { 21, -96, 25, 42, 10, -21, -6, -47, 27, -40, 21, 47, -21, 29, -19, -3, -25, 52, 45, 31, -22, 51, 59, -15, 5, 23, -10, -17, -27, 39, -87, 5, -46, 6, 6, -28, -9, 47, -5, 38, -9, -32, 96, -58, 1, -78, 13, 23, 42, -56, -70, 51, -42, 45, 47, -7, 6, 40, -33, 51, 41, 58, -31, -22, -41, 53, -30, 15, 27, -31, 21, -15, 12, 14, -11, -7, -24, 76, -33, 23, 51, 36, -6, 12, -50, 22, 1, 20, 13, 83, 6, -62, -86, 25, -28, 2, 11, -80, -84, -25, 2, 20, 30, -21, 44, -43, 62, -21, 24, 29, 33, -4, -15, -108, -53, -54, -70, 3, 30, 68, 28, -15, -64, -13, -24, -39, 30, -65}, { -19, 22, -20, 3, -22, -30, 17, -6, -28, 28, 11, -12, -13, 32, 33, -27, -37, 26, -18, -48, -8, -7, 36, 6, -22, -41, -36, 29, -52, 19, 53, -79, -36, 22, -13, -13, 22, 35, -10, -23, -30, -12, -36, -19, 0, -6, 20, -38, -28, -40, 35, 51, -18, -26, 20, 24, 6, -34, -16, 37, 4, -12, 22, -53, 1, 21, 8, 24, -19, -7, -18, 25, -46, -22, -14, -23, 8, 13, 42, -24, -42, -15, 8, -10, -56, -6, -35, -10, -4, 17, -59, 13, 2, -6, -2, -11, -16, -34, -25, -66, 36, 7, -10, 21, 15, -13, -27, -21, 36, 11, -36, -32, -13, -16, -22, 52, 38, -4, 18, 10, -37, -28, 0, -7, 26, -13, -16, -11}, { 68, 40, 42, -51, -20, -41, -50, 9, 4, -47, 45, -4, -37, -24, -19, 5, -6, 28, -40, 27, -27, -12, -17, -46, 33, 16, 44, 60, -54, 26, -20, -17, 1, 29, 27, 43, 52, 89, 26, 22, 6, -25, 1, 17, -28, 23, -22, 47, 24, -76, -58, 17, -18, 34, 28, -13, -3, -41, 32, 30, 47, 9, -38, -43, 22, -11, 5, -16, 51, -40, -64, -25, 33, 48, -78, 33, 19, 20, 1, -89, -24, -7, 38, 7, -65, 8, 51, 6, 10, 78, 17, -53, -31, 24, 4, 15, 50, -18, 2, 0, 10, 52, -4, 32, 22, 35, 56, -58, 8, 32, -35, -8, -47, 0, -8, 28, -29, -11, 32, -15, 98, -13, -29, -90, -12, 9, 3, 71}, { -7, -18, -18, -18, -4, 57, 16, 65, -75, -3, 27, 22, 31, 29, -38, -36, 29, -11, -39, -33, -27, 31, -40, 28, 5, 42, -100, -16, 26, -20, 45, 1, 42, -26, -87, -50, 26, 15, 24, 16, 30, 38, -60, 29, -46, -10, -31, 5, -57, 47, -37, 18, 30, -23, -33, -89, 42, 23, -3, 28, 43, 61, 70, -24, 26, 42, 52, 15, 65, 11, 16, 21, 3, -28, -57, -16, 14, 60, -30, 39, -13, -48, -4, 54, -23, -3, -22, 4, -14, 24, -51, 35, 23, 11, -10, -19, 4, 27, 1, 41, 40, 26, -18, 5, 32, 3, -26, 32, -9, -4, -42, 22, 5, 45, -17, 50, 21, -50, -18, 28, -8, -39, 40, -3, 36, -16, -21, -37}, { -17, -1, -9, 9, 44, -20, 3, -52, 52, 46, -1, -25, 19, 20, 36, -34, 3, -22, 23, -3, 5, 10, -4, 54, 35, -41, 40, -21, -26, -66, -9, -43, -7, 15, 48, -10, 61, -22, 26, 42, 38, 23, 34, 18, 13, 46, 36, -72, -27, 6, 7, 22, -7, -36, 23, 60, -34, 9, 83, -57, 22, -2, 7, 19, 17, -9, -13, -11, -47, -21, 54, 23, 14, -40, 13, -35, 13, -41, -8, -52, -17, -28, 3, -43, 29, 13, 0, 35, 29, 15, 19, 11, -5, -15, -55, 11, 8, 5, 18, 22, -29, -8, 0, 16, -42, 33, -17, 52, 10, -23, -60, 29, 25, 43, -41, 19, -14, 20, -3, -45, 9, 7, -32, 1, -26, -27, -10, 37}, { 3, 24, 6, 44, 50, -27, -52, -30, -6, -4, -37, -3, 2, 0, -36, -35, -32, 0, -58, 10, 28, 3, 53, -53, 16, -62, 23, -18, -15, -10, -38, 7, -7, 6, 12, -18, 4, -59, 7, 10, 13, 24, -45, 5, 55, 34, -45, -33, -43, 26, -23, -10, 14, -1, 27, -22, 43, -44, 29, 49, -58, -8, -49, 33, -35, 32, -42, -6, -3, 26, 15, 35, -30, -36, 64, 41, -34, -8, 64, 18, -32, -9, -19, 20, -9, -13, 2, -15, -1, 11, -11, 8, -14, -29, 7, 64, 56, -37, -12, 9, -11, -42, 46, -4, -38, -20, 48, -31, 26, 50, 4, 38, 25, -15, -7, -19, 39, -12, 11, 63, -41, -65, -45, -22, -48, -46, -17, 54}, { -52, -4, -1, -14, 27, 54, 21, -49, -19, -30, -40, -17, 18, -27, 28, 44, -40, -24, 26, -33, 35, 17, 26, 45, 8, 18, -20, -14, -1, 50, -41, -10, 40, 32, 8, -5, 2, -15, 35, -42, 9, 0, 41, -13, -2, 3, -42, -10, 19, 8, -21, -37, 16, -20, 44, -72, -22, -33, -65, 60, 22, 16, -47, -11, -57, 31, 11, -10, -3, 14, 44, 0, 13, -13, -23, -10, 49, 5, -3, 63, -7, 20, 14, 16, -12, -1, -9, 9, -7, 11, 17, -20, -36, 41, 16, 7, -92, 24, -45, 35, -22, -23, -6, 38, 13, 5, 30, -17, 20, -16, 70, 11, 31, -23, -37, -33, 14, -23, 13, 44, -4, 47, 79, 43, -10, 42, 43, -33}, { -10, -7, -6, 8, -3, 59, 12, 4, -59, -36, 49, 34, -27, 29, -3, 21, 51, 23, -61, 12, -28, -47, 4, 11, -26, 30, -28, -12, 12, -16, 127, 42, 0, -32, 16, 12, -34, -33, 3, -37, 29, -25, -48, 36, -23, 42, 5, -10, 17, 23, -24, -19, -5, -6, -17, -56, 24, 16, -20, 4, -37, -11, 35, -4, 12, 16, 79, -4, -12, 12, -27, 46, 1, 21, -4, 25, 39, -17, 10, 32, 60, 35, 26, 11, 36, 28, -19, 0, -21, -55, 24, 1, -13, -25, -13, 15, 30, 51, -21, -38, 25, 19, 39, 42, 9, 32, 27, -27, 29, 23, -36, 19, -15, 12, -7, 38, 26, -7, 21, -8, -2, 5, 92, 57, 29, 34, 28, -74}, { -54, 11, 27, 2, 71, -16, 65, -17, -31, 98, -61, 37, -73, 23, -3, 31, 33, 23, 20, 9, 11, -39, -42, -24, 4, 40, 51, 11, -35, -48, -26, 10, -31, -31, -9, -35, -15, -11, -6, 14, -31, 29, 13, -16, -8, 30, 51, -14, -10, 13, 47, -59, -30, -17, 16, -13, -55, -31, 61, 16, 30, 9, 42, -19, -24, 1, -31, -3, -76, 50, 14, 34, -31, -17, 11, -27, 19, -62, -24, -22, 32, 6, -1, -9, 5, 59, -4, -10, 3, -33, -8, 20, -40, 28, 19, -19, 32, -26, -5, 10, 35, -74, 9, -5, 23, 44, -23, 42, 51, -5, 13, 20, 12, 25, -42, 60, -19, 23, 45, 14, -16, -16, -31, 15, -22, 3, 34, -41}, { -15, 30, -2, 32, 11, 15, 8, 4, -31, -27, -7, 57, -74, 46, -29, -6, 35, -40, -61, -36, -31, -40, 43, -34, -63, -35, 9, -3, -56, -13, 65, -41, 29, 12, -9, -15, 9, 42, 39, -16, 33, 29, 21, 26, -13, 40, 1, 1, 20, 90, 13, 58, 16, 29, 10, -3, 46, -10, -38, -19, -25, -51, -35, -17, 34, -14, -29, 3, -28, 8, 18, -27, -46, -3, -3, 20, -33, 42, -34, -9, -22, -14, -24, 14, 33, 25, 12, 11, 28, 17, -58, 33, -17, -21, 28, 76, 2, -21, -25, 1, -4, 53, -4, 8, -13, 26, -16, 0, 17, 26, -55, 15, 11, -24, -28, 7, 3, 9, 22, 33, -23, -33, 10, 14, -11, -22, 34, -28}, { -47, 20, -5, 21, 28, 11, 70, -34, 6, 11, 10, -29, 63, 19, -5, -24, -40, 47, -55, -29, -3, 16, -30, -15, 22, 7, 10, -52, -24, 14, 13, -33, 9, -10, -50, -14, 4, -9, 34, -10, -22, -21, -28, 47, 5, 38, -18, -53, -8, 61, 12, -53, 14, -22, 14, 23, 15, -9, -7, -6, -23, -42, 24, -3, -13, -7, 8, 37, 4, 8, 16, 33, -44, 28, 31, -2, 21, -48, -16, -2, 54, 26, 17, -53, 19, -20, 5, -31, 12, -1, -50, 18, 28, 18, 15, -16, 15, -45, 42, -21, 2, -4, -1, -14, -1, 10, -57, 21, -5, 23, -22, -11, 31, 0, -21, 36, 29, 36, 31, -57, 4, -24, -45, 30, 27, 29, 34, -99}, { 2, 3, 8, 43, 3, 38, 7, 0, 7, -20, 4, 33, -33, -72, 23, -24, -54, -25, 2, -7, -43, -49, -9, -34, 3, -10, -59, -22, 3, 39, 22, 4, 17, 24, -52, -23, -33, -20, -26, -37, -15, -6, 30, -24, -51, -39, -3, -12, 0, 70, 43, -29, -12, -18, 29, -2, 21, 5, 27, -33, -22, 20, -1, 15, 35, -34, -10, 4, -23, 16, -56, -29, -40, -57, -6, -17, -43, 18, -18, 6, -28, 20, -27, 14, -59, 6, 5, -34, 11, -42, -42, -53, 27, -42, -16, -10, 13, 8, -1, -36, -17, -16, 14, 29, 18, -34, 23, 49, 50, 15, -31, -32, -33, -55, -22, -6, -15, 12, -42, 48, -53, -4, 26, -34, -21, 30, 25, 28}, { 69, 29, -36, -40, 1, -4, 9, -7, -16, 57, 9, -82, 15, 22, 8, -3, 28, -21, -2, 38, -30, -93, 5, 23, -26, -50, 13, -27, -9, -4, 34, -34, 10, 15, -10, 38, 41, -8, -9, 23, 11, 32, 64, 8, -16, 20, -27, 18, -12, -70, -23, -1, -27, 19, 7, -1, -37, -5, 59, -52, 31, -16, -51, 0, 12, -45, -8, -45, -52, 13, 28, -20, -16, 16, -64, 15, 26, 49, 35, -37, 16, 22, 7, 23, -63, -9, 15, -21, 41, 5, 42, 8, -18, 43, 48, -1, 11, 62, 35, -38, 31, -10, -26, 43, 13, 2, -28, 50, -8, 36, -56, -35, -56, 50, 29, 13, 38, 26, -17, 15, 62, -23, -32, -54, 44, -40, -9, 87}, { 3, -25, 38, 33, 27, 0, 33, -33, -18, -3, 8, 29, 15, 15, -5, -54, 26, 57, -41, 26, 38, 68, 35, 9, 17, 21, -15, -9, -18, 26, 55, 41, 19, -2, 7, -40, -21, -48, -26, -46, 14, 3, 1, 9, -12, 29, -18, -24, -21, 50, 41, 11, 28, 9, -44, 21, -13, -45, -16, 30, 14, 44, 68, 37, -36, -8, 54, -43, 81, -67, -37, -20, -8, 12, 29, 28, 14, 24, 34, 8, 21, 51, -17, -1, 33, -12, 21, -19, -48, -1, 0, 15, 13, -12, -30, -71, -45, -36, -41, 17, -23, 10, -12, -24, -8, 40, -37, -10, -58, 26, -12, 34, -16, -6, -61, 29, 41, 14, -17, -24, -16, 39, 17, -7, -20, -5, -12, -90}, { -50, -14, 25, -12, -19, -13, 67, -18, -7, 62, 16, -34, 21, 15, -17, 12, 2, 21, 17, 6, 21, 42, -15, -10, 27, 45, 9, 40, -55, 14, -55, 21, -20, -23, -16, -23, -28, 38, -29, 35, -35, 12, 39, 38, 26, -9, 0, 6, -8, -24, -17, -78, -2, 22, -14, 53, -27, -46, -25, 4, 24, -13, -3, -54, 39, -6, -30, 31, 73, 10, 13, 13, 28, 10, -66, -15, -18, -15, -32, 40, -31, 48, -1, 9, 33, -54, 24, 0, -18, 36, 8, -37, -15, 23, -3, -28, 29, 14, -9, 39, -39, 44, 49, -16, -24, 29, -1, 11, 13, 37, 51, 26, 13, 46, -6, 8, -33, -33, 6, -39, 36, -8, -14, 62, -7, -29, -37, 10}, { -17, -27, -43, 8, 0, -38, -33, 54, 35, 14, 9, -18, 21, -4, -20, -54, -20, 4, -10, -8, 37, 20, -37, 15, 5, 21, -51, -41, 59, 16, -10, 24, 34, 16, -12, 37, 11, 16, -35, -26, 22, 12, 91, 28, -19, -36, -41, 9, 34, 63, 75, 4, 8, 6, -30, 36, 3, 37, 46, 16, 30, -7, -35, 65, 17, 3, 25, -8, 40, 2, 17, 4, -8, 7, 46, 1, -37, -10, -33, 53, 6, 31, -32, 50, 17, 52, -43, 45, 11, 3, 3, -22, 5, -13, -1, 27, -8, -32, -43, 39, 49, -24, -14, -24, 28, 20, -2, 2, -55, 26, 27, 25, 25, 18, 80, 33, 15, 25, -21, -20, -52, -67, -25, -3, -6, -15, -1, -23}, { 17, 45, 20, -8, -2, -18, 51, 13, 44, 65, -3, 35, 0, 10, -10, -40, -7, 50, -7, -45, 13, 20, 5, 20, -21, -45, -15, -5, -44, 8, -21, -34, -41, -10, -46, -6, 41, 38, -21, -15, 25, -18, 40, -3, -15, 45, -3, 7, -51, 12, 37, 61, -2, -29, -28, 37, -40, -3, -26, 34, 33, -19, 17, 1, 12, 22, -20, 55, -24, -11, 50, 15, 9, 33, -19, -14, 43, -37, -9, -40, 4, -4, -36, -27, -14, 52, -52, 6, 34, -51, 18, 38, 29, 32, -29, 48, 55, -55, 25, 18, 19, 23, -9, -33, -30, -39, 33, -50, 23, -10, -56, 24, -6, 4, -48, 0, -19, -29, -26, 1, -10, 7, -56, -21, -14, 33, 39, -6}, { 77, -13, 53, -33, 9, -47, 43, 23, 18, 17, 44, -44, 22, 19, 11, 5, 34, 24, 34, 28, 21, 7, 15, -44, 42, 46, 15, 63, 33, 41, -25, -9, 9, -3, -8, 39, 42, 43, -8, 45, -1, 48, 15, -32, 2, 20, 47, 63, -22, -58, -27, 16, -20, 5, -41, 36, -62, -22, 91, 18, 20, -12, 18, 30, 87, 21, 16, 30, 3, -25, -6, -40, -6, -36, -28, -5, 15, -1, 43, -7, 42, 8, 2, 28, -35, 8, -11, -39, -2, 39, 39, 5, -18, -33, -2, -7, 25, -33, 24, -23, 38, 45, -56, -54, -5, 34, 23, 40, -10, -30, -36, 2, -13, 26, 10, 20, -4, -49, 19, 35, 58, 9, -61, -62, -16, -37, -45, 81}, { 60, 12, -22, 23, -1, -22, -58, 2, -27, -18, -14, -29, -81, 43, 38, -11, -51, -17, 30, 20, -33, -13, 33, 47, -20, -34, -44, 2, -54, 5, -45, -45, 53, -3, 38, 13, 18, 40, 17, -11, 5, 25, 70, 17, -36, 23, 25, -38, 42, 17, 24, 75, 6, 21, 3, 13, 40, 3, -8, -5, -8, 16, -90, -23, 2, 6, -39, -33, -50, 34, 39, -24, -33, 36, 26, 34, 23, 26, -22, -29, -49, -49, 28, 19, 23, 19, 16, 0, 32, -10, -23, 46, -23, 32, -25, 4, -16, 12, -22, 14, -46, -40, -31, -12, 1, 32, 11, 30, 30, 33, 28, 24, 7, -19, -11, 15, 44, -10, 42, 13, 44, -22, -18, -13, 32, -30, -26, 47}, { 12, 7, 6, -25, -26, 2, 35, -18, -14, 38, -31, 63, -46, -20, -18, 42, 2, 4, -9, -25, -4, 1, 2, 41, -29, 65, -48, 82, -29, 39, 24, 6, 56, -9, -42, -12, 37, 47, -19, 39, -35, 1, 33, 31, -33, 27, 19, 74, -32, 37, -23, 30, 46, 20, -27, -20, 6, -41, -3, 25, -25, -14, 4, 10, 82, 20, -10, 24, -14, 98, -35, -37, -25, -45, -39, -7, 33, -17, -11, 19, 13, 9, 2, 48, 1, 47, -53, -32, 34, 18, -50, 17, 30, -31, 37, 22, 20, 34, -26, 31, 6, 17, 5, -12, 28, -2, 40, -4, -23, -10, -47, -7, -10, 31, -5, 27, 45, -21, 16, 73, 44, -4, -36, -39, 11, 24, 15, 63}, { -6, 31, 3, -21, 9, 2, 0, 35, -48, -67, 15, 15, -14, 10, 49, 23, 34, -28, -13, 30, 32, -2, -22, -11, -31, -50, 23, -14, 29, -6, 54, 39, 2, -11, -28, -2, -22, 7, -30, -8, 1, -2, -66, 10, 27, 9, -10, 46, 18, 4, 12, -34, 42, 27, -6, -49, -26, 29, -21, 5, -28, -8, 21, -24, -13, -2, 47, -18, 15, -22, -28, 24, 48, 36, -11, -32, 34, 7, 13, -19, 18, 2, 31, 28, 51, -16, 5, 30, 25, -33, 24, -14, 34, -17, 14, -1, -14, -15, 4, -4, 37, -5, 7, -14, 9, 1, 35, -35, -12, 6, -72, 36, 39, -24, 1, -18, -2, 10, 11, 12, 33, 38, 26, -5, -11, 27, 25, -1}, { -48, 55, 5, 11, -22, 29, -66, -13, 49, 68, -20, -56, 11, -11, 22, 32, 5, -25, 7, 23, 5, 57, 34, 16, 27, -70, -3, -4, 41, -16, -25, -11, 26, 1, 43, -23, 25, -22, 44, 15, 23, 35, -51, -10, 12, -25, 32, -23, -12, -36, 68, 15, 45, 26, 45, -18, -14, 20, 87, -39, -14, 13, 9, 48, -4, 46, 32, 0, 43, -60, 30, 26, -7, 16, 7, 30, -28, -38, 3, 22, -102, 20, -33, -19, 56, -55, -36, 52, 45, 19, 1, 50, 32, 39, 6, 11, -39, -23, 20, 49, 1, -17, 17, 13, 25, -8, -18, 45, -35, 0, -19, 34, 48, 10, 19, -17, 57, 24, 8, 3, -8, 39, -13, 38, 36, -19, 29, 67}, { -23, -21, 61, 18, 46, 20, 26, -12, 49, 65, 14, 10, 42, -4, -25, 30, -8, 2, 59, 18, 0, 30, 36, 29, 80, 9, 15, 2, 50, 41, -54, -28, 15, 4, 42, 37, -15, 17, -27, -8, 16, -15, 46, 31, -36, -32, -16, -30, 14, 27, 33, -17, 34, 4, -18, 21, -81, 64, 81, -20, 24, 27, 63, 41, 43, 53, 20, 0, 6, -51, -24, -16, -14, 5, 23, 37, -30, -7, -71, 29, 1, 28, -37, -4, 28, 7, 22, 11, 41, -17, 29, -18, 6, -10, -41, -61, 15, -45, -26, 43, -3, 45, -38, -6, 11, -15, -44, 63, 12, -20, 36, 37, 29, -34, 22, 2, 36, -25, 1, 5, 7, -5, -57, 15, 18, -13, 47, -24}, { 14, 39, 72, 23, 10, -4, 45, 47, -52, -5, 57, 91, 19, -16, 33, -5, 4, 10, -55, 23, 42, 2, -17, -30, -46, 30, 5, 57, -26, -7, 7, 59, 26, -20, -28, 3, -23, 33, 4, 40, -2, -24, 4, -30, -35, -33, 21, 53, -33, 25, 2, -27, 45, 61, 18, -14, -34, -28, -13, -24, -28, 17, 12, -21, -6, 2, -29, 38, -72, 47, -2, -24, -41, -34, -26, 25, 1, 56, -41, -33, 0, -21, -22, 25, 41, 47, -16, -21, 10, -11, -8, -23, 20, -32, -12, 14, 39, -13, 41, -23, 24, 43, 7, -49, 55, -26, 68, 4, 24, 36, -62, 13, -19, 5, 5, 9, 36, -32, -38, 55, 50, -26, -8, 9, -4, 27, 11, 2}, { 4, -3, 49, -38, -41, 27, -58, -20, 6, -45, 0, 72, -56, -37, 4, 24, 17, 32, -39, -10, -10, -68, -23, -4, -30, 31, 22, -17, -12, -1, 19, -7, -20, -19, -39, -6, 56, 5, 43, -7, -31, 33, 20, 32, 35, 29, 32, 30, 4, -21, -126, 33, 26, 45, 42, 26, -6, -7, -64, -33, -24, 27, -64, -43, 5, -55, -17, 29, -27, 1, -18, 25, 43, 8, 10, 18, 30, 54, 12, -42, 20, -20, 20, -26, 6, -5, 49, 42, -22, 73, 25, -29, 24, 19, -13, -10, 71, -25, 25, -15, 52, -7, -1, 38, -22, -5, 24, -26, -8, -19, -37, -25, 10, 5, -65, 18, -34, 1, 0, 62, 21, -4, 30, -19, 25, 34, 35, -6}, { -70, 16, 30, -24, -22, -25, -3, 1, 15, 6, 27, 20, 30, 14, 23, 1, 12, 33, -27, -12, 31, -20, 38, 7, 58, 36, -21, -37, 31, -35, 65, 12, -48, -28, -7, 43, 32, -44, 8, -15, -33, -21, -33, -9, -22, 12, 7, -75, -29, 8, -2, -8, -2, 7, -49, 31, 30, -13, 3, 35, 3, -12, 49, 4, 19, 16, 1, -2, 8, -8, -23, -42, 24, 39, 4, -4, 30, -25, 36, 38, 65, 48, 4, -64, 43, -33, 36, -26, -37, -38, 8, 42, -10, 5, -19, -26, -26, 21, 43, 22, 18, 54, -2, 28, -27, 27, -39, -17, -24, -2, -53, 9, 37, 18, -46, 54, 19, -33, -15, -7, -16, 28, -17, 23, -12, -20, 27, -38}, { 58, -14, 16, -2, 0, -42, -26, -4, 15, -24, -44, -67, -46, -17, 38, -12, -38, -68, -15, 26, 12, -15, -9, -24, -10, 53, -16, 37, 1, -26, -56, -30, 12, 40, 40, 34, -10, 43, 34, 21, -39, 14, 63, -14, 14, 23, -3, 7, 39, 40, -71, 34, 5, 15, -18, -34, 56, 6, -19, -8, 40, 14, -23, -14, 4, -23, 17, 30, 43, -33, 16, 12, 40, 32, -53, -1, 26, 12, 22, 17, 9, -24, -20, 22, -52, 32, 18, 21, 5, 42, -29, 17, -11, 38, 34, 42, 0, -16, -13, -25, 14, -1, -10, 17, 14, 15, 35, -25, 1, 20, 73, 9, -17, -12, 5, -11, -10, -22, 9, -20, 15, -5, 33, -36, 36, -12, -27, 55}, { 27, 27, -60, 12, -29, -40, -15, 5, 28, -10, -36, -55, 26, 10, -35, -3, -30, 5, 12, 10, -16, -13, -8, -24, -54, 9, 18, -1, 2, -46, 44, -32, 12, 19, 15, -20, -16, -26, 3, -48, 13, -8, 44, 46, -20, -8, 2, 61, -46, 1, -57, -39, -1, -19, -56, 5, 18, -37, -52, -15, 18, -9, 19, 18, 19, 17, -1, -43, 45, -39, -4, -6, 18, -3, -27, 13, 35, -11, 7, -44, 9, -27, 28, 27, -57, 10, 20, 2, -46, -6, -25, 9, 21, 14, 49, 21, -3, -19, 28, -4, 37, -40, -27, 8, 37, -11, 4, -32, -82, -53, -36, -44, -43, 21, -28, 7, -16, 41, 7, -43, -7, -7, 16, 6, 35, -12, 8, -29}, { 25, -13, 12, 34, 2, 42, -3, -4, -22, 32, -29, -71, 7, 67, 33, -60, -15, -50, -7, 31, -30, -16, 35, -11, -27, -25, 38, -85, -37, -14, -51, -44, -35, 7, 11, -17, 57, 34, -24, 26, -29, -11, 21, -36, 28, -35, 36, 41, -24, 26, -2, -13, 9, -11, 40, -28, -20, 22, -25, -79, -36, 1, -52, 5, 19, -11, -6, 16, -41, 3, -18, 34, 59, -2, -21, -23, 26, -13, -66, -1, 33, -29, -8, 39, 16, 22, -19, 18, -12, -14, -36, 20, -18, 27, -4, 0, -41, -12, -42, -11, -35, -46, -16, 42, 20, -3, 5, -4, -21, -45, 33, -24, 29, -60, -9, -24, 34, 66, -33, -3, -68, 20, 11, -38, 11, -24, 48, 23}, { 22, -7, -30, 25, 26, -40, 34, 12, -4, 23, 48, -86, 73, 15, -26, -40, 26, -30, 4, -3, 35, 43, 31, 13, 22, 18, -32, -33, 21, -26, 52, -18, 10, 41, 55, -23, 28, -14, -4, -29, 5, 38, 27, 9, 38, -15, -2, -64, -4, 63, 30, 24, -30, -31, 11, -18, 53, 49, 90, 40, 45, 63, 53, 43, -39, -24, 4, -23, 84, -49, 50, -7, 48, -32, 12, 8, -20, 19, 2, 46, 23, 1, 17, -25, -13, -5, 30, 33, 19, -12, -40, 5, -24, -20, -31, -8, -43, 27, 27, 29, 22, -39, 19, 18, 45, 19, -55, 43, 1, 2, 41, -27, 10, 12, -20, 50, 33, 44, -5, -61, -82, -25, -20, 9, -22, -8, -7, -43}, { -43, 32, -6, 30, -27, -4, -16, 8, 39, 68, 21, -16, -18, 27, 46, 41, -18, -51, 70, -7, -32, -11, -37, 0, 25, 4, -34, -4, -8, -5, -30, -57, -36, 16, -8, -2, -42, 7, 19, -21, 21, -36, 6, 6, -30, 17, -21, 36, 5, 28, 90, -53, 1, -1, 9, -11, 53, 25, 13, 33, 0, 24, 28, -19, -40, 32, -24, 40, -25, 4, -8, 10, 36, 25, -27, 41, 40, -74, 64, 29, -63, -26, -23, -6, 7, -32, -25, 44, 38, 57, 23, 19, 20, 5, 11, -5, -18, 46, 20, 44, -37, -26, 19, 26, -73, 21, -1, 57, 6, -16, 51, 22, -5, 25, 101, -25, -19, 5, 39, -11, -34, 6, 43, 47, 5, 5, 40, 51}, { 18, 44, -47, -34, -38, -13, -30, -40, 32, -46, 13, -28, -55, -9, 42, -20, -9, 3, 13, 45, -25, -13, 18, 30, -25, 26, -24, -15, 14, -31, 84, -27, -25, -5, 34, -23, 63, -26, 8, -4, 20, -16, -22, -2, -16, 26, 44, -57, 43, 49, -2, 73, 12, 45, 17, 0, 67, 31, -47, 36, -18, -27, -44, 32, -1, -51, 67, -41, -8, -71, 28, 35, 13, 17, 32, 36, 34, 34, 30, 18, 31, 26, -18, 17, -39, -16, 25, -33, -34, -42, 27, -1, 25, -4, 22, 44, -8, -7, -2, -37, -6, 3, 3, 17, -32, 19, -20, -45, -10, -14, 12, 15, -18, -31, -43, 18, -24, 2, 5, -7, -1, 34, -23, -28, 31, 49, -25, -64}, { 68, -37, 49, 41, -21, -5, -71, -56, 4, 55, -33, 13, 16, 4, -17, 14, 38, -27, 13, 31, -2, -55, -17, -7, 19, -5, 66, 4, 12, 34, -23, -16, -27, 19, 7, 17, -36, 45, 18, 21, 35, 32, 7, -19, 47, -22, 0, 4, 52, -28, -86, 15, 11, 20, 31, 37, 3, 4, 35, 32, 22, 1, -120, -53, -9, -38, -44, 24, -51, 36, -13, 21, 44, 66, 9, 33, -13, 17, -9, 15, 38, 3, -28, 27, -20, -5, 13, -17, 12, 15, 57, -61, -33, 45, 37, -4, 57, 22, -43, 40, -25, -60, -23, -37, 1, -5, -19, 45, -11, 42, 44, 27, -34, -21, 46, -9, -28, -17, 3, 21, 96, 13, 18, -12, 25, -22, 1, -29}, { -32, 38, 30, -17, -3, 26, 12, 11, -5, 23, -21, -11, -4, -12, -4, 4, 31, 3, 7, -11, 29, -5, -37, -46, 28, 16, 38, 90, -33, -6, -26, 20, 29, -45, -33, -48, -69, 66, -9, 35, 7, -26, -66, 44, 21, 32, 18, 32, -27, -39, -30, -39, 40, -22, 28, 20, 35, -29, 6, -19, 45, 6, 37, -42, -3, 17, -6, -27, 31, 4, -44, -7, 41, 45, -65, 33, 30, 10, 5, 1, 40, 35, -30, 24, 5, -42, 25, 39, 24, 19, -12, 41, -1, 22, 34, -56, -29, 42, 62, -44, -45, 76, 44, -4, -47, -30, 13, 17, 56, -14, -6, 14, -30, 39, 20, 32, 25, -8, 42, -42, -3, 44, 28, 20, 28, -17, 22, 12}, {-106, -51, 4, 7, -15, 43, 60, -13, -27, 31, 93, 77, 41, 23, 32, 31, -3, 28, 16, 19, -40, 37, -23, 29, 30, -45, 36, 75, 21, 53, 32, 70, -12, -65, -65, -70, -48, -14, -21, -18, 12, 22, -7, -10, -34, 19, -50, 8, -32, -16, 47, -8, -49, -5, -5, -66, -15, 17, 44, -17, -17, 29, 20, -5, -31, 50, 53, 9, 91, -8, 7, 28, 16, 14, -30, 39, -25, -2, 13, 68, 24, -17, -34, -36, 16, -50, -9, -38, -24, -19, -7, 24, 8, 29, -27, -10, -17, 3, -12, 26, -23, 60, 28, -29, 3, 17, 43, 24, -1, -17, 24, -28, -46, -30, -4, -20, -34, -2, 3, 36, -16, 0, 73, 65, -21, -11, -27, -16}, { -17, 18, 25, -6, -56, 25, 32, 33, -47, 42, -26, 21, 35, -46, -40, 55, 5, -20, 71, 18, 41, -11, 33, 1, -21, -12, -21, 48, -5, -4, -67, 40, 25, -24, -54, 16, -87, 9, 34, -2, 43, 21, -12, -38, -8, 38, -21, 74, -30, -33, 67, -94, -3, 19, 37, -3, -9, -37, -8, 35, -60, -25, 30, -38, 20, 15, -54, 43, -41, 30, -41, 3, -24, -12, -20, 25, -4, -10, 44, 66, -48, 33, 10, 9, 37, 19, -27, 41, -24, 12, -19, 13, 32, -15, 50, -40, -39, 19, 28, 21, 31, -15, 39, -21, -25, 21, -18, 11, 29, -27, 56, -3, 10, 6, 103, -4, 18, 20, 5, 44, -3, 54, 14, 75, -9, -28, 35, 22}, { 89, -5, -5, 29, 36, 2, -22, 5, 7, 7, -50, -35, -60, 27, 41, 0, -23, -61, 6, -12, -9, -40, 26, -20, 15, -10, 23, 9, -10, -88, -8, 4, -27, 57, -6, 32, 33, 33, -6, 36, -22, -5, -9, -1, 44, 22, -5, 29, -20, 8, -93, 15, 8, 10, 31, -1, -6, -14, -6, 38, -27, -18, -99, -38, 41, -25, -55, 2, -37, -7, 11, 30, 30, -2, 27, -20, -8, -5, 29, -35, -20, -31, -22, 9, -33, -29, -15, -31, -4, -12, 19, 10, -5, 27, 21, 55, 23, 33, 26, -27, 22, -50, 35, 25, -11, -12, 0, -32, -23, 24, 56, 42, -10, -24, -30, 27, 17, -21, 23, 36, 32, -8, -4, 9, 39, -22, -17, 5}, { -2, 5, -8, 13, 23, -37, 41, 2, 3, 45, -4, -42, -64, -13, 34, 23, -29, -71, 31, 32, -28, -18, -28, -48, -11, 43, -47, 58, 4, -20, 5, -57, 4, 45, 36, 18, -21, 30, 23, 19, 7, 15, 10, 36, 21, -21, -50, -13, -30, -24, -15, 52, 36, 0, -30, 16, 65, 22, 21, 21, 62, 34, -29, -34, -18, 0, -65, -14, -81, 2, -9, -38, 14, -1, 13, -1, -4, 1, -4, 5, -27, -36, -21, -14, -54, 8, 7, 3, -37, 19, -1, -19, 10, 4, 58, 29, 26, 52, 36, -24, 25, -27, 33, 23, -38, 17, -55, -35, 7, 29, 31, -2, -30, 34, 11, 50, -28, 17, 52, -38, 30, -27, -2, 7, 19, -11, -35, 48}, { -4, -44, 18, 33, -27, -4, 41, -18, 55, 61, 28, -12, -10, -23, 25, 1, 40, -7, 5, -5, 38, -50, -27, -26, 42, 8, -27, 6, 22, -21, -13, 37, -48, -17, 3, 0, -2, -34, 3, -3, 11, 3, -4, 45, 36, -20, 26, 64, -23, -5, 5, -13, 13, 35, -40, 54, -8, 24, 36, 19, -14, -51, -5, 51, 71, -34, 8, 49, -43, 33, -18, -47, 8, -30, 38, -22, 17, -7, -15, 24, 41, -2, 14, 29, -21, -15, -49, -53, -9, 15, 35, -16, 31, -33, 3, -39, -3, -3, -6, 28, 13, 29, -30, -82, 8, 36, 1, 45, 35, 33, -62, -29, 19, -29, 72, 23, 11, -14, -37, -22, -11, -33, -62, 46, -41, -22, -25, -1}, { -10, -2, 23, 24, 32, 18, -59, -24, 30, 70, -38, 23, -16, 43, -4, 58, 22, -11, 81, 22, 35, -47, 7, -7, 81, -47, -10, -44, 46, 10, -49, 6, -25, 22, 23, 8, 7, 23, 46, 34, -21, -25, -20, 6, 19, 6, 15, 34, -4, -54, -30, 0, 19, -44, 11, 56, -50, 39, 78, -9, -45, -29, -9, 22, 28, -42, -39, -21, -75, 44, 10, 36, 17, -15, 57, 8, 2, -55, 24, 22, -50, 0, 25, -10, 55, -18, -38, 5, 18, 41, -12, 11, 35, 5, 17, 9, 8, -32, 43, 33, -1, -49, -6, -26, -33, 34, 10, -4, 5, 42, 18, 30, 23, -4, 39, 9, 33, -29, -14, 37, 27, 62, 25, 7, -17, 1, -9, 56}, { -14, -17, 5, 10, -34, 63, -31, -33, -17, -69, -33, -22, -25, 19, 33, 48, 17, 8, -10, 15, 43, 57, 43, 11, -43, -16, -31, 20, -1, 35, 56, 37, 21, 14, -9, 27, -3, -50, 27, -51, -35, 2, -55, -21, 12, -24, 27, 11, 10, 10, -34, 37, 15, -15, 33, -30, 43, -33, -61, 3, 45, 36, 43, -48, 17, -15, 54, -70, 51, 12, -55, 35, 27, 29, -5, -3, 20, 65, -2, -10, -7, -25, -8, 0, -18, -40, -13, 17, -42, 10, -2, -23, -9, -19, -6, -37, -2, 36, -33, -57, 21, 82, -3, 10, -3, 31, 60, -1, -51, 25, 23, -5, -34, -46, -52, -57, 26, -21, 8, 20, 5, 32, 96, 16, 39, 5, 9, -39}, { -7, -40, 5, 12, 1, 33, -40, 5, 1, -58, -19, 5, -31, -23, 44, 27, 51, -4, -35, 8, 39, -74, -30, 23, -11, 39, 35, -62, 49, 5, 80, 2, 7, 45, 38, -20, -24, -19, -12, 7, 41, 41, -19, 16, 26, 4, 28, 47, -37, 16, -30, 50, 37, 4, -32, 8, -2, -33, -32, 37, -48, 7, -63, -9, 86, -59, 33, 5, -10, -23, -12, 4, 10, -8, 10, 48, 11, -7, -3, -20, 70, 21, 16, -19, -34, 0, -6, -37, -31, -21, 8, -41, 17, 14, -5, 34, 63, 40, 24, 14, 22, 3, 19, -1, 52, 33, -12, -21, 27, 7, -26, 3, 20, -10, -19, -28, -8, 8, -17, 5, 28, 32, 32, -24, 42, 41, 16, -7}, { 79, 14, 47, -33, 9, -56, 52, 22, 7, -22, 31, 20, 2, -58, 30, -31, 33, 43, 2, -38, -24, -17, 32, -52, 22, 67, -10, 43, 44, 22, 20, 0, 44, 23, 23, 39, -15, -8, -41, -17, -17, -16, 63, 11, -12, 27, 20, 38, -35, -48, -45, 27, 19, 0, -29, 40, 25, -8, -15, 20, 56, 18, 7, -38, 119, -45, 43, 36, -20, 4, -21, -17, 33, 30, -10, 31, -17, 66, 22, -31, 65, 21, 34, 21, -43, 23, 30, -17, -4, 31, 38, -52, 5, -8, 20, 10, 58, -38, -7, 32, 14, 58, -67, -63, 57, 23, 22, 23, 47, -27, -1, -29, 1, -4, -17, 25, -20, -44, 12, 8, 52, -3, -81, 0, -13, 3, -31, 40}, { 27, -2, 1, -19, 3, -23, 28, -15, 7, 4, 52, -12, -42, 23, -14, -67, 9, 64, -5, -18, 32, 18, -9, 20, 1, 27, 45, 48, -5, 25, 47, 7, 39, -32, 19, -25, -10, -36, -37, -2, -37, 0, 49, 18, 32, 8, -1, 44, 6, 7, -33, 0, -28, 0, -37, 33, 4, -7, -65, 39, 54, 14, 25, -30, 34, -26, -13, -52, 46, -83, 21, 20, 27, -43, -43, -50, 9, 50, -43, -44, 32, 18, -34, 17, -40, 21, 22, -22, -14, 53, -44, 52, 13, -11, -67, -8, 28, 11, -33, -47, -1, 87, 22, 0, 34, 0, 25, -28, -43, -29, 46, -34, -38, -10, -59, 8, -1, 39, 17, -52, 39, 19, 40, -55, -7, 23, -27, -60}, { 44, 28, 0, -5, 25, 0, 23, -7, 14, 8, -31, -25, -51, 6, -26, 23, -15, -73, 30, 23, 21, 46, -30, -1, 9, 0, -27, -8, 35, -35, -23, 28, 39, -11, 38, 25, -43, -34, 35, 0, 41, 10, 35, -6, -18, -7, 5, -43, 44, 17, 72, 25, -2, -40, 29, -54, 47, 17, 38, 28, 8, -36, -22, 22, -33, 49, -37, 28, -20, 18, 51, 29, 14, -12, 59, -10, -11, -24, 13, 53, -53, -11, -32, 51, -5, 44, 12, -6, 22, -38, -23, 55, 19, 35, 12, 38, -53, 2, -8, 22, -27, -61, -31, 23, -14, -7, 20, 37, -7, 32, 7, 21, 36, 38, 67, -6, 14, -1, 17, 16, -50, -40, 30, -19, -3, 0, 15, 13}, { 8, 20, 44, -19, 23, -38, 28, -31, -27, -40, -17, 37, 23, 45, 23, 11, -11, 43, -45, -4, 25, -33, 8, -2, -43, 24, -8, -7, -34, -4, 45, -19, -18, -53, -28, 25, 75, 36, 28, 53, -22, 28, 13, 17, -4, -16, 33, -43, 0, -8, 25, 70, -13, 36, -15, 58, 14, -10, 38, -5, 28, -22, 54, 12, -9, 45, 13, 23, 31, -38, -21, 21, -14, -16, -4, -30, 0, 5, -30, -28, 32, -11, 16, -16, -20, 27, 33, -29, 13, -19, -19, 9, 6, 33, -5, 37, 12, -37, 30, -30, -31, 5, 26, 52, 19, 32, 22, -1, 15, 4, -33, -4, 26, 2, -82, 43, 25, -9, 22, -54, 48, -32, -19, -74, -7, -14, 12, 29} };
_ssdm_SpecConstant(l2_weights);
# 192 "pipelined_mlp.cpp"

    const int8_t l2_biases[64] = { 64, 67, -47, 102, 97, 127, 0, 0, 16, 67, -47, 102, 97, 127, 0, 0, -32, 66, -47, 102, 97, 127, 0, 0, -80, 66, -47, 102, 97, 127, 0, 0, -128, 66, -47, 102, 97, 127, 0, 0, 80, 66, -47, 102, 97, 127, 0, 0, 32, 66, -47, 102, 97, 127, 0, 0, -16, 65, -47, 102, 97, 127, 0, 0 };
_ssdm_SpecConstant(l2_biases);
# 193 "pipelined_mlp.cpp"

#pragma HLS RESOURCE variable=&l2_weights core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=&l2_biases core=RAM_2P_BRAM
#pragma HLS ARRAY_PARTITION variable=&l2_weights factor=64 cyclic dim=1
#pragma HLS ARRAY_PARTITION variable=&l2_biases factor=64 cyclic dim=1

 const int8_t l3_weights[10][64] = { { -54, -36, -46, -25, 64, 67, 30, -44, 44, -57, -35, -65, -29, -46, -36, -31, -8, -20, 19, -5, -7, -26, 31, 21, 37, 18, 61, 40, 13, -32, -8, -56, -61, 10, 44, -37, 56, 63, 1, -5, 47, 61, -5, -55, -31, 0, -42, -92, -6, -40, 21, 8, 2, 30, -12, -45, -12, 8, -68, -26, -53, -3, 35, 16}, { 60, -25, -32, 20, -24, -36, -10, -25, -102, -7, -47, -11, 33, 68, 69, -41, -65, -20, 64, -62, 55, 90, -27, -53, 49, -74, -39, 25, -1, 6, -88, 14, 40, 8, 24, 30, 27, 2, -50, -5, 44, -21, 36, -27, 38, -40, -82, -1, -50, -5, 41, -31, 16, -52, -11, -74, -38, -7, 29, -40, 43, 61, -17, -28}, { 29, -31, 55, -47, -53, 25, 7, 10, -95, -52, 2, 7, -79, -23, 58, -33, 21, 15, 4, 23, 14, -17, 35, 4, 20, -70, 35, -43, -37, -69, 71, -71, -13, 56, 46, 21, 68, 51, -55, 7, 14, -71, -73, -34, 54, 16, 63, 35, 41, -5, 7, -1, -68, -16, 30, 65, -22, 0, -96, -73, -14, 1, 58, 6}, { 43, 45, -52, -34, -42, 6, -22, 59, -51, -2, 3, 62, -32, 24, 28, 53, -28, -16, -127, -29, -57, -42, 57, -50, -34, -1, 39, -69, 55, -45, -30, 67, -1, 8, 61, -2, -49, -68, -21, 18, 52, -41, -15, 58, -33, -49, -28, 30, -22, 50, -85, 9, 3, -43, -39, -14, 14, 26, -25, -13, -31, 40, -29, 45}, { -60, -46, 6, -64, -23, -5, 12, 2, 22, 45, -73, -51, 18, -5, -2, -38, 32, 72, -3, 19, 48, 49, -18, -53, -33, 38, -71, 35, -50, -34, 56, -18, -57, -58, -5, 34, 6, 57, 22, -66, -121, 33, 68, -24, 35, 14, -26, -42, -79, 41, -7, 25, -9, -75, 22, 15, -57, -64, 57, 47, 60, 24, -43, 51}, { 44, 30, -92, 21, -87, -58, 5, -68, 2, -10, 17, -90, 30, -66, -14, 35, 3, 7, -58, -41, -5, 79, -65, -80, 56, 29, -65, -22, -23, -21, -61, 6, 10, -60, -58, -67, -41, 5, 25, 13, -1, 13, -45, -11, -11, -45, -34, -4, 20, -51, -32, 63, 72, 63, -59, -31, -49, -4, 57, -48, -45, -31, 31, -52}, { -46, -75, -19, 66, -66, 20, 37, -7, 42, 56, -64, -81, -85, -50, -22, -19, -41, 9, -50, -23, -33, -51, -32, 9, 20, 2, 48, -10, 19, 14, -9, -19, 50, -60, -66, 20, -50, 25, -38, -53, -2, -46, 30, 1, 1, -25, 1, -90, 25, -24, 64, 35, -42, 62, 37, 39, 72, 44, -28, 34, 36, 3, -41, -77}, { -42, 23, 52, 0, -8, -5, -78, 60, -22, -2, -5, -61, 49, 23, 68, -41, -41, -69, -26, 7, -58, 49, 18, -44, -56, -15, 67, 0, -63, 46, 41, -23, -46, 24, 57, 64, -39, 69, -4, -23, 49, 57, -22, -17, -42, -43, -46, 18, -68, -51, 56, -39, 2, 26, -14, -64, 45, 38, -86, 39, 58, -70, -1, -33}, { -53, 35, 22, 28, -20, -16, -37, -13, 6, -19, 3, 33, -53, -12, -49, 29, 16, -66, -66, 10, -20, -79, 3, 64, 43, 3, -65, 56, -53, -75, 54, -84, -56, -3, -69, -90, 54, -46, 15, 22, -33, -69, 36, -42, 25, 48, 22, -27, -20, 52, 53, -34, -72, -11, 52, -27, -79, 56, 51, 53, -70, -65, 23, -36}, { -22, 55, 20, -37, 55, 62, -49, -52, 13, 42, -17, 43, 31, -61, -82, -26, -37, 39, 45, 37, -102, 55, -59, 2, 23, 35, -19, 40, 39, -16, -63, 67, -48, 36, 24, -44, -13, 7, -14, -46, -36, -30, -37, -4, 13, -15, 51, 64, -53, 50, -60, -63, -29, -48, 9, 20, -31, -62, 18, 36, 12, 21, 29, -20} };
_ssdm_SpecConstant(l3_weights);
# 199 "pipelined_mlp.cpp"

    const int8_t l3_biases[10] = { 64, 70, -47, 102, 97, 127, 0, 0, 16, 70 };
_ssdm_SpecConstant(l3_biases);
# 200 "pipelined_mlp.cpp"

#pragma HLS RESOURCE variable=&l3_weights core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=&l3_biases core=RAM_2P_BRAM
#pragma HLS ARRAY_PARTITION variable=&l3_weights complete dim=1
#pragma HLS ARRAY_PARTITION variable=&l3_biases complete dim=1

 hls::stream<uint8_t> l1_in[2];
    hls::stream<int16_t> l2_in;
    hls::stream<int16_t> l3_in;
    hls::stream<int32_t> l3_out;

    read_input(in, l1_in);
    mlp_l1(l1_weights, l1_biases, l1_in, l2_in);
    mlp_l2(l2_weights, l2_biases, l2_in, l3_in);
    mlp_l3(l3_weights, l3_biases, l3_in, l3_out);
    write_output(l3_out, out);
}
