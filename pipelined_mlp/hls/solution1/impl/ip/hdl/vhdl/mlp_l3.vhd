-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_l3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    l3_in_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    l3_in_V_empty_n : IN STD_LOGIC;
    l3_in_V_read : OUT STD_LOGIC;
    l3_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    l3_out_V_full_n : IN STD_LOGIC;
    l3_out_V_write : OUT STD_LOGIC );
end;


architecture behav of mlp_l3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal l3_biases_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal l3_biases_ce0 : STD_LOGIC;
    signal l3_biases_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_0_ce0 : STD_LOGIC;
    signal l3_weights_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_1_ce0 : STD_LOGIC;
    signal l3_weights_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_2_ce0 : STD_LOGIC;
    signal l3_weights_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_3_ce0 : STD_LOGIC;
    signal l3_weights_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_4_ce0 : STD_LOGIC;
    signal l3_weights_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_5_ce0 : STD_LOGIC;
    signal l3_weights_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_6_ce0 : STD_LOGIC;
    signal l3_weights_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_7_ce0 : STD_LOGIC;
    signal l3_weights_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_8_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_8_ce0 : STD_LOGIC;
    signal l3_weights_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_9_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal l3_weights_9_ce0 : STD_LOGIC;
    signal l3_weights_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln158_reg_865 : STD_LOGIC_VECTOR (0 downto 0);
    signal l3_out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln171_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal l3_out_buffer_9_2_14_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_8_2_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_7_2_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_6_2_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_5_2_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_4_2_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_3_2_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_2_2_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_1_2_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_0_2_15_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_reg_430 : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_0_reg_441 : STD_LOGIC_VECTOR (3 downto 0);
    signal l3_out_buffer_9_1_l_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l3_out_buffer_9_2_l_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_3_l_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_4_l_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_5_l_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_6_l_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_7_l_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_8_l_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_9_l_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_10_s_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln151_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_525_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln158_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln158_reg_865_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_596_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_19_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal l3_weights_0_load_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_1_load_reg_934 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_2_load_reg_939 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_3_load_reg_944 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_4_load_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_5_load_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_6_load_reg_959 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_7_load_reg_964 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_8_load_reg_969 : STD_LOGIC_VECTOR (7 downto 0);
    signal l3_weights_9_load_reg_974 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal grp_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_677_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_701_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_709_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_717_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln171_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_2_fu_655_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1033 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_322_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i2_0_phi_fu_445_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp2_iter0_tmp_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp2_iter1_tmp_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln154_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal l3_out_buffer_9_1_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_0_2_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_1_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_2_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_2_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_3_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_3_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_4_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_4_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_5_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_5_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_6_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_6_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_7_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_7_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_8_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_8_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_9_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_9_l : STD_LOGIC_VECTOR (31 downto 0);
    signal l3_out_buffer_9_10_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_l3_out_buffer_9_10_s : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal grp_fu_661_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln166_fu_616_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_669_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_677_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_685_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_693_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_701_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_709_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_717_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_725_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_733_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_468 : BOOLEAN;
    signal ap_condition_338 : BOOLEAN;

    component mlp_mac_muladd_16cYC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_l3_l3_biases IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_l3_l3_weights_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    l3_biases_U : component mlp_l3_l3_biases
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_biases_address0,
        ce0 => l3_biases_ce0,
        q0 => l3_biases_q0);

    l3_weights_0_U : component mlp_l3_l3_weights_0
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_0_address0,
        ce0 => l3_weights_0_ce0,
        q0 => l3_weights_0_q0);

    l3_weights_1_U : component mlp_l3_l3_weights_1
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_1_address0,
        ce0 => l3_weights_1_ce0,
        q0 => l3_weights_1_q0);

    l3_weights_2_U : component mlp_l3_l3_weights_2
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_2_address0,
        ce0 => l3_weights_2_ce0,
        q0 => l3_weights_2_q0);

    l3_weights_3_U : component mlp_l3_l3_weights_3
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_3_address0,
        ce0 => l3_weights_3_ce0,
        q0 => l3_weights_3_q0);

    l3_weights_4_U : component mlp_l3_l3_weights_4
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_4_address0,
        ce0 => l3_weights_4_ce0,
        q0 => l3_weights_4_q0);

    l3_weights_5_U : component mlp_l3_l3_weights_5
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_5_address0,
        ce0 => l3_weights_5_ce0,
        q0 => l3_weights_5_q0);

    l3_weights_6_U : component mlp_l3_l3_weights_6
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_6_address0,
        ce0 => l3_weights_6_ce0,
        q0 => l3_weights_6_q0);

    l3_weights_7_U : component mlp_l3_l3_weights_7
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_7_address0,
        ce0 => l3_weights_7_ce0,
        q0 => l3_weights_7_q0);

    l3_weights_8_U : component mlp_l3_l3_weights_8
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_8_address0,
        ce0 => l3_weights_8_ce0,
        q0 => l3_weights_8_q0);

    l3_weights_9_U : component mlp_l3_l3_weights_9
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l3_weights_9_address0,
        ce0 => l3_weights_9_ce0,
        q0 => l3_weights_9_q0);

    mlp_mac_muladd_16cYC_U341 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_661_p0,
        din1 => l3_weights_0_load_reg_929,
        din2 => l3_out_buffer_0_2_15_reg_420,
        dout => grp_fu_661_p3);

    mlp_mac_muladd_16cYC_U342 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_669_p0,
        din1 => l3_weights_1_load_reg_934,
        din2 => l3_out_buffer_1_2_reg_410,
        dout => grp_fu_669_p3);

    mlp_mac_muladd_16cYC_U343 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_677_p0,
        din1 => l3_weights_2_load_reg_939,
        din2 => l3_out_buffer_2_2_reg_400,
        dout => grp_fu_677_p3);

    mlp_mac_muladd_16cYC_U344 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_685_p0,
        din1 => l3_weights_3_load_reg_944,
        din2 => l3_out_buffer_3_2_reg_390,
        dout => grp_fu_685_p3);

    mlp_mac_muladd_16cYC_U345 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_693_p0,
        din1 => l3_weights_4_load_reg_949,
        din2 => l3_out_buffer_4_2_reg_380,
        dout => grp_fu_693_p3);

    mlp_mac_muladd_16cYC_U346 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_701_p0,
        din1 => l3_weights_5_load_reg_954,
        din2 => l3_out_buffer_5_2_reg_370,
        dout => grp_fu_701_p3);

    mlp_mac_muladd_16cYC_U347 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_709_p0,
        din1 => l3_weights_6_load_reg_959,
        din2 => l3_out_buffer_6_2_reg_360,
        dout => grp_fu_709_p3);

    mlp_mac_muladd_16cYC_U348 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_717_p0,
        din1 => l3_weights_7_load_reg_964,
        din2 => l3_out_buffer_7_2_reg_350,
        dout => grp_fu_717_p3);

    mlp_mac_muladd_16cYC_U349 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_725_p0,
        din1 => l3_weights_8_load_reg_969,
        din2 => l3_out_buffer_8_2_reg_340,
        dout => grp_fu_725_p3);

    mlp_mac_muladd_16cYC_U350 : component mlp_mac_muladd_16cYC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_733_p0,
        din1 => l3_weights_9_load_reg_974,
        din2 => l3_out_buffer_9_2_14_reg_330,
        dout => grp_fu_733_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp2_iter1_tmp_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_338)) then
                if (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_0) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_0_2_15_reg_420;
                elsif ((ap_const_boolean_1 = ap_condition_468)) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_9_2_14_reg_330;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_8) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_8_2_reg_340;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_7) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_7_2_reg_350;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_6) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_6_2_reg_360;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_5) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_5_2_reg_370;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_4) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_4_2_reg_380;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_3) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_3_2_reg_390;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_2) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_2_2_reg_400;
                elsif (((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_1) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_1_2_reg_410;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp2_iter1_tmp_reg_453 <= ap_phi_reg_pp2_iter0_tmp_reg_453;
                end if;
            end if; 
        end if;
    end process;

    i1_0_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_reg_430 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln158_fu_590_p2 = ap_const_lv1_0))) then 
                i1_0_reg_430 <= i_fu_596_p2;
            end if; 
        end if;
    end process;

    i2_0_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i2_0_reg_441 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln171_reg_1029 = ap_const_lv1_0))) then 
                i2_0_reg_441 <= i_2_reg_1033;
            end if; 
        end if;
    end process;

    i_0_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln151_reg_851 = ap_const_lv1_0))) then 
                i_0_reg_318 <= i_1_reg_855;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_318 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    l3_out_buffer_0_2_15_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_0_2_15_reg_420 <= l3_out_buffer_9_1_l_reg_801;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_0_2_15_reg_420 <= grp_fu_661_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_1_2_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_1_2_reg_410 <= l3_out_buffer_9_2_l_reg_806;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_1_2_reg_410 <= grp_fu_669_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_2_2_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_2_2_reg_400 <= l3_out_buffer_9_3_l_reg_811;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_2_2_reg_400 <= grp_fu_677_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_3_2_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_3_2_reg_390 <= l3_out_buffer_9_4_l_reg_816;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_3_2_reg_390 <= grp_fu_685_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_4_2_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_4_2_reg_380 <= l3_out_buffer_9_5_l_reg_821;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_4_2_reg_380 <= grp_fu_693_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_5_2_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_5_2_reg_370 <= l3_out_buffer_9_6_l_reg_826;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_5_2_reg_370 <= grp_fu_701_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_6_2_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_6_2_reg_360 <= l3_out_buffer_9_7_l_reg_831;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_6_2_reg_360 <= grp_fu_709_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_7_2_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_7_2_reg_350 <= l3_out_buffer_9_8_l_reg_836;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_7_2_reg_350 <= grp_fu_717_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_8_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_8_2_reg_340 <= l3_out_buffer_9_9_l_reg_841;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_8_2_reg_340 <= grp_fu_725_p3;
            end if; 
        end if;
    end process;

    l3_out_buffer_9_2_14_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                l3_out_buffer_9_2_14_reg_330 <= l3_out_buffer_9_10_s_reg_846;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln158_reg_865_pp1_iter1_reg = ap_const_lv1_0))) then 
                l3_out_buffer_9_2_14_reg_330 <= grp_fu_733_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_855 <= i_1_fu_525_p2;
                l3_out_buffer_9_10_s_reg_846 <= ap_sig_allocacmp_l3_out_buffer_9_10_s;
                l3_out_buffer_9_1_l_reg_801 <= ap_sig_allocacmp_l3_out_buffer_9_1_l;
                l3_out_buffer_9_2_l_reg_806 <= ap_sig_allocacmp_l3_out_buffer_9_2_l;
                l3_out_buffer_9_3_l_reg_811 <= ap_sig_allocacmp_l3_out_buffer_9_3_l;
                l3_out_buffer_9_4_l_reg_816 <= ap_sig_allocacmp_l3_out_buffer_9_4_l;
                l3_out_buffer_9_5_l_reg_821 <= ap_sig_allocacmp_l3_out_buffer_9_5_l;
                l3_out_buffer_9_6_l_reg_826 <= ap_sig_allocacmp_l3_out_buffer_9_6_l;
                l3_out_buffer_9_7_l_reg_831 <= ap_sig_allocacmp_l3_out_buffer_9_7_l;
                l3_out_buffer_9_8_l_reg_836 <= ap_sig_allocacmp_l3_out_buffer_9_8_l;
                l3_out_buffer_9_9_l_reg_841 <= ap_sig_allocacmp_l3_out_buffer_9_9_l;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                i_2_reg_1033 <= i_2_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln151_reg_851 <= icmp_ln151_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln158_reg_865 <= icmp_ln158_fu_590_p2;
                icmp_ln158_reg_865_pp1_iter1_reg <= icmp_ln158_reg_865;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln171_reg_1029 <= icmp_ln171_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((i_0_reg_318 = ap_const_lv4_9) or ((i_0_reg_318 = ap_const_lv4_A) or ((i_0_reg_318 = ap_const_lv4_B) or ((i_0_reg_318 = ap_const_lv4_C) or ((i_0_reg_318 = ap_const_lv4_D) or ((i_0_reg_318 = ap_const_lv4_E) or (i_0_reg_318 = ap_const_lv4_F))))))))) then
                l3_out_buffer_9_10_fu_158 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_0))) then
                l3_out_buffer_9_1_fu_122 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_1))) then
                l3_out_buffer_9_2_fu_126 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_2))) then
                l3_out_buffer_9_3_fu_130 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_3))) then
                l3_out_buffer_9_4_fu_134 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_4))) then
                l3_out_buffer_9_5_fu_138 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_5))) then
                l3_out_buffer_9_6_fu_142 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_6))) then
                l3_out_buffer_9_7_fu_146 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_7))) then
                l3_out_buffer_9_8_fu_150 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_8))) then
                l3_out_buffer_9_9_fu_154 <= l3_out_buffer_0_2_fu_536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln158_reg_865 = ap_const_lv1_0))) then
                l3_weights_0_load_reg_929 <= l3_weights_0_q0;
                l3_weights_1_load_reg_934 <= l3_weights_1_q0;
                l3_weights_2_load_reg_939 <= l3_weights_2_q0;
                l3_weights_3_load_reg_944 <= l3_weights_3_q0;
                l3_weights_4_load_reg_949 <= l3_weights_4_q0;
                l3_weights_5_load_reg_954 <= l3_weights_5_q0;
                l3_weights_6_load_reg_959 <= l3_weights_6_q0;
                l3_weights_7_load_reg_964 <= l3_weights_7_q0;
                l3_weights_8_load_reg_969 <= l3_weights_8_q0;
                l3_weights_9_load_reg_974 <= l3_weights_9_q0;
                tmp_19_reg_924 <= l3_in_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter0, icmp_ln151_fu_519_p2, icmp_ln158_fu_590_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, icmp_ln171_fu_649_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln151_fu_519_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln151_fu_519_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln158_fu_590_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln158_fu_590_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln171_fu_649_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln171_fu_649_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(l3_in_V_empty_n, ap_enable_reg_pp1_iter1, icmp_ln158_reg_865)
    begin
                ap_block_pp1_stage0_11001 <= ((l3_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln158_reg_865 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(l3_in_V_empty_n, ap_enable_reg_pp1_iter1, icmp_ln158_reg_865)
    begin
                ap_block_pp1_stage0_subdone <= ((l3_in_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln158_reg_865 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(l3_out_V_full_n, ap_enable_reg_pp2_iter1, icmp_ln171_reg_1029)
    begin
                ap_block_pp2_stage0_01001 <= ((l3_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln171_reg_1029 = ap_const_lv1_0));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(l3_out_V_full_n, ap_enable_reg_pp2_iter1, icmp_ln171_reg_1029)
    begin
                ap_block_pp2_stage0_11001 <= ((l3_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln171_reg_1029 = ap_const_lv1_0));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(l3_out_V_full_n, ap_enable_reg_pp2_iter1, icmp_ln171_reg_1029)
    begin
                ap_block_pp2_stage0_subdone <= ((l3_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln171_reg_1029 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp2_stage0_iter1_assign_proc : process(l3_out_V_full_n, icmp_ln171_reg_1029)
    begin
                ap_block_state10_pp2_stage0_iter1 <= ((l3_out_V_full_n = ap_const_logic_0) and (icmp_ln171_reg_1029 = ap_const_lv1_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(l3_in_V_empty_n, icmp_ln158_reg_865)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((l3_in_V_empty_n = ap_const_logic_0) and (icmp_ln158_reg_865 = ap_const_lv1_0));
    end process;

        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_338_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
                ap_condition_338 <= ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0));
    end process;


    ap_condition_468_assign_proc : process(icmp_ln171_fu_649_p2, ap_phi_mux_i2_0_phi_fu_445_p4)
    begin
                ap_condition_468 <= (not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_0)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_8)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_7)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_6)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_5)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_4)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_3)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_2)) and not((ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_1)) and (icmp_ln171_fu_649_p2 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln151_fu_519_p2)
    begin
        if ((icmp_ln151_fu_519_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln158_fu_590_p2)
    begin
        if ((icmp_ln158_fu_590_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(icmp_ln171_fu_649_p2)
    begin
        if ((icmp_ln171_fu_649_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i2_0_phi_fu_445_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln171_reg_1029, i2_0_reg_441, i_2_reg_1033)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln171_reg_1029 = ap_const_lv1_0))) then 
            ap_phi_mux_i2_0_phi_fu_445_p4 <= i_2_reg_1033;
        else 
            ap_phi_mux_i2_0_phi_fu_445_p4 <= i2_0_reg_441;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_322_p4_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, icmp_ln151_reg_851, i_1_reg_855, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln151_reg_851 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_322_p4 <= i_1_reg_855;
        else 
            ap_phi_mux_i_0_phi_fu_322_p4 <= i_0_reg_318;
        end if; 
    end process;

    ap_phi_reg_pp2_iter0_tmp_reg_453 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_l3_out_buffer_9_10_s_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_10_fu_158)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((i_0_reg_318 = ap_const_lv4_9) or ((i_0_reg_318 = ap_const_lv4_A) or ((i_0_reg_318 = ap_const_lv4_B) or ((i_0_reg_318 = ap_const_lv4_C) or ((i_0_reg_318 = ap_const_lv4_D) or ((i_0_reg_318 = ap_const_lv4_E) or (i_0_reg_318 = ap_const_lv4_F))))))))) then 
            ap_sig_allocacmp_l3_out_buffer_9_10_s <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_10_s <= l3_out_buffer_9_10_fu_158;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_1_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_9_1_fu_122, l3_out_buffer_0_2_fu_536_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_0))) then 
            ap_sig_allocacmp_l3_out_buffer_9_1_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_1_l <= l3_out_buffer_9_1_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_2_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_2_fu_126)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_1))) then 
            ap_sig_allocacmp_l3_out_buffer_9_2_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_2_l <= l3_out_buffer_9_2_fu_126;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_3_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_3_fu_130)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_2))) then 
            ap_sig_allocacmp_l3_out_buffer_9_3_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_3_l <= l3_out_buffer_9_3_fu_130;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_4_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_4_fu_134)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_3))) then 
            ap_sig_allocacmp_l3_out_buffer_9_4_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_4_l <= l3_out_buffer_9_4_fu_134;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_5_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_5_fu_138)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_4))) then 
            ap_sig_allocacmp_l3_out_buffer_9_5_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_5_l <= l3_out_buffer_9_5_fu_138;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_6_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_6_fu_142)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_5))) then 
            ap_sig_allocacmp_l3_out_buffer_9_6_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_6_l <= l3_out_buffer_9_6_fu_142;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_7_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_7_fu_146)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_6))) then 
            ap_sig_allocacmp_l3_out_buffer_9_7_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_7_l <= l3_out_buffer_9_7_fu_146;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_8_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_8_fu_150)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_7))) then 
            ap_sig_allocacmp_l3_out_buffer_9_8_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_8_l <= l3_out_buffer_9_8_fu_150;
        end if; 
    end process;


    ap_sig_allocacmp_l3_out_buffer_9_9_l_assign_proc : process(i_0_reg_318, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, l3_out_buffer_0_2_fu_536_p1, l3_out_buffer_9_9_fu_154)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (i_0_reg_318 = ap_const_lv4_8))) then 
            ap_sig_allocacmp_l3_out_buffer_9_9_l <= l3_out_buffer_0_2_fu_536_p1;
        else 
            ap_sig_allocacmp_l3_out_buffer_9_9_l <= l3_out_buffer_9_9_fu_154;
        end if; 
    end process;

    grp_fu_661_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_669_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_677_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_685_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_693_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_701_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_709_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_717_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_725_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    grp_fu_733_p0 <= sext_ln166_fu_616_p1(16 - 1 downto 0);
    i_1_fu_525_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_322_p4) + unsigned(ap_const_lv4_1));
    i_2_fu_655_p2 <= std_logic_vector(unsigned(ap_phi_mux_i2_0_phi_fu_445_p4) + unsigned(ap_const_lv4_1));
    i_fu_596_p2 <= std_logic_vector(unsigned(i1_0_reg_430) + unsigned(ap_const_lv7_1));
    icmp_ln151_fu_519_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_322_p4 = ap_const_lv4_A) else "0";
    icmp_ln158_fu_590_p2 <= "1" when (i1_0_reg_430 = ap_const_lv7_40) else "0";
    icmp_ln171_fu_649_p2 <= "1" when (ap_phi_mux_i2_0_phi_fu_445_p4 = ap_const_lv4_A) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l3_biases_address0 <= zext_ln154_fu_531_p1(4 - 1 downto 0);

    l3_biases_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l3_biases_ce0 <= ap_const_logic_1;
        else 
            l3_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l3_in_V_blk_n_assign_proc : process(l3_in_V_empty_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln158_reg_865)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln158_reg_865 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            l3_in_V_blk_n <= l3_in_V_empty_n;
        else 
            l3_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l3_in_V_read_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln158_reg_865, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln158_reg_865 = ap_const_lv1_0))) then 
            l3_in_V_read <= ap_const_logic_1;
        else 
            l3_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    l3_out_V_blk_n_assign_proc : process(l3_out_V_full_n, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln171_reg_1029)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln171_reg_1029 = ap_const_lv1_0))) then 
            l3_out_V_blk_n <= l3_out_V_full_n;
        else 
            l3_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l3_out_V_din <= ap_phi_reg_pp2_iter1_tmp_reg_453;

    l3_out_V_write_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln171_reg_1029, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln171_reg_1029 = ap_const_lv1_0))) then 
            l3_out_V_write <= ap_const_logic_1;
        else 
            l3_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

        l3_out_buffer_0_2_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l3_biases_q0),32));

    l3_weights_0_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_0_ce0 <= ap_const_logic_1;
        else 
            l3_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_1_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_1_ce0 <= ap_const_logic_1;
        else 
            l3_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_2_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_2_ce0 <= ap_const_logic_1;
        else 
            l3_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_3_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_3_ce0 <= ap_const_logic_1;
        else 
            l3_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_4_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_4_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_4_ce0 <= ap_const_logic_1;
        else 
            l3_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_5_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_5_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_5_ce0 <= ap_const_logic_1;
        else 
            l3_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_6_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_6_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_6_ce0 <= ap_const_logic_1;
        else 
            l3_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_7_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_7_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_7_ce0 <= ap_const_logic_1;
        else 
            l3_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_8_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_8_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_8_ce0 <= ap_const_logic_1;
        else 
            l3_weights_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l3_weights_9_address0 <= zext_ln166_fu_602_p1(6 - 1 downto 0);

    l3_weights_9_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            l3_weights_9_ce0 <= ap_const_logic_1;
        else 
            l3_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln166_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_reg_924),24));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln154_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_322_p4),64));
    zext_ln166_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_430),64));
end behav;
