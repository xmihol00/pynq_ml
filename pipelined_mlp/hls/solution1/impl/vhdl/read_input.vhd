-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    l1_in_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    l1_in_V_full_n : IN STD_LOGIC;
    l1_in_V_write : OUT STD_LOGIC );
end;


architecture behav of read_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln32_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_153_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_281 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_data_V_reg_286 : STD_LOGIC_VECTOR (127 downto 0);
    signal j_fu_169_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_295 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln681_3_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln681_3_reg_300 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln39_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_fu_241_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln681_reg_305 : STD_LOGIC_VECTOR (127 downto 0);
    signal low_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal low_reg_310 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal high_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_103 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal Lo_assign_reg_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal Hi_assign_reg_125 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln681_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln681_2_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_181_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln681_1_fu_196_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_fu_208_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_2_fu_223_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln681_1_fu_216_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln681_fu_237_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln681_1_fu_259_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln681_1_fu_262_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_268_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_in_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_data_V_U_apdone_blk);

    regslice_both_in_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int,
        vld_out => regslice_both_in_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_keep_V_U_apdone_blk);

    regslice_both_in_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int,
        vld_out => regslice_both_in_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_strb_V_U_apdone_blk);

    regslice_both_in_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Hi_assign_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_in_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                Hi_assign_reg_125 <= high_reg_315;
            elsif ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Hi_assign_reg_125 <= ap_const_lv8_7;
            end if; 
        end if;
    end process;

    Lo_assign_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_in_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                Lo_assign_reg_114 <= low_reg_310;
            elsif ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Lo_assign_reg_114 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_103 <= i_reg_281;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_103 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((l1_in_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_136 <= j_reg_295;
            elsif ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_136 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                high_reg_315 <= high_fu_253_p2;
                low_reg_310 <= low_fu_247_p2;
                lshr_ln681_reg_305 <= lshr_ln681_fu_241_p2;
                sub_ln681_3_reg_300 <= sub_ln681_3_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_281 <= i_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_295 <= j_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_286 <= in_r_TDATA_int;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, l1_in_V_full_n, ap_CS_fsm_state2, icmp_ln32_fu_147_p2, ap_CS_fsm_state4, ap_CS_fsm_state3, icmp_ln39_fu_163_p2, in_r_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((l1_in_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln32_fu_147_p2, in_r_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln32_fu_147_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    high_fu_253_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(Hi_assign_reg_125));
    i_fu_153_p2 <= std_logic_vector(unsigned(i_0_reg_103) + unsigned(ap_const_lv6_1));
    icmp_ln32_fu_147_p2 <= "1" when (i_0_reg_103 = ap_const_lv6_31) else "0";
    icmp_ln39_fu_163_p2 <= "1" when (j_0_reg_136 = ap_const_lv5_10) else "0";
    icmp_ln681_fu_175_p2 <= "1" when (unsigned(Lo_assign_reg_114) > unsigned(Hi_assign_reg_125)) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_147_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_V_data_V_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_V_data_V_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_147_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_147_p2, in_r_TVALID_int)
    begin
        if ((not(((icmp_ln32_fu_147_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln32_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_169_p2 <= std_logic_vector(unsigned(j_0_reg_136) + unsigned(ap_const_lv5_1));

    l1_in_V_blk_n_assign_proc : process(l1_in_V_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_in_V_blk_n <= l1_in_V_full_n;
        else 
            l1_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l1_in_V_din <= p_Result_s_fu_268_p2(8 - 1 downto 0);

    l1_in_V_write_assign_proc : process(l1_in_V_full_n, ap_CS_fsm_state4)
    begin
        if (((l1_in_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            l1_in_V_write <= ap_const_logic_1;
        else 
            l1_in_V_write <= ap_const_logic_0;
        end if; 
    end process;

    low_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(Lo_assign_reg_114));
    lshr_ln681_1_fu_262_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & zext_ln681_1_fu_259_p1(31-1 downto 0)))));
    lshr_ln681_fu_241_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_1_fu_216_p3),to_integer(unsigned('0' & zext_ln681_fu_237_p1(31-1 downto 0)))));
    p_Result_s_fu_268_p2 <= (lshr_ln681_reg_305 and lshr_ln681_1_fu_262_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln681_1_fu_216_p3 <= 
        tmp_fu_181_p4 when (icmp_ln681_fu_175_p2(0) = '1') else 
        tmp_data_V_reg_286;
    select_ln681_2_fu_223_p3 <= 
        sub_ln681_1_fu_196_p2 when (icmp_ln681_fu_175_p2(0) = '1') else 
        Lo_assign_reg_114;
    select_ln681_fu_208_p3 <= 
        sub_ln681_fu_190_p2 when (icmp_ln681_fu_175_p2(0) = '1') else 
        sub_ln681_2_fu_202_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln681_1_fu_196_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(Lo_assign_reg_114));
    sub_ln681_2_fu_202_p2 <= std_logic_vector(unsigned(Hi_assign_reg_125) - unsigned(Lo_assign_reg_114));
    sub_ln681_3_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln681_fu_208_p3));
    sub_ln681_fu_190_p2 <= std_logic_vector(unsigned(Lo_assign_reg_114) - unsigned(Hi_assign_reg_125));
    
    tmp_fu_181_p4_proc : process(tmp_data_V_reg_286)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_181_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_data_V_reg_286;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_fu_181_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_181_p4_i) := tmp_data_V_reg_286(128-1-tmp_fu_181_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_181_p4 <= resvalue(128-1 downto 0);
    end process;

    zext_ln681_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_3_reg_300),128));
    zext_ln681_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_2_fu_223_p3),128));
end behav;
