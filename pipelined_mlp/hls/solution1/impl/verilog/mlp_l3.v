// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mlp_l3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        l3_in_V_dout,
        l3_in_V_empty_n,
        l3_in_V_read,
        l3_out_V_din,
        l3_out_V_full_n,
        l3_out_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state4 = 7'd4;
parameter    ap_ST_fsm_pp1_stage0 = 7'd8;
parameter    ap_ST_fsm_state8 = 7'd16;
parameter    ap_ST_fsm_pp2_stage0 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] l3_in_V_dout;
input   l3_in_V_empty_n;
output   l3_in_V_read;
output  [31:0] l3_out_V_din;
input   l3_out_V_full_n;
output   l3_out_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg l3_in_V_read;
reg l3_out_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [3:0] l3_biases_address0;
reg    l3_biases_ce0;
wire   [7:0] l3_biases_q0;
wire   [5:0] l3_weights_0_address0;
reg    l3_weights_0_ce0;
wire   [7:0] l3_weights_0_q0;
wire   [5:0] l3_weights_1_address0;
reg    l3_weights_1_ce0;
wire   [7:0] l3_weights_1_q0;
wire   [5:0] l3_weights_2_address0;
reg    l3_weights_2_ce0;
wire   [7:0] l3_weights_2_q0;
wire   [5:0] l3_weights_3_address0;
reg    l3_weights_3_ce0;
wire   [7:0] l3_weights_3_q0;
wire   [5:0] l3_weights_4_address0;
reg    l3_weights_4_ce0;
wire   [7:0] l3_weights_4_q0;
wire   [5:0] l3_weights_5_address0;
reg    l3_weights_5_ce0;
wire   [7:0] l3_weights_5_q0;
wire   [5:0] l3_weights_6_address0;
reg    l3_weights_6_ce0;
wire   [7:0] l3_weights_6_q0;
wire   [5:0] l3_weights_7_address0;
reg    l3_weights_7_ce0;
wire   [7:0] l3_weights_7_q0;
wire   [5:0] l3_weights_8_address0;
reg    l3_weights_8_ce0;
wire   [7:0] l3_weights_8_q0;
wire   [5:0] l3_weights_9_address0;
reg    l3_weights_9_ce0;
wire   [7:0] l3_weights_9_q0;
reg    l3_in_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln158_reg_865;
reg    l3_out_V_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln171_reg_1029;
reg   [3:0] i_0_reg_318;
reg   [31:0] l3_out_buffer_9_2_14_reg_330;
reg   [31:0] l3_out_buffer_8_2_reg_340;
reg   [31:0] l3_out_buffer_7_2_reg_350;
reg   [31:0] l3_out_buffer_6_2_reg_360;
reg   [31:0] l3_out_buffer_5_2_reg_370;
reg   [31:0] l3_out_buffer_4_2_reg_380;
reg   [31:0] l3_out_buffer_3_2_reg_390;
reg   [31:0] l3_out_buffer_2_2_reg_400;
reg   [31:0] l3_out_buffer_1_2_reg_410;
reg   [31:0] l3_out_buffer_0_2_15_reg_420;
reg   [6:0] i1_0_reg_430;
reg   [3:0] i2_0_reg_441;
reg   [31:0] l3_out_buffer_9_1_l_reg_801;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] l3_out_buffer_9_2_l_reg_806;
reg   [31:0] l3_out_buffer_9_3_l_reg_811;
reg   [31:0] l3_out_buffer_9_4_l_reg_816;
reg   [31:0] l3_out_buffer_9_5_l_reg_821;
reg   [31:0] l3_out_buffer_9_6_l_reg_826;
reg   [31:0] l3_out_buffer_9_7_l_reg_831;
reg   [31:0] l3_out_buffer_9_8_l_reg_836;
reg   [31:0] l3_out_buffer_9_9_l_reg_841;
reg   [31:0] l3_out_buffer_9_10_s_reg_846;
wire   [0:0] icmp_ln151_fu_519_p2;
reg   [0:0] icmp_ln151_reg_851;
wire   [3:0] i_1_fu_525_p2;
reg   [3:0] i_1_reg_855;
wire   [0:0] icmp_ln158_fu_590_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln158_reg_865_pp1_iter1_reg;
wire   [6:0] i_fu_596_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [15:0] tmp_19_reg_924;
reg  signed [7:0] l3_weights_0_load_reg_929;
reg  signed [7:0] l3_weights_1_load_reg_934;
reg  signed [7:0] l3_weights_2_load_reg_939;
reg  signed [7:0] l3_weights_3_load_reg_944;
reg  signed [7:0] l3_weights_4_load_reg_949;
reg  signed [7:0] l3_weights_5_load_reg_954;
reg  signed [7:0] l3_weights_6_load_reg_959;
reg  signed [7:0] l3_weights_7_load_reg_964;
reg  signed [7:0] l3_weights_8_load_reg_969;
reg  signed [7:0] l3_weights_9_load_reg_974;
wire  signed [31:0] grp_fu_661_p3;
reg    ap_enable_reg_pp1_iter2;
wire  signed [31:0] grp_fu_669_p3;
wire  signed [31:0] grp_fu_677_p3;
wire  signed [31:0] grp_fu_685_p3;
wire  signed [31:0] grp_fu_693_p3;
wire  signed [31:0] grp_fu_701_p3;
wire  signed [31:0] grp_fu_709_p3;
wire  signed [31:0] grp_fu_717_p3;
wire  signed [31:0] grp_fu_725_p3;
wire  signed [31:0] grp_fu_733_p3;
wire   [0:0] icmp_ln171_fu_649_p2;
wire    ap_block_state9_pp2_stage0_iter0;
reg    ap_block_state10_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [3:0] i_2_fu_655_p2;
reg   [3:0] i_2_reg_1033;
reg    ap_enable_reg_pp2_iter0;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
wire    ap_CS_fsm_state8;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg   [3:0] ap_phi_mux_i_0_phi_fu_322_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i2_0_phi_fu_445_p4;
wire   [31:0] ap_phi_reg_pp2_iter0_tmp_reg_453;
reg   [31:0] ap_phi_reg_pp2_iter1_tmp_reg_453;
wire   [63:0] zext_ln154_fu_531_p1;
wire   [63:0] zext_ln166_fu_602_p1;
reg   [31:0] l3_out_buffer_9_1_fu_122;
wire  signed [31:0] l3_out_buffer_0_2_fu_536_p1;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_1_l;
reg   [31:0] l3_out_buffer_9_2_fu_126;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_2_l;
reg   [31:0] l3_out_buffer_9_3_fu_130;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_3_l;
reg   [31:0] l3_out_buffer_9_4_fu_134;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_4_l;
reg   [31:0] l3_out_buffer_9_5_fu_138;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_5_l;
reg   [31:0] l3_out_buffer_9_6_fu_142;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_6_l;
reg   [31:0] l3_out_buffer_9_7_fu_146;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_7_l;
reg   [31:0] l3_out_buffer_9_8_fu_150;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_8_l;
reg   [31:0] l3_out_buffer_9_9_fu_154;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_9_l;
reg   [31:0] l3_out_buffer_9_10_fu_158;
reg   [31:0] ap_sig_allocacmp_l3_out_buffer_9_10_s;
reg    ap_block_pp2_stage0_01001;
wire  signed [15:0] grp_fu_661_p0;
wire  signed [23:0] sext_ln166_fu_616_p1;
wire  signed [15:0] grp_fu_669_p0;
wire  signed [15:0] grp_fu_677_p0;
wire  signed [15:0] grp_fu_685_p0;
wire  signed [15:0] grp_fu_693_p0;
wire  signed [15:0] grp_fu_701_p0;
wire  signed [15:0] grp_fu_709_p0;
wire  signed [15:0] grp_fu_717_p0;
wire  signed [15:0] grp_fu_725_p0;
wire  signed [15:0] grp_fu_733_p0;
wire    ap_CS_fsm_state11;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_468;
reg    ap_condition_338;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

mlp_l3_l3_biases #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l3_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_biases_address0),
    .ce0(l3_biases_ce0),
    .q0(l3_biases_q0)
);

mlp_l3_l3_weights_0 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_0_address0),
    .ce0(l3_weights_0_ce0),
    .q0(l3_weights_0_q0)
);

mlp_l3_l3_weights_1 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_1_address0),
    .ce0(l3_weights_1_ce0),
    .q0(l3_weights_1_q0)
);

mlp_l3_l3_weights_2 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_2_address0),
    .ce0(l3_weights_2_ce0),
    .q0(l3_weights_2_q0)
);

mlp_l3_l3_weights_3 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_3_address0),
    .ce0(l3_weights_3_ce0),
    .q0(l3_weights_3_q0)
);

mlp_l3_l3_weights_4 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_4_address0),
    .ce0(l3_weights_4_ce0),
    .q0(l3_weights_4_q0)
);

mlp_l3_l3_weights_5 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_5_address0),
    .ce0(l3_weights_5_ce0),
    .q0(l3_weights_5_q0)
);

mlp_l3_l3_weights_6 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_6_address0),
    .ce0(l3_weights_6_ce0),
    .q0(l3_weights_6_q0)
);

mlp_l3_l3_weights_7 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_7_address0),
    .ce0(l3_weights_7_ce0),
    .q0(l3_weights_7_q0)
);

mlp_l3_l3_weights_8 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_8_address0),
    .ce0(l3_weights_8_ce0),
    .q0(l3_weights_8_q0)
);

mlp_l3_l3_weights_9 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
l3_weights_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l3_weights_9_address0),
    .ce0(l3_weights_9_ce0),
    .q0(l3_weights_9_q0)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U341(
    .din0(grp_fu_661_p0),
    .din1(l3_weights_0_load_reg_929),
    .din2(l3_out_buffer_0_2_15_reg_420),
    .dout(grp_fu_661_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U342(
    .din0(grp_fu_669_p0),
    .din1(l3_weights_1_load_reg_934),
    .din2(l3_out_buffer_1_2_reg_410),
    .dout(grp_fu_669_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U343(
    .din0(grp_fu_677_p0),
    .din1(l3_weights_2_load_reg_939),
    .din2(l3_out_buffer_2_2_reg_400),
    .dout(grp_fu_677_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U344(
    .din0(grp_fu_685_p0),
    .din1(l3_weights_3_load_reg_944),
    .din2(l3_out_buffer_3_2_reg_390),
    .dout(grp_fu_685_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U345(
    .din0(grp_fu_693_p0),
    .din1(l3_weights_4_load_reg_949),
    .din2(l3_out_buffer_4_2_reg_380),
    .dout(grp_fu_693_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U346(
    .din0(grp_fu_701_p0),
    .din1(l3_weights_5_load_reg_954),
    .din2(l3_out_buffer_5_2_reg_370),
    .dout(grp_fu_701_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U347(
    .din0(grp_fu_709_p0),
    .din1(l3_weights_6_load_reg_959),
    .din2(l3_out_buffer_6_2_reg_360),
    .dout(grp_fu_709_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U348(
    .din0(grp_fu_717_p0),
    .din1(l3_weights_7_load_reg_964),
    .din2(l3_out_buffer_7_2_reg_350),
    .dout(grp_fu_717_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U349(
    .din0(grp_fu_725_p0),
    .din1(l3_weights_8_load_reg_969),
    .din2(l3_out_buffer_8_2_reg_340),
    .dout(grp_fu_725_p3)
);

mlp_mac_muladd_16cYC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_mac_muladd_16cYC_U350(
    .din0(grp_fu_733_p0),
    .din1(l3_weights_9_load_reg_974),
    .din2(l3_out_buffer_9_2_14_reg_330),
    .dout(grp_fu_733_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_338)) begin
        if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd0) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_0_2_15_reg_420;
        end else if ((1'b1 == ap_condition_468)) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_9_2_14_reg_330;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd8) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_8_2_reg_340;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd7) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_7_2_reg_350;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd6) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_6_2_reg_360;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd5) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_5_2_reg_370;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd4) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_4_2_reg_380;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd3) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_3_2_reg_390;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd2) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_2_2_reg_400;
        end else if (((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd1) & (icmp_ln171_fu_649_p2 == 1'd0))) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= l3_out_buffer_1_2_reg_410;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp2_iter1_tmp_reg_453 <= ap_phi_reg_pp2_iter0_tmp_reg_453;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_430 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln158_fu_590_p2 == 1'd0))) begin
        i1_0_reg_430 <= i_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i2_0_reg_441 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln171_reg_1029 == 1'd0))) begin
        i2_0_reg_441 <= i_2_reg_1033;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln151_reg_851 == 1'd0))) begin
        i_0_reg_318 <= i_1_reg_855;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_318 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_0_2_15_reg_420 <= l3_out_buffer_9_1_l_reg_801;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_0_2_15_reg_420 <= grp_fu_661_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_1_2_reg_410 <= l3_out_buffer_9_2_l_reg_806;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_1_2_reg_410 <= grp_fu_669_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_2_2_reg_400 <= l3_out_buffer_9_3_l_reg_811;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_2_2_reg_400 <= grp_fu_677_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_3_2_reg_390 <= l3_out_buffer_9_4_l_reg_816;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_3_2_reg_390 <= grp_fu_685_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_4_2_reg_380 <= l3_out_buffer_9_5_l_reg_821;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_4_2_reg_380 <= grp_fu_693_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_5_2_reg_370 <= l3_out_buffer_9_6_l_reg_826;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_5_2_reg_370 <= grp_fu_701_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_6_2_reg_360 <= l3_out_buffer_9_7_l_reg_831;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_6_2_reg_360 <= grp_fu_709_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_7_2_reg_350 <= l3_out_buffer_9_8_l_reg_836;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_7_2_reg_350 <= grp_fu_717_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_8_2_reg_340 <= l3_out_buffer_9_9_l_reg_841;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_8_2_reg_340 <= grp_fu_725_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l3_out_buffer_9_2_14_reg_330 <= l3_out_buffer_9_10_s_reg_846;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln158_reg_865_pp1_iter1_reg == 1'd0))) begin
        l3_out_buffer_9_2_14_reg_330 <= grp_fu_733_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_855 <= i_1_fu_525_p2;
        l3_out_buffer_9_10_s_reg_846 <= ap_sig_allocacmp_l3_out_buffer_9_10_s;
        l3_out_buffer_9_1_l_reg_801 <= ap_sig_allocacmp_l3_out_buffer_9_1_l;
        l3_out_buffer_9_2_l_reg_806 <= ap_sig_allocacmp_l3_out_buffer_9_2_l;
        l3_out_buffer_9_3_l_reg_811 <= ap_sig_allocacmp_l3_out_buffer_9_3_l;
        l3_out_buffer_9_4_l_reg_816 <= ap_sig_allocacmp_l3_out_buffer_9_4_l;
        l3_out_buffer_9_5_l_reg_821 <= ap_sig_allocacmp_l3_out_buffer_9_5_l;
        l3_out_buffer_9_6_l_reg_826 <= ap_sig_allocacmp_l3_out_buffer_9_6_l;
        l3_out_buffer_9_7_l_reg_831 <= ap_sig_allocacmp_l3_out_buffer_9_7_l;
        l3_out_buffer_9_8_l_reg_836 <= ap_sig_allocacmp_l3_out_buffer_9_8_l;
        l3_out_buffer_9_9_l_reg_841 <= ap_sig_allocacmp_l3_out_buffer_9_9_l;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_1033 <= i_2_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln151_reg_851 <= icmp_ln151_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln158_reg_865 <= icmp_ln158_fu_590_p2;
        icmp_ln158_reg_865_pp1_iter1_reg <= icmp_ln158_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln171_reg_1029 <= icmp_ln171_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((i_0_reg_318 == 4'd9) | ((i_0_reg_318 == 4'd10) | ((i_0_reg_318 == 4'd11) | ((i_0_reg_318 == 4'd12) | ((i_0_reg_318 == 4'd13) | ((i_0_reg_318 == 4'd14) | (i_0_reg_318 == 4'd15))))))))) begin
        l3_out_buffer_9_10_fu_158 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd0))) begin
        l3_out_buffer_9_1_fu_122 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd1))) begin
        l3_out_buffer_9_2_fu_126 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd2))) begin
        l3_out_buffer_9_3_fu_130 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd3))) begin
        l3_out_buffer_9_4_fu_134 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd4))) begin
        l3_out_buffer_9_5_fu_138 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd5))) begin
        l3_out_buffer_9_6_fu_142 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd6))) begin
        l3_out_buffer_9_7_fu_146 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd7))) begin
        l3_out_buffer_9_8_fu_150 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd8))) begin
        l3_out_buffer_9_9_fu_154 <= l3_out_buffer_0_2_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln158_reg_865 == 1'd0))) begin
        l3_weights_0_load_reg_929 <= l3_weights_0_q0;
        l3_weights_1_load_reg_934 <= l3_weights_1_q0;
        l3_weights_2_load_reg_939 <= l3_weights_2_q0;
        l3_weights_3_load_reg_944 <= l3_weights_3_q0;
        l3_weights_4_load_reg_949 <= l3_weights_4_q0;
        l3_weights_5_load_reg_954 <= l3_weights_5_q0;
        l3_weights_6_load_reg_959 <= l3_weights_6_q0;
        l3_weights_7_load_reg_964 <= l3_weights_7_q0;
        l3_weights_8_load_reg_969 <= l3_weights_8_q0;
        l3_weights_9_load_reg_974 <= l3_weights_9_q0;
        tmp_19_reg_924 <= l3_in_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln151_fu_519_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln158_fu_590_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln171_fu_649_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln171_reg_1029 == 1'd0))) begin
        ap_phi_mux_i2_0_phi_fu_445_p4 = i_2_reg_1033;
    end else begin
        ap_phi_mux_i2_0_phi_fu_445_p4 = i2_0_reg_441;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln151_reg_851 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_322_p4 = i_1_reg_855;
    end else begin
        ap_phi_mux_i_0_phi_fu_322_p4 = i_0_reg_318;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((i_0_reg_318 == 4'd9) | ((i_0_reg_318 == 4'd10) | ((i_0_reg_318 == 4'd11) | ((i_0_reg_318 == 4'd12) | ((i_0_reg_318 == 4'd13) | ((i_0_reg_318 == 4'd14) | (i_0_reg_318 == 4'd15))))))))) begin
        ap_sig_allocacmp_l3_out_buffer_9_10_s = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_10_s = l3_out_buffer_9_10_fu_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd0))) begin
        ap_sig_allocacmp_l3_out_buffer_9_1_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_1_l = l3_out_buffer_9_1_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd1))) begin
        ap_sig_allocacmp_l3_out_buffer_9_2_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_2_l = l3_out_buffer_9_2_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd2))) begin
        ap_sig_allocacmp_l3_out_buffer_9_3_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_3_l = l3_out_buffer_9_3_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd3))) begin
        ap_sig_allocacmp_l3_out_buffer_9_4_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_4_l = l3_out_buffer_9_4_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd4))) begin
        ap_sig_allocacmp_l3_out_buffer_9_5_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_5_l = l3_out_buffer_9_5_fu_138;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd5))) begin
        ap_sig_allocacmp_l3_out_buffer_9_6_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_6_l = l3_out_buffer_9_6_fu_142;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd6))) begin
        ap_sig_allocacmp_l3_out_buffer_9_7_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_7_l = l3_out_buffer_9_7_fu_146;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd7))) begin
        ap_sig_allocacmp_l3_out_buffer_9_8_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_8_l = l3_out_buffer_9_8_fu_150;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (i_0_reg_318 == 4'd8))) begin
        ap_sig_allocacmp_l3_out_buffer_9_9_l = l3_out_buffer_0_2_fu_536_p1;
    end else begin
        ap_sig_allocacmp_l3_out_buffer_9_9_l = l3_out_buffer_9_9_fu_154;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l3_biases_ce0 = 1'b1;
    end else begin
        l3_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln158_reg_865 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        l3_in_V_blk_n = l3_in_V_empty_n;
    end else begin
        l3_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln158_reg_865 == 1'd0))) begin
        l3_in_V_read = 1'b1;
    end else begin
        l3_in_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln171_reg_1029 == 1'd0))) begin
        l3_out_V_blk_n = l3_out_V_full_n;
    end else begin
        l3_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln171_reg_1029 == 1'd0))) begin
        l3_out_V_write = 1'b1;
    end else begin
        l3_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_0_ce0 = 1'b1;
    end else begin
        l3_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_1_ce0 = 1'b1;
    end else begin
        l3_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_2_ce0 = 1'b1;
    end else begin
        l3_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_3_ce0 = 1'b1;
    end else begin
        l3_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_4_ce0 = 1'b1;
    end else begin
        l3_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_5_ce0 = 1'b1;
    end else begin
        l3_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_6_ce0 = 1'b1;
    end else begin
        l3_weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_7_ce0 = 1'b1;
    end else begin
        l3_weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_8_ce0 = 1'b1;
    end else begin
        l3_weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l3_weights_9_ce0 = 1'b1;
    end else begin
        l3_weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln151_fu_519_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln151_fu_519_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln158_fu_590_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln158_fu_590_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln171_fu_649_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln171_fu_649_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((l3_in_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln158_reg_865 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((l3_in_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln158_reg_865 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((l3_out_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln171_reg_1029 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((l3_out_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln171_reg_1029 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((l3_out_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln171_reg_1029 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp2_stage0_iter1 = ((l3_out_V_full_n == 1'b0) & (icmp_ln171_reg_1029 == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((l3_in_V_empty_n == 1'b0) & (icmp_ln158_reg_865 == 1'd0));
end

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_338 = ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0));
end

always @ (*) begin
    ap_condition_468 = (~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd0) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd8) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd7) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd6) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd5) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd4) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd3) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd2) & ~(ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd1) & (icmp_ln171_fu_649_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp2_iter0_tmp_reg_453 = 'bx;

assign ap_ready = internal_ap_ready;

assign grp_fu_661_p0 = sext_ln166_fu_616_p1;

assign grp_fu_669_p0 = sext_ln166_fu_616_p1;

assign grp_fu_677_p0 = sext_ln166_fu_616_p1;

assign grp_fu_685_p0 = sext_ln166_fu_616_p1;

assign grp_fu_693_p0 = sext_ln166_fu_616_p1;

assign grp_fu_701_p0 = sext_ln166_fu_616_p1;

assign grp_fu_709_p0 = sext_ln166_fu_616_p1;

assign grp_fu_717_p0 = sext_ln166_fu_616_p1;

assign grp_fu_725_p0 = sext_ln166_fu_616_p1;

assign grp_fu_733_p0 = sext_ln166_fu_616_p1;

assign i_1_fu_525_p2 = (ap_phi_mux_i_0_phi_fu_322_p4 + 4'd1);

assign i_2_fu_655_p2 = (ap_phi_mux_i2_0_phi_fu_445_p4 + 4'd1);

assign i_fu_596_p2 = (i1_0_reg_430 + 7'd1);

assign icmp_ln151_fu_519_p2 = ((ap_phi_mux_i_0_phi_fu_322_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_590_p2 = ((i1_0_reg_430 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_649_p2 = ((ap_phi_mux_i2_0_phi_fu_445_p4 == 4'd10) ? 1'b1 : 1'b0);

assign l3_biases_address0 = zext_ln154_fu_531_p1;

assign l3_out_V_din = ap_phi_reg_pp2_iter1_tmp_reg_453;

assign l3_out_buffer_0_2_fu_536_p1 = $signed(l3_biases_q0);

assign l3_weights_0_address0 = zext_ln166_fu_602_p1;

assign l3_weights_1_address0 = zext_ln166_fu_602_p1;

assign l3_weights_2_address0 = zext_ln166_fu_602_p1;

assign l3_weights_3_address0 = zext_ln166_fu_602_p1;

assign l3_weights_4_address0 = zext_ln166_fu_602_p1;

assign l3_weights_5_address0 = zext_ln166_fu_602_p1;

assign l3_weights_6_address0 = zext_ln166_fu_602_p1;

assign l3_weights_7_address0 = zext_ln166_fu_602_p1;

assign l3_weights_8_address0 = zext_ln166_fu_602_p1;

assign l3_weights_9_address0 = zext_ln166_fu_602_p1;

assign sext_ln166_fu_616_p1 = $signed(tmp_19_reg_924);

assign start_out = real_start;

assign zext_ln154_fu_531_p1 = ap_phi_mux_i_0_phi_fu_322_p4;

assign zext_ln166_fu_602_p1 = i1_0_reg_430;

endmodule //mlp_l3
