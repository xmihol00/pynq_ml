// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_input (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TLAST,
        l1_in_V_din,
        l1_in_V_full_n,
        l1_in_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [127:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [15:0] in_r_TKEEP;
input  [15:0] in_r_TSTRB;
input  [0:0] in_r_TLAST;
output  [7:0] l1_in_V_din;
input   l1_in_V_full_n;
output   l1_in_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_r_TREADY;
reg l1_in_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln32_fu_147_p2;
reg    l1_in_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [5:0] i_fu_153_p2;
reg   [5:0] i_reg_281;
reg    ap_block_state2;
reg   [127:0] tmp_data_V_reg_286;
wire   [4:0] j_fu_169_p2;
reg   [4:0] j_reg_295;
wire    ap_CS_fsm_state3;
wire   [7:0] sub_ln681_3_fu_231_p2;
reg   [7:0] sub_ln681_3_reg_300;
wire   [0:0] icmp_ln39_fu_163_p2;
wire   [127:0] lshr_ln681_fu_241_p2;
reg   [127:0] lshr_ln681_reg_305;
wire   [7:0] low_fu_247_p2;
reg   [7:0] low_reg_310;
wire   [7:0] high_fu_253_p2;
reg   [7:0] high_reg_315;
reg   [5:0] i_0_reg_103;
reg    ap_block_state1;
reg   [7:0] Lo_assign_reg_114;
reg   [7:0] Hi_assign_reg_125;
reg   [4:0] j_0_reg_136;
wire   [0:0] icmp_ln681_fu_175_p2;
wire   [7:0] sub_ln681_fu_190_p2;
wire   [7:0] sub_ln681_2_fu_202_p2;
reg   [127:0] tmp_fu_181_p4;
wire   [7:0] sub_ln681_1_fu_196_p2;
wire   [7:0] select_ln681_fu_208_p3;
wire   [7:0] select_ln681_2_fu_223_p3;
wire   [127:0] select_ln681_1_fu_216_p3;
wire   [127:0] zext_ln681_fu_237_p1;
wire   [127:0] zext_ln681_1_fu_259_p1;
wire   [127:0] lshr_ln681_1_fu_262_p2;
wire   [127:0] p_Result_s_fu_268_p2;
reg   [3:0] ap_NS_fsm;
wire    regslice_both_in_V_data_V_U_apdone_blk;
wire   [127:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_V_data_V_U_ack_in;
wire    regslice_both_in_V_keep_V_U_apdone_blk;
wire   [15:0] in_r_TKEEP_int;
wire    regslice_both_in_V_keep_V_U_vld_out;
wire    regslice_both_in_V_keep_V_U_ack_in;
wire    regslice_both_in_V_strb_V_U_apdone_blk;
wire   [15:0] in_r_TSTRB_int;
wire    regslice_both_in_V_strb_V_U_vld_out;
wire    regslice_both_in_V_strb_V_U_ack_in;
wire    regslice_both_in_V_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    regslice_both_in_V_last_V_U_vld_out;
wire    regslice_both_in_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

regslice_both #(
    .DataWidth( 128 ))
regslice_both_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_data_V_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TKEEP),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_keep_V_U_ack_in),
    .data_out(in_r_TKEEP_int),
    .vld_out(regslice_both_in_V_keep_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TSTRB),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_strb_V_U_ack_in),
    .data_out(in_r_TSTRB_int),
    .vld_out(regslice_both_in_V_strb_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_in_V_last_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((l1_in_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        Hi_assign_reg_125 <= high_reg_315;
    end else if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_reg_125 <= 8'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_in_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        Lo_assign_reg_114 <= low_reg_310;
    end else if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Lo_assign_reg_114 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_103 <= i_reg_281;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_103 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((l1_in_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_136 <= j_reg_295;
    end else if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_136 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        high_reg_315 <= high_fu_253_p2;
        low_reg_310 <= low_fu_247_p2;
        lshr_ln681_reg_305 <= lshr_ln681_fu_241_p2;
        sub_ln681_3_reg_300 <= sub_ln681_3_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_281 <= i_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_295 <= j_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_286 <= in_r_TDATA_int;
    end
end

always @ (*) begin
    if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_r_TVALID == 1'b1) & (regslice_both_in_V_data_V_U_ack_in == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l1_in_V_blk_n = l1_in_V_full_n;
    end else begin
        l1_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((l1_in_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        l1_in_V_write = 1'b1;
    end else begin
        l1_in_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0)) & (icmp_ln32_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((l1_in_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln32_fu_147_p2 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign high_fu_253_p2 = (8'd8 + Hi_assign_reg_125);

assign i_fu_153_p2 = (i_0_reg_103 + 6'd1);

assign icmp_ln32_fu_147_p2 = ((i_0_reg_103 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_163_p2 = ((j_0_reg_136 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln681_fu_175_p2 = ((Lo_assign_reg_114 > Hi_assign_reg_125) ? 1'b1 : 1'b0);

assign j_fu_169_p2 = (j_0_reg_136 + 5'd1);

assign l1_in_V_din = p_Result_s_fu_268_p2[7:0];

assign low_fu_247_p2 = (8'd8 + Lo_assign_reg_114);

assign lshr_ln681_1_fu_262_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln681_1_fu_259_p1;

assign lshr_ln681_fu_241_p2 = select_ln681_1_fu_216_p3 >> zext_ln681_fu_237_p1;

assign p_Result_s_fu_268_p2 = (lshr_ln681_reg_305 & lshr_ln681_1_fu_262_p2);

assign select_ln681_1_fu_216_p3 = ((icmp_ln681_fu_175_p2[0:0] === 1'b1) ? tmp_fu_181_p4 : tmp_data_V_reg_286);

assign select_ln681_2_fu_223_p3 = ((icmp_ln681_fu_175_p2[0:0] === 1'b1) ? sub_ln681_1_fu_196_p2 : Lo_assign_reg_114);

assign select_ln681_fu_208_p3 = ((icmp_ln681_fu_175_p2[0:0] === 1'b1) ? sub_ln681_fu_190_p2 : sub_ln681_2_fu_202_p2);

assign start_out = real_start;

assign sub_ln681_1_fu_196_p2 = (8'd127 - Lo_assign_reg_114);

assign sub_ln681_2_fu_202_p2 = (Hi_assign_reg_125 - Lo_assign_reg_114);

assign sub_ln681_3_fu_231_p2 = (8'd127 - select_ln681_fu_208_p3);

assign sub_ln681_fu_190_p2 = (Lo_assign_reg_114 - Hi_assign_reg_125);

integer ap_tvar_int_0;

always @ (tmp_data_V_reg_286) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_fu_181_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_181_p4[ap_tvar_int_0] = tmp_data_V_reg_286[127 - ap_tvar_int_0];
        end
    end
end

assign zext_ln681_1_fu_259_p1 = sub_ln681_3_reg_300;

assign zext_ln681_fu_237_p1 = select_ln681_2_fu_223_p3;

endmodule //read_input
