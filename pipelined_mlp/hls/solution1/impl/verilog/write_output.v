// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        l3_out_V_dout,
        l3_out_V_empty_n,
        l3_out_V_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] l3_out_V_dout;
input   l3_out_V_empty_n;
output   l3_out_V_read;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg l3_out_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    l3_out_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln63_fu_181_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire   [2:0] i_fu_175_p2;
reg   [2:0] i_reg_342;
wire    ap_CS_fsm_state2;
wire    regslice_both_out_V_data_V_U_apdone_blk;
wire   [1:0] j_fu_187_p2;
reg   [1:0] j_reg_350;
reg    ap_block_state3;
reg    ap_block_state3_io;
reg   [31:0] tmp_reg_355;
wire   [6:0] low_fu_316_p2;
wire    ap_CS_fsm_state4;
wire   [6:0] high_fu_322_p2;
reg   [2:0] i_0_reg_119;
reg    ap_block_state1;
reg   [6:0] Lo_assign_reg_130;
wire   [0:0] icmp_ln56_fu_169_p2;
reg   [6:0] Hi_assign_reg_142;
reg   [1:0] j_0_reg_154;
reg   [63:0] tmp_data_V_fu_90;
wire   [63:0] p_Result_s_fu_310_p2;
wire   [0:0] icmp_ln391_fu_196_p2;
wire   [6:0] sub_ln391_fu_202_p2;
wire   [6:0] select_ln391_fu_208_p3;
wire   [6:0] select_ln391_2_fu_224_p3;
wire   [6:0] select_ln391_1_fu_216_p3;
wire   [6:0] sub_ln391_1_fu_232_p2;
wire  signed [63:0] tmp_V_fu_193_p1;
wire   [63:0] zext_ln391_fu_238_p1;
wire   [63:0] shl_ln391_fu_250_p2;
reg   [63:0] tmp_2_fu_256_p4;
wire   [63:0] zext_ln391_1_fu_242_p1;
wire   [63:0] zext_ln391_2_fu_246_p1;
wire   [63:0] shl_ln391_1_fu_274_p2;
wire   [63:0] lshr_ln391_fu_280_p2;
wire   [63:0] and_ln391_fu_286_p2;
wire   [63:0] xor_ln391_fu_292_p2;
wire   [63:0] select_ln391_3_fu_266_p3;
wire   [63:0] and_ln391_1_fu_298_p2;
wire   [63:0] and_ln391_2_fu_304_p2;
reg   [4:0] ap_NS_fsm;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_V_fu_90),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(8'd255),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(8'd0),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Hi_assign_reg_142 <= high_fu_322_p2;
    end else if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_reg_142 <= 7'd31;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Lo_assign_reg_130 <= low_fu_316_p2;
    end else if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Lo_assign_reg_130 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_119 <= i_reg_342;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_119 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_154 <= j_reg_350;
    end else if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_154 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_342 <= i_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln63_fu_181_p2 == 1'd0) & (l3_out_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_350 <= j_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_data_V_fu_90 <= p_Result_s_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln63_fu_181_p2 == 1'd0) & (l3_out_V_empty_n == 1'b0))) & (icmp_ln63_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_reg_355 <= l3_out_V_dout;
    end
end

always @ (*) begin
    if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln63_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        l3_out_V_blk_n = l3_out_V_empty_n;
    end else begin
        l3_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln63_fu_181_p2 == 1'd0) & (l3_out_V_empty_n == 1'b0))) & (icmp_ln63_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        l3_out_V_read = 1'b1;
    end else begin
        l3_out_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln63_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln63_fu_181_p2 == 1'd0) & (l3_out_V_empty_n == 1'b0))) & (icmp_ln63_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln56_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln63_fu_181_p2 == 1'd0) & (l3_out_V_empty_n == 1'b0))) & (icmp_ln63_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln63_fu_181_p2 == 1'd0) & (l3_out_V_empty_n == 1'b0))) & (icmp_ln63_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln391_1_fu_298_p2 = (xor_ln391_fu_292_p2 & tmp_data_V_fu_90);

assign and_ln391_2_fu_304_p2 = (select_ln391_3_fu_266_p3 & and_ln391_fu_286_p2);

assign and_ln391_fu_286_p2 = (shl_ln391_1_fu_274_p2 & lshr_ln391_fu_280_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln63_fu_181_p2 == 1'd0) & (l3_out_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln63_fu_181_p2 == 1'd1) & (out_r_TREADY_int == 1'b0));
end

assign high_fu_322_p2 = (Hi_assign_reg_142 + 7'd32);

assign i_fu_175_p2 = (i_0_reg_119 + 3'd1);

assign icmp_ln391_fu_196_p2 = ((Lo_assign_reg_130 > Hi_assign_reg_142) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_169_p2 = ((i_0_reg_119 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_181_p2 = ((j_0_reg_154 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_187_p2 = (j_0_reg_154 + 2'd1);

assign low_fu_316_p2 = (Lo_assign_reg_130 + 7'd32);

assign lshr_ln391_fu_280_p2 = 64'd18446744073709551615 >> zext_ln391_2_fu_246_p1;

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

assign p_Result_s_fu_310_p2 = (and_ln391_2_fu_304_p2 | and_ln391_1_fu_298_p2);

assign select_ln391_1_fu_216_p3 = ((icmp_ln391_fu_196_p2[0:0] === 1'b1) ? Hi_assign_reg_142 : Lo_assign_reg_130);

assign select_ln391_2_fu_224_p3 = ((icmp_ln391_fu_196_p2[0:0] === 1'b1) ? sub_ln391_fu_202_p2 : Lo_assign_reg_130);

assign select_ln391_3_fu_266_p3 = ((icmp_ln391_fu_196_p2[0:0] === 1'b1) ? tmp_2_fu_256_p4 : shl_ln391_fu_250_p2);

assign select_ln391_fu_208_p3 = ((icmp_ln391_fu_196_p2[0:0] === 1'b1) ? Lo_assign_reg_130 : Hi_assign_reg_142);

assign shl_ln391_1_fu_274_p2 = 64'd18446744073709551615 << zext_ln391_1_fu_242_p1;

assign shl_ln391_fu_250_p2 = tmp_V_fu_193_p1 << zext_ln391_fu_238_p1;

assign sub_ln391_1_fu_232_p2 = (7'd63 - select_ln391_fu_208_p3);

assign sub_ln391_fu_202_p2 = (7'd63 - Lo_assign_reg_130);

integer ap_tvar_int_0;

always @ (shl_ln391_fu_250_p2) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_2_fu_256_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_256_p4[ap_tvar_int_0] = shl_ln391_fu_250_p2[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_fu_193_p1 = $signed(tmp_reg_355);

assign xor_ln391_fu_292_p2 = (64'd18446744073709551615 ^ and_ln391_fu_286_p2);

assign zext_ln391_1_fu_242_p1 = select_ln391_1_fu_216_p3;

assign zext_ln391_2_fu_246_p1 = sub_ln391_1_fu_232_p2;

assign zext_ln391_fu_238_p1 = select_ln391_2_fu_224_p3;

endmodule //write_output
