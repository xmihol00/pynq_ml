// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.272500,HLS_SYN_LAT=1858,HLS_SYN_TPT=1846,HLS_SYN_MEM=209,HLS_SYN_DSP=138,HLS_SYN_FF=17120,HLS_SYN_LUT=9595,HLS_VERSION=2020_1}" *)

module mlp (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        in_r_TDATA,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST,
        in_r_TVALID,
        in_r_TREADY,
        out_r_TVALID,
        out_r_TREADY
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
input  [127:0] in_r_TDATA;
input  [15:0] in_r_TKEEP;
input  [15:0] in_r_TSTRB;
input  [0:0] in_r_TLAST;
output  [63:0] out_r_TDATA;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;
input   in_r_TVALID;
output   in_r_TREADY;
output   out_r_TVALID;
input   out_r_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    read_input_U0_ap_start;
wire    read_input_U0_ap_done;
wire    read_input_U0_ap_continue;
wire    read_input_U0_ap_idle;
wire    read_input_U0_ap_ready;
wire    read_input_U0_start_out;
wire    read_input_U0_start_write;
wire    read_input_U0_in_r_TREADY;
wire   [7:0] read_input_U0_l1_in_0_V_din;
wire    read_input_U0_l1_in_0_V_write;
wire   [7:0] read_input_U0_l1_in_1_V_din;
wire    read_input_U0_l1_in_1_V_write;
wire    mlp_l1_U0_ap_start;
wire    mlp_l1_U0_ap_done;
wire    mlp_l1_U0_ap_continue;
wire    mlp_l1_U0_ap_idle;
wire    mlp_l1_U0_ap_ready;
wire    mlp_l1_U0_start_out;
wire    mlp_l1_U0_start_write;
wire    mlp_l1_U0_l1_in_0_V_read;
wire    mlp_l1_U0_l1_in_1_V_read;
wire   [15:0] mlp_l1_U0_l1_out_V_din;
wire    mlp_l1_U0_l1_out_V_write;
wire    mlp_l2_U0_ap_start;
wire    mlp_l2_U0_ap_done;
wire    mlp_l2_U0_ap_continue;
wire    mlp_l2_U0_ap_idle;
wire    mlp_l2_U0_ap_ready;
wire    mlp_l2_U0_start_out;
wire    mlp_l2_U0_start_write;
wire    mlp_l2_U0_l2_in_V_read;
wire   [15:0] mlp_l2_U0_l2_out_V_din;
wire    mlp_l2_U0_l2_out_V_write;
wire    mlp_l3_U0_ap_start;
wire    mlp_l3_U0_ap_done;
wire    mlp_l3_U0_ap_continue;
wire    mlp_l3_U0_ap_idle;
wire    mlp_l3_U0_ap_ready;
wire    mlp_l3_U0_start_out;
wire    mlp_l3_U0_start_write;
wire    mlp_l3_U0_l3_in_V_read;
wire   [31:0] mlp_l3_U0_l3_out_V_din;
wire    mlp_l3_U0_l3_out_V_write;
wire    write_output_U0_ap_start;
wire    write_output_U0_ap_done;
wire    write_output_U0_ap_continue;
wire    write_output_U0_ap_idle;
wire    write_output_U0_ap_ready;
wire    write_output_U0_l3_out_V_read;
wire   [63:0] write_output_U0_out_r_TDATA;
wire    write_output_U0_out_r_TVALID;
wire   [7:0] write_output_U0_out_r_TKEEP;
wire   [7:0] write_output_U0_out_r_TSTRB;
wire   [0:0] write_output_U0_out_r_TLAST;
wire    ap_sync_continue;
wire    l1_in_0_V_full_n;
wire   [7:0] l1_in_0_V_dout;
wire    l1_in_0_V_empty_n;
wire    l1_in_1_V_full_n;
wire   [7:0] l1_in_1_V_dout;
wire    l1_in_1_V_empty_n;
wire    l2_in_V_full_n;
wire   [15:0] l2_in_V_dout;
wire    l2_in_V_empty_n;
wire    l3_in_V_full_n;
wire   [15:0] l3_in_V_dout;
wire    l3_in_V_empty_n;
wire    l3_out_V_full_n;
wire   [31:0] l3_out_V_dout;
wire    l3_out_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_mlp_l1_U0_din;
wire    start_for_mlp_l1_U0_full_n;
wire   [0:0] start_for_mlp_l1_U0_dout;
wire    start_for_mlp_l1_U0_empty_n;
wire   [0:0] start_for_mlp_l2_U0_din;
wire    start_for_mlp_l2_U0_full_n;
wire   [0:0] start_for_mlp_l2_U0_dout;
wire    start_for_mlp_l2_U0_empty_n;
wire   [0:0] start_for_mlp_l3_U0_din;
wire    start_for_mlp_l3_U0_full_n;
wire   [0:0] start_for_mlp_l3_U0_dout;
wire    start_for_mlp_l3_U0_empty_n;
wire   [0:0] start_for_write_output_U0_din;
wire    start_for_write_output_U0_full_n;
wire   [0:0] start_for_write_output_U0_dout;
wire    start_for_write_output_U0_empty_n;
wire    write_output_U0_start_full_n;
wire    write_output_U0_start_write;

mlp_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
mlp_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

read_input read_input_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(read_input_U0_ap_start),
    .start_full_n(start_for_mlp_l1_U0_full_n),
    .ap_done(read_input_U0_ap_done),
    .ap_continue(read_input_U0_ap_continue),
    .ap_idle(read_input_U0_ap_idle),
    .ap_ready(read_input_U0_ap_ready),
    .start_out(read_input_U0_start_out),
    .start_write(read_input_U0_start_write),
    .in_r_TDATA(in_r_TDATA),
    .in_r_TVALID(in_r_TVALID),
    .in_r_TREADY(read_input_U0_in_r_TREADY),
    .in_r_TKEEP(in_r_TKEEP),
    .in_r_TSTRB(in_r_TSTRB),
    .in_r_TLAST(in_r_TLAST),
    .l1_in_0_V_din(read_input_U0_l1_in_0_V_din),
    .l1_in_0_V_full_n(l1_in_0_V_full_n),
    .l1_in_0_V_write(read_input_U0_l1_in_0_V_write),
    .l1_in_1_V_din(read_input_U0_l1_in_1_V_din),
    .l1_in_1_V_full_n(l1_in_1_V_full_n),
    .l1_in_1_V_write(read_input_U0_l1_in_1_V_write)
);

mlp_l1 mlp_l1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(mlp_l1_U0_ap_start),
    .start_full_n(start_for_mlp_l2_U0_full_n),
    .ap_done(mlp_l1_U0_ap_done),
    .ap_continue(mlp_l1_U0_ap_continue),
    .ap_idle(mlp_l1_U0_ap_idle),
    .ap_ready(mlp_l1_U0_ap_ready),
    .start_out(mlp_l1_U0_start_out),
    .start_write(mlp_l1_U0_start_write),
    .l1_in_0_V_dout(l1_in_0_V_dout),
    .l1_in_0_V_empty_n(l1_in_0_V_empty_n),
    .l1_in_0_V_read(mlp_l1_U0_l1_in_0_V_read),
    .l1_in_1_V_dout(l1_in_1_V_dout),
    .l1_in_1_V_empty_n(l1_in_1_V_empty_n),
    .l1_in_1_V_read(mlp_l1_U0_l1_in_1_V_read),
    .l1_out_V_din(mlp_l1_U0_l1_out_V_din),
    .l1_out_V_full_n(l2_in_V_full_n),
    .l1_out_V_write(mlp_l1_U0_l1_out_V_write)
);

mlp_l2 mlp_l2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(mlp_l2_U0_ap_start),
    .start_full_n(start_for_mlp_l3_U0_full_n),
    .ap_done(mlp_l2_U0_ap_done),
    .ap_continue(mlp_l2_U0_ap_continue),
    .ap_idle(mlp_l2_U0_ap_idle),
    .ap_ready(mlp_l2_U0_ap_ready),
    .start_out(mlp_l2_U0_start_out),
    .start_write(mlp_l2_U0_start_write),
    .l2_in_V_dout(l2_in_V_dout),
    .l2_in_V_empty_n(l2_in_V_empty_n),
    .l2_in_V_read(mlp_l2_U0_l2_in_V_read),
    .l2_out_V_din(mlp_l2_U0_l2_out_V_din),
    .l2_out_V_full_n(l3_in_V_full_n),
    .l2_out_V_write(mlp_l2_U0_l2_out_V_write)
);

mlp_l3 mlp_l3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(mlp_l3_U0_ap_start),
    .start_full_n(start_for_write_output_U0_full_n),
    .ap_done(mlp_l3_U0_ap_done),
    .ap_continue(mlp_l3_U0_ap_continue),
    .ap_idle(mlp_l3_U0_ap_idle),
    .ap_ready(mlp_l3_U0_ap_ready),
    .start_out(mlp_l3_U0_start_out),
    .start_write(mlp_l3_U0_start_write),
    .l3_in_V_dout(l3_in_V_dout),
    .l3_in_V_empty_n(l3_in_V_empty_n),
    .l3_in_V_read(mlp_l3_U0_l3_in_V_read),
    .l3_out_V_din(mlp_l3_U0_l3_out_V_din),
    .l3_out_V_full_n(l3_out_V_full_n),
    .l3_out_V_write(mlp_l3_U0_l3_out_V_write)
);

write_output write_output_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(write_output_U0_ap_start),
    .ap_done(write_output_U0_ap_done),
    .ap_continue(write_output_U0_ap_continue),
    .ap_idle(write_output_U0_ap_idle),
    .ap_ready(write_output_U0_ap_ready),
    .l3_out_V_dout(l3_out_V_dout),
    .l3_out_V_empty_n(l3_out_V_empty_n),
    .l3_out_V_read(write_output_U0_l3_out_V_read),
    .out_r_TDATA(write_output_U0_out_r_TDATA),
    .out_r_TVALID(write_output_U0_out_r_TVALID),
    .out_r_TREADY(out_r_TREADY),
    .out_r_TKEEP(write_output_U0_out_r_TKEEP),
    .out_r_TSTRB(write_output_U0_out_r_TSTRB),
    .out_r_TLAST(write_output_U0_out_r_TLAST)
);

fifo_w8_d784_A l1_in_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_input_U0_l1_in_0_V_din),
    .if_full_n(l1_in_0_V_full_n),
    .if_write(read_input_U0_l1_in_0_V_write),
    .if_dout(l1_in_0_V_dout),
    .if_empty_n(l1_in_0_V_empty_n),
    .if_read(mlp_l1_U0_l1_in_0_V_read)
);

fifo_w8_d784_A l1_in_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_input_U0_l1_in_1_V_din),
    .if_full_n(l1_in_1_V_full_n),
    .if_write(read_input_U0_l1_in_1_V_write),
    .if_dout(l1_in_1_V_dout),
    .if_empty_n(l1_in_1_V_empty_n),
    .if_read(mlp_l1_U0_l1_in_1_V_read)
);

fifo_w16_d128_A l2_in_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mlp_l1_U0_l1_out_V_din),
    .if_full_n(l2_in_V_full_n),
    .if_write(mlp_l1_U0_l1_out_V_write),
    .if_dout(l2_in_V_dout),
    .if_empty_n(l2_in_V_empty_n),
    .if_read(mlp_l2_U0_l2_in_V_read)
);

fifo_w16_d64_A l3_in_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mlp_l2_U0_l2_out_V_din),
    .if_full_n(l3_in_V_full_n),
    .if_write(mlp_l2_U0_l2_out_V_write),
    .if_dout(l3_in_V_dout),
    .if_empty_n(l3_in_V_empty_n),
    .if_read(mlp_l3_U0_l3_in_V_read)
);

fifo_w32_d10_A l3_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mlp_l3_U0_l3_out_V_din),
    .if_full_n(l3_out_V_full_n),
    .if_write(mlp_l3_U0_l3_out_V_write),
    .if_dout(l3_out_V_dout),
    .if_empty_n(l3_out_V_empty_n),
    .if_read(write_output_U0_l3_out_V_read)
);

start_for_mlp_l1_U0 start_for_mlp_l1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_mlp_l1_U0_din),
    .if_full_n(start_for_mlp_l1_U0_full_n),
    .if_write(read_input_U0_start_write),
    .if_dout(start_for_mlp_l1_U0_dout),
    .if_empty_n(start_for_mlp_l1_U0_empty_n),
    .if_read(mlp_l1_U0_ap_ready)
);

start_for_mlp_l2_U0 start_for_mlp_l2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_mlp_l2_U0_din),
    .if_full_n(start_for_mlp_l2_U0_full_n),
    .if_write(mlp_l1_U0_start_write),
    .if_dout(start_for_mlp_l2_U0_dout),
    .if_empty_n(start_for_mlp_l2_U0_empty_n),
    .if_read(mlp_l2_U0_ap_ready)
);

start_for_mlp_l3_U0 start_for_mlp_l3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_mlp_l3_U0_din),
    .if_full_n(start_for_mlp_l3_U0_full_n),
    .if_write(mlp_l2_U0_start_write),
    .if_dout(start_for_mlp_l3_U0_dout),
    .if_empty_n(start_for_mlp_l3_U0_empty_n),
    .if_read(mlp_l3_U0_ap_ready)
);

start_for_write_ocZC start_for_write_ocZC_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_write_output_U0_din),
    .if_full_n(start_for_write_output_U0_full_n),
    .if_write(mlp_l3_U0_start_write),
    .if_dout(start_for_write_output_U0_dout),
    .if_empty_n(start_for_write_output_U0_empty_n),
    .if_read(write_output_U0_ap_ready)
);

assign ap_done = write_output_U0_ap_done;

assign ap_idle = (write_output_U0_ap_idle & read_input_U0_ap_idle & mlp_l3_U0_ap_idle & mlp_l2_U0_ap_idle & mlp_l1_U0_ap_idle);

assign ap_ready = read_input_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b1;

assign ap_sync_done = write_output_U0_ap_done;

assign ap_sync_ready = read_input_U0_ap_ready;

assign in_r_TREADY = read_input_U0_in_r_TREADY;

assign mlp_l1_U0_ap_continue = 1'b1;

assign mlp_l1_U0_ap_start = start_for_mlp_l1_U0_empty_n;

assign mlp_l2_U0_ap_continue = 1'b1;

assign mlp_l2_U0_ap_start = start_for_mlp_l2_U0_empty_n;

assign mlp_l3_U0_ap_continue = 1'b1;

assign mlp_l3_U0_ap_start = start_for_mlp_l3_U0_empty_n;

assign out_r_TDATA = write_output_U0_out_r_TDATA;

assign out_r_TKEEP = write_output_U0_out_r_TKEEP;

assign out_r_TLAST = write_output_U0_out_r_TLAST;

assign out_r_TSTRB = write_output_U0_out_r_TSTRB;

assign out_r_TVALID = write_output_U0_out_r_TVALID;

assign read_input_U0_ap_continue = 1'b1;

assign read_input_U0_ap_start = ap_start;

assign start_for_mlp_l1_U0_din = 1'b1;

assign start_for_mlp_l2_U0_din = 1'b1;

assign start_for_mlp_l3_U0_din = 1'b1;

assign start_for_write_output_U0_din = 1'b1;

assign write_output_U0_ap_continue = 1'b1;

assign write_output_U0_ap_start = start_for_write_output_U0_empty_n;

assign write_output_U0_start_full_n = 1'b1;

assign write_output_U0_start_write = 1'b0;

endmodule //mlp
