-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    l3_out_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    l3_out_V_empty_n : IN STD_LOGIC;
    l3_out_V_read : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of write_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal l3_out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln63_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_175_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_342 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal j_fu_187_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_350 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal tmp_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal low_fu_316_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal high_fu_322_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_119 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal Lo_assign_reg_130 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln56_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Hi_assign_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_reg_154 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_V_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln391_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln391_fu_202_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln391_fu_208_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln391_2_fu_224_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln391_1_fu_216_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln391_1_fu_232_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln391_fu_250_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_256_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_1_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_2_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln391_1_fu_274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln391_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln391_fu_286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln391_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln391_3_fu_266_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln391_1_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln391_2_fu_304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_out_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_V_fu_90,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv8_FF,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv8_0,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    Hi_assign_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                Hi_assign_reg_142 <= high_fu_322_p2;
            elsif (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Hi_assign_reg_142 <= ap_const_lv7_1F;
            end if; 
        end if;
    end process;

    Lo_assign_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                Lo_assign_reg_130 <= low_fu_316_p2;
            elsif (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Lo_assign_reg_130 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_119 <= i_reg_342;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_119 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_154 <= j_reg_350;
            elsif (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_154 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_342 <= i_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (l3_out_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_reg_350 <= j_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_data_V_fu_90 <= p_Result_s_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (l3_out_V_empty_n = ap_const_logic_0)))) and (icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_reg_355 <= l3_out_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, l3_out_V_empty_n, ap_CS_fsm_state3, icmp_ln63_fu_181_p2, ap_CS_fsm_state5, ap_CS_fsm_state2, regslice_both_out_V_data_V_U_apdone_blk, ap_block_state3_io, icmp_ln56_fu_169_p2, out_r_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (l3_out_V_empty_n = ap_const_logic_0)))) and (icmp_ln63_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (l3_out_V_empty_n = ap_const_logic_0)))) and (icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    and_ln391_1_fu_298_p2 <= (xor_ln391_fu_292_p2 and tmp_data_V_fu_90);
    and_ln391_2_fu_304_p2 <= (select_ln391_3_fu_266_p3 and and_ln391_fu_286_p2);
    and_ln391_fu_286_p2 <= (shl_ln391_1_fu_274_p2 and lshr_ln391_fu_280_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(l3_out_V_empty_n, icmp_ln63_fu_181_p2)
    begin
                ap_block_state3 <= ((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (l3_out_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln63_fu_181_p2, out_r_TREADY_int)
    begin
                ap_block_state3_io <= ((icmp_ln63_fu_181_p2 = ap_const_lv1_1) and (out_r_TREADY_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln56_fu_169_p2)
    begin
        if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln56_fu_169_p2)
    begin
        if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln56_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    high_fu_322_p2 <= std_logic_vector(unsigned(Hi_assign_reg_142) + unsigned(ap_const_lv7_20));
    i_fu_175_p2 <= std_logic_vector(unsigned(i_0_reg_119) + unsigned(ap_const_lv3_1));
    icmp_ln391_fu_196_p2 <= "1" when (unsigned(Lo_assign_reg_130) > unsigned(Hi_assign_reg_142)) else "0";
    icmp_ln56_fu_169_p2 <= "1" when (i_0_reg_119 = ap_const_lv3_5) else "0";
    icmp_ln63_fu_181_p2 <= "1" when (j_0_reg_154 = ap_const_lv2_2) else "0";
    j_fu_187_p2 <= std_logic_vector(unsigned(j_0_reg_154) + unsigned(ap_const_lv2_1));

    l3_out_V_blk_n_assign_proc : process(l3_out_V_empty_n, ap_CS_fsm_state3, icmp_ln63_fu_181_p2)
    begin
        if (((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            l3_out_V_blk_n <= l3_out_V_empty_n;
        else 
            l3_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    l3_out_V_read_assign_proc : process(l3_out_V_empty_n, ap_CS_fsm_state3, icmp_ln63_fu_181_p2, ap_block_state3_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (l3_out_V_empty_n = ap_const_logic_0)))) and (icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            l3_out_V_read <= ap_const_logic_1;
        else 
            l3_out_V_read <= ap_const_logic_0;
        end if; 
    end process;

    low_fu_316_p2 <= std_logic_vector(unsigned(Lo_assign_reg_130) + unsigned(ap_const_lv7_20));
    lshr_ln391_fu_280_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln391_2_fu_246_p1(31-1 downto 0)))));

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln63_fu_181_p2, ap_CS_fsm_state5, out_r_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln63_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    out_r_TVALID_int_assign_proc : process(l3_out_V_empty_n, ap_CS_fsm_state3, icmp_ln63_fu_181_p2, ap_block_state3_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln63_fu_181_p2 = ap_const_lv1_0) and (l3_out_V_empty_n = ap_const_logic_0)))) and (icmp_ln63_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_310_p2 <= (and_ln391_2_fu_304_p2 or and_ln391_1_fu_298_p2);
    select_ln391_1_fu_216_p3 <= 
        Hi_assign_reg_142 when (icmp_ln391_fu_196_p2(0) = '1') else 
        Lo_assign_reg_130;
    select_ln391_2_fu_224_p3 <= 
        sub_ln391_fu_202_p2 when (icmp_ln391_fu_196_p2(0) = '1') else 
        Lo_assign_reg_130;
    select_ln391_3_fu_266_p3 <= 
        tmp_2_fu_256_p4 when (icmp_ln391_fu_196_p2(0) = '1') else 
        shl_ln391_fu_250_p2;
    select_ln391_fu_208_p3 <= 
        Lo_assign_reg_130 when (icmp_ln391_fu_196_p2(0) = '1') else 
        Hi_assign_reg_142;
    shl_ln391_1_fu_274_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln391_1_fu_242_p1(31-1 downto 0)))));
    shl_ln391_fu_250_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_193_p1),to_integer(unsigned('0' & zext_ln391_fu_238_p1(31-1 downto 0)))));
    sub_ln391_1_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln391_fu_208_p3));
    sub_ln391_fu_202_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(Lo_assign_reg_130));
    
    tmp_2_fu_256_p4_proc : process(shl_ln391_fu_250_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_2_fu_256_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := shl_ln391_fu_250_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_2_fu_256_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_2_fu_256_p4_i) := shl_ln391_fu_250_p2(64-1-tmp_2_fu_256_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_256_p4 <= resvalue(64-1 downto 0);
    end process;

        tmp_V_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_355),64));

    xor_ln391_fu_292_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor and_ln391_fu_286_p2);
    zext_ln391_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln391_1_fu_216_p3),64));
    zext_ln391_2_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln391_1_fu_232_p2),64));
    zext_ln391_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln391_2_fu_224_p3),64));
end behav;
