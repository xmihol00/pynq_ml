// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mlp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int mlp::C_S_AXI_DATA_WIDTH = "100000";
const int mlp::C_S_AXI_WSTRB_WIDTH = "100";
const int mlp::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic mlp::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<64> mlp::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> mlp::ap_const_lv8_0 = "00000000";
const sc_lv<1> mlp::ap_const_lv1_0 = "0";
const sc_logic mlp::ap_const_logic_0 = sc_dt::Log_0;

mlp::mlp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mlp_control_s_axi_U = new mlp_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("mlp_control_s_axi_U");
    mlp_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    mlp_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    mlp_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    mlp_control_s_axi_U->WVALID(s_axi_control_WVALID);
    mlp_control_s_axi_U->WREADY(s_axi_control_WREADY);
    mlp_control_s_axi_U->WDATA(s_axi_control_WDATA);
    mlp_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    mlp_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    mlp_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    mlp_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    mlp_control_s_axi_U->RVALID(s_axi_control_RVALID);
    mlp_control_s_axi_U->RREADY(s_axi_control_RREADY);
    mlp_control_s_axi_U->RDATA(s_axi_control_RDATA);
    mlp_control_s_axi_U->RRESP(s_axi_control_RRESP);
    mlp_control_s_axi_U->BVALID(s_axi_control_BVALID);
    mlp_control_s_axi_U->BREADY(s_axi_control_BREADY);
    mlp_control_s_axi_U->BRESP(s_axi_control_BRESP);
    mlp_control_s_axi_U->ACLK(ap_clk);
    mlp_control_s_axi_U->ARESET(ap_rst_n_inv);
    mlp_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    mlp_control_s_axi_U->ap_start(ap_start);
    mlp_control_s_axi_U->interrupt(interrupt);
    mlp_control_s_axi_U->ap_ready(ap_ready);
    mlp_control_s_axi_U->ap_done(ap_done);
    mlp_control_s_axi_U->ap_idle(ap_idle);
    read_input_U0 = new read_input("read_input_U0");
    read_input_U0->ap_clk(ap_clk);
    read_input_U0->ap_rst(ap_rst_n_inv);
    read_input_U0->ap_start(read_input_U0_ap_start);
    read_input_U0->start_full_n(start_for_mlp_l1_U0_full_n);
    read_input_U0->ap_done(read_input_U0_ap_done);
    read_input_U0->ap_continue(read_input_U0_ap_continue);
    read_input_U0->ap_idle(read_input_U0_ap_idle);
    read_input_U0->ap_ready(read_input_U0_ap_ready);
    read_input_U0->start_out(read_input_U0_start_out);
    read_input_U0->start_write(read_input_U0_start_write);
    read_input_U0->in_r_TDATA(in_r_TDATA);
    read_input_U0->in_r_TVALID(in_r_TVALID);
    read_input_U0->in_r_TREADY(read_input_U0_in_r_TREADY);
    read_input_U0->in_r_TKEEP(in_r_TKEEP);
    read_input_U0->in_r_TSTRB(in_r_TSTRB);
    read_input_U0->in_r_TLAST(in_r_TLAST);
    read_input_U0->l1_in_V_din(read_input_U0_l1_in_V_din);
    read_input_U0->l1_in_V_full_n(l1_in_V_full_n);
    read_input_U0->l1_in_V_write(read_input_U0_l1_in_V_write);
    mlp_l1_U0 = new mlp_l1("mlp_l1_U0");
    mlp_l1_U0->ap_clk(ap_clk);
    mlp_l1_U0->ap_rst(ap_rst_n_inv);
    mlp_l1_U0->ap_start(mlp_l1_U0_ap_start);
    mlp_l1_U0->start_full_n(start_for_write_output_U0_full_n);
    mlp_l1_U0->ap_done(mlp_l1_U0_ap_done);
    mlp_l1_U0->ap_continue(mlp_l1_U0_ap_continue);
    mlp_l1_U0->ap_idle(mlp_l1_U0_ap_idle);
    mlp_l1_U0->ap_ready(mlp_l1_U0_ap_ready);
    mlp_l1_U0->start_out(mlp_l1_U0_start_out);
    mlp_l1_U0->start_write(mlp_l1_U0_start_write);
    mlp_l1_U0->l1_in_V_dout(l1_in_V_dout);
    mlp_l1_U0->l1_in_V_empty_n(l1_in_V_empty_n);
    mlp_l1_U0->l1_in_V_read(mlp_l1_U0_l1_in_V_read);
    mlp_l1_U0->l2_in_V_din(mlp_l1_U0_l2_in_V_din);
    mlp_l1_U0->l2_in_V_full_n(l2_in_V_full_n);
    mlp_l1_U0->l2_in_V_write(mlp_l1_U0_l2_in_V_write);
    write_output_U0 = new write_output("write_output_U0");
    write_output_U0->ap_clk(ap_clk);
    write_output_U0->ap_rst(ap_rst_n_inv);
    write_output_U0->ap_start(write_output_U0_ap_start);
    write_output_U0->ap_done(write_output_U0_ap_done);
    write_output_U0->ap_continue(write_output_U0_ap_continue);
    write_output_U0->ap_idle(write_output_U0_ap_idle);
    write_output_U0->ap_ready(write_output_U0_ap_ready);
    write_output_U0->l3_out_V_dout(l2_in_V_dout);
    write_output_U0->l3_out_V_empty_n(l2_in_V_empty_n);
    write_output_U0->l3_out_V_read(write_output_U0_l3_out_V_read);
    write_output_U0->out_r_TDATA(write_output_U0_out_r_TDATA);
    write_output_U0->out_r_TVALID(write_output_U0_out_r_TVALID);
    write_output_U0->out_r_TREADY(out_r_TREADY);
    write_output_U0->out_r_TKEEP(write_output_U0_out_r_TKEEP);
    write_output_U0->out_r_TSTRB(write_output_U0_out_r_TSTRB);
    write_output_U0->out_r_TLAST(write_output_U0_out_r_TLAST);
    l1_in_V_U = new fifo_w8_d2_A("l1_in_V_U");
    l1_in_V_U->clk(ap_clk);
    l1_in_V_U->reset(ap_rst_n_inv);
    l1_in_V_U->if_read_ce(ap_var_for_const0);
    l1_in_V_U->if_write_ce(ap_var_for_const0);
    l1_in_V_U->if_din(read_input_U0_l1_in_V_din);
    l1_in_V_U->if_full_n(l1_in_V_full_n);
    l1_in_V_U->if_write(read_input_U0_l1_in_V_write);
    l1_in_V_U->if_dout(l1_in_V_dout);
    l1_in_V_U->if_empty_n(l1_in_V_empty_n);
    l1_in_V_U->if_read(mlp_l1_U0_l1_in_V_read);
    l2_in_V_U = new fifo_w32_d2_A("l2_in_V_U");
    l2_in_V_U->clk(ap_clk);
    l2_in_V_U->reset(ap_rst_n_inv);
    l2_in_V_U->if_read_ce(ap_var_for_const0);
    l2_in_V_U->if_write_ce(ap_var_for_const0);
    l2_in_V_U->if_din(mlp_l1_U0_l2_in_V_din);
    l2_in_V_U->if_full_n(l2_in_V_full_n);
    l2_in_V_U->if_write(mlp_l1_U0_l2_in_V_write);
    l2_in_V_U->if_dout(l2_in_V_dout);
    l2_in_V_U->if_empty_n(l2_in_V_empty_n);
    l2_in_V_U->if_read(write_output_U0_l3_out_V_read);
    start_for_mlp_l1_U0_U = new start_for_mlp_l1_U0("start_for_mlp_l1_U0_U");
    start_for_mlp_l1_U0_U->clk(ap_clk);
    start_for_mlp_l1_U0_U->reset(ap_rst_n_inv);
    start_for_mlp_l1_U0_U->if_read_ce(ap_var_for_const0);
    start_for_mlp_l1_U0_U->if_write_ce(ap_var_for_const0);
    start_for_mlp_l1_U0_U->if_din(start_for_mlp_l1_U0_din);
    start_for_mlp_l1_U0_U->if_full_n(start_for_mlp_l1_U0_full_n);
    start_for_mlp_l1_U0_U->if_write(read_input_U0_start_write);
    start_for_mlp_l1_U0_U->if_dout(start_for_mlp_l1_U0_dout);
    start_for_mlp_l1_U0_U->if_empty_n(start_for_mlp_l1_U0_empty_n);
    start_for_mlp_l1_U0_U->if_read(mlp_l1_U0_ap_ready);
    start_for_write_oecO_U = new start_for_write_oecO("start_for_write_oecO_U");
    start_for_write_oecO_U->clk(ap_clk);
    start_for_write_oecO_U->reset(ap_rst_n_inv);
    start_for_write_oecO_U->if_read_ce(ap_var_for_const0);
    start_for_write_oecO_U->if_write_ce(ap_var_for_const0);
    start_for_write_oecO_U->if_din(start_for_write_output_U0_din);
    start_for_write_oecO_U->if_full_n(start_for_write_output_U0_full_n);
    start_for_write_oecO_U->if_write(mlp_l1_U0_start_write);
    start_for_write_oecO_U->if_dout(start_for_write_output_U0_dout);
    start_for_write_oecO_U->if_empty_n(start_for_write_output_U0_empty_n);
    start_for_write_oecO_U->if_read(write_output_U0_ap_ready);

    SC_METHOD(thread_ap_done);
    sensitive << ( write_output_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( read_input_U0_ap_idle );
    sensitive << ( mlp_l1_U0_ap_idle );
    sensitive << ( write_output_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( read_input_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( write_output_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( read_input_U0_ap_ready );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( read_input_U0_in_r_TREADY );

    SC_METHOD(thread_mlp_l1_U0_ap_continue);

    SC_METHOD(thread_mlp_l1_U0_ap_start);
    sensitive << ( start_for_mlp_l1_U0_empty_n );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( write_output_U0_out_r_TDATA );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( write_output_U0_out_r_TKEEP );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( write_output_U0_out_r_TLAST );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( write_output_U0_out_r_TSTRB );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( write_output_U0_out_r_TVALID );

    SC_METHOD(thread_read_input_U0_ap_continue);

    SC_METHOD(thread_read_input_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_start_for_mlp_l1_U0_din);

    SC_METHOD(thread_start_for_write_output_U0_din);

    SC_METHOD(thread_write_output_U0_ap_continue);

    SC_METHOD(thread_write_output_U0_ap_start);
    sensitive << ( start_for_write_output_U0_empty_n );

    SC_METHOD(thread_write_output_U0_start_full_n);

    SC_METHOD(thread_write_output_U0_start_write);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mlp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TKEEP, "(port)in_r_TKEEP");
    sc_trace(mVcdFile, in_r_TSTRB, "(port)in_r_TSTRB");
    sc_trace(mVcdFile, in_r_TLAST, "(port)in_r_TLAST");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, read_input_U0_ap_start, "read_input_U0_ap_start");
    sc_trace(mVcdFile, read_input_U0_ap_done, "read_input_U0_ap_done");
    sc_trace(mVcdFile, read_input_U0_ap_continue, "read_input_U0_ap_continue");
    sc_trace(mVcdFile, read_input_U0_ap_idle, "read_input_U0_ap_idle");
    sc_trace(mVcdFile, read_input_U0_ap_ready, "read_input_U0_ap_ready");
    sc_trace(mVcdFile, read_input_U0_start_out, "read_input_U0_start_out");
    sc_trace(mVcdFile, read_input_U0_start_write, "read_input_U0_start_write");
    sc_trace(mVcdFile, read_input_U0_in_r_TREADY, "read_input_U0_in_r_TREADY");
    sc_trace(mVcdFile, read_input_U0_l1_in_V_din, "read_input_U0_l1_in_V_din");
    sc_trace(mVcdFile, read_input_U0_l1_in_V_write, "read_input_U0_l1_in_V_write");
    sc_trace(mVcdFile, mlp_l1_U0_ap_start, "mlp_l1_U0_ap_start");
    sc_trace(mVcdFile, mlp_l1_U0_ap_done, "mlp_l1_U0_ap_done");
    sc_trace(mVcdFile, mlp_l1_U0_ap_continue, "mlp_l1_U0_ap_continue");
    sc_trace(mVcdFile, mlp_l1_U0_ap_idle, "mlp_l1_U0_ap_idle");
    sc_trace(mVcdFile, mlp_l1_U0_ap_ready, "mlp_l1_U0_ap_ready");
    sc_trace(mVcdFile, mlp_l1_U0_start_out, "mlp_l1_U0_start_out");
    sc_trace(mVcdFile, mlp_l1_U0_start_write, "mlp_l1_U0_start_write");
    sc_trace(mVcdFile, mlp_l1_U0_l1_in_V_read, "mlp_l1_U0_l1_in_V_read");
    sc_trace(mVcdFile, mlp_l1_U0_l2_in_V_din, "mlp_l1_U0_l2_in_V_din");
    sc_trace(mVcdFile, mlp_l1_U0_l2_in_V_write, "mlp_l1_U0_l2_in_V_write");
    sc_trace(mVcdFile, write_output_U0_ap_start, "write_output_U0_ap_start");
    sc_trace(mVcdFile, write_output_U0_ap_done, "write_output_U0_ap_done");
    sc_trace(mVcdFile, write_output_U0_ap_continue, "write_output_U0_ap_continue");
    sc_trace(mVcdFile, write_output_U0_ap_idle, "write_output_U0_ap_idle");
    sc_trace(mVcdFile, write_output_U0_ap_ready, "write_output_U0_ap_ready");
    sc_trace(mVcdFile, write_output_U0_l3_out_V_read, "write_output_U0_l3_out_V_read");
    sc_trace(mVcdFile, write_output_U0_out_r_TDATA, "write_output_U0_out_r_TDATA");
    sc_trace(mVcdFile, write_output_U0_out_r_TVALID, "write_output_U0_out_r_TVALID");
    sc_trace(mVcdFile, write_output_U0_out_r_TKEEP, "write_output_U0_out_r_TKEEP");
    sc_trace(mVcdFile, write_output_U0_out_r_TSTRB, "write_output_U0_out_r_TSTRB");
    sc_trace(mVcdFile, write_output_U0_out_r_TLAST, "write_output_U0_out_r_TLAST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, l1_in_V_full_n, "l1_in_V_full_n");
    sc_trace(mVcdFile, l1_in_V_dout, "l1_in_V_dout");
    sc_trace(mVcdFile, l1_in_V_empty_n, "l1_in_V_empty_n");
    sc_trace(mVcdFile, l2_in_V_full_n, "l2_in_V_full_n");
    sc_trace(mVcdFile, l2_in_V_dout, "l2_in_V_dout");
    sc_trace(mVcdFile, l2_in_V_empty_n, "l2_in_V_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_mlp_l1_U0_din, "start_for_mlp_l1_U0_din");
    sc_trace(mVcdFile, start_for_mlp_l1_U0_full_n, "start_for_mlp_l1_U0_full_n");
    sc_trace(mVcdFile, start_for_mlp_l1_U0_dout, "start_for_mlp_l1_U0_dout");
    sc_trace(mVcdFile, start_for_mlp_l1_U0_empty_n, "start_for_mlp_l1_U0_empty_n");
    sc_trace(mVcdFile, start_for_write_output_U0_din, "start_for_write_output_U0_din");
    sc_trace(mVcdFile, start_for_write_output_U0_full_n, "start_for_write_output_U0_full_n");
    sc_trace(mVcdFile, start_for_write_output_U0_dout, "start_for_write_output_U0_dout");
    sc_trace(mVcdFile, start_for_write_output_U0_empty_n, "start_for_write_output_U0_empty_n");
    sc_trace(mVcdFile, write_output_U0_start_full_n, "write_output_U0_start_full_n");
    sc_trace(mVcdFile, write_output_U0_start_write, "write_output_U0_start_write");
#endif

    }
    mHdltvinHandle.open("mlp.hdltvin.dat");
    mHdltvoutHandle.open("mlp.hdltvout.dat");
}

mlp::~mlp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mlp_control_s_axi_U;
    delete read_input_U0;
    delete mlp_l1_U0;
    delete write_output_U0;
    delete l1_in_V_U;
    delete l2_in_V_U;
    delete start_for_mlp_l1_U0_U;
    delete start_for_write_oecO_U;
}

void mlp::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mlp::thread_ap_done() {
    ap_done = write_output_U0_ap_done.read();
}

void mlp::thread_ap_idle() {
    ap_idle = (read_input_U0_ap_idle.read() & mlp_l1_U0_ap_idle.read() & write_output_U0_ap_idle.read());
}

void mlp::thread_ap_ready() {
    ap_ready = read_input_U0_ap_ready.read();
}

void mlp::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mlp::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void mlp::thread_ap_sync_done() {
    ap_sync_done = write_output_U0_ap_done.read();
}

void mlp::thread_ap_sync_ready() {
    ap_sync_ready = read_input_U0_ap_ready.read();
}

void mlp::thread_in_r_TREADY() {
    in_r_TREADY = read_input_U0_in_r_TREADY.read();
}

void mlp::thread_mlp_l1_U0_ap_continue() {
    mlp_l1_U0_ap_continue = ap_const_logic_1;
}

void mlp::thread_mlp_l1_U0_ap_start() {
    mlp_l1_U0_ap_start = start_for_mlp_l1_U0_empty_n.read();
}

void mlp::thread_out_r_TDATA() {
    out_r_TDATA = write_output_U0_out_r_TDATA.read();
}

void mlp::thread_out_r_TKEEP() {
    out_r_TKEEP = write_output_U0_out_r_TKEEP.read();
}

void mlp::thread_out_r_TLAST() {
    out_r_TLAST = write_output_U0_out_r_TLAST.read();
}

void mlp::thread_out_r_TSTRB() {
    out_r_TSTRB = write_output_U0_out_r_TSTRB.read();
}

void mlp::thread_out_r_TVALID() {
    out_r_TVALID = write_output_U0_out_r_TVALID.read();
}

void mlp::thread_read_input_U0_ap_continue() {
    read_input_U0_ap_continue = ap_const_logic_1;
}

void mlp::thread_read_input_U0_ap_start() {
    read_input_U0_ap_start = ap_start.read();
}

void mlp::thread_start_for_mlp_l1_U0_din() {
    start_for_mlp_l1_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mlp::thread_start_for_write_output_U0_din() {
    start_for_write_output_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mlp::thread_write_output_U0_ap_continue() {
    write_output_U0_ap_continue = ap_const_logic_1;
}

void mlp::thread_write_output_U0_ap_start() {
    write_output_U0_ap_start = start_for_write_output_U0_empty_n.read();
}

void mlp::thread_write_output_U0_start_full_n() {
    write_output_U0_start_full_n = ap_const_logic_1;
}

void mlp::thread_write_output_U0_start_write() {
    write_output_U0_start_write = ap_const_logic_0;
}

void mlp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TDATA\" :  \"" << in_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TKEEP\" :  \"" << in_r_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TSTRB\" :  \"" << in_r_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TLAST\" :  \"" << in_r_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDATA\" :  \"" << out_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TKEEP\" :  \"" << out_r_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TSTRB\" :  \"" << out_r_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TLAST\" :  \"" << out_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TVALID\" :  \"" << in_r_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_TREADY\" :  \"" << in_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TVALID\" :  \"" << out_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_TREADY\" :  \"" << out_r_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

