-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of matmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.648700,HLS_SYN_LAT=220808,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=160,HLS_SYN_FF=38532,HLS_SYN_LUT=63205,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1F : STD_LOGIC_VECTOR (9 downto 0) := "0000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln48_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln65_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln90_fu_1598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_1145 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal i_fu_1155_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_1844 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_1165_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_1849 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_fu_1183_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1857 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln681_3_fu_1247_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln681_3_reg_1862 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln54_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_fu_1257_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln681_reg_1867 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln57_1_fu_1263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln57_1_reg_1872 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln_reg_1876 : STD_LOGIC_VECTOR (9 downto 0);
    signal low_fu_1339_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal high_fu_1345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_fu_1357_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_1894 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1_fu_1367_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1_reg_1899 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_1379_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_reg_1904 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_fu_1397_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_1918 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sub_ln681_7_fu_1461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln681_7_reg_1923 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln71_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_2_fu_1471_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln681_2_reg_1928 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_s_reg_1933 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln74_1_fu_1496_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln74_1_reg_1937 : STD_LOGIC_VECTOR (9 downto 0);
    signal low_2_fu_1558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal high_2_fu_1564_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_fu_1576_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_1955 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal shl_ln2_fu_1586_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln2_reg_1960 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln84_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_1604_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_1968 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state12_io : BOOLEAN;
    signal trunc_ln92_1_fu_1610_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln92_1_reg_1973 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1659_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_2068 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal low_1_fu_1824_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal high_1_fu_1830_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_0_ce0 : STD_LOGIC;
    signal matA_0_we0 : STD_LOGIC;
    signal matA_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_0_ce1 : STD_LOGIC;
    signal matA_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_1_ce0 : STD_LOGIC;
    signal matA_1_we0 : STD_LOGIC;
    signal matA_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_1_ce1 : STD_LOGIC;
    signal matA_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_2_ce0 : STD_LOGIC;
    signal matA_2_we0 : STD_LOGIC;
    signal matA_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_2_ce1 : STD_LOGIC;
    signal matA_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_3_ce0 : STD_LOGIC;
    signal matA_3_we0 : STD_LOGIC;
    signal matA_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_3_ce1 : STD_LOGIC;
    signal matA_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_4_ce0 : STD_LOGIC;
    signal matA_4_we0 : STD_LOGIC;
    signal matA_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_4_ce1 : STD_LOGIC;
    signal matA_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_5_ce0 : STD_LOGIC;
    signal matA_5_we0 : STD_LOGIC;
    signal matA_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_5_ce1 : STD_LOGIC;
    signal matA_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_6_ce0 : STD_LOGIC;
    signal matA_6_we0 : STD_LOGIC;
    signal matA_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_6_ce1 : STD_LOGIC;
    signal matA_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_7_ce0 : STD_LOGIC;
    signal matA_7_we0 : STD_LOGIC;
    signal matA_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_7_ce1 : STD_LOGIC;
    signal matA_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_8_ce0 : STD_LOGIC;
    signal matA_8_we0 : STD_LOGIC;
    signal matA_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_8_ce1 : STD_LOGIC;
    signal matA_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_9_ce0 : STD_LOGIC;
    signal matA_9_we0 : STD_LOGIC;
    signal matA_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_9_ce1 : STD_LOGIC;
    signal matA_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_10_ce0 : STD_LOGIC;
    signal matA_10_we0 : STD_LOGIC;
    signal matA_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_10_ce1 : STD_LOGIC;
    signal matA_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_11_ce0 : STD_LOGIC;
    signal matA_11_we0 : STD_LOGIC;
    signal matA_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_11_ce1 : STD_LOGIC;
    signal matA_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_12_ce0 : STD_LOGIC;
    signal matA_12_we0 : STD_LOGIC;
    signal matA_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_12_ce1 : STD_LOGIC;
    signal matA_12_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_13_ce0 : STD_LOGIC;
    signal matA_13_we0 : STD_LOGIC;
    signal matA_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_13_ce1 : STD_LOGIC;
    signal matA_13_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_14_ce0 : STD_LOGIC;
    signal matA_14_we0 : STD_LOGIC;
    signal matA_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_14_ce1 : STD_LOGIC;
    signal matA_14_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matA_15_ce0 : STD_LOGIC;
    signal matA_15_we0 : STD_LOGIC;
    signal matA_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matA_15_ce1 : STD_LOGIC;
    signal matA_15_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_0_ce0 : STD_LOGIC;
    signal matB_0_we0 : STD_LOGIC;
    signal matB_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_0_ce1 : STD_LOGIC;
    signal matB_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_1_ce0 : STD_LOGIC;
    signal matB_1_we0 : STD_LOGIC;
    signal matB_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_1_ce1 : STD_LOGIC;
    signal matB_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_2_ce0 : STD_LOGIC;
    signal matB_2_we0 : STD_LOGIC;
    signal matB_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_2_ce1 : STD_LOGIC;
    signal matB_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_3_ce0 : STD_LOGIC;
    signal matB_3_we0 : STD_LOGIC;
    signal matB_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_3_ce1 : STD_LOGIC;
    signal matB_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_4_ce0 : STD_LOGIC;
    signal matB_4_we0 : STD_LOGIC;
    signal matB_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_4_ce1 : STD_LOGIC;
    signal matB_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_5_ce0 : STD_LOGIC;
    signal matB_5_we0 : STD_LOGIC;
    signal matB_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_5_ce1 : STD_LOGIC;
    signal matB_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_6_ce0 : STD_LOGIC;
    signal matB_6_we0 : STD_LOGIC;
    signal matB_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_6_ce1 : STD_LOGIC;
    signal matB_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_7_ce0 : STD_LOGIC;
    signal matB_7_we0 : STD_LOGIC;
    signal matB_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_7_ce1 : STD_LOGIC;
    signal matB_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_8_ce0 : STD_LOGIC;
    signal matB_8_we0 : STD_LOGIC;
    signal matB_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_8_ce1 : STD_LOGIC;
    signal matB_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_9_ce0 : STD_LOGIC;
    signal matB_9_we0 : STD_LOGIC;
    signal matB_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_9_ce1 : STD_LOGIC;
    signal matB_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_10_ce0 : STD_LOGIC;
    signal matB_10_we0 : STD_LOGIC;
    signal matB_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_10_ce1 : STD_LOGIC;
    signal matB_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_11_ce0 : STD_LOGIC;
    signal matB_11_we0 : STD_LOGIC;
    signal matB_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_11_ce1 : STD_LOGIC;
    signal matB_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_12_ce0 : STD_LOGIC;
    signal matB_12_we0 : STD_LOGIC;
    signal matB_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_12_ce1 : STD_LOGIC;
    signal matB_12_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_13_ce0 : STD_LOGIC;
    signal matB_13_we0 : STD_LOGIC;
    signal matB_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_13_ce1 : STD_LOGIC;
    signal matB_13_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_14_ce0 : STD_LOGIC;
    signal matB_14_we0 : STD_LOGIC;
    signal matB_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_14_ce1 : STD_LOGIC;
    signal matB_14_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matB_15_ce0 : STD_LOGIC;
    signal matB_15_we0 : STD_LOGIC;
    signal matB_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matB_15_ce1 : STD_LOGIC;
    signal matB_15_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_0_ce0 : STD_LOGIC;
    signal matC_0_we0 : STD_LOGIC;
    signal matC_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_1_ce0 : STD_LOGIC;
    signal matC_1_we0 : STD_LOGIC;
    signal matC_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_2_ce0 : STD_LOGIC;
    signal matC_2_we0 : STD_LOGIC;
    signal matC_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_3_ce0 : STD_LOGIC;
    signal matC_3_we0 : STD_LOGIC;
    signal matC_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_4_ce0 : STD_LOGIC;
    signal matC_4_we0 : STD_LOGIC;
    signal matC_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_5_ce0 : STD_LOGIC;
    signal matC_5_we0 : STD_LOGIC;
    signal matC_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_6_ce0 : STD_LOGIC;
    signal matC_6_we0 : STD_LOGIC;
    signal matC_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_7_ce0 : STD_LOGIC;
    signal matC_7_we0 : STD_LOGIC;
    signal matC_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_8_ce0 : STD_LOGIC;
    signal matC_8_we0 : STD_LOGIC;
    signal matC_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_9_ce0 : STD_LOGIC;
    signal matC_9_we0 : STD_LOGIC;
    signal matC_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_10_ce0 : STD_LOGIC;
    signal matC_10_we0 : STD_LOGIC;
    signal matC_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_11_ce0 : STD_LOGIC;
    signal matC_11_we0 : STD_LOGIC;
    signal matC_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_12_ce0 : STD_LOGIC;
    signal matC_12_we0 : STD_LOGIC;
    signal matC_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_13_ce0 : STD_LOGIC;
    signal matC_13_we0 : STD_LOGIC;
    signal matC_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_14_ce0 : STD_LOGIC;
    signal matC_14_we0 : STD_LOGIC;
    signal matC_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal matC_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal matC_15_ce0 : STD_LOGIC;
    signal matC_15_we0 : STD_LOGIC;
    signal matC_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_ap_start : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_ap_done : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_ap_idle : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_ap_ready : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_0_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_0_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_1_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_1_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_2_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_2_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_3_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_3_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_4_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_4_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_5_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_5_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_6_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_6_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_7_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_7_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_7_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_8_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_8_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_8_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_9_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_9_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_9_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_10_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_10_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_10_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_11_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_11_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_11_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_12_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_12_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_12_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_13_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_13_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_13_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_14_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_14_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_14_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_15_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matA_15_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matA_15_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_0_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_0_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_1_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_1_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_2_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_2_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_3_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_3_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_4_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_4_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_5_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_5_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_6_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_6_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_7_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_7_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_7_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_8_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_8_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_8_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_9_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_9_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_9_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_10_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_10_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_10_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_11_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_11_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_11_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_12_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_12_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_12_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_13_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_13_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_13_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_14_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_14_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_14_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_15_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matB_15_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matB_15_ce1 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_0_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_0_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_1_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_1_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_2_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_2_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_3_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_3_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_4_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_4_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_5_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_5_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_6_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_6_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_7_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_7_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_8_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_8_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_9_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_9_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_10_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_10_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_10_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_11_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_11_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_11_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_12_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_12_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_12_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_13_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_13_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_13_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_14_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_14_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_14_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_matmul_kernel_fu_1085_matC_15_ce0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_15_we0 : STD_LOGIC;
    signal grp_matmul_kernel_fu_1085_matC_15_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_946 : STD_LOGIC_VECTOR (10 downto 0);
    signal Lo_assign_reg_957 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hi_assign_reg_969 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_reg_981 : STD_LOGIC_VECTOR (4 downto 0);
    signal i1_0_reg_992 : STD_LOGIC_VECTOR (10 downto 0);
    signal Lo_assign_1_reg_1003 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hi_assign_1_reg_1015 : STD_LOGIC_VECTOR (9 downto 0);
    signal j3_0_reg_1027 : STD_LOGIC_VECTOR (4 downto 0);
    signal i4_0_reg_1038 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal Lo_assign_2_reg_1050 : STD_LOGIC_VECTOR (9 downto 0);
    signal Hi_assign_2_reg_1062 : STD_LOGIC_VECTOR (9 downto 0);
    signal j6_0_reg_1074 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_matmul_kernel_fu_1085_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state6_ignore_call1 : BOOLEAN;
    signal zext_ln57_fu_1320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln74_fu_1539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln92_1_fu_1629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_1_fu_336 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_3_fu_1818_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal bitcast_ln56_fu_1300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_fu_1519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln57_fu_1161_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln681_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_1205_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln681_2_fu_1217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_1195_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal sub_ln681_1_fu_1211_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_fu_1223_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_2_fu_1239_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_1_fu_1231_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln681_fu_1253_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln54_fu_1173_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln57_fu_1267_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln681_1_fu_1282_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln681_1_fu_1285_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_1291_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln56_fu_1296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln74_fu_1363_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln74_1_fu_1375_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln681_1_fu_1403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_4_fu_1419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln681_6_fu_1431_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_1409_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal sub_ln681_5_fu_1425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_3_fu_1437_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_5_fu_1453_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln681_4_fu_1445_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln681_2_fu_1467_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln71_fu_1387_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln74_fu_1481_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln74_1_fu_1477_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln681_3_fu_1501_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln681_3_fu_1504_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_1_fu_1510_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln73_fu_1515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_fu_1582_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln90_fu_1594_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln92_fu_1614_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln1_fu_1619_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1659_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln93_fu_1697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln392_fu_1704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln392_fu_1710_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln392_fu_1716_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln392_2_fu_1732_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln392_1_fu_1724_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln392_1_fu_1740_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_fu_1700_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln392_fu_1746_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln392_fu_1758_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_6_fu_1764_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln392_1_fu_1750_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln392_2_fu_1754_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln392_1_fu_1782_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln392_fu_1788_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln392_fu_1794_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln392_fu_1800_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln392_3_fu_1774_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln392_1_fu_1806_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln392_2_fu_1812_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal regslice_both_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_ack_in : STD_LOGIC;
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal out_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;

    component matmul_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matA_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_0_ce0 : OUT STD_LOGIC;
        matA_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_0_ce1 : OUT STD_LOGIC;
        matA_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_1_ce0 : OUT STD_LOGIC;
        matA_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_1_ce1 : OUT STD_LOGIC;
        matA_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_2_ce0 : OUT STD_LOGIC;
        matA_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_2_ce1 : OUT STD_LOGIC;
        matA_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_3_ce0 : OUT STD_LOGIC;
        matA_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_3_ce1 : OUT STD_LOGIC;
        matA_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_4_ce0 : OUT STD_LOGIC;
        matA_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_4_ce1 : OUT STD_LOGIC;
        matA_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_5_ce0 : OUT STD_LOGIC;
        matA_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_5_ce1 : OUT STD_LOGIC;
        matA_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_6_ce0 : OUT STD_LOGIC;
        matA_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_6_ce1 : OUT STD_LOGIC;
        matA_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_7_ce0 : OUT STD_LOGIC;
        matA_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_7_ce1 : OUT STD_LOGIC;
        matA_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_8_ce0 : OUT STD_LOGIC;
        matA_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_8_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_8_ce1 : OUT STD_LOGIC;
        matA_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_9_ce0 : OUT STD_LOGIC;
        matA_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_9_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_9_ce1 : OUT STD_LOGIC;
        matA_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_10_ce0 : OUT STD_LOGIC;
        matA_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_10_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_10_ce1 : OUT STD_LOGIC;
        matA_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_11_ce0 : OUT STD_LOGIC;
        matA_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_11_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_11_ce1 : OUT STD_LOGIC;
        matA_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_12_ce0 : OUT STD_LOGIC;
        matA_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_12_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_12_ce1 : OUT STD_LOGIC;
        matA_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_13_ce0 : OUT STD_LOGIC;
        matA_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_13_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_13_ce1 : OUT STD_LOGIC;
        matA_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_14_ce0 : OUT STD_LOGIC;
        matA_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_14_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_14_ce1 : OUT STD_LOGIC;
        matA_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_15_ce0 : OUT STD_LOGIC;
        matA_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matA_15_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matA_15_ce1 : OUT STD_LOGIC;
        matA_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_0_ce0 : OUT STD_LOGIC;
        matB_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_0_ce1 : OUT STD_LOGIC;
        matB_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_1_ce0 : OUT STD_LOGIC;
        matB_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_1_ce1 : OUT STD_LOGIC;
        matB_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_2_ce0 : OUT STD_LOGIC;
        matB_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_2_ce1 : OUT STD_LOGIC;
        matB_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_3_ce0 : OUT STD_LOGIC;
        matB_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_3_ce1 : OUT STD_LOGIC;
        matB_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_4_ce0 : OUT STD_LOGIC;
        matB_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_4_ce1 : OUT STD_LOGIC;
        matB_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_5_ce0 : OUT STD_LOGIC;
        matB_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_5_ce1 : OUT STD_LOGIC;
        matB_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_6_ce0 : OUT STD_LOGIC;
        matB_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_6_ce1 : OUT STD_LOGIC;
        matB_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_7_ce0 : OUT STD_LOGIC;
        matB_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_7_ce1 : OUT STD_LOGIC;
        matB_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_8_ce0 : OUT STD_LOGIC;
        matB_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_8_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_8_ce1 : OUT STD_LOGIC;
        matB_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_9_ce0 : OUT STD_LOGIC;
        matB_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_9_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_9_ce1 : OUT STD_LOGIC;
        matB_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_10_ce0 : OUT STD_LOGIC;
        matB_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_10_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_10_ce1 : OUT STD_LOGIC;
        matB_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_11_ce0 : OUT STD_LOGIC;
        matB_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_11_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_11_ce1 : OUT STD_LOGIC;
        matB_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_12_ce0 : OUT STD_LOGIC;
        matB_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_12_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_12_ce1 : OUT STD_LOGIC;
        matB_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_13_ce0 : OUT STD_LOGIC;
        matB_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_13_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_13_ce1 : OUT STD_LOGIC;
        matB_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_14_ce0 : OUT STD_LOGIC;
        matB_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_14_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_14_ce1 : OUT STD_LOGIC;
        matB_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_15_ce0 : OUT STD_LOGIC;
        matB_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matB_15_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matB_15_ce1 : OUT STD_LOGIC;
        matB_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matC_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_0_ce0 : OUT STD_LOGIC;
        matC_0_we0 : OUT STD_LOGIC;
        matC_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_1_ce0 : OUT STD_LOGIC;
        matC_1_we0 : OUT STD_LOGIC;
        matC_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_2_ce0 : OUT STD_LOGIC;
        matC_2_we0 : OUT STD_LOGIC;
        matC_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_3_ce0 : OUT STD_LOGIC;
        matC_3_we0 : OUT STD_LOGIC;
        matC_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_4_ce0 : OUT STD_LOGIC;
        matC_4_we0 : OUT STD_LOGIC;
        matC_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_5_ce0 : OUT STD_LOGIC;
        matC_5_we0 : OUT STD_LOGIC;
        matC_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_6_ce0 : OUT STD_LOGIC;
        matC_6_we0 : OUT STD_LOGIC;
        matC_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_7_ce0 : OUT STD_LOGIC;
        matC_7_we0 : OUT STD_LOGIC;
        matC_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_8_ce0 : OUT STD_LOGIC;
        matC_8_we0 : OUT STD_LOGIC;
        matC_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_9_ce0 : OUT STD_LOGIC;
        matC_9_we0 : OUT STD_LOGIC;
        matC_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_10_ce0 : OUT STD_LOGIC;
        matC_10_we0 : OUT STD_LOGIC;
        matC_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_11_ce0 : OUT STD_LOGIC;
        matC_11_we0 : OUT STD_LOGIC;
        matC_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_12_ce0 : OUT STD_LOGIC;
        matC_12_we0 : OUT STD_LOGIC;
        matC_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_13_ce0 : OUT STD_LOGIC;
        matC_13_we0 : OUT STD_LOGIC;
        matC_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_14_ce0 : OUT STD_LOGIC;
        matC_14_we0 : OUT STD_LOGIC;
        matC_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        matC_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        matC_15_ce0 : OUT STD_LOGIC;
        matC_15_we0 : OUT STD_LOGIC;
        matC_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_mux_1632_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_matA_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_matC_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    matmul_control_s_axi_U : component matmul_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    matA_0_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_0_address0,
        ce0 => matA_0_ce0,
        we0 => matA_0_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_0_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_0_address1,
        ce1 => matA_0_ce1,
        q1 => matA_0_q1);

    matA_1_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_1_address0,
        ce0 => matA_1_ce0,
        we0 => matA_1_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_1_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_1_address1,
        ce1 => matA_1_ce1,
        q1 => matA_1_q1);

    matA_2_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_2_address0,
        ce0 => matA_2_ce0,
        we0 => matA_2_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_2_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_2_address1,
        ce1 => matA_2_ce1,
        q1 => matA_2_q1);

    matA_3_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_3_address0,
        ce0 => matA_3_ce0,
        we0 => matA_3_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_3_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_3_address1,
        ce1 => matA_3_ce1,
        q1 => matA_3_q1);

    matA_4_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_4_address0,
        ce0 => matA_4_ce0,
        we0 => matA_4_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_4_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_4_address1,
        ce1 => matA_4_ce1,
        q1 => matA_4_q1);

    matA_5_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_5_address0,
        ce0 => matA_5_ce0,
        we0 => matA_5_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_5_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_5_address1,
        ce1 => matA_5_ce1,
        q1 => matA_5_q1);

    matA_6_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_6_address0,
        ce0 => matA_6_ce0,
        we0 => matA_6_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_6_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_6_address1,
        ce1 => matA_6_ce1,
        q1 => matA_6_q1);

    matA_7_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_7_address0,
        ce0 => matA_7_ce0,
        we0 => matA_7_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_7_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_7_address1,
        ce1 => matA_7_ce1,
        q1 => matA_7_q1);

    matA_8_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_8_address0,
        ce0 => matA_8_ce0,
        we0 => matA_8_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_8_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_8_address1,
        ce1 => matA_8_ce1,
        q1 => matA_8_q1);

    matA_9_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_9_address0,
        ce0 => matA_9_ce0,
        we0 => matA_9_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_9_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_9_address1,
        ce1 => matA_9_ce1,
        q1 => matA_9_q1);

    matA_10_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_10_address0,
        ce0 => matA_10_ce0,
        we0 => matA_10_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_10_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_10_address1,
        ce1 => matA_10_ce1,
        q1 => matA_10_q1);

    matA_11_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_11_address0,
        ce0 => matA_11_ce0,
        we0 => matA_11_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_11_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_11_address1,
        ce1 => matA_11_ce1,
        q1 => matA_11_q1);

    matA_12_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_12_address0,
        ce0 => matA_12_ce0,
        we0 => matA_12_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_12_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_12_address1,
        ce1 => matA_12_ce1,
        q1 => matA_12_q1);

    matA_13_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_13_address0,
        ce0 => matA_13_ce0,
        we0 => matA_13_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_13_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_13_address1,
        ce1 => matA_13_ce1,
        q1 => matA_13_q1);

    matA_14_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_14_address0,
        ce0 => matA_14_ce0,
        we0 => matA_14_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_14_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_14_address1,
        ce1 => matA_14_ce1,
        q1 => matA_14_q1);

    matA_15_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matA_15_address0,
        ce0 => matA_15_ce0,
        we0 => matA_15_we0,
        d0 => bitcast_ln56_fu_1300_p1,
        q0 => matA_15_q0,
        address1 => grp_matmul_kernel_fu_1085_matA_15_address1,
        ce1 => matA_15_ce1,
        q1 => matA_15_q1);

    matB_0_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_0_address0,
        ce0 => matB_0_ce0,
        we0 => matB_0_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_0_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_0_address1,
        ce1 => matB_0_ce1,
        q1 => matB_0_q1);

    matB_1_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_1_address0,
        ce0 => matB_1_ce0,
        we0 => matB_1_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_1_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_1_address1,
        ce1 => matB_1_ce1,
        q1 => matB_1_q1);

    matB_2_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_2_address0,
        ce0 => matB_2_ce0,
        we0 => matB_2_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_2_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_2_address1,
        ce1 => matB_2_ce1,
        q1 => matB_2_q1);

    matB_3_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_3_address0,
        ce0 => matB_3_ce0,
        we0 => matB_3_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_3_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_3_address1,
        ce1 => matB_3_ce1,
        q1 => matB_3_q1);

    matB_4_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_4_address0,
        ce0 => matB_4_ce0,
        we0 => matB_4_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_4_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_4_address1,
        ce1 => matB_4_ce1,
        q1 => matB_4_q1);

    matB_5_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_5_address0,
        ce0 => matB_5_ce0,
        we0 => matB_5_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_5_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_5_address1,
        ce1 => matB_5_ce1,
        q1 => matB_5_q1);

    matB_6_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_6_address0,
        ce0 => matB_6_ce0,
        we0 => matB_6_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_6_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_6_address1,
        ce1 => matB_6_ce1,
        q1 => matB_6_q1);

    matB_7_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_7_address0,
        ce0 => matB_7_ce0,
        we0 => matB_7_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_7_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_7_address1,
        ce1 => matB_7_ce1,
        q1 => matB_7_q1);

    matB_8_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_8_address0,
        ce0 => matB_8_ce0,
        we0 => matB_8_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_8_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_8_address1,
        ce1 => matB_8_ce1,
        q1 => matB_8_q1);

    matB_9_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_9_address0,
        ce0 => matB_9_ce0,
        we0 => matB_9_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_9_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_9_address1,
        ce1 => matB_9_ce1,
        q1 => matB_9_q1);

    matB_10_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_10_address0,
        ce0 => matB_10_ce0,
        we0 => matB_10_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_10_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_10_address1,
        ce1 => matB_10_ce1,
        q1 => matB_10_q1);

    matB_11_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_11_address0,
        ce0 => matB_11_ce0,
        we0 => matB_11_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_11_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_11_address1,
        ce1 => matB_11_ce1,
        q1 => matB_11_q1);

    matB_12_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_12_address0,
        ce0 => matB_12_ce0,
        we0 => matB_12_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_12_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_12_address1,
        ce1 => matB_12_ce1,
        q1 => matB_12_q1);

    matB_13_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_13_address0,
        ce0 => matB_13_ce0,
        we0 => matB_13_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_13_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_13_address1,
        ce1 => matB_13_ce1,
        q1 => matB_13_q1);

    matB_14_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_14_address0,
        ce0 => matB_14_ce0,
        we0 => matB_14_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_14_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_14_address1,
        ce1 => matB_14_ce1,
        q1 => matB_14_q1);

    matB_15_U : component matmul_matA_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matB_15_address0,
        ce0 => matB_15_ce0,
        we0 => matB_15_we0,
        d0 => bitcast_ln73_fu_1519_p1,
        q0 => matB_15_q0,
        address1 => grp_matmul_kernel_fu_1085_matB_15_address1,
        ce1 => matB_15_ce1,
        q1 => matB_15_q1);

    matC_0_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_0_address0,
        ce0 => matC_0_ce0,
        we0 => matC_0_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_0_d0,
        q0 => matC_0_q0);

    matC_1_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_1_address0,
        ce0 => matC_1_ce0,
        we0 => matC_1_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_1_d0,
        q0 => matC_1_q0);

    matC_2_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_2_address0,
        ce0 => matC_2_ce0,
        we0 => matC_2_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_2_d0,
        q0 => matC_2_q0);

    matC_3_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_3_address0,
        ce0 => matC_3_ce0,
        we0 => matC_3_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_3_d0,
        q0 => matC_3_q0);

    matC_4_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_4_address0,
        ce0 => matC_4_ce0,
        we0 => matC_4_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_4_d0,
        q0 => matC_4_q0);

    matC_5_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_5_address0,
        ce0 => matC_5_ce0,
        we0 => matC_5_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_5_d0,
        q0 => matC_5_q0);

    matC_6_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_6_address0,
        ce0 => matC_6_ce0,
        we0 => matC_6_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_6_d0,
        q0 => matC_6_q0);

    matC_7_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_7_address0,
        ce0 => matC_7_ce0,
        we0 => matC_7_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_7_d0,
        q0 => matC_7_q0);

    matC_8_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_8_address0,
        ce0 => matC_8_ce0,
        we0 => matC_8_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_8_d0,
        q0 => matC_8_q0);

    matC_9_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_9_address0,
        ce0 => matC_9_ce0,
        we0 => matC_9_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_9_d0,
        q0 => matC_9_q0);

    matC_10_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_10_address0,
        ce0 => matC_10_ce0,
        we0 => matC_10_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_10_d0,
        q0 => matC_10_q0);

    matC_11_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_11_address0,
        ce0 => matC_11_ce0,
        we0 => matC_11_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_11_d0,
        q0 => matC_11_q0);

    matC_12_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_12_address0,
        ce0 => matC_12_ce0,
        we0 => matC_12_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_12_d0,
        q0 => matC_12_q0);

    matC_13_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_13_address0,
        ce0 => matC_13_ce0,
        we0 => matC_13_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_13_d0,
        q0 => matC_13_q0);

    matC_14_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_14_address0,
        ce0 => matC_14_ce0,
        we0 => matC_14_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_14_d0,
        q0 => matC_14_q0);

    matC_15_U : component matmul_matC_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matC_15_address0,
        ce0 => matC_15_ce0,
        we0 => matC_15_we0,
        d0 => grp_matmul_kernel_fu_1085_matC_15_d0,
        q0 => matC_15_q0);

    grp_matmul_kernel_fu_1085 : component matmul_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matmul_kernel_fu_1085_ap_start,
        ap_done => grp_matmul_kernel_fu_1085_ap_done,
        ap_idle => grp_matmul_kernel_fu_1085_ap_idle,
        ap_ready => grp_matmul_kernel_fu_1085_ap_ready,
        matA_0_address0 => grp_matmul_kernel_fu_1085_matA_0_address0,
        matA_0_ce0 => grp_matmul_kernel_fu_1085_matA_0_ce0,
        matA_0_q0 => matA_0_q0,
        matA_0_address1 => grp_matmul_kernel_fu_1085_matA_0_address1,
        matA_0_ce1 => grp_matmul_kernel_fu_1085_matA_0_ce1,
        matA_0_q1 => matA_0_q1,
        matA_1_address0 => grp_matmul_kernel_fu_1085_matA_1_address0,
        matA_1_ce0 => grp_matmul_kernel_fu_1085_matA_1_ce0,
        matA_1_q0 => matA_1_q0,
        matA_1_address1 => grp_matmul_kernel_fu_1085_matA_1_address1,
        matA_1_ce1 => grp_matmul_kernel_fu_1085_matA_1_ce1,
        matA_1_q1 => matA_1_q1,
        matA_2_address0 => grp_matmul_kernel_fu_1085_matA_2_address0,
        matA_2_ce0 => grp_matmul_kernel_fu_1085_matA_2_ce0,
        matA_2_q0 => matA_2_q0,
        matA_2_address1 => grp_matmul_kernel_fu_1085_matA_2_address1,
        matA_2_ce1 => grp_matmul_kernel_fu_1085_matA_2_ce1,
        matA_2_q1 => matA_2_q1,
        matA_3_address0 => grp_matmul_kernel_fu_1085_matA_3_address0,
        matA_3_ce0 => grp_matmul_kernel_fu_1085_matA_3_ce0,
        matA_3_q0 => matA_3_q0,
        matA_3_address1 => grp_matmul_kernel_fu_1085_matA_3_address1,
        matA_3_ce1 => grp_matmul_kernel_fu_1085_matA_3_ce1,
        matA_3_q1 => matA_3_q1,
        matA_4_address0 => grp_matmul_kernel_fu_1085_matA_4_address0,
        matA_4_ce0 => grp_matmul_kernel_fu_1085_matA_4_ce0,
        matA_4_q0 => matA_4_q0,
        matA_4_address1 => grp_matmul_kernel_fu_1085_matA_4_address1,
        matA_4_ce1 => grp_matmul_kernel_fu_1085_matA_4_ce1,
        matA_4_q1 => matA_4_q1,
        matA_5_address0 => grp_matmul_kernel_fu_1085_matA_5_address0,
        matA_5_ce0 => grp_matmul_kernel_fu_1085_matA_5_ce0,
        matA_5_q0 => matA_5_q0,
        matA_5_address1 => grp_matmul_kernel_fu_1085_matA_5_address1,
        matA_5_ce1 => grp_matmul_kernel_fu_1085_matA_5_ce1,
        matA_5_q1 => matA_5_q1,
        matA_6_address0 => grp_matmul_kernel_fu_1085_matA_6_address0,
        matA_6_ce0 => grp_matmul_kernel_fu_1085_matA_6_ce0,
        matA_6_q0 => matA_6_q0,
        matA_6_address1 => grp_matmul_kernel_fu_1085_matA_6_address1,
        matA_6_ce1 => grp_matmul_kernel_fu_1085_matA_6_ce1,
        matA_6_q1 => matA_6_q1,
        matA_7_address0 => grp_matmul_kernel_fu_1085_matA_7_address0,
        matA_7_ce0 => grp_matmul_kernel_fu_1085_matA_7_ce0,
        matA_7_q0 => matA_7_q0,
        matA_7_address1 => grp_matmul_kernel_fu_1085_matA_7_address1,
        matA_7_ce1 => grp_matmul_kernel_fu_1085_matA_7_ce1,
        matA_7_q1 => matA_7_q1,
        matA_8_address0 => grp_matmul_kernel_fu_1085_matA_8_address0,
        matA_8_ce0 => grp_matmul_kernel_fu_1085_matA_8_ce0,
        matA_8_q0 => matA_8_q0,
        matA_8_address1 => grp_matmul_kernel_fu_1085_matA_8_address1,
        matA_8_ce1 => grp_matmul_kernel_fu_1085_matA_8_ce1,
        matA_8_q1 => matA_8_q1,
        matA_9_address0 => grp_matmul_kernel_fu_1085_matA_9_address0,
        matA_9_ce0 => grp_matmul_kernel_fu_1085_matA_9_ce0,
        matA_9_q0 => matA_9_q0,
        matA_9_address1 => grp_matmul_kernel_fu_1085_matA_9_address1,
        matA_9_ce1 => grp_matmul_kernel_fu_1085_matA_9_ce1,
        matA_9_q1 => matA_9_q1,
        matA_10_address0 => grp_matmul_kernel_fu_1085_matA_10_address0,
        matA_10_ce0 => grp_matmul_kernel_fu_1085_matA_10_ce0,
        matA_10_q0 => matA_10_q0,
        matA_10_address1 => grp_matmul_kernel_fu_1085_matA_10_address1,
        matA_10_ce1 => grp_matmul_kernel_fu_1085_matA_10_ce1,
        matA_10_q1 => matA_10_q1,
        matA_11_address0 => grp_matmul_kernel_fu_1085_matA_11_address0,
        matA_11_ce0 => grp_matmul_kernel_fu_1085_matA_11_ce0,
        matA_11_q0 => matA_11_q0,
        matA_11_address1 => grp_matmul_kernel_fu_1085_matA_11_address1,
        matA_11_ce1 => grp_matmul_kernel_fu_1085_matA_11_ce1,
        matA_11_q1 => matA_11_q1,
        matA_12_address0 => grp_matmul_kernel_fu_1085_matA_12_address0,
        matA_12_ce0 => grp_matmul_kernel_fu_1085_matA_12_ce0,
        matA_12_q0 => matA_12_q0,
        matA_12_address1 => grp_matmul_kernel_fu_1085_matA_12_address1,
        matA_12_ce1 => grp_matmul_kernel_fu_1085_matA_12_ce1,
        matA_12_q1 => matA_12_q1,
        matA_13_address0 => grp_matmul_kernel_fu_1085_matA_13_address0,
        matA_13_ce0 => grp_matmul_kernel_fu_1085_matA_13_ce0,
        matA_13_q0 => matA_13_q0,
        matA_13_address1 => grp_matmul_kernel_fu_1085_matA_13_address1,
        matA_13_ce1 => grp_matmul_kernel_fu_1085_matA_13_ce1,
        matA_13_q1 => matA_13_q1,
        matA_14_address0 => grp_matmul_kernel_fu_1085_matA_14_address0,
        matA_14_ce0 => grp_matmul_kernel_fu_1085_matA_14_ce0,
        matA_14_q0 => matA_14_q0,
        matA_14_address1 => grp_matmul_kernel_fu_1085_matA_14_address1,
        matA_14_ce1 => grp_matmul_kernel_fu_1085_matA_14_ce1,
        matA_14_q1 => matA_14_q1,
        matA_15_address0 => grp_matmul_kernel_fu_1085_matA_15_address0,
        matA_15_ce0 => grp_matmul_kernel_fu_1085_matA_15_ce0,
        matA_15_q0 => matA_15_q0,
        matA_15_address1 => grp_matmul_kernel_fu_1085_matA_15_address1,
        matA_15_ce1 => grp_matmul_kernel_fu_1085_matA_15_ce1,
        matA_15_q1 => matA_15_q1,
        matB_0_address0 => grp_matmul_kernel_fu_1085_matB_0_address0,
        matB_0_ce0 => grp_matmul_kernel_fu_1085_matB_0_ce0,
        matB_0_q0 => matB_0_q0,
        matB_0_address1 => grp_matmul_kernel_fu_1085_matB_0_address1,
        matB_0_ce1 => grp_matmul_kernel_fu_1085_matB_0_ce1,
        matB_0_q1 => matB_0_q1,
        matB_1_address0 => grp_matmul_kernel_fu_1085_matB_1_address0,
        matB_1_ce0 => grp_matmul_kernel_fu_1085_matB_1_ce0,
        matB_1_q0 => matB_1_q0,
        matB_1_address1 => grp_matmul_kernel_fu_1085_matB_1_address1,
        matB_1_ce1 => grp_matmul_kernel_fu_1085_matB_1_ce1,
        matB_1_q1 => matB_1_q1,
        matB_2_address0 => grp_matmul_kernel_fu_1085_matB_2_address0,
        matB_2_ce0 => grp_matmul_kernel_fu_1085_matB_2_ce0,
        matB_2_q0 => matB_2_q0,
        matB_2_address1 => grp_matmul_kernel_fu_1085_matB_2_address1,
        matB_2_ce1 => grp_matmul_kernel_fu_1085_matB_2_ce1,
        matB_2_q1 => matB_2_q1,
        matB_3_address0 => grp_matmul_kernel_fu_1085_matB_3_address0,
        matB_3_ce0 => grp_matmul_kernel_fu_1085_matB_3_ce0,
        matB_3_q0 => matB_3_q0,
        matB_3_address1 => grp_matmul_kernel_fu_1085_matB_3_address1,
        matB_3_ce1 => grp_matmul_kernel_fu_1085_matB_3_ce1,
        matB_3_q1 => matB_3_q1,
        matB_4_address0 => grp_matmul_kernel_fu_1085_matB_4_address0,
        matB_4_ce0 => grp_matmul_kernel_fu_1085_matB_4_ce0,
        matB_4_q0 => matB_4_q0,
        matB_4_address1 => grp_matmul_kernel_fu_1085_matB_4_address1,
        matB_4_ce1 => grp_matmul_kernel_fu_1085_matB_4_ce1,
        matB_4_q1 => matB_4_q1,
        matB_5_address0 => grp_matmul_kernel_fu_1085_matB_5_address0,
        matB_5_ce0 => grp_matmul_kernel_fu_1085_matB_5_ce0,
        matB_5_q0 => matB_5_q0,
        matB_5_address1 => grp_matmul_kernel_fu_1085_matB_5_address1,
        matB_5_ce1 => grp_matmul_kernel_fu_1085_matB_5_ce1,
        matB_5_q1 => matB_5_q1,
        matB_6_address0 => grp_matmul_kernel_fu_1085_matB_6_address0,
        matB_6_ce0 => grp_matmul_kernel_fu_1085_matB_6_ce0,
        matB_6_q0 => matB_6_q0,
        matB_6_address1 => grp_matmul_kernel_fu_1085_matB_6_address1,
        matB_6_ce1 => grp_matmul_kernel_fu_1085_matB_6_ce1,
        matB_6_q1 => matB_6_q1,
        matB_7_address0 => grp_matmul_kernel_fu_1085_matB_7_address0,
        matB_7_ce0 => grp_matmul_kernel_fu_1085_matB_7_ce0,
        matB_7_q0 => matB_7_q0,
        matB_7_address1 => grp_matmul_kernel_fu_1085_matB_7_address1,
        matB_7_ce1 => grp_matmul_kernel_fu_1085_matB_7_ce1,
        matB_7_q1 => matB_7_q1,
        matB_8_address0 => grp_matmul_kernel_fu_1085_matB_8_address0,
        matB_8_ce0 => grp_matmul_kernel_fu_1085_matB_8_ce0,
        matB_8_q0 => matB_8_q0,
        matB_8_address1 => grp_matmul_kernel_fu_1085_matB_8_address1,
        matB_8_ce1 => grp_matmul_kernel_fu_1085_matB_8_ce1,
        matB_8_q1 => matB_8_q1,
        matB_9_address0 => grp_matmul_kernel_fu_1085_matB_9_address0,
        matB_9_ce0 => grp_matmul_kernel_fu_1085_matB_9_ce0,
        matB_9_q0 => matB_9_q0,
        matB_9_address1 => grp_matmul_kernel_fu_1085_matB_9_address1,
        matB_9_ce1 => grp_matmul_kernel_fu_1085_matB_9_ce1,
        matB_9_q1 => matB_9_q1,
        matB_10_address0 => grp_matmul_kernel_fu_1085_matB_10_address0,
        matB_10_ce0 => grp_matmul_kernel_fu_1085_matB_10_ce0,
        matB_10_q0 => matB_10_q0,
        matB_10_address1 => grp_matmul_kernel_fu_1085_matB_10_address1,
        matB_10_ce1 => grp_matmul_kernel_fu_1085_matB_10_ce1,
        matB_10_q1 => matB_10_q1,
        matB_11_address0 => grp_matmul_kernel_fu_1085_matB_11_address0,
        matB_11_ce0 => grp_matmul_kernel_fu_1085_matB_11_ce0,
        matB_11_q0 => matB_11_q0,
        matB_11_address1 => grp_matmul_kernel_fu_1085_matB_11_address1,
        matB_11_ce1 => grp_matmul_kernel_fu_1085_matB_11_ce1,
        matB_11_q1 => matB_11_q1,
        matB_12_address0 => grp_matmul_kernel_fu_1085_matB_12_address0,
        matB_12_ce0 => grp_matmul_kernel_fu_1085_matB_12_ce0,
        matB_12_q0 => matB_12_q0,
        matB_12_address1 => grp_matmul_kernel_fu_1085_matB_12_address1,
        matB_12_ce1 => grp_matmul_kernel_fu_1085_matB_12_ce1,
        matB_12_q1 => matB_12_q1,
        matB_13_address0 => grp_matmul_kernel_fu_1085_matB_13_address0,
        matB_13_ce0 => grp_matmul_kernel_fu_1085_matB_13_ce0,
        matB_13_q0 => matB_13_q0,
        matB_13_address1 => grp_matmul_kernel_fu_1085_matB_13_address1,
        matB_13_ce1 => grp_matmul_kernel_fu_1085_matB_13_ce1,
        matB_13_q1 => matB_13_q1,
        matB_14_address0 => grp_matmul_kernel_fu_1085_matB_14_address0,
        matB_14_ce0 => grp_matmul_kernel_fu_1085_matB_14_ce0,
        matB_14_q0 => matB_14_q0,
        matB_14_address1 => grp_matmul_kernel_fu_1085_matB_14_address1,
        matB_14_ce1 => grp_matmul_kernel_fu_1085_matB_14_ce1,
        matB_14_q1 => matB_14_q1,
        matB_15_address0 => grp_matmul_kernel_fu_1085_matB_15_address0,
        matB_15_ce0 => grp_matmul_kernel_fu_1085_matB_15_ce0,
        matB_15_q0 => matB_15_q0,
        matB_15_address1 => grp_matmul_kernel_fu_1085_matB_15_address1,
        matB_15_ce1 => grp_matmul_kernel_fu_1085_matB_15_ce1,
        matB_15_q1 => matB_15_q1,
        matC_0_address0 => grp_matmul_kernel_fu_1085_matC_0_address0,
        matC_0_ce0 => grp_matmul_kernel_fu_1085_matC_0_ce0,
        matC_0_we0 => grp_matmul_kernel_fu_1085_matC_0_we0,
        matC_0_d0 => grp_matmul_kernel_fu_1085_matC_0_d0,
        matC_1_address0 => grp_matmul_kernel_fu_1085_matC_1_address0,
        matC_1_ce0 => grp_matmul_kernel_fu_1085_matC_1_ce0,
        matC_1_we0 => grp_matmul_kernel_fu_1085_matC_1_we0,
        matC_1_d0 => grp_matmul_kernel_fu_1085_matC_1_d0,
        matC_2_address0 => grp_matmul_kernel_fu_1085_matC_2_address0,
        matC_2_ce0 => grp_matmul_kernel_fu_1085_matC_2_ce0,
        matC_2_we0 => grp_matmul_kernel_fu_1085_matC_2_we0,
        matC_2_d0 => grp_matmul_kernel_fu_1085_matC_2_d0,
        matC_3_address0 => grp_matmul_kernel_fu_1085_matC_3_address0,
        matC_3_ce0 => grp_matmul_kernel_fu_1085_matC_3_ce0,
        matC_3_we0 => grp_matmul_kernel_fu_1085_matC_3_we0,
        matC_3_d0 => grp_matmul_kernel_fu_1085_matC_3_d0,
        matC_4_address0 => grp_matmul_kernel_fu_1085_matC_4_address0,
        matC_4_ce0 => grp_matmul_kernel_fu_1085_matC_4_ce0,
        matC_4_we0 => grp_matmul_kernel_fu_1085_matC_4_we0,
        matC_4_d0 => grp_matmul_kernel_fu_1085_matC_4_d0,
        matC_5_address0 => grp_matmul_kernel_fu_1085_matC_5_address0,
        matC_5_ce0 => grp_matmul_kernel_fu_1085_matC_5_ce0,
        matC_5_we0 => grp_matmul_kernel_fu_1085_matC_5_we0,
        matC_5_d0 => grp_matmul_kernel_fu_1085_matC_5_d0,
        matC_6_address0 => grp_matmul_kernel_fu_1085_matC_6_address0,
        matC_6_ce0 => grp_matmul_kernel_fu_1085_matC_6_ce0,
        matC_6_we0 => grp_matmul_kernel_fu_1085_matC_6_we0,
        matC_6_d0 => grp_matmul_kernel_fu_1085_matC_6_d0,
        matC_7_address0 => grp_matmul_kernel_fu_1085_matC_7_address0,
        matC_7_ce0 => grp_matmul_kernel_fu_1085_matC_7_ce0,
        matC_7_we0 => grp_matmul_kernel_fu_1085_matC_7_we0,
        matC_7_d0 => grp_matmul_kernel_fu_1085_matC_7_d0,
        matC_8_address0 => grp_matmul_kernel_fu_1085_matC_8_address0,
        matC_8_ce0 => grp_matmul_kernel_fu_1085_matC_8_ce0,
        matC_8_we0 => grp_matmul_kernel_fu_1085_matC_8_we0,
        matC_8_d0 => grp_matmul_kernel_fu_1085_matC_8_d0,
        matC_9_address0 => grp_matmul_kernel_fu_1085_matC_9_address0,
        matC_9_ce0 => grp_matmul_kernel_fu_1085_matC_9_ce0,
        matC_9_we0 => grp_matmul_kernel_fu_1085_matC_9_we0,
        matC_9_d0 => grp_matmul_kernel_fu_1085_matC_9_d0,
        matC_10_address0 => grp_matmul_kernel_fu_1085_matC_10_address0,
        matC_10_ce0 => grp_matmul_kernel_fu_1085_matC_10_ce0,
        matC_10_we0 => grp_matmul_kernel_fu_1085_matC_10_we0,
        matC_10_d0 => grp_matmul_kernel_fu_1085_matC_10_d0,
        matC_11_address0 => grp_matmul_kernel_fu_1085_matC_11_address0,
        matC_11_ce0 => grp_matmul_kernel_fu_1085_matC_11_ce0,
        matC_11_we0 => grp_matmul_kernel_fu_1085_matC_11_we0,
        matC_11_d0 => grp_matmul_kernel_fu_1085_matC_11_d0,
        matC_12_address0 => grp_matmul_kernel_fu_1085_matC_12_address0,
        matC_12_ce0 => grp_matmul_kernel_fu_1085_matC_12_ce0,
        matC_12_we0 => grp_matmul_kernel_fu_1085_matC_12_we0,
        matC_12_d0 => grp_matmul_kernel_fu_1085_matC_12_d0,
        matC_13_address0 => grp_matmul_kernel_fu_1085_matC_13_address0,
        matC_13_ce0 => grp_matmul_kernel_fu_1085_matC_13_ce0,
        matC_13_we0 => grp_matmul_kernel_fu_1085_matC_13_we0,
        matC_13_d0 => grp_matmul_kernel_fu_1085_matC_13_d0,
        matC_14_address0 => grp_matmul_kernel_fu_1085_matC_14_address0,
        matC_14_ce0 => grp_matmul_kernel_fu_1085_matC_14_ce0,
        matC_14_we0 => grp_matmul_kernel_fu_1085_matC_14_we0,
        matC_14_d0 => grp_matmul_kernel_fu_1085_matC_14_d0,
        matC_15_address0 => grp_matmul_kernel_fu_1085_matC_15_address0,
        matC_15_ce0 => grp_matmul_kernel_fu_1085_matC_15_ce0,
        matC_15_we0 => grp_matmul_kernel_fu_1085_matC_15_we0,
        matC_15_d0 => grp_matmul_kernel_fu_1085_matC_15_d0);

    matmul_mux_1632_3dEe_U115 : component matmul_mux_1632_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => matC_0_q0,
        din1 => matC_1_q0,
        din2 => matC_2_q0,
        din3 => matC_3_q0,
        din4 => matC_4_q0,
        din5 => matC_5_q0,
        din6 => matC_6_q0,
        din7 => matC_7_q0,
        din8 => matC_8_q0,
        din9 => matC_9_q0,
        din10 => matC_10_q0,
        din11 => matC_11_q0,
        din12 => matC_12_q0,
        din13 => matC_13_q0,
        din14 => matC_14_q0,
        din15 => matC_15_q0,
        din16 => tmp_1_fu_1659_p17,
        dout => tmp_1_fu_1659_p18);

    regslice_both_in_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_data_V_U_apdone_blk);

    regslice_both_in_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int,
        vld_out => regslice_both_in_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_keep_V_U_apdone_blk);

    regslice_both_in_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int,
        vld_out => regslice_both_in_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_strb_V_U_apdone_blk);

    regslice_both_in_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_last_V_U_apdone_blk);

    regslice_both_out_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_data_V_1_fu_336,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv64_FFFFFFFFFFFFFFFF,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv64_0,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TLAST_int,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matmul_kernel_fu_1085_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matmul_kernel_fu_1085_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_matmul_kernel_fu_1085_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matmul_kernel_fu_1085_ap_ready = ap_const_logic_1)) then 
                    grp_matmul_kernel_fu_1085_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Hi_assign_1_reg_1015_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                Hi_assign_1_reg_1015 <= high_2_fu_1564_p2;
            elsif ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                Hi_assign_1_reg_1015 <= ap_const_lv10_1F;
            end if; 
        end if;
    end process;

    Hi_assign_2_reg_1062_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                Hi_assign_2_reg_1062 <= high_1_fu_1830_p2;
            elsif (((icmp_ln84_fu_1570_p2 = ap_const_lv1_0) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                Hi_assign_2_reg_1062 <= ap_const_lv10_1F;
            end if; 
        end if;
    end process;

    Hi_assign_reg_969_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                Hi_assign_reg_969 <= high_fu_1345_p2;
            elsif ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Hi_assign_reg_969 <= ap_const_lv10_1F;
            end if; 
        end if;
    end process;

    Lo_assign_1_reg_1003_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                Lo_assign_1_reg_1003 <= low_2_fu_1558_p2;
            elsif ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                Lo_assign_1_reg_1003 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    Lo_assign_2_reg_1050_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                Lo_assign_2_reg_1050 <= low_1_fu_1824_p2;
            elsif (((icmp_ln84_fu_1570_p2 = ap_const_lv1_0) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                Lo_assign_2_reg_1050 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    Lo_assign_reg_957_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                Lo_assign_reg_957 <= low_fu_1339_p2;
            elsif ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Lo_assign_reg_957 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i1_0_reg_992_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_992 <= ap_const_lv11_0;
            elsif (((icmp_ln71_fu_1391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_0_reg_992 <= i_1_reg_1894;
            end if; 
        end if;
    end process;

    i4_0_reg_1038_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (out_r_TREADY_int = ap_const_logic_1))) then 
                i4_0_reg_1038 <= i_2_reg_1955;
            elsif (((grp_matmul_kernel_fu_1085_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i4_0_reg_1038 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_0_reg_946_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_1177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_946 <= i_reg_1844;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_946 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j3_0_reg_1027_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j3_0_reg_1027 <= j_2_reg_1918;
            elsif ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j3_0_reg_1027 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j6_0_reg_1074_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j6_0_reg_1074 <= j_1_reg_1968;
            elsif (((icmp_ln84_fu_1570_p2 = ap_const_lv1_0) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j6_0_reg_1074 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_981_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_981 <= j_reg_1857;
            elsif ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_981 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln74_1_reg_1937 <= add_ln74_1_fu_1496_p2;
                lshr_ln681_2_reg_1928 <= lshr_ln681_2_fu_1471_p2;
                sub_ln681_7_reg_1923 <= sub_ln681_7_fu_1461_p2;
                tmp_s_reg_1933 <= add_ln74_fu_1481_p2(13 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                i_1_reg_1894 <= i_1_fu_1357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                i_2_reg_1955 <= i_2_fu_1576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_1844 <= i_fu_1155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                j_1_reg_1968 <= j_1_fu_1604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_2_reg_1918 <= j_2_fu_1397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1857 <= j_fu_1183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_1177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                lshr_ln681_reg_1867 <= lshr_ln681_fu_1257_p2;
                lshr_ln_reg_1876 <= add_ln57_fu_1267_p2(13 downto 4);
                sub_ln681_3_reg_1862 <= sub_ln681_3_fu_1247_p2;
                trunc_ln57_1_reg_1872 <= trunc_ln57_1_fu_1263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_1145 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    shl_ln1_reg_1899(13 downto 4) <= shl_ln1_fu_1367_p3(13 downto 4);
                    trunc_ln_reg_1904(9 downto 4) <= trunc_ln_fu_1379_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_1570_p2 = ap_const_lv1_0) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    shl_ln2_reg_1960(13 downto 4) <= shl_ln2_fu_1586_p3(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1849(13 downto 4) <= shl_ln_fu_1165_p3(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_1_reg_2068 <= tmp_1_fu_1659_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_data_V_1_fu_336 <= p_Result_3_fu_1818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_1598_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                trunc_ln92_1_reg_1973 <= trunc_ln92_1_fu_1610_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1849(3 downto 0) <= "0000";
    shl_ln1_reg_1899(3 downto 0) <= "0000";
    trunc_ln_reg_1904(3 downto 0) <= "0000";
    shl_ln2_reg_1960(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln48_fu_1149_p2, ap_CS_fsm_state6, icmp_ln65_fu_1351_p2, ap_CS_fsm_state12, icmp_ln90_fu_1598_p2, ap_CS_fsm_state15, ap_CS_fsm_state3, icmp_ln54_fu_1177_p2, ap_CS_fsm_state7, icmp_ln71_fu_1391_p2, ap_CS_fsm_state11, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln84_fu_1570_p2, ap_block_state12_io, grp_matmul_kernel_fu_1085_ap_done, ap_CS_fsm_state10, in_r_TVALID_int, out_r_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln54_fu_1177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln71_fu_1391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((grp_matmul_kernel_fu_1085_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln84_fu_1570_p2 = ap_const_lv1_1) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln84_fu_1570_p2 = ap_const_lv1_0) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln90_fu_1598_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln90_fu_1598_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (out_r_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln57_fu_1267_p2 <= std_logic_vector(unsigned(zext_ln54_fu_1173_p1) + unsigned(shl_ln_reg_1849));
    add_ln74_1_fu_1496_p2 <= std_logic_vector(unsigned(zext_ln74_1_fu_1477_p1) + unsigned(trunc_ln_reg_1904));
    add_ln74_fu_1481_p2 <= std_logic_vector(unsigned(shl_ln1_reg_1899) + unsigned(zext_ln71_fu_1387_p1));
    add_ln92_fu_1614_p2 <= std_logic_vector(unsigned(zext_ln90_fu_1594_p1) + unsigned(shl_ln2_reg_1960));
    and_ln392_1_fu_1806_p2 <= (xor_ln392_fu_1800_p2 and tmp_data_V_1_fu_336);
    and_ln392_2_fu_1812_p2 <= (select_ln392_3_fu_1774_p3 and and_ln392_fu_1794_p2);
    and_ln392_fu_1794_p2 <= (shl_ln392_1_fu_1782_p2 and lshr_ln392_fu_1788_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state12_io_assign_proc : process(icmp_ln90_fu_1598_p2, out_r_TREADY_int)
    begin
                ap_block_state12_io <= ((icmp_ln90_fu_1598_p2 = ap_const_lv1_1) and (out_r_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln48_fu_1149_p2, in_r_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(icmp_ln65_fu_1351_p2, in_r_TVALID_int)
    begin
                ap_block_state6 <= ((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state6_ignore_call1_assign_proc : process(icmp_ln65_fu_1351_p2, in_r_TVALID_int)
    begin
                ap_block_state6_ignore_call1 <= ((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state11, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln84_fu_1570_p2)
    begin
        if (((icmp_ln84_fu_1570_p2 = ap_const_lv1_1) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, regslice_both_out_V_data_V_U_apdone_blk, icmp_ln84_fu_1570_p2)
    begin
        if (((icmp_ln84_fu_1570_p2 = ap_const_lv1_1) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln56_fu_1300_p1 <= trunc_ln56_fu_1296_p1;
    bitcast_ln73_fu_1519_p1 <= trunc_ln73_fu_1515_p1;
    bitcast_ln93_fu_1697_p1 <= tmp_1_reg_2068;
    grp_matmul_kernel_fu_1085_ap_start <= grp_matmul_kernel_fu_1085_ap_start_reg;
    high_1_fu_1830_p2 <= std_logic_vector(unsigned(ap_const_lv10_20) + unsigned(Hi_assign_2_reg_1062));
    high_2_fu_1564_p2 <= std_logic_vector(unsigned(Hi_assign_1_reg_1015) + unsigned(ap_const_lv10_20));
    high_fu_1345_p2 <= std_logic_vector(unsigned(Hi_assign_reg_969) + unsigned(ap_const_lv10_20));
    i_1_fu_1357_p2 <= std_logic_vector(unsigned(i1_0_reg_992) + unsigned(ap_const_lv11_1));
    i_2_fu_1576_p2 <= std_logic_vector(unsigned(i4_0_reg_1038) + unsigned(ap_const_lv11_1));
    i_fu_1155_p2 <= std_logic_vector(unsigned(i_0_reg_946) + unsigned(ap_const_lv11_1));
    icmp_ln392_fu_1704_p2 <= "1" when (unsigned(Lo_assign_2_reg_1050) > unsigned(Hi_assign_2_reg_1062)) else "0";
    icmp_ln48_fu_1149_p2 <= "1" when (i_0_reg_946 = ap_const_lv11_400) else "0";
    icmp_ln54_fu_1177_p2 <= "1" when (j_0_reg_981 = ap_const_lv5_10) else "0";
    icmp_ln65_fu_1351_p2 <= "1" when (i1_0_reg_992 = ap_const_lv11_400) else "0";
    icmp_ln681_1_fu_1403_p2 <= "1" when (unsigned(Lo_assign_1_reg_1003) > unsigned(Hi_assign_1_reg_1015)) else "0";
    icmp_ln681_fu_1189_p2 <= "1" when (unsigned(Lo_assign_reg_957) > unsigned(Hi_assign_reg_969)) else "0";
    icmp_ln71_fu_1391_p2 <= "1" when (j3_0_reg_1027 = ap_const_lv5_10) else "0";
    icmp_ln84_fu_1570_p2 <= "1" when (i4_0_reg_1038 = ap_const_lv11_400) else "0";
    icmp_ln90_fu_1598_p2 <= "1" when (j6_0_reg_1074 = ap_const_lv5_10) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln48_fu_1149_p2, ap_CS_fsm_state6, icmp_ln65_fu_1351_p2, in_r_TVALID_int)
    begin
        if ((((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_V_data_V_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_V_data_V_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln48_fu_1149_p2, ap_CS_fsm_state6, icmp_ln65_fu_1351_p2, in_r_TVALID_int)
    begin
        if (((not(((icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln65_fu_1351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0))) and (icmp_ln48_fu_1149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_1604_p2 <= std_logic_vector(unsigned(j6_0_reg_1074) + unsigned(ap_const_lv5_1));
    j_2_fu_1397_p2 <= std_logic_vector(unsigned(j3_0_reg_1027) + unsigned(ap_const_lv5_1));
    j_fu_1183_p2 <= std_logic_vector(unsigned(j_0_reg_981) + unsigned(ap_const_lv5_1));
    low_1_fu_1824_p2 <= std_logic_vector(unsigned(ap_const_lv10_20) + unsigned(Lo_assign_2_reg_1050));
    low_2_fu_1558_p2 <= std_logic_vector(unsigned(Lo_assign_1_reg_1003) + unsigned(ap_const_lv10_20));
    low_fu_1339_p2 <= std_logic_vector(unsigned(Lo_assign_reg_957) + unsigned(ap_const_lv10_20));
    lshr_ln1_fu_1619_p4 <= add_ln92_fu_1614_p2(13 downto 4);
    lshr_ln392_fu_1788_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln392_2_fu_1754_p1(31-1 downto 0)))));
    lshr_ln681_1_fu_1285_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln681_1_fu_1282_p1(31-1 downto 0)))));
    lshr_ln681_2_fu_1471_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_4_fu_1445_p3),to_integer(unsigned('0' & zext_ln681_2_fu_1467_p1(31-1 downto 0)))));
    lshr_ln681_3_fu_1504_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln681_3_fu_1501_p1(31-1 downto 0)))));
    lshr_ln681_fu_1257_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_1_fu_1231_p3),to_integer(unsigned('0' & zext_ln681_fu_1253_p1(31-1 downto 0)))));

    matA_0_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_0_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_0_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_0_address0 <= grp_matmul_kernel_fu_1085_matA_0_address0;
        else 
            matA_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_0_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_0_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_0_ce0 <= grp_matmul_kernel_fu_1085_matA_0_ce0;
        else 
            matA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_0_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_0_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_0_ce1 <= grp_matmul_kernel_fu_1085_matA_0_ce1;
        else 
            matA_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_0_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_0))) then 
            matA_0_we0 <= ap_const_logic_1;
        else 
            matA_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_10_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_10_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_10_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_10_address0 <= grp_matmul_kernel_fu_1085_matA_10_address0;
        else 
            matA_10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_10_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_10_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_10_ce0 <= grp_matmul_kernel_fu_1085_matA_10_ce0;
        else 
            matA_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_10_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_10_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_10_ce1 <= grp_matmul_kernel_fu_1085_matA_10_ce1;
        else 
            matA_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_10_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_A))) then 
            matA_10_we0 <= ap_const_logic_1;
        else 
            matA_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_11_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_11_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_11_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_11_address0 <= grp_matmul_kernel_fu_1085_matA_11_address0;
        else 
            matA_11_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_11_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_11_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_11_ce0 <= grp_matmul_kernel_fu_1085_matA_11_ce0;
        else 
            matA_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_11_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_11_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_11_ce1 <= grp_matmul_kernel_fu_1085_matA_11_ce1;
        else 
            matA_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_11_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_B))) then 
            matA_11_we0 <= ap_const_logic_1;
        else 
            matA_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_12_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_12_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_12_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_12_address0 <= grp_matmul_kernel_fu_1085_matA_12_address0;
        else 
            matA_12_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_12_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_12_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_12_ce0 <= grp_matmul_kernel_fu_1085_matA_12_ce0;
        else 
            matA_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_12_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_12_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_12_ce1 <= grp_matmul_kernel_fu_1085_matA_12_ce1;
        else 
            matA_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_12_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_C))) then 
            matA_12_we0 <= ap_const_logic_1;
        else 
            matA_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_13_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_13_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_13_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_13_address0 <= grp_matmul_kernel_fu_1085_matA_13_address0;
        else 
            matA_13_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_13_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_13_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_13_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_13_ce0 <= grp_matmul_kernel_fu_1085_matA_13_ce0;
        else 
            matA_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_13_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_13_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_13_ce1 <= grp_matmul_kernel_fu_1085_matA_13_ce1;
        else 
            matA_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_13_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_D))) then 
            matA_13_we0 <= ap_const_logic_1;
        else 
            matA_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_14_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_14_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_14_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_14_address0 <= grp_matmul_kernel_fu_1085_matA_14_address0;
        else 
            matA_14_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_14_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_14_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_14_ce0 <= grp_matmul_kernel_fu_1085_matA_14_ce0;
        else 
            matA_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_14_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_14_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_14_ce1 <= grp_matmul_kernel_fu_1085_matA_14_ce1;
        else 
            matA_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_14_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_E))) then 
            matA_14_we0 <= ap_const_logic_1;
        else 
            matA_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_15_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_15_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_15_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_15_address0 <= grp_matmul_kernel_fu_1085_matA_15_address0;
        else 
            matA_15_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_15_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_15_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_15_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_15_ce0 <= grp_matmul_kernel_fu_1085_matA_15_ce0;
        else 
            matA_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_15_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_15_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_15_ce1 <= grp_matmul_kernel_fu_1085_matA_15_ce1;
        else 
            matA_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_15_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_F))) then 
            matA_15_we0 <= ap_const_logic_1;
        else 
            matA_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_1_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_1_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_1_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_1_address0 <= grp_matmul_kernel_fu_1085_matA_1_address0;
        else 
            matA_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_1_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_1_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_1_ce0 <= grp_matmul_kernel_fu_1085_matA_1_ce0;
        else 
            matA_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_1_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_1_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_1_ce1 <= grp_matmul_kernel_fu_1085_matA_1_ce1;
        else 
            matA_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_1_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_1))) then 
            matA_1_we0 <= ap_const_logic_1;
        else 
            matA_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_2_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_2_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_2_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_2_address0 <= grp_matmul_kernel_fu_1085_matA_2_address0;
        else 
            matA_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_2_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_2_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_2_ce0 <= grp_matmul_kernel_fu_1085_matA_2_ce0;
        else 
            matA_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_2_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_2_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_2_ce1 <= grp_matmul_kernel_fu_1085_matA_2_ce1;
        else 
            matA_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_2_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_2))) then 
            matA_2_we0 <= ap_const_logic_1;
        else 
            matA_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_3_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_3_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_3_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_3_address0 <= grp_matmul_kernel_fu_1085_matA_3_address0;
        else 
            matA_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_3_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_3_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_3_ce0 <= grp_matmul_kernel_fu_1085_matA_3_ce0;
        else 
            matA_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_3_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_3_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_3_ce1 <= grp_matmul_kernel_fu_1085_matA_3_ce1;
        else 
            matA_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_3_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_3))) then 
            matA_3_we0 <= ap_const_logic_1;
        else 
            matA_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_4_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_4_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_4_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_4_address0 <= grp_matmul_kernel_fu_1085_matA_4_address0;
        else 
            matA_4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_4_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_4_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_4_ce0 <= grp_matmul_kernel_fu_1085_matA_4_ce0;
        else 
            matA_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_4_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_4_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_4_ce1 <= grp_matmul_kernel_fu_1085_matA_4_ce1;
        else 
            matA_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_4_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_4))) then 
            matA_4_we0 <= ap_const_logic_1;
        else 
            matA_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_5_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_5_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_5_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_5_address0 <= grp_matmul_kernel_fu_1085_matA_5_address0;
        else 
            matA_5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_5_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_5_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_5_ce0 <= grp_matmul_kernel_fu_1085_matA_5_ce0;
        else 
            matA_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_5_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_5_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_5_ce1 <= grp_matmul_kernel_fu_1085_matA_5_ce1;
        else 
            matA_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_5_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_5))) then 
            matA_5_we0 <= ap_const_logic_1;
        else 
            matA_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_6_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_6_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_6_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_6_address0 <= grp_matmul_kernel_fu_1085_matA_6_address0;
        else 
            matA_6_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_6_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_6_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_6_ce0 <= grp_matmul_kernel_fu_1085_matA_6_ce0;
        else 
            matA_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_6_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_6_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_6_ce1 <= grp_matmul_kernel_fu_1085_matA_6_ce1;
        else 
            matA_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_6_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_6))) then 
            matA_6_we0 <= ap_const_logic_1;
        else 
            matA_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_7_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_7_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_7_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_7_address0 <= grp_matmul_kernel_fu_1085_matA_7_address0;
        else 
            matA_7_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_7_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_7_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_7_ce0 <= grp_matmul_kernel_fu_1085_matA_7_ce0;
        else 
            matA_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_7_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_7_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_7_ce1 <= grp_matmul_kernel_fu_1085_matA_7_ce1;
        else 
            matA_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_7_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_7))) then 
            matA_7_we0 <= ap_const_logic_1;
        else 
            matA_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_8_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_8_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_8_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_8_address0 <= grp_matmul_kernel_fu_1085_matA_8_address0;
        else 
            matA_8_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_8_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_8_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_8_ce0 <= grp_matmul_kernel_fu_1085_matA_8_ce0;
        else 
            matA_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_8_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_8_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_8_ce1 <= grp_matmul_kernel_fu_1085_matA_8_ce1;
        else 
            matA_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_8_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_8))) then 
            matA_8_we0 <= ap_const_logic_1;
        else 
            matA_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_9_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_9_address0, ap_CS_fsm_state10, zext_ln57_fu_1320_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_9_address0 <= zext_ln57_fu_1320_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_9_address0 <= grp_matmul_kernel_fu_1085_matA_9_address0;
        else 
            matA_9_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matA_9_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matA_9_ce0, ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matA_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_9_ce0 <= grp_matmul_kernel_fu_1085_matA_9_ce0;
        else 
            matA_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_9_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matA_9_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matA_9_ce1 <= grp_matmul_kernel_fu_1085_matA_9_ce1;
        else 
            matA_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matA_9_we0_assign_proc : process(trunc_ln57_1_reg_1872, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln57_1_reg_1872 = ap_const_lv4_9))) then 
            matA_9_we0 <= ap_const_logic_1;
        else 
            matA_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_0_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_0_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_0_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_0_address0 <= grp_matmul_kernel_fu_1085_matB_0_address0;
        else 
            matB_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_0_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_0_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_0_ce0 <= grp_matmul_kernel_fu_1085_matB_0_ce0;
        else 
            matB_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_0_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_0_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_0_ce1 <= grp_matmul_kernel_fu_1085_matB_0_ce1;
        else 
            matB_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_0_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_0))) then 
            matB_0_we0 <= ap_const_logic_1;
        else 
            matB_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_10_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_10_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_10_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_10_address0 <= grp_matmul_kernel_fu_1085_matB_10_address0;
        else 
            matB_10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_10_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_10_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_10_ce0 <= grp_matmul_kernel_fu_1085_matB_10_ce0;
        else 
            matB_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_10_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_10_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_10_ce1 <= grp_matmul_kernel_fu_1085_matB_10_ce1;
        else 
            matB_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_10_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_A))) then 
            matB_10_we0 <= ap_const_logic_1;
        else 
            matB_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_11_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_11_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_11_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_11_address0 <= grp_matmul_kernel_fu_1085_matB_11_address0;
        else 
            matB_11_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_11_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_11_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_11_ce0 <= grp_matmul_kernel_fu_1085_matB_11_ce0;
        else 
            matB_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_11_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_11_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_11_ce1 <= grp_matmul_kernel_fu_1085_matB_11_ce1;
        else 
            matB_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_11_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_B))) then 
            matB_11_we0 <= ap_const_logic_1;
        else 
            matB_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_12_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_12_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_12_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_12_address0 <= grp_matmul_kernel_fu_1085_matB_12_address0;
        else 
            matB_12_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_12_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_12_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_12_ce0 <= grp_matmul_kernel_fu_1085_matB_12_ce0;
        else 
            matB_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_12_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_12_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_12_ce1 <= grp_matmul_kernel_fu_1085_matB_12_ce1;
        else 
            matB_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_12_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_C))) then 
            matB_12_we0 <= ap_const_logic_1;
        else 
            matB_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_13_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_13_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_13_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_13_address0 <= grp_matmul_kernel_fu_1085_matB_13_address0;
        else 
            matB_13_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_13_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_13_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_13_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_13_ce0 <= grp_matmul_kernel_fu_1085_matB_13_ce0;
        else 
            matB_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_13_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_13_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_13_ce1 <= grp_matmul_kernel_fu_1085_matB_13_ce1;
        else 
            matB_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_13_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_D))) then 
            matB_13_we0 <= ap_const_logic_1;
        else 
            matB_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_14_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_14_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_14_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_14_address0 <= grp_matmul_kernel_fu_1085_matB_14_address0;
        else 
            matB_14_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_14_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_14_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_14_ce0 <= grp_matmul_kernel_fu_1085_matB_14_ce0;
        else 
            matB_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_14_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_14_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_14_ce1 <= grp_matmul_kernel_fu_1085_matB_14_ce1;
        else 
            matB_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_14_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_E))) then 
            matB_14_we0 <= ap_const_logic_1;
        else 
            matB_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_15_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_15_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_15_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_15_address0 <= grp_matmul_kernel_fu_1085_matB_15_address0;
        else 
            matB_15_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_15_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_15_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_15_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_15_ce0 <= grp_matmul_kernel_fu_1085_matB_15_ce0;
        else 
            matB_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_15_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_15_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_15_ce1 <= grp_matmul_kernel_fu_1085_matB_15_ce1;
        else 
            matB_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_15_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_F))) then 
            matB_15_we0 <= ap_const_logic_1;
        else 
            matB_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_1_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_1_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_1_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_1_address0 <= grp_matmul_kernel_fu_1085_matB_1_address0;
        else 
            matB_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_1_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_1_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_1_ce0 <= grp_matmul_kernel_fu_1085_matB_1_ce0;
        else 
            matB_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_1_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_1_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_1_ce1 <= grp_matmul_kernel_fu_1085_matB_1_ce1;
        else 
            matB_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_1_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_1))) then 
            matB_1_we0 <= ap_const_logic_1;
        else 
            matB_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_2_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_2_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_2_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_2_address0 <= grp_matmul_kernel_fu_1085_matB_2_address0;
        else 
            matB_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_2_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_2_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_2_ce0 <= grp_matmul_kernel_fu_1085_matB_2_ce0;
        else 
            matB_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_2_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_2_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_2_ce1 <= grp_matmul_kernel_fu_1085_matB_2_ce1;
        else 
            matB_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_2_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_2))) then 
            matB_2_we0 <= ap_const_logic_1;
        else 
            matB_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_3_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_3_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_3_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_3_address0 <= grp_matmul_kernel_fu_1085_matB_3_address0;
        else 
            matB_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_3_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_3_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_3_ce0 <= grp_matmul_kernel_fu_1085_matB_3_ce0;
        else 
            matB_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_3_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_3_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_3_ce1 <= grp_matmul_kernel_fu_1085_matB_3_ce1;
        else 
            matB_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_3_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_3))) then 
            matB_3_we0 <= ap_const_logic_1;
        else 
            matB_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_4_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_4_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_4_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_4_address0 <= grp_matmul_kernel_fu_1085_matB_4_address0;
        else 
            matB_4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_4_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_4_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_4_ce0 <= grp_matmul_kernel_fu_1085_matB_4_ce0;
        else 
            matB_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_4_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_4_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_4_ce1 <= grp_matmul_kernel_fu_1085_matB_4_ce1;
        else 
            matB_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_4_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_4))) then 
            matB_4_we0 <= ap_const_logic_1;
        else 
            matB_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_5_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_5_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_5_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_5_address0 <= grp_matmul_kernel_fu_1085_matB_5_address0;
        else 
            matB_5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_5_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_5_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_5_ce0 <= grp_matmul_kernel_fu_1085_matB_5_ce0;
        else 
            matB_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_5_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_5_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_5_ce1 <= grp_matmul_kernel_fu_1085_matB_5_ce1;
        else 
            matB_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_5_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_5))) then 
            matB_5_we0 <= ap_const_logic_1;
        else 
            matB_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_6_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_6_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_6_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_6_address0 <= grp_matmul_kernel_fu_1085_matB_6_address0;
        else 
            matB_6_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_6_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_6_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_6_ce0 <= grp_matmul_kernel_fu_1085_matB_6_ce0;
        else 
            matB_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_6_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_6_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_6_ce1 <= grp_matmul_kernel_fu_1085_matB_6_ce1;
        else 
            matB_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_6_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_6))) then 
            matB_6_we0 <= ap_const_logic_1;
        else 
            matB_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_7_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_7_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_7_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_7_address0 <= grp_matmul_kernel_fu_1085_matB_7_address0;
        else 
            matB_7_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_7_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_7_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_7_ce0 <= grp_matmul_kernel_fu_1085_matB_7_ce0;
        else 
            matB_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_7_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_7_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_7_ce1 <= grp_matmul_kernel_fu_1085_matB_7_ce1;
        else 
            matB_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_7_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_7))) then 
            matB_7_we0 <= ap_const_logic_1;
        else 
            matB_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_8_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_8_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_8_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_8_address0 <= grp_matmul_kernel_fu_1085_matB_8_address0;
        else 
            matB_8_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_8_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_8_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_8_ce0 <= grp_matmul_kernel_fu_1085_matB_8_ce0;
        else 
            matB_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_8_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_8_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_8_ce1 <= grp_matmul_kernel_fu_1085_matB_8_ce1;
        else 
            matB_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_8_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_8))) then 
            matB_8_we0 <= ap_const_logic_1;
        else 
            matB_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_9_address0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_9_address0, ap_CS_fsm_state10, zext_ln74_fu_1539_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_9_address0 <= zext_ln74_fu_1539_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_9_address0 <= grp_matmul_kernel_fu_1085_matB_9_address0;
        else 
            matB_9_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matB_9_ce0_assign_proc : process(grp_matmul_kernel_fu_1085_matB_9_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matB_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_9_ce0 <= grp_matmul_kernel_fu_1085_matB_9_ce0;
        else 
            matB_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matB_9_ce1_assign_proc : process(grp_matmul_kernel_fu_1085_matB_9_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matB_9_ce1 <= grp_matmul_kernel_fu_1085_matB_9_ce1;
        else 
            matB_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matB_9_we0_assign_proc : process(tmp_s_reg_1933, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_s_reg_1933 = ap_const_lv4_9))) then 
            matB_9_we0 <= ap_const_logic_1;
        else 
            matB_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_0_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_0_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_0_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_0_address0 <= grp_matmul_kernel_fu_1085_matC_0_address0;
        else 
            matC_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_0_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_0_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_0_ce0 <= grp_matmul_kernel_fu_1085_matC_0_ce0;
        else 
            matC_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_0_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_0_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_0_we0 <= grp_matmul_kernel_fu_1085_matC_0_we0;
        else 
            matC_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_10_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_10_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_10_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_10_address0 <= grp_matmul_kernel_fu_1085_matC_10_address0;
        else 
            matC_10_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_10_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_10_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_10_ce0 <= grp_matmul_kernel_fu_1085_matC_10_ce0;
        else 
            matC_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_10_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_10_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_10_we0 <= grp_matmul_kernel_fu_1085_matC_10_we0;
        else 
            matC_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_11_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_11_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_11_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_11_address0 <= grp_matmul_kernel_fu_1085_matC_11_address0;
        else 
            matC_11_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_11_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_11_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_11_ce0 <= grp_matmul_kernel_fu_1085_matC_11_ce0;
        else 
            matC_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_11_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_11_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_11_we0 <= grp_matmul_kernel_fu_1085_matC_11_we0;
        else 
            matC_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_12_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_12_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_12_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_12_address0 <= grp_matmul_kernel_fu_1085_matC_12_address0;
        else 
            matC_12_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_12_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_12_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_12_ce0 <= grp_matmul_kernel_fu_1085_matC_12_ce0;
        else 
            matC_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_12_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_12_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_12_we0 <= grp_matmul_kernel_fu_1085_matC_12_we0;
        else 
            matC_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_13_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_13_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_13_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_13_address0 <= grp_matmul_kernel_fu_1085_matC_13_address0;
        else 
            matC_13_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_13_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_13_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_13_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_13_ce0 <= grp_matmul_kernel_fu_1085_matC_13_ce0;
        else 
            matC_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_13_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_13_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_13_we0 <= grp_matmul_kernel_fu_1085_matC_13_we0;
        else 
            matC_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_14_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_14_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_14_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_14_address0 <= grp_matmul_kernel_fu_1085_matC_14_address0;
        else 
            matC_14_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_14_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_14_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_14_ce0 <= grp_matmul_kernel_fu_1085_matC_14_ce0;
        else 
            matC_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_14_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_14_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_14_we0 <= grp_matmul_kernel_fu_1085_matC_14_we0;
        else 
            matC_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_15_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_15_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_15_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_15_address0 <= grp_matmul_kernel_fu_1085_matC_15_address0;
        else 
            matC_15_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_15_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_15_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_15_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_15_ce0 <= grp_matmul_kernel_fu_1085_matC_15_ce0;
        else 
            matC_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_15_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_15_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_15_we0 <= grp_matmul_kernel_fu_1085_matC_15_we0;
        else 
            matC_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_1_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_1_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_1_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_1_address0 <= grp_matmul_kernel_fu_1085_matC_1_address0;
        else 
            matC_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_1_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_1_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_1_ce0 <= grp_matmul_kernel_fu_1085_matC_1_ce0;
        else 
            matC_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_1_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_1_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_1_we0 <= grp_matmul_kernel_fu_1085_matC_1_we0;
        else 
            matC_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_2_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_2_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_2_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_2_address0 <= grp_matmul_kernel_fu_1085_matC_2_address0;
        else 
            matC_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_2_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_2_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_2_ce0 <= grp_matmul_kernel_fu_1085_matC_2_ce0;
        else 
            matC_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_2_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_2_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_2_we0 <= grp_matmul_kernel_fu_1085_matC_2_we0;
        else 
            matC_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_3_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_3_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_3_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_3_address0 <= grp_matmul_kernel_fu_1085_matC_3_address0;
        else 
            matC_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_3_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_3_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_3_ce0 <= grp_matmul_kernel_fu_1085_matC_3_ce0;
        else 
            matC_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_3_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_3_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_3_we0 <= grp_matmul_kernel_fu_1085_matC_3_we0;
        else 
            matC_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_4_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_4_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_4_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_4_address0 <= grp_matmul_kernel_fu_1085_matC_4_address0;
        else 
            matC_4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_4_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_4_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_4_ce0 <= grp_matmul_kernel_fu_1085_matC_4_ce0;
        else 
            matC_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_4_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_4_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_4_we0 <= grp_matmul_kernel_fu_1085_matC_4_we0;
        else 
            matC_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_5_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_5_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_5_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_5_address0 <= grp_matmul_kernel_fu_1085_matC_5_address0;
        else 
            matC_5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_5_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_5_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_5_ce0 <= grp_matmul_kernel_fu_1085_matC_5_ce0;
        else 
            matC_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_5_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_5_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_5_we0 <= grp_matmul_kernel_fu_1085_matC_5_we0;
        else 
            matC_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_6_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_6_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_6_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_6_address0 <= grp_matmul_kernel_fu_1085_matC_6_address0;
        else 
            matC_6_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_6_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_6_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_6_ce0 <= grp_matmul_kernel_fu_1085_matC_6_ce0;
        else 
            matC_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_6_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_6_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_6_we0 <= grp_matmul_kernel_fu_1085_matC_6_we0;
        else 
            matC_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_7_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_7_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_7_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_7_address0 <= grp_matmul_kernel_fu_1085_matC_7_address0;
        else 
            matC_7_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_7_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_7_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_7_ce0 <= grp_matmul_kernel_fu_1085_matC_7_ce0;
        else 
            matC_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_7_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_7_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_7_we0 <= grp_matmul_kernel_fu_1085_matC_7_we0;
        else 
            matC_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_8_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_8_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_8_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_8_address0 <= grp_matmul_kernel_fu_1085_matC_8_address0;
        else 
            matC_8_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_8_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_8_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_8_ce0 <= grp_matmul_kernel_fu_1085_matC_8_ce0;
        else 
            matC_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_8_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_8_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_8_we0 <= grp_matmul_kernel_fu_1085_matC_8_we0;
        else 
            matC_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_9_address0_assign_proc : process(ap_CS_fsm_state12, grp_matmul_kernel_fu_1085_matC_9_address0, ap_CS_fsm_state10, zext_ln92_1_fu_1629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            matC_9_address0 <= zext_ln92_1_fu_1629_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_9_address0 <= grp_matmul_kernel_fu_1085_matC_9_address0;
        else 
            matC_9_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    matC_9_ce0_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_io, grp_matmul_kernel_fu_1085_matC_9_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            matC_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_9_ce0 <= grp_matmul_kernel_fu_1085_matC_9_ce0;
        else 
            matC_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matC_9_we0_assign_proc : process(grp_matmul_kernel_fu_1085_matC_9_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matC_9_we0 <= grp_matmul_kernel_fu_1085_matC_9_we0;
        else 
            matC_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state12, icmp_ln90_fu_1598_p2, ap_CS_fsm_state15, out_r_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((icmp_ln90_fu_1598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST_int <= "1" when (i4_0_reg_1038 = ap_const_lv11_3FF) else "0";
    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_CS_fsm_state12, icmp_ln90_fu_1598_p2, ap_block_state12_io)
    begin
        if (((icmp_ln90_fu_1598_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state12_io) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_1510_p2 <= (lshr_ln681_3_fu_1504_p2 and lshr_ln681_2_reg_1928);
    p_Result_3_fu_1818_p2 <= (and_ln392_2_fu_1812_p2 or and_ln392_1_fu_1806_p2);
    p_Result_s_fu_1291_p2 <= (lshr_ln681_reg_1867 and lshr_ln681_1_fu_1285_p2);
    select_ln392_1_fu_1724_p3 <= 
        Hi_assign_2_reg_1062 when (icmp_ln392_fu_1704_p2(0) = '1') else 
        Lo_assign_2_reg_1050;
    select_ln392_2_fu_1732_p3 <= 
        sub_ln392_fu_1710_p2 when (icmp_ln392_fu_1704_p2(0) = '1') else 
        Lo_assign_2_reg_1050;
    select_ln392_3_fu_1774_p3 <= 
        tmp_6_fu_1764_p4 when (icmp_ln392_fu_1704_p2(0) = '1') else 
        shl_ln392_fu_1758_p2;
    select_ln392_fu_1716_p3 <= 
        Lo_assign_2_reg_1050 when (icmp_ln392_fu_1704_p2(0) = '1') else 
        Hi_assign_2_reg_1062;
    select_ln681_1_fu_1231_p3 <= 
        tmp_4_fu_1195_p4 when (icmp_ln681_fu_1189_p2(0) = '1') else 
        reg_1145;
    select_ln681_2_fu_1239_p3 <= 
        sub_ln681_1_fu_1211_p2 when (icmp_ln681_fu_1189_p2(0) = '1') else 
        Lo_assign_reg_957;
    select_ln681_3_fu_1437_p3 <= 
        sub_ln681_4_fu_1419_p2 when (icmp_ln681_1_fu_1403_p2(0) = '1') else 
        sub_ln681_6_fu_1431_p2;
    select_ln681_4_fu_1445_p3 <= 
        tmp_5_fu_1409_p4 when (icmp_ln681_1_fu_1403_p2(0) = '1') else 
        reg_1145;
    select_ln681_5_fu_1453_p3 <= 
        sub_ln681_5_fu_1425_p2 when (icmp_ln681_1_fu_1403_p2(0) = '1') else 
        Lo_assign_1_reg_1003;
    select_ln681_fu_1223_p3 <= 
        sub_ln681_fu_1205_p2 when (icmp_ln681_fu_1189_p2(0) = '1') else 
        sub_ln681_2_fu_1217_p2;
    shl_ln1_fu_1367_p3 <= (trunc_ln74_fu_1363_p1 & ap_const_lv4_0);
    shl_ln2_fu_1586_p3 <= (trunc_ln92_fu_1582_p1 & ap_const_lv4_0);
    shl_ln392_1_fu_1782_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln392_1_fu_1750_p1(31-1 downto 0)))));
    shl_ln392_fu_1758_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_1700_p1),to_integer(unsigned('0' & zext_ln392_fu_1746_p1(31-1 downto 0)))));
    shl_ln_fu_1165_p3 <= (trunc_ln57_fu_1161_p1 & ap_const_lv4_0);
    sub_ln392_1_fu_1740_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln392_fu_1716_p3));
    sub_ln392_fu_1710_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(Lo_assign_2_reg_1050));
    sub_ln681_1_fu_1211_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(Lo_assign_reg_957));
    sub_ln681_2_fu_1217_p2 <= std_logic_vector(unsigned(Hi_assign_reg_969) - unsigned(Lo_assign_reg_957));
    sub_ln681_3_fu_1247_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln681_fu_1223_p3));
    sub_ln681_4_fu_1419_p2 <= std_logic_vector(unsigned(Lo_assign_1_reg_1003) - unsigned(Hi_assign_1_reg_1015));
    sub_ln681_5_fu_1425_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(Lo_assign_1_reg_1003));
    sub_ln681_6_fu_1431_p2 <= std_logic_vector(unsigned(Hi_assign_1_reg_1015) - unsigned(Lo_assign_1_reg_1003));
    sub_ln681_7_fu_1461_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln681_3_fu_1437_p3));
    sub_ln681_fu_1205_p2 <= std_logic_vector(unsigned(Lo_assign_reg_957) - unsigned(Hi_assign_reg_969));
    tmp_1_fu_1659_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln92_1_reg_1973),32));
    
    tmp_4_fu_1195_p4_proc : process(reg_1145)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_4_fu_1195_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := reg_1145;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_4_fu_1195_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_4_fu_1195_p4_i) := reg_1145(512-1-tmp_4_fu_1195_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_1195_p4 <= resvalue(512-1 downto 0);
    end process;

    
    tmp_5_fu_1409_p4_proc : process(reg_1145)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_5_fu_1409_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := reg_1145;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_5_fu_1409_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_5_fu_1409_p4_i) := reg_1145(512-1-tmp_5_fu_1409_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_1409_p4 <= resvalue(512-1 downto 0);
    end process;

    
    tmp_6_fu_1764_p4_proc : process(shl_ln392_fu_1758_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_6_fu_1764_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := shl_ln392_fu_1758_p2;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_6_fu_1764_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_6_fu_1764_p4_i) := shl_ln392_fu_1758_p2(512-1-tmp_6_fu_1764_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_1764_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_V_fu_1700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitcast_ln93_fu_1697_p1),512));
    trunc_ln56_fu_1296_p1 <= p_Result_s_fu_1291_p2(32 - 1 downto 0);
    trunc_ln57_1_fu_1263_p1 <= j_0_reg_981(4 - 1 downto 0);
    trunc_ln57_fu_1161_p1 <= i_0_reg_946(10 - 1 downto 0);
    trunc_ln73_fu_1515_p1 <= p_Result_1_fu_1510_p2(32 - 1 downto 0);
    trunc_ln74_1_fu_1375_p1 <= i1_0_reg_992(6 - 1 downto 0);
    trunc_ln74_fu_1363_p1 <= i1_0_reg_992(10 - 1 downto 0);
    trunc_ln92_1_fu_1610_p1 <= j6_0_reg_1074(4 - 1 downto 0);
    trunc_ln92_fu_1582_p1 <= i4_0_reg_1038(10 - 1 downto 0);
    trunc_ln_fu_1379_p3 <= (trunc_ln74_1_fu_1375_p1 & ap_const_lv4_0);
    xor_ln392_fu_1800_p2 <= (ap_const_lv512_lc_1 xor and_ln392_fu_1794_p2);
    zext_ln392_1_fu_1750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln392_1_fu_1724_p3),512));
    zext_ln392_2_fu_1754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln392_1_fu_1740_p2),512));
    zext_ln392_fu_1746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln392_2_fu_1732_p3),512));
    zext_ln54_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_981),14));
    zext_ln57_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1876),64));
    zext_ln681_1_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_3_reg_1862),512));
    zext_ln681_2_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_5_fu_1453_p3),512));
    zext_ln681_3_fu_1501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_7_reg_1923),512));
    zext_ln681_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_2_fu_1239_p3),512));
    zext_ln71_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_0_reg_1027),14));
    zext_ln74_1_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_0_reg_1027),10));
    zext_ln74_fu_1539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_1_reg_1937),64));
    zext_ln90_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_0_reg_1074),14));
    zext_ln92_1_fu_1629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_1619_p4),64));
end behav;
