// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_input (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_0_TDATA,
        in_0_TVALID,
        in_0_TREADY,
        in_1_TDATA,
        in_1_TVALID,
        in_1_TREADY,
        in_2_TDATA,
        in_2_TVALID,
        in_2_TREADY,
        in_3_TDATA,
        in_3_TVALID,
        in_3_TREADY,
        in_0_TKEEP,
        in_1_TKEEP,
        in_2_TKEEP,
        in_3_TKEEP,
        in_0_TSTRB,
        in_1_TSTRB,
        in_2_TSTRB,
        in_3_TSTRB,
        in_0_TLAST,
        in_1_TLAST,
        in_2_TLAST,
        in_3_TLAST,
        inputs_0_0_V_din,
        inputs_0_0_V_full_n,
        inputs_0_0_V_write,
        inputs_0_1_V_din,
        inputs_0_1_V_full_n,
        inputs_0_1_V_write,
        inputs_0_2_V_din,
        inputs_0_2_V_full_n,
        inputs_0_2_V_write,
        inputs_1_0_V_din,
        inputs_1_0_V_full_n,
        inputs_1_0_V_write,
        inputs_1_1_V_din,
        inputs_1_1_V_full_n,
        inputs_1_1_V_write,
        inputs_1_2_V_din,
        inputs_1_2_V_full_n,
        inputs_1_2_V_write,
        inputs_2_0_V_din,
        inputs_2_0_V_full_n,
        inputs_2_0_V_write,
        inputs_2_1_V_din,
        inputs_2_1_V_full_n,
        inputs_2_1_V_write,
        inputs_2_2_V_din,
        inputs_2_2_V_full_n,
        inputs_2_2_V_write,
        inputs_3_0_V_din,
        inputs_3_0_V_full_n,
        inputs_3_0_V_write,
        inputs_3_1_V_din,
        inputs_3_1_V_full_n,
        inputs_3_1_V_write,
        inputs_3_2_V_din,
        inputs_3_2_V_full_n,
        inputs_3_2_V_write
);

parameter    ap_ST_fsm_state1 = 153'd1;
parameter    ap_ST_fsm_state2 = 153'd2;
parameter    ap_ST_fsm_state3 = 153'd4;
parameter    ap_ST_fsm_state4 = 153'd8;
parameter    ap_ST_fsm_state5 = 153'd16;
parameter    ap_ST_fsm_state6 = 153'd32;
parameter    ap_ST_fsm_state7 = 153'd64;
parameter    ap_ST_fsm_state8 = 153'd128;
parameter    ap_ST_fsm_state9 = 153'd256;
parameter    ap_ST_fsm_state10 = 153'd512;
parameter    ap_ST_fsm_state11 = 153'd1024;
parameter    ap_ST_fsm_state12 = 153'd2048;
parameter    ap_ST_fsm_state13 = 153'd4096;
parameter    ap_ST_fsm_state14 = 153'd8192;
parameter    ap_ST_fsm_state15 = 153'd16384;
parameter    ap_ST_fsm_state16 = 153'd32768;
parameter    ap_ST_fsm_state17 = 153'd65536;
parameter    ap_ST_fsm_state18 = 153'd131072;
parameter    ap_ST_fsm_state19 = 153'd262144;
parameter    ap_ST_fsm_state20 = 153'd524288;
parameter    ap_ST_fsm_state21 = 153'd1048576;
parameter    ap_ST_fsm_state22 = 153'd2097152;
parameter    ap_ST_fsm_state23 = 153'd4194304;
parameter    ap_ST_fsm_state24 = 153'd8388608;
parameter    ap_ST_fsm_state25 = 153'd16777216;
parameter    ap_ST_fsm_state26 = 153'd33554432;
parameter    ap_ST_fsm_state27 = 153'd67108864;
parameter    ap_ST_fsm_state28 = 153'd134217728;
parameter    ap_ST_fsm_state29 = 153'd268435456;
parameter    ap_ST_fsm_state30 = 153'd536870912;
parameter    ap_ST_fsm_state31 = 153'd1073741824;
parameter    ap_ST_fsm_state32 = 153'd2147483648;
parameter    ap_ST_fsm_state33 = 153'd4294967296;
parameter    ap_ST_fsm_state34 = 153'd8589934592;
parameter    ap_ST_fsm_state35 = 153'd17179869184;
parameter    ap_ST_fsm_state36 = 153'd34359738368;
parameter    ap_ST_fsm_state37 = 153'd68719476736;
parameter    ap_ST_fsm_state38 = 153'd137438953472;
parameter    ap_ST_fsm_state39 = 153'd274877906944;
parameter    ap_ST_fsm_state40 = 153'd549755813888;
parameter    ap_ST_fsm_state41 = 153'd1099511627776;
parameter    ap_ST_fsm_state42 = 153'd2199023255552;
parameter    ap_ST_fsm_state43 = 153'd4398046511104;
parameter    ap_ST_fsm_state44 = 153'd8796093022208;
parameter    ap_ST_fsm_state45 = 153'd17592186044416;
parameter    ap_ST_fsm_state46 = 153'd35184372088832;
parameter    ap_ST_fsm_state47 = 153'd70368744177664;
parameter    ap_ST_fsm_state48 = 153'd140737488355328;
parameter    ap_ST_fsm_state49 = 153'd281474976710656;
parameter    ap_ST_fsm_state50 = 153'd562949953421312;
parameter    ap_ST_fsm_state51 = 153'd1125899906842624;
parameter    ap_ST_fsm_state52 = 153'd2251799813685248;
parameter    ap_ST_fsm_state53 = 153'd4503599627370496;
parameter    ap_ST_fsm_state54 = 153'd9007199254740992;
parameter    ap_ST_fsm_state55 = 153'd18014398509481984;
parameter    ap_ST_fsm_state56 = 153'd36028797018963968;
parameter    ap_ST_fsm_state57 = 153'd72057594037927936;
parameter    ap_ST_fsm_state58 = 153'd144115188075855872;
parameter    ap_ST_fsm_state59 = 153'd288230376151711744;
parameter    ap_ST_fsm_state60 = 153'd576460752303423488;
parameter    ap_ST_fsm_state61 = 153'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 153'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 153'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 153'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 153'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 153'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 153'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 153'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 153'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 153'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 153'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 153'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 153'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 153'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 153'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 153'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 153'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 153'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 153'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 153'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 153'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 153'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 153'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 153'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 153'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 153'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 153'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 153'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 153'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 153'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 153'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 153'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 153'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 153'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 153'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 153'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 153'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 153'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 153'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 153'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 153'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 153'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 153'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 153'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 153'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 153'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 153'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 153'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 153'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 153'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 153'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 153'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 153'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 153'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 153'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 153'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 153'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 153'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 153'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 153'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 153'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 153'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 153'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 153'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 153'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 153'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 153'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 153'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 153'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 153'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 153'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 153'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 153'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 153'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 153'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 153'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 153'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 153'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 153'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 153'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 153'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 153'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 153'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 153'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 153'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 153'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 153'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 153'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 153'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 153'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 153'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 153'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 153'd5708990770823839524233143877797980545530986496;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] in_0_TDATA;
input   in_0_TVALID;
output   in_0_TREADY;
input  [63:0] in_1_TDATA;
input   in_1_TVALID;
output   in_1_TREADY;
input  [63:0] in_2_TDATA;
input   in_2_TVALID;
output   in_2_TREADY;
input  [63:0] in_3_TDATA;
input   in_3_TVALID;
output   in_3_TREADY;
input  [7:0] in_0_TKEEP;
input  [7:0] in_1_TKEEP;
input  [7:0] in_2_TKEEP;
input  [7:0] in_3_TKEEP;
input  [7:0] in_0_TSTRB;
input  [7:0] in_1_TSTRB;
input  [7:0] in_2_TSTRB;
input  [7:0] in_3_TSTRB;
input  [0:0] in_0_TLAST;
input  [0:0] in_1_TLAST;
input  [0:0] in_2_TLAST;
input  [0:0] in_3_TLAST;
output  [7:0] inputs_0_0_V_din;
input   inputs_0_0_V_full_n;
output   inputs_0_0_V_write;
output  [7:0] inputs_0_1_V_din;
input   inputs_0_1_V_full_n;
output   inputs_0_1_V_write;
output  [7:0] inputs_0_2_V_din;
input   inputs_0_2_V_full_n;
output   inputs_0_2_V_write;
output  [7:0] inputs_1_0_V_din;
input   inputs_1_0_V_full_n;
output   inputs_1_0_V_write;
output  [7:0] inputs_1_1_V_din;
input   inputs_1_1_V_full_n;
output   inputs_1_1_V_write;
output  [7:0] inputs_1_2_V_din;
input   inputs_1_2_V_full_n;
output   inputs_1_2_V_write;
output  [7:0] inputs_2_0_V_din;
input   inputs_2_0_V_full_n;
output   inputs_2_0_V_write;
output  [7:0] inputs_2_1_V_din;
input   inputs_2_1_V_full_n;
output   inputs_2_1_V_write;
output  [7:0] inputs_2_2_V_din;
input   inputs_2_2_V_full_n;
output   inputs_2_2_V_write;
output  [7:0] inputs_3_0_V_din;
input   inputs_3_0_V_full_n;
output   inputs_3_0_V_write;
output  [7:0] inputs_3_1_V_din;
input   inputs_3_1_V_full_n;
output   inputs_3_1_V_write;
output  [7:0] inputs_3_2_V_din;
input   inputs_3_2_V_full_n;
output   inputs_3_2_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_0_TREADY;
reg in_1_TREADY;
reg in_2_TREADY;
reg in_3_TREADY;
reg inputs_0_0_V_write;
reg inputs_0_1_V_write;
reg inputs_0_2_V_write;
reg inputs_1_0_V_write;
reg inputs_1_1_V_write;
reg inputs_1_2_V_write;
reg inputs_2_0_V_write;
reg inputs_2_1_V_write;
reg inputs_2_2_V_write;
reg inputs_3_0_V_write;
reg inputs_3_1_V_write;
reg inputs_3_2_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [152:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_0_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln12_fu_455_p2;
reg    in_1_TDATA_blk_n;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln12_1_fu_620_p2;
reg    in_2_TDATA_blk_n;
wire    ap_CS_fsm_state78;
wire   [0:0] icmp_ln12_2_fu_785_p2;
reg    in_3_TDATA_blk_n;
wire    ap_CS_fsm_state116;
wire   [0:0] icmp_ln12_3_fu_950_p2;
reg    inputs_0_0_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [1:0] trunc_ln182_fu_584_p1;
reg    inputs_0_1_V_blk_n;
reg    inputs_0_2_V_blk_n;
reg    inputs_1_0_V_blk_n;
wire    ap_CS_fsm_state42;
wire   [1:0] trunc_ln182_1_fu_749_p1;
reg    inputs_1_1_V_blk_n;
reg    inputs_1_2_V_blk_n;
reg    inputs_2_0_V_blk_n;
wire    ap_CS_fsm_state80;
wire   [1:0] trunc_ln182_2_fu_914_p1;
reg    inputs_2_1_V_blk_n;
reg    inputs_2_2_V_blk_n;
reg    inputs_3_0_V_blk_n;
wire    ap_CS_fsm_state118;
wire   [1:0] trunc_ln182_3_fu_1074_p1;
reg    inputs_3_1_V_blk_n;
reg    inputs_3_2_V_blk_n;
wire   [1:0] add_ln12_fu_461_p2;
reg   [1:0] add_ln12_reg_1121;
reg    ap_block_state2;
reg   [63:0] tmp_data_V_reg_1126;
wire   [3:0] add_ln17_fu_482_p2;
reg   [3:0] add_ln17_reg_1143;
wire    ap_CS_fsm_state3;
wire   [6:0] sub_ln681_3_fu_544_p2;
reg   [6:0] sub_ln681_3_reg_1148;
wire   [0:0] icmp_ln17_fu_476_p2;
wire   [63:0] lshr_ln681_fu_554_p2;
reg   [63:0] lshr_ln681_reg_1153;
reg    ap_predicate_op217_write_state4;
reg    ap_block_state4;
wire   [6:0] add_ln22_fu_603_p2;
reg   [6:0] add_ln22_reg_1166;
wire   [6:0] add_ln23_fu_609_p2;
reg   [6:0] add_ln23_reg_1171;
wire   [1:0] add_ln12_1_fu_626_p2;
reg   [1:0] add_ln12_1_reg_1179;
reg    ap_block_state40;
reg   [63:0] tmp_data_V_2_reg_1184;
wire   [3:0] add_ln17_1_fu_647_p2;
reg   [3:0] add_ln17_1_reg_1201;
wire    ap_CS_fsm_state41;
wire   [6:0] sub_ln681_7_fu_709_p2;
reg   [6:0] sub_ln681_7_reg_1206;
wire   [0:0] icmp_ln17_1_fu_641_p2;
wire   [63:0] lshr_ln681_2_fu_719_p2;
reg   [63:0] lshr_ln681_2_reg_1211;
reg    ap_predicate_op304_write_state42;
reg    ap_block_state42;
wire   [6:0] add_ln22_1_fu_768_p2;
reg   [6:0] add_ln22_1_reg_1224;
wire   [6:0] add_ln23_1_fu_774_p2;
reg   [6:0] add_ln23_1_reg_1229;
wire   [1:0] add_ln12_2_fu_791_p2;
reg   [1:0] add_ln12_2_reg_1237;
reg    ap_block_state78;
reg   [63:0] tmp_data_V_3_reg_1242;
wire   [3:0] add_ln17_2_fu_812_p2;
reg   [3:0] add_ln17_2_reg_1259;
wire    ap_CS_fsm_state79;
wire   [6:0] sub_ln681_11_fu_874_p2;
reg   [6:0] sub_ln681_11_reg_1264;
wire   [0:0] icmp_ln17_2_fu_806_p2;
wire   [63:0] lshr_ln681_4_fu_884_p2;
reg   [63:0] lshr_ln681_4_reg_1269;
reg    ap_predicate_op391_write_state80;
reg    ap_block_state80;
wire   [6:0] add_ln22_2_fu_933_p2;
reg   [6:0] add_ln22_2_reg_1282;
wire   [6:0] add_ln23_2_fu_939_p2;
reg   [6:0] add_ln23_2_reg_1287;
wire   [1:0] add_ln12_3_fu_956_p2;
reg   [1:0] add_ln12_3_reg_1295;
reg    ap_block_state116;
reg   [63:0] tmp_data_V_4_reg_1300;
wire   [3:0] add_ln17_3_fu_972_p2;
reg   [3:0] add_ln17_3_reg_1309;
wire    ap_CS_fsm_state117;
wire   [6:0] sub_ln681_15_fu_1034_p2;
reg   [6:0] sub_ln681_15_reg_1314;
wire   [0:0] icmp_ln17_3_fu_966_p2;
wire   [63:0] lshr_ln681_6_fu_1044_p2;
reg   [63:0] lshr_ln681_6_reg_1319;
reg    ap_predicate_op475_write_state118;
reg    ap_block_state118;
wire   [6:0] add_ln22_3_fu_1093_p2;
reg   [6:0] add_ln22_3_reg_1332;
wire   [6:0] add_ln23_3_fu_1099_p2;
reg   [6:0] add_ln23_3_reg_1337;
reg   [1:0] j_0_0_reg_266;
reg    ap_block_state1;
reg   [6:0] Hi_assign_0_reg_277;
wire    ap_CS_fsm_state39;
reg   [6:0] Lo_assign_0_reg_289;
reg   [3:0] k_0_0_reg_301;
reg   [1:0] j_0_1_reg_312;
reg   [6:0] Hi_assign_1_reg_323;
wire    ap_CS_fsm_state77;
reg   [6:0] Lo_assign_1_reg_335;
reg   [3:0] k_0_1_reg_347;
reg   [1:0] j_0_2_reg_358;
reg   [6:0] Hi_assign_2_reg_369;
wire    ap_CS_fsm_state115;
reg   [6:0] Lo_assign_2_reg_381;
reg   [3:0] k_0_2_reg_393;
reg   [1:0] j_0_3_reg_404;
reg   [6:0] Hi_assign_3_reg_415;
wire    ap_CS_fsm_state153;
reg   [6:0] Lo_assign_3_reg_427;
reg   [3:0] k_0_3_reg_439;
reg   [31:0] channel_idx_0_0_fu_118;
wire   [31:0] grp_fu_597_p2;
reg   [31:0] channel_idx_0_1_fu_122;
wire   [31:0] grp_fu_762_p2;
reg   [31:0] channel_idx_0_2_fu_126;
wire   [31:0] grp_fu_927_p2;
reg   [31:0] channel_idx_0_3_fu_130;
wire   [31:0] grp_fu_1087_p2;
wire   [7:0] tmp_12_fu_577_p1;
wire   [7:0] tmp_14_fu_742_p1;
wire   [7:0] tmp_16_fu_907_p1;
wire   [7:0] tmp_18_fu_1067_p1;
wire   [0:0] icmp_ln681_fu_488_p2;
wire   [6:0] sub_ln681_fu_503_p2;
wire   [6:0] sub_ln681_2_fu_515_p2;
reg   [63:0] tmp_fu_494_p4;
wire   [6:0] sub_ln681_1_fu_509_p2;
wire   [6:0] select_ln681_fu_521_p3;
wire   [6:0] select_ln681_2_fu_536_p3;
wire   [63:0] select_ln681_1_fu_529_p3;
wire   [63:0] zext_ln681_fu_550_p1;
wire   [63:0] zext_ln681_1_fu_563_p1;
wire   [63:0] lshr_ln681_1_fu_566_p2;
wire   [63:0] and_ln681_fu_572_p2;
wire   [31:0] grp_fu_597_p0;
wire   [2:0] grp_fu_597_p1;
wire   [0:0] icmp_ln681_1_fu_653_p2;
wire   [6:0] sub_ln681_4_fu_668_p2;
wire   [6:0] sub_ln681_6_fu_680_p2;
reg   [63:0] tmp_13_fu_659_p4;
wire   [6:0] sub_ln681_5_fu_674_p2;
wire   [6:0] select_ln681_3_fu_686_p3;
wire   [6:0] select_ln681_5_fu_701_p3;
wire   [63:0] select_ln681_4_fu_694_p3;
wire   [63:0] zext_ln681_2_fu_715_p1;
wire   [63:0] zext_ln681_3_fu_728_p1;
wire   [63:0] lshr_ln681_3_fu_731_p2;
wire   [63:0] and_ln681_1_fu_737_p2;
wire   [31:0] grp_fu_762_p0;
wire   [2:0] grp_fu_762_p1;
wire   [0:0] icmp_ln681_2_fu_818_p2;
wire   [6:0] sub_ln681_8_fu_833_p2;
wire   [6:0] sub_ln681_10_fu_845_p2;
reg   [63:0] tmp_15_fu_824_p4;
wire   [6:0] sub_ln681_9_fu_839_p2;
wire   [6:0] select_ln681_6_fu_851_p3;
wire   [6:0] select_ln681_8_fu_866_p3;
wire   [63:0] select_ln681_7_fu_859_p3;
wire   [63:0] zext_ln681_4_fu_880_p1;
wire   [63:0] zext_ln681_5_fu_893_p1;
wire   [63:0] lshr_ln681_5_fu_896_p2;
wire   [63:0] and_ln681_2_fu_902_p2;
wire   [31:0] grp_fu_927_p0;
wire   [2:0] grp_fu_927_p1;
wire   [0:0] icmp_ln681_3_fu_978_p2;
wire   [6:0] sub_ln681_12_fu_993_p2;
wire   [6:0] sub_ln681_14_fu_1005_p2;
reg   [63:0] tmp_17_fu_984_p4;
wire   [6:0] sub_ln681_13_fu_999_p2;
wire   [6:0] select_ln681_9_fu_1011_p3;
wire   [6:0] select_ln681_11_fu_1026_p3;
wire   [63:0] select_ln681_10_fu_1019_p3;
wire   [63:0] zext_ln681_6_fu_1040_p1;
wire   [63:0] zext_ln681_7_fu_1053_p1;
wire   [63:0] lshr_ln681_7_fu_1056_p2;
wire   [63:0] and_ln681_3_fu_1062_p2;
wire   [31:0] grp_fu_1087_p0;
wire   [2:0] grp_fu_1087_p1;
reg    grp_fu_597_ap_start;
wire    grp_fu_597_ap_done;
reg    grp_fu_597_ce;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
reg    grp_fu_762_ap_start;
wire    grp_fu_762_ap_done;
reg    grp_fu_762_ce;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
reg    grp_fu_927_ap_start;
wire    grp_fu_927_ap_done;
reg    grp_fu_927_ce;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
reg    grp_fu_1087_ap_start;
wire    grp_fu_1087_ap_done;
reg    grp_fu_1087_ce;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state136;
wire    ap_CS_fsm_state137;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state141;
wire    ap_CS_fsm_state142;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state146;
wire    ap_CS_fsm_state147;
wire    ap_CS_fsm_state148;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state150;
wire    ap_CS_fsm_state151;
wire    ap_CS_fsm_state152;
reg   [152:0] ap_NS_fsm;
wire    regslice_both_in_0_V_data_V_U_apdone_blk;
wire   [63:0] in_0_TDATA_int;
wire    in_0_TVALID_int;
reg    in_0_TREADY_int;
wire    regslice_both_in_0_V_data_V_U_ack_in;
wire    regslice_both_in_1_V_data_V_U_apdone_blk;
wire   [63:0] in_1_TDATA_int;
wire    in_1_TVALID_int;
reg    in_1_TREADY_int;
wire    regslice_both_in_1_V_data_V_U_ack_in;
wire    regslice_both_in_2_V_data_V_U_apdone_blk;
wire   [63:0] in_2_TDATA_int;
wire    in_2_TVALID_int;
reg    in_2_TREADY_int;
wire    regslice_both_in_2_V_data_V_U_ack_in;
wire    regslice_both_in_3_V_data_V_U_apdone_blk;
wire   [63:0] in_3_TDATA_int;
wire    in_3_TVALID_int;
reg    in_3_TREADY_int;
wire    regslice_both_in_3_V_data_V_U_ack_in;
wire    regslice_both_in_0_V_keep_V_U_apdone_blk;
wire   [7:0] in_0_TKEEP_int;
wire    regslice_both_in_0_V_keep_V_U_vld_out;
wire    regslice_both_in_0_V_keep_V_U_ack_in;
wire    regslice_both_in_1_V_keep_V_U_apdone_blk;
wire   [7:0] in_1_TKEEP_int;
wire    regslice_both_in_1_V_keep_V_U_vld_out;
wire    regslice_both_in_1_V_keep_V_U_ack_in;
wire    regslice_both_in_2_V_keep_V_U_apdone_blk;
wire   [7:0] in_2_TKEEP_int;
wire    regslice_both_in_2_V_keep_V_U_vld_out;
wire    regslice_both_in_2_V_keep_V_U_ack_in;
wire    regslice_both_in_3_V_keep_V_U_apdone_blk;
wire   [7:0] in_3_TKEEP_int;
wire    regslice_both_in_3_V_keep_V_U_vld_out;
wire    regslice_both_in_3_V_keep_V_U_ack_in;
wire    regslice_both_in_0_V_strb_V_U_apdone_blk;
wire   [7:0] in_0_TSTRB_int;
wire    regslice_both_in_0_V_strb_V_U_vld_out;
wire    regslice_both_in_0_V_strb_V_U_ack_in;
wire    regslice_both_in_1_V_strb_V_U_apdone_blk;
wire   [7:0] in_1_TSTRB_int;
wire    regslice_both_in_1_V_strb_V_U_vld_out;
wire    regslice_both_in_1_V_strb_V_U_ack_in;
wire    regslice_both_in_2_V_strb_V_U_apdone_blk;
wire   [7:0] in_2_TSTRB_int;
wire    regslice_both_in_2_V_strb_V_U_vld_out;
wire    regslice_both_in_2_V_strb_V_U_ack_in;
wire    regslice_both_in_3_V_strb_V_U_apdone_blk;
wire   [7:0] in_3_TSTRB_int;
wire    regslice_both_in_3_V_strb_V_U_vld_out;
wire    regslice_both_in_3_V_strb_V_U_ack_in;
wire    regslice_both_in_0_V_last_V_U_apdone_blk;
wire   [0:0] in_0_TLAST_int;
wire    regslice_both_in_0_V_last_V_U_vld_out;
wire    regslice_both_in_0_V_last_V_U_ack_in;
wire    regslice_both_in_1_V_last_V_U_apdone_blk;
wire   [0:0] in_1_TLAST_int;
wire    regslice_both_in_1_V_last_V_U_vld_out;
wire    regslice_both_in_1_V_last_V_U_ack_in;
wire    regslice_both_in_2_V_last_V_U_apdone_blk;
wire   [0:0] in_2_TLAST_int;
wire    regslice_both_in_2_V_last_V_U_vld_out;
wire    regslice_both_in_2_V_last_V_U_ack_in;
wire    regslice_both_in_3_V_last_V_U_apdone_blk;
wire   [0:0] in_3_TLAST_int;
wire    regslice_both_in_3_V_last_V_U_vld_out;
wire    regslice_both_in_3_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 153'd1;
end

cnn_srem_32ns_3nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
cnn_srem_32ns_3nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_597_ap_start),
    .done(grp_fu_597_ap_done),
    .din0(grp_fu_597_p0),
    .din1(grp_fu_597_p1),
    .ce(grp_fu_597_ce),
    .dout(grp_fu_597_p2)
);

cnn_srem_32ns_3nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
cnn_srem_32ns_3nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_762_ap_start),
    .done(grp_fu_762_ap_done),
    .din0(grp_fu_762_p0),
    .din1(grp_fu_762_p1),
    .ce(grp_fu_762_ce),
    .dout(grp_fu_762_p2)
);

cnn_srem_32ns_3nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
cnn_srem_32ns_3nsbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_927_ap_start),
    .done(grp_fu_927_ap_done),
    .din0(grp_fu_927_p0),
    .din1(grp_fu_927_p1),
    .ce(grp_fu_927_ce),
    .dout(grp_fu_927_p2)
);

cnn_srem_32ns_3nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
cnn_srem_32ns_3nsbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1087_ap_start),
    .done(grp_fu_1087_ap_done),
    .din0(grp_fu_1087_p0),
    .din1(grp_fu_1087_p1),
    .ce(grp_fu_1087_ce),
    .dout(grp_fu_1087_p2)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TDATA),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_data_V_U_ack_in),
    .data_out(in_0_TDATA_int),
    .vld_out(in_0_TVALID_int),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TDATA),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_data_V_U_ack_in),
    .data_out(in_1_TDATA_int),
    .vld_out(in_1_TVALID_int),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_2_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_2_TDATA),
    .vld_in(in_2_TVALID),
    .ack_in(regslice_both_in_2_V_data_V_U_ack_in),
    .data_out(in_2_TDATA_int),
    .vld_out(in_2_TVALID_int),
    .ack_out(in_2_TREADY_int),
    .apdone_blk(regslice_both_in_2_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_3_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_3_TDATA),
    .vld_in(in_3_TVALID),
    .ack_in(regslice_both_in_3_V_data_V_U_ack_in),
    .data_out(in_3_TDATA_int),
    .vld_out(in_3_TVALID_int),
    .ack_out(in_3_TREADY_int),
    .apdone_blk(regslice_both_in_3_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TKEEP),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_keep_V_U_ack_in),
    .data_out(in_0_TKEEP_int),
    .vld_out(regslice_both_in_0_V_keep_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TKEEP),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_keep_V_U_ack_in),
    .data_out(in_1_TKEEP_int),
    .vld_out(regslice_both_in_1_V_keep_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_2_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_2_TKEEP),
    .vld_in(in_2_TVALID),
    .ack_in(regslice_both_in_2_V_keep_V_U_ack_in),
    .data_out(in_2_TKEEP_int),
    .vld_out(regslice_both_in_2_V_keep_V_U_vld_out),
    .ack_out(in_2_TREADY_int),
    .apdone_blk(regslice_both_in_2_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_3_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_3_TKEEP),
    .vld_in(in_3_TVALID),
    .ack_in(regslice_both_in_3_V_keep_V_U_ack_in),
    .data_out(in_3_TKEEP_int),
    .vld_out(regslice_both_in_3_V_keep_V_U_vld_out),
    .ack_out(in_3_TREADY_int),
    .apdone_blk(regslice_both_in_3_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TSTRB),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_strb_V_U_ack_in),
    .data_out(in_0_TSTRB_int),
    .vld_out(regslice_both_in_0_V_strb_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TSTRB),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_strb_V_U_ack_in),
    .data_out(in_1_TSTRB_int),
    .vld_out(regslice_both_in_1_V_strb_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_2_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_2_TSTRB),
    .vld_in(in_2_TVALID),
    .ack_in(regslice_both_in_2_V_strb_V_U_ack_in),
    .data_out(in_2_TSTRB_int),
    .vld_out(regslice_both_in_2_V_strb_V_U_vld_out),
    .ack_out(in_2_TREADY_int),
    .apdone_blk(regslice_both_in_2_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_3_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_3_TSTRB),
    .vld_in(in_3_TVALID),
    .ack_in(regslice_both_in_3_V_strb_V_U_ack_in),
    .data_out(in_3_TSTRB_int),
    .vld_out(regslice_both_in_3_V_strb_V_U_vld_out),
    .ack_out(in_3_TREADY_int),
    .apdone_blk(regslice_both_in_3_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_0_TLAST),
    .vld_in(in_0_TVALID),
    .ack_in(regslice_both_in_0_V_last_V_U_ack_in),
    .data_out(in_0_TLAST_int),
    .vld_out(regslice_both_in_0_V_last_V_U_vld_out),
    .ack_out(in_0_TREADY_int),
    .apdone_blk(regslice_both_in_0_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_1_TLAST),
    .vld_in(in_1_TVALID),
    .ack_in(regslice_both_in_1_V_last_V_U_ack_in),
    .data_out(in_1_TLAST_int),
    .vld_out(regslice_both_in_1_V_last_V_U_vld_out),
    .ack_out(in_1_TREADY_int),
    .apdone_blk(regslice_both_in_1_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_2_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_2_TLAST),
    .vld_in(in_2_TVALID),
    .ack_in(regslice_both_in_2_V_last_V_U_ack_in),
    .data_out(in_2_TLAST_int),
    .vld_out(regslice_both_in_2_V_last_V_U_vld_out),
    .ack_out(in_2_TREADY_int),
    .apdone_blk(regslice_both_in_2_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_3_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in_3_TLAST),
    .vld_in(in_3_TVALID),
    .ack_in(regslice_both_in_3_V_last_V_U_ack_in),
    .data_out(in_3_TLAST_int),
    .vld_out(regslice_both_in_3_V_last_V_U_vld_out),
    .ack_out(in_3_TREADY_int),
    .apdone_blk(regslice_both_in_3_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        Hi_assign_0_reg_277 <= add_ln22_reg_1166;
    end else if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_0_reg_277 <= 7'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        Hi_assign_1_reg_323 <= add_ln22_1_reg_1224;
    end else if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        Hi_assign_1_reg_323 <= 7'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        Hi_assign_2_reg_369 <= add_ln22_2_reg_1282;
    end else if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        Hi_assign_2_reg_369 <= 7'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        Hi_assign_3_reg_415 <= add_ln22_3_reg_1332;
    end else if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        Hi_assign_3_reg_415 <= 7'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        Lo_assign_0_reg_289 <= add_ln23_reg_1171;
    end else if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Lo_assign_0_reg_289 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        Lo_assign_1_reg_335 <= add_ln23_1_reg_1229;
    end else if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        Lo_assign_1_reg_335 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        Lo_assign_2_reg_381 <= add_ln23_2_reg_1287;
    end else if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        Lo_assign_2_reg_381 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        Lo_assign_3_reg_427 <= add_ln23_3_reg_1337;
    end else if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        Lo_assign_3_reg_427 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        channel_idx_0_0_fu_118 <= grp_fu_597_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        channel_idx_0_0_fu_118 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        channel_idx_0_1_fu_122 <= grp_fu_762_p2;
    end else if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        channel_idx_0_1_fu_122 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        channel_idx_0_2_fu_126 <= grp_fu_927_p2;
    end else if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        channel_idx_0_2_fu_126 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        channel_idx_0_3_fu_130 <= grp_fu_1087_p2;
    end else if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        channel_idx_0_3_fu_130 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_476_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_0_reg_266 <= add_ln12_reg_1121;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_266 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_1_fu_641_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        j_0_1_reg_312 <= add_ln12_1_reg_1179;
    end else if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_1_reg_312 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_2_fu_806_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
        j_0_2_reg_358 <= add_ln12_2_reg_1237;
    end else if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        j_0_2_reg_358 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_3_fu_966_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117))) begin
        j_0_3_reg_404 <= add_ln12_3_reg_1295;
    end else if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        j_0_3_reg_404 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        k_0_0_reg_301 <= add_ln17_reg_1143;
    end else if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_301 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        k_0_1_reg_347 <= add_ln17_1_reg_1201;
    end else if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        k_0_1_reg_347 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        k_0_2_reg_393 <= add_ln17_2_reg_1259;
    end else if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        k_0_2_reg_393 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        k_0_3_reg_439 <= add_ln17_3_reg_1309;
    end else if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        k_0_3_reg_439 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state40))) begin
        add_ln12_1_reg_1179 <= add_ln12_1_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state78))) begin
        add_ln12_2_reg_1237 <= add_ln12_2_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state116))) begin
        add_ln12_3_reg_1295 <= add_ln12_3_fu_956_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln12_reg_1121 <= add_ln12_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln17_1_reg_1201 <= add_ln17_1_fu_647_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        add_ln17_2_reg_1259 <= add_ln17_2_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        add_ln17_3_reg_1309 <= add_ln17_3_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln17_reg_1143 <= add_ln17_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((inputs_1_2_V_full_n == 1'b0) & (ap_predicate_op304_write_state42 == 1'b1)) | ((trunc_ln182_1_fu_749_p1 == 2'd1) & (inputs_1_1_V_full_n == 1'b0)) | ((trunc_ln182_1_fu_749_p1 == 2'd0) & (inputs_1_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state42))) begin
        add_ln22_1_reg_1224 <= add_ln22_1_fu_768_p2;
        add_ln23_1_reg_1229 <= add_ln23_1_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((inputs_2_2_V_full_n == 1'b0) & (ap_predicate_op391_write_state80 == 1'b1)) | ((trunc_ln182_2_fu_914_p1 == 2'd1) & (inputs_2_1_V_full_n == 1'b0)) | ((trunc_ln182_2_fu_914_p1 == 2'd0) & (inputs_2_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state80))) begin
        add_ln22_2_reg_1282 <= add_ln22_2_fu_933_p2;
        add_ln23_2_reg_1287 <= add_ln23_2_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((inputs_3_2_V_full_n == 1'b0) & (ap_predicate_op475_write_state118 == 1'b1)) | ((trunc_ln182_3_fu_1074_p1 == 2'd1) & (inputs_3_1_V_full_n == 1'b0)) | ((trunc_ln182_3_fu_1074_p1 == 2'd0) & (inputs_3_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state118))) begin
        add_ln22_3_reg_1332 <= add_ln22_3_fu_1093_p2;
        add_ln23_3_reg_1337 <= add_ln23_3_fu_1099_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((inputs_0_2_V_full_n == 1'b0) & (ap_predicate_op217_write_state4 == 1'b1)) | ((trunc_ln182_fu_584_p1 == 2'd1) & (inputs_0_1_V_full_n == 1'b0)) | ((trunc_ln182_fu_584_p1 == 2'd0) & (inputs_0_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln22_reg_1166 <= add_ln22_fu_603_p2;
        add_ln23_reg_1171 <= add_ln23_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_1_fu_641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        lshr_ln681_2_reg_1211 <= lshr_ln681_2_fu_719_p2;
        sub_ln681_7_reg_1206 <= sub_ln681_7_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_2_fu_806_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state79))) begin
        lshr_ln681_4_reg_1269 <= lshr_ln681_4_fu_884_p2;
        sub_ln681_11_reg_1264 <= sub_ln681_11_fu_874_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_3_fu_966_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state117))) begin
        lshr_ln681_6_reg_1319 <= lshr_ln681_6_fu_1044_p2;
        sub_ln681_15_reg_1314 <= sub_ln681_15_fu_1034_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_476_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        lshr_ln681_reg_1153 <= lshr_ln681_fu_554_p2;
        sub_ln681_3_reg_1148 <= sub_ln681_3_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        tmp_data_V_2_reg_1184 <= in_1_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        tmp_data_V_3_reg_1242 <= in_2_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        tmp_data_V_4_reg_1300 <= in_3_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_1126 <= in_0_TDATA_int;
    end
end

always @ (*) begin
    if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((inputs_3_2_V_full_n == 1'b0) & (ap_predicate_op475_write_state118 == 1'b1)) | ((trunc_ln182_3_fu_1074_p1 == 2'd1) & (inputs_3_1_V_full_n == 1'b0)) | ((trunc_ln182_3_fu_1074_p1 == 2'd0) & (inputs_3_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state118))) begin
        grp_fu_1087_ap_start = 1'b1;
    end else begin
        grp_fu_1087_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state153) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119))) begin
        grp_fu_1087_ce = 1'b1;
    end else begin
        grp_fu_1087_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~(((inputs_0_2_V_full_n == 1'b0) & (ap_predicate_op217_write_state4 == 1'b1)) | ((trunc_ln182_fu_584_p1 == 2'd1) & (inputs_0_1_V_full_n == 1'b0)) | ((trunc_ln182_fu_584_p1 == 2'd0) & (inputs_0_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_597_ap_start = 1'b1;
    end else begin
        grp_fu_597_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_597_ce = 1'b1;
    end else begin
        grp_fu_597_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~(((inputs_1_2_V_full_n == 1'b0) & (ap_predicate_op304_write_state42 == 1'b1)) | ((trunc_ln182_1_fu_749_p1 == 2'd1) & (inputs_1_1_V_full_n == 1'b0)) | ((trunc_ln182_1_fu_749_p1 == 2'd0) & (inputs_1_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state42))) begin
        grp_fu_762_ap_start = 1'b1;
    end else begin
        grp_fu_762_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_fu_762_ce = 1'b1;
    end else begin
        grp_fu_762_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~(((inputs_2_2_V_full_n == 1'b0) & (ap_predicate_op391_write_state80 == 1'b1)) | ((trunc_ln182_2_fu_914_p1 == 2'd1) & (inputs_2_1_V_full_n == 1'b0)) | ((trunc_ln182_2_fu_914_p1 == 2'd0) & (inputs_2_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state80))) begin
        grp_fu_927_ap_start = 1'b1;
    end else begin
        grp_fu_927_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81))) begin
        grp_fu_927_ce = 1'b1;
    end else begin
        grp_fu_927_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_0_TDATA_blk_n = in_0_TVALID_int;
    end else begin
        in_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_0_V_data_V_U_ack_in == 1'b1) & (in_0_TVALID == 1'b1))) begin
        in_0_TREADY = 1'b1;
    end else begin
        in_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_0_TREADY_int = 1'b1;
    end else begin
        in_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        in_1_TDATA_blk_n = in_1_TVALID_int;
    end else begin
        in_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_1_V_data_V_U_ack_in == 1'b1) & (in_1_TVALID == 1'b1))) begin
        in_1_TREADY = 1'b1;
    end else begin
        in_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        in_1_TREADY_int = 1'b1;
    end else begin
        in_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_2_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        in_2_TDATA_blk_n = in_2_TVALID_int;
    end else begin
        in_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_2_V_data_V_U_ack_in == 1'b1) & (in_2_TVALID == 1'b1))) begin
        in_2_TREADY = 1'b1;
    end else begin
        in_2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        in_2_TREADY_int = 1'b1;
    end else begin
        in_2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_3_fu_950_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        in_3_TDATA_blk_n = in_3_TVALID_int;
    end else begin
        in_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_3_V_data_V_U_ack_in == 1'b1) & (in_3_TVALID == 1'b1))) begin
        in_3_TREADY = 1'b1;
    end else begin
        in_3_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        in_3_TREADY_int = 1'b1;
    end else begin
        in_3_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_fu_584_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        inputs_0_0_V_blk_n = inputs_0_0_V_full_n;
    end else begin
        inputs_0_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_0_2_V_full_n == 1'b0) & (ap_predicate_op217_write_state4 == 1'b1)) | ((trunc_ln182_fu_584_p1 == 2'd1) & (inputs_0_1_V_full_n == 1'b0)) | ((trunc_ln182_fu_584_p1 == 2'd0) & (inputs_0_0_V_full_n == 1'b0))) & (trunc_ln182_fu_584_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        inputs_0_0_V_write = 1'b1;
    end else begin
        inputs_0_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_fu_584_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        inputs_0_1_V_blk_n = inputs_0_1_V_full_n;
    end else begin
        inputs_0_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_0_2_V_full_n == 1'b0) & (ap_predicate_op217_write_state4 == 1'b1)) | ((trunc_ln182_fu_584_p1 == 2'd1) & (inputs_0_1_V_full_n == 1'b0)) | ((trunc_ln182_fu_584_p1 == 2'd0) & (inputs_0_0_V_full_n == 1'b0))) & (trunc_ln182_fu_584_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        inputs_0_1_V_write = 1'b1;
    end else begin
        inputs_0_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln182_fu_584_p1 == 2'd1) & ~(trunc_ln182_fu_584_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        inputs_0_2_V_blk_n = inputs_0_2_V_full_n;
    end else begin
        inputs_0_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_0_2_V_full_n == 1'b0) & (ap_predicate_op217_write_state4 == 1'b1)) | ((trunc_ln182_fu_584_p1 == 2'd1) & (inputs_0_1_V_full_n == 1'b0)) | ((trunc_ln182_fu_584_p1 == 2'd0) & (inputs_0_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op217_write_state4 == 1'b1))) begin
        inputs_0_2_V_write = 1'b1;
    end else begin
        inputs_0_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_1_fu_749_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        inputs_1_0_V_blk_n = inputs_1_0_V_full_n;
    end else begin
        inputs_1_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_1_2_V_full_n == 1'b0) & (ap_predicate_op304_write_state42 == 1'b1)) | ((trunc_ln182_1_fu_749_p1 == 2'd1) & (inputs_1_1_V_full_n == 1'b0)) | ((trunc_ln182_1_fu_749_p1 == 2'd0) & (inputs_1_0_V_full_n == 1'b0))) & (trunc_ln182_1_fu_749_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        inputs_1_0_V_write = 1'b1;
    end else begin
        inputs_1_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_1_fu_749_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        inputs_1_1_V_blk_n = inputs_1_1_V_full_n;
    end else begin
        inputs_1_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_1_2_V_full_n == 1'b0) & (ap_predicate_op304_write_state42 == 1'b1)) | ((trunc_ln182_1_fu_749_p1 == 2'd1) & (inputs_1_1_V_full_n == 1'b0)) | ((trunc_ln182_1_fu_749_p1 == 2'd0) & (inputs_1_0_V_full_n == 1'b0))) & (trunc_ln182_1_fu_749_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        inputs_1_1_V_write = 1'b1;
    end else begin
        inputs_1_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln182_1_fu_749_p1 == 2'd1) & ~(trunc_ln182_1_fu_749_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        inputs_1_2_V_blk_n = inputs_1_2_V_full_n;
    end else begin
        inputs_1_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_1_2_V_full_n == 1'b0) & (ap_predicate_op304_write_state42 == 1'b1)) | ((trunc_ln182_1_fu_749_p1 == 2'd1) & (inputs_1_1_V_full_n == 1'b0)) | ((trunc_ln182_1_fu_749_p1 == 2'd0) & (inputs_1_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state42) & (ap_predicate_op304_write_state42 == 1'b1))) begin
        inputs_1_2_V_write = 1'b1;
    end else begin
        inputs_1_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_2_fu_914_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state80))) begin
        inputs_2_0_V_blk_n = inputs_2_0_V_full_n;
    end else begin
        inputs_2_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_2_2_V_full_n == 1'b0) & (ap_predicate_op391_write_state80 == 1'b1)) | ((trunc_ln182_2_fu_914_p1 == 2'd1) & (inputs_2_1_V_full_n == 1'b0)) | ((trunc_ln182_2_fu_914_p1 == 2'd0) & (inputs_2_0_V_full_n == 1'b0))) & (trunc_ln182_2_fu_914_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state80))) begin
        inputs_2_0_V_write = 1'b1;
    end else begin
        inputs_2_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_2_fu_914_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        inputs_2_1_V_blk_n = inputs_2_1_V_full_n;
    end else begin
        inputs_2_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_2_2_V_full_n == 1'b0) & (ap_predicate_op391_write_state80 == 1'b1)) | ((trunc_ln182_2_fu_914_p1 == 2'd1) & (inputs_2_1_V_full_n == 1'b0)) | ((trunc_ln182_2_fu_914_p1 == 2'd0) & (inputs_2_0_V_full_n == 1'b0))) & (trunc_ln182_2_fu_914_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        inputs_2_1_V_write = 1'b1;
    end else begin
        inputs_2_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln182_2_fu_914_p1 == 2'd1) & ~(trunc_ln182_2_fu_914_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state80))) begin
        inputs_2_2_V_blk_n = inputs_2_2_V_full_n;
    end else begin
        inputs_2_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_2_2_V_full_n == 1'b0) & (ap_predicate_op391_write_state80 == 1'b1)) | ((trunc_ln182_2_fu_914_p1 == 2'd1) & (inputs_2_1_V_full_n == 1'b0)) | ((trunc_ln182_2_fu_914_p1 == 2'd0) & (inputs_2_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state80) & (ap_predicate_op391_write_state80 == 1'b1))) begin
        inputs_2_2_V_write = 1'b1;
    end else begin
        inputs_2_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_3_fu_1074_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state118))) begin
        inputs_3_0_V_blk_n = inputs_3_0_V_full_n;
    end else begin
        inputs_3_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_3_2_V_full_n == 1'b0) & (ap_predicate_op475_write_state118 == 1'b1)) | ((trunc_ln182_3_fu_1074_p1 == 2'd1) & (inputs_3_1_V_full_n == 1'b0)) | ((trunc_ln182_3_fu_1074_p1 == 2'd0) & (inputs_3_0_V_full_n == 1'b0))) & (trunc_ln182_3_fu_1074_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state118))) begin
        inputs_3_0_V_write = 1'b1;
    end else begin
        inputs_3_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_3_fu_1074_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state118))) begin
        inputs_3_1_V_blk_n = inputs_3_1_V_full_n;
    end else begin
        inputs_3_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_3_2_V_full_n == 1'b0) & (ap_predicate_op475_write_state118 == 1'b1)) | ((trunc_ln182_3_fu_1074_p1 == 2'd1) & (inputs_3_1_V_full_n == 1'b0)) | ((trunc_ln182_3_fu_1074_p1 == 2'd0) & (inputs_3_0_V_full_n == 1'b0))) & (trunc_ln182_3_fu_1074_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state118))) begin
        inputs_3_1_V_write = 1'b1;
    end else begin
        inputs_3_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln182_3_fu_1074_p1 == 2'd1) & ~(trunc_ln182_3_fu_1074_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state118))) begin
        inputs_3_2_V_blk_n = inputs_3_2_V_full_n;
    end else begin
        inputs_3_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((inputs_3_2_V_full_n == 1'b0) & (ap_predicate_op475_write_state118 == 1'b1)) | ((trunc_ln182_3_fu_1074_p1 == 2'd1) & (inputs_3_1_V_full_n == 1'b0)) | ((trunc_ln182_3_fu_1074_p1 == 2'd0) & (inputs_3_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state118) & (ap_predicate_op475_write_state118 == 1'b1))) begin
        inputs_3_2_V_write = 1'b1;
    end else begin
        inputs_3_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else if ((~((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0)) & (icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_fu_476_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~(((inputs_0_2_V_full_n == 1'b0) & (ap_predicate_op217_write_state4 == 1'b1)) | ((trunc_ln182_fu_584_p1 == 2'd1) & (inputs_0_1_V_full_n == 1'b0)) | ((trunc_ln182_fu_584_p1 == 2'd0) & (inputs_0_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state40 : begin
            if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else if ((~((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0)) & (icmp_ln12_1_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln17_1_fu_641_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            if ((~(((inputs_1_2_V_full_n == 1'b0) & (ap_predicate_op304_write_state42 == 1'b1)) | ((trunc_ln182_1_fu_749_p1 == 2'd1) & (inputs_1_1_V_full_n == 1'b0)) | ((trunc_ln182_1_fu_749_p1 == 2'd0) & (inputs_1_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state78 : begin
            if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else if ((~((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0)) & (icmp_ln12_2_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((icmp_ln17_2_fu_806_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            if ((~(((inputs_2_2_V_full_n == 1'b0) & (ap_predicate_op391_write_state80 == 1'b1)) | ((trunc_ln182_2_fu_914_p1 == 2'd1) & (inputs_2_1_V_full_n == 1'b0)) | ((trunc_ln182_2_fu_914_p1 == 2'd0) & (inputs_2_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state116 : begin
            if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0)) & (icmp_ln12_3_fu_950_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state117 : begin
            if (((icmp_ln17_3_fu_966_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state118 : begin
            if ((~(((inputs_3_2_V_full_n == 1'b0) & (ap_predicate_op475_write_state118 == 1'b1)) | ((trunc_ln182_3_fu_1074_p1 == 2'd1) & (inputs_3_1_V_full_n == 1'b0)) | ((trunc_ln182_3_fu_1074_p1 == 2'd0) & (inputs_3_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_626_p2 = (j_0_1_reg_312 + 2'd1);

assign add_ln12_2_fu_791_p2 = (j_0_2_reg_358 + 2'd1);

assign add_ln12_3_fu_956_p2 = (j_0_3_reg_404 + 2'd1);

assign add_ln12_fu_461_p2 = (j_0_0_reg_266 + 2'd1);

assign add_ln17_1_fu_647_p2 = (k_0_1_reg_347 + 4'd1);

assign add_ln17_2_fu_812_p2 = (k_0_2_reg_393 + 4'd1);

assign add_ln17_3_fu_972_p2 = (k_0_3_reg_439 + 4'd1);

assign add_ln17_fu_482_p2 = (k_0_0_reg_301 + 4'd1);

assign add_ln22_1_fu_768_p2 = (Hi_assign_1_reg_323 + 7'd8);

assign add_ln22_2_fu_933_p2 = (Hi_assign_2_reg_369 + 7'd8);

assign add_ln22_3_fu_1093_p2 = (Hi_assign_3_reg_415 + 7'd8);

assign add_ln22_fu_603_p2 = (Hi_assign_0_reg_277 + 7'd8);

assign add_ln23_1_fu_774_p2 = (Lo_assign_1_reg_335 + 7'd8);

assign add_ln23_2_fu_939_p2 = (Lo_assign_2_reg_381 + 7'd8);

assign add_ln23_3_fu_1099_p2 = (Lo_assign_3_reg_427 + 7'd8);

assign add_ln23_fu_609_p2 = (Lo_assign_0_reg_289 + 7'd8);

assign and_ln681_1_fu_737_p2 = (lshr_ln681_3_fu_731_p2 & lshr_ln681_2_reg_1211);

assign and_ln681_2_fu_902_p2 = (lshr_ln681_5_fu_896_p2 & lshr_ln681_4_reg_1269);

assign and_ln681_3_fu_1062_p2 = (lshr_ln681_7_fu_1056_p2 & lshr_ln681_6_reg_1319);

assign and_ln681_fu_572_p2 = (lshr_ln681_reg_1153 & lshr_ln681_1_fu_566_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state116 = ((in_3_TVALID_int == 1'b0) & (icmp_ln12_3_fu_950_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state118 = (((inputs_3_2_V_full_n == 1'b0) & (ap_predicate_op475_write_state118 == 1'b1)) | ((trunc_ln182_3_fu_1074_p1 == 2'd1) & (inputs_3_1_V_full_n == 1'b0)) | ((trunc_ln182_3_fu_1074_p1 == 2'd0) & (inputs_3_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((in_0_TVALID_int == 1'b0) & (icmp_ln12_fu_455_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state4 = (((inputs_0_2_V_full_n == 1'b0) & (ap_predicate_op217_write_state4 == 1'b1)) | ((trunc_ln182_fu_584_p1 == 2'd1) & (inputs_0_1_V_full_n == 1'b0)) | ((trunc_ln182_fu_584_p1 == 2'd0) & (inputs_0_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state40 = ((in_1_TVALID_int == 1'b0) & (icmp_ln12_1_fu_620_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state42 = (((inputs_1_2_V_full_n == 1'b0) & (ap_predicate_op304_write_state42 == 1'b1)) | ((trunc_ln182_1_fu_749_p1 == 2'd1) & (inputs_1_1_V_full_n == 1'b0)) | ((trunc_ln182_1_fu_749_p1 == 2'd0) & (inputs_1_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state78 = ((in_2_TVALID_int == 1'b0) & (icmp_ln12_2_fu_785_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state80 = (((inputs_2_2_V_full_n == 1'b0) & (ap_predicate_op391_write_state80 == 1'b1)) | ((trunc_ln182_2_fu_914_p1 == 2'd1) & (inputs_2_1_V_full_n == 1'b0)) | ((trunc_ln182_2_fu_914_p1 == 2'd0) & (inputs_2_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_predicate_op217_write_state4 = (~(trunc_ln182_fu_584_p1 == 2'd1) & ~(trunc_ln182_fu_584_p1 == 2'd0));
end

always @ (*) begin
    ap_predicate_op304_write_state42 = (~(trunc_ln182_1_fu_749_p1 == 2'd1) & ~(trunc_ln182_1_fu_749_p1 == 2'd0));
end

always @ (*) begin
    ap_predicate_op391_write_state80 = (~(trunc_ln182_2_fu_914_p1 == 2'd1) & ~(trunc_ln182_2_fu_914_p1 == 2'd0));
end

always @ (*) begin
    ap_predicate_op475_write_state118 = (~(trunc_ln182_3_fu_1074_p1 == 2'd1) & ~(trunc_ln182_3_fu_1074_p1 == 2'd0));
end

assign ap_ready = internal_ap_ready;

assign grp_fu_1087_p0 = (channel_idx_0_3_fu_130 + 32'd1);

assign grp_fu_1087_p1 = 32'd3;

assign grp_fu_597_p0 = (channel_idx_0_0_fu_118 + 32'd1);

assign grp_fu_597_p1 = 32'd3;

assign grp_fu_762_p0 = (channel_idx_0_1_fu_122 + 32'd1);

assign grp_fu_762_p1 = 32'd3;

assign grp_fu_927_p0 = (channel_idx_0_2_fu_126 + 32'd1);

assign grp_fu_927_p1 = 32'd3;

assign icmp_ln12_1_fu_620_p2 = ((j_0_1_reg_312 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_785_p2 = ((j_0_2_reg_358 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln12_3_fu_950_p2 = ((j_0_3_reg_404 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_455_p2 = ((j_0_0_reg_266 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln17_1_fu_641_p2 = ((k_0_1_reg_347 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln17_2_fu_806_p2 = ((k_0_2_reg_393 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln17_3_fu_966_p2 = ((k_0_3_reg_439 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_476_p2 = ((k_0_0_reg_301 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln681_1_fu_653_p2 = ((Lo_assign_1_reg_335 > Hi_assign_1_reg_323) ? 1'b1 : 1'b0);

assign icmp_ln681_2_fu_818_p2 = ((Lo_assign_2_reg_381 > Hi_assign_2_reg_369) ? 1'b1 : 1'b0);

assign icmp_ln681_3_fu_978_p2 = ((Lo_assign_3_reg_427 > Hi_assign_3_reg_415) ? 1'b1 : 1'b0);

assign icmp_ln681_fu_488_p2 = ((Lo_assign_0_reg_289 > Hi_assign_0_reg_277) ? 1'b1 : 1'b0);

assign inputs_0_0_V_din = tmp_12_fu_577_p1;

assign inputs_0_1_V_din = tmp_12_fu_577_p1;

assign inputs_0_2_V_din = tmp_12_fu_577_p1;

assign inputs_1_0_V_din = tmp_14_fu_742_p1;

assign inputs_1_1_V_din = tmp_14_fu_742_p1;

assign inputs_1_2_V_din = tmp_14_fu_742_p1;

assign inputs_2_0_V_din = tmp_16_fu_907_p1;

assign inputs_2_1_V_din = tmp_16_fu_907_p1;

assign inputs_2_2_V_din = tmp_16_fu_907_p1;

assign inputs_3_0_V_din = tmp_18_fu_1067_p1;

assign inputs_3_1_V_din = tmp_18_fu_1067_p1;

assign inputs_3_2_V_din = tmp_18_fu_1067_p1;

assign lshr_ln681_1_fu_566_p2 = 64'd18446744073709551615 >> zext_ln681_1_fu_563_p1;

assign lshr_ln681_2_fu_719_p2 = select_ln681_4_fu_694_p3 >> zext_ln681_2_fu_715_p1;

assign lshr_ln681_3_fu_731_p2 = 64'd18446744073709551615 >> zext_ln681_3_fu_728_p1;

assign lshr_ln681_4_fu_884_p2 = select_ln681_7_fu_859_p3 >> zext_ln681_4_fu_880_p1;

assign lshr_ln681_5_fu_896_p2 = 64'd18446744073709551615 >> zext_ln681_5_fu_893_p1;

assign lshr_ln681_6_fu_1044_p2 = select_ln681_10_fu_1019_p3 >> zext_ln681_6_fu_1040_p1;

assign lshr_ln681_7_fu_1056_p2 = 64'd18446744073709551615 >> zext_ln681_7_fu_1053_p1;

assign lshr_ln681_fu_554_p2 = select_ln681_1_fu_529_p3 >> zext_ln681_fu_550_p1;

assign select_ln681_10_fu_1019_p3 = ((icmp_ln681_3_fu_978_p2[0:0] === 1'b1) ? tmp_17_fu_984_p4 : tmp_data_V_4_reg_1300);

assign select_ln681_11_fu_1026_p3 = ((icmp_ln681_3_fu_978_p2[0:0] === 1'b1) ? sub_ln681_13_fu_999_p2 : Lo_assign_3_reg_427);

assign select_ln681_1_fu_529_p3 = ((icmp_ln681_fu_488_p2[0:0] === 1'b1) ? tmp_fu_494_p4 : tmp_data_V_reg_1126);

assign select_ln681_2_fu_536_p3 = ((icmp_ln681_fu_488_p2[0:0] === 1'b1) ? sub_ln681_1_fu_509_p2 : Lo_assign_0_reg_289);

assign select_ln681_3_fu_686_p3 = ((icmp_ln681_1_fu_653_p2[0:0] === 1'b1) ? sub_ln681_4_fu_668_p2 : sub_ln681_6_fu_680_p2);

assign select_ln681_4_fu_694_p3 = ((icmp_ln681_1_fu_653_p2[0:0] === 1'b1) ? tmp_13_fu_659_p4 : tmp_data_V_2_reg_1184);

assign select_ln681_5_fu_701_p3 = ((icmp_ln681_1_fu_653_p2[0:0] === 1'b1) ? sub_ln681_5_fu_674_p2 : Lo_assign_1_reg_335);

assign select_ln681_6_fu_851_p3 = ((icmp_ln681_2_fu_818_p2[0:0] === 1'b1) ? sub_ln681_8_fu_833_p2 : sub_ln681_10_fu_845_p2);

assign select_ln681_7_fu_859_p3 = ((icmp_ln681_2_fu_818_p2[0:0] === 1'b1) ? tmp_15_fu_824_p4 : tmp_data_V_3_reg_1242);

assign select_ln681_8_fu_866_p3 = ((icmp_ln681_2_fu_818_p2[0:0] === 1'b1) ? sub_ln681_9_fu_839_p2 : Lo_assign_2_reg_381);

assign select_ln681_9_fu_1011_p3 = ((icmp_ln681_3_fu_978_p2[0:0] === 1'b1) ? sub_ln681_12_fu_993_p2 : sub_ln681_14_fu_1005_p2);

assign select_ln681_fu_521_p3 = ((icmp_ln681_fu_488_p2[0:0] === 1'b1) ? sub_ln681_fu_503_p2 : sub_ln681_2_fu_515_p2);

assign start_out = real_start;

assign sub_ln681_10_fu_845_p2 = (Hi_assign_2_reg_369 - Lo_assign_2_reg_381);

assign sub_ln681_11_fu_874_p2 = (7'd63 - select_ln681_6_fu_851_p3);

assign sub_ln681_12_fu_993_p2 = (Lo_assign_3_reg_427 - Hi_assign_3_reg_415);

assign sub_ln681_13_fu_999_p2 = (7'd63 - Lo_assign_3_reg_427);

assign sub_ln681_14_fu_1005_p2 = (Hi_assign_3_reg_415 - Lo_assign_3_reg_427);

assign sub_ln681_15_fu_1034_p2 = (7'd63 - select_ln681_9_fu_1011_p3);

assign sub_ln681_1_fu_509_p2 = (7'd63 - Lo_assign_0_reg_289);

assign sub_ln681_2_fu_515_p2 = (Hi_assign_0_reg_277 - Lo_assign_0_reg_289);

assign sub_ln681_3_fu_544_p2 = (7'd63 - select_ln681_fu_521_p3);

assign sub_ln681_4_fu_668_p2 = (Lo_assign_1_reg_335 - Hi_assign_1_reg_323);

assign sub_ln681_5_fu_674_p2 = (7'd63 - Lo_assign_1_reg_335);

assign sub_ln681_6_fu_680_p2 = (Hi_assign_1_reg_323 - Lo_assign_1_reg_335);

assign sub_ln681_7_fu_709_p2 = (7'd63 - select_ln681_3_fu_686_p3);

assign sub_ln681_8_fu_833_p2 = (Lo_assign_2_reg_381 - Hi_assign_2_reg_369);

assign sub_ln681_9_fu_839_p2 = (7'd63 - Lo_assign_2_reg_381);

assign sub_ln681_fu_503_p2 = (Lo_assign_0_reg_289 - Hi_assign_0_reg_277);

assign tmp_12_fu_577_p1 = and_ln681_fu_572_p2[7:0];

integer ap_tvar_int_0;

always @ (tmp_data_V_2_reg_1184) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_13_fu_659_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_13_fu_659_p4[ap_tvar_int_0] = tmp_data_V_2_reg_1184[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_14_fu_742_p1 = and_ln681_1_fu_737_p2[7:0];

integer ap_tvar_int_1;

always @ (tmp_data_V_3_reg_1242) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_15_fu_824_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_15_fu_824_p4[ap_tvar_int_1] = tmp_data_V_3_reg_1242[63 - ap_tvar_int_1];
        end
    end
end

assign tmp_16_fu_907_p1 = and_ln681_2_fu_902_p2[7:0];

integer ap_tvar_int_2;

always @ (tmp_data_V_4_reg_1300) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            tmp_17_fu_984_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_17_fu_984_p4[ap_tvar_int_2] = tmp_data_V_4_reg_1300[63 - ap_tvar_int_2];
        end
    end
end

assign tmp_18_fu_1067_p1 = and_ln681_3_fu_1062_p2[7:0];

integer ap_tvar_int_3;

always @ (tmp_data_V_reg_1126) begin
    for (ap_tvar_int_3 = 64 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 63 - 0) begin
            tmp_fu_494_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_fu_494_p4[ap_tvar_int_3] = tmp_data_V_reg_1126[63 - ap_tvar_int_3];
        end
    end
end

assign trunc_ln182_1_fu_749_p1 = channel_idx_0_1_fu_122[1:0];

assign trunc_ln182_2_fu_914_p1 = channel_idx_0_2_fu_126[1:0];

assign trunc_ln182_3_fu_1074_p1 = channel_idx_0_3_fu_130[1:0];

assign trunc_ln182_fu_584_p1 = channel_idx_0_0_fu_118[1:0];

assign zext_ln681_1_fu_563_p1 = sub_ln681_3_reg_1148;

assign zext_ln681_2_fu_715_p1 = select_ln681_5_fu_701_p3;

assign zext_ln681_3_fu_728_p1 = sub_ln681_7_reg_1206;

assign zext_ln681_4_fu_880_p1 = select_ln681_8_fu_866_p3;

assign zext_ln681_5_fu_893_p1 = sub_ln681_11_reg_1264;

assign zext_ln681_6_fu_1040_p1 = select_ln681_11_fu_1026_p3;

assign zext_ln681_7_fu_1053_p1 = sub_ln681_15_reg_1314;

assign zext_ln681_fu_550_p1 = select_ln681_2_fu_536_p3;

endmodule //read_input
