-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_0_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_0_TVALID : IN STD_LOGIC;
    in_0_TREADY : OUT STD_LOGIC;
    in_1_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_1_TVALID : IN STD_LOGIC;
    in_1_TREADY : OUT STD_LOGIC;
    in_2_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_2_TVALID : IN STD_LOGIC;
    in_2_TREADY : OUT STD_LOGIC;
    in_3_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_3_TVALID : IN STD_LOGIC;
    in_3_TREADY : OUT STD_LOGIC;
    in_0_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_1_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_2_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_3_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_0_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_1_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_2_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_3_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_3_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs_0_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_0_0_V_full_n : IN STD_LOGIC;
    inputs_0_0_V_write : OUT STD_LOGIC;
    inputs_0_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_0_1_V_full_n : IN STD_LOGIC;
    inputs_0_1_V_write : OUT STD_LOGIC;
    inputs_0_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_0_2_V_full_n : IN STD_LOGIC;
    inputs_0_2_V_write : OUT STD_LOGIC;
    inputs_1_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_1_0_V_full_n : IN STD_LOGIC;
    inputs_1_0_V_write : OUT STD_LOGIC;
    inputs_1_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_1_1_V_full_n : IN STD_LOGIC;
    inputs_1_1_V_write : OUT STD_LOGIC;
    inputs_1_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_1_2_V_full_n : IN STD_LOGIC;
    inputs_1_2_V_write : OUT STD_LOGIC;
    inputs_2_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_2_0_V_full_n : IN STD_LOGIC;
    inputs_2_0_V_write : OUT STD_LOGIC;
    inputs_2_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_2_1_V_full_n : IN STD_LOGIC;
    inputs_2_1_V_write : OUT STD_LOGIC;
    inputs_2_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_2_2_V_full_n : IN STD_LOGIC;
    inputs_2_2_V_write : OUT STD_LOGIC;
    inputs_3_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_3_0_V_full_n : IN STD_LOGIC;
    inputs_3_0_V_write : OUT STD_LOGIC;
    inputs_3_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_3_1_V_full_n : IN STD_LOGIC;
    inputs_3_1_V_write : OUT STD_LOGIC;
    inputs_3_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputs_3_2_V_full_n : IN STD_LOGIC;
    inputs_3_2_V_write : OUT STD_LOGIC );
end;


architecture behav of read_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (152 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (152 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (152 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (152 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (152 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (152 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (152 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (152 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (152 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (152 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (152 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (152 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (152 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (152 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln12_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln12_1_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_2_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal icmp_ln12_2_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_3_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal icmp_ln12_3_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputs_0_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln182_fu_584_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal inputs_0_1_V_blk_n : STD_LOGIC;
    signal inputs_0_2_V_blk_n : STD_LOGIC;
    signal inputs_1_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal trunc_ln182_1_fu_749_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal inputs_1_1_V_blk_n : STD_LOGIC;
    signal inputs_1_2_V_blk_n : STD_LOGIC;
    signal inputs_2_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal trunc_ln182_2_fu_914_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal inputs_2_1_V_blk_n : STD_LOGIC;
    signal inputs_2_2_V_blk_n : STD_LOGIC;
    signal inputs_3_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal trunc_ln182_3_fu_1074_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal inputs_3_1_V_blk_n : STD_LOGIC;
    signal inputs_3_2_V_blk_n : STD_LOGIC;
    signal add_ln12_fu_461_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln12_reg_1121 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_data_V_reg_1126 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln17_fu_482_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_reg_1143 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln681_3_fu_544_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_3_reg_1148 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln17_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_reg_1153 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op217_write_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal add_ln22_fu_603_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_reg_1166 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_fu_609_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_reg_1171 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_1_fu_626_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln12_1_reg_1179 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state40 : BOOLEAN;
    signal tmp_data_V_2_reg_1184 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln17_1_fu_647_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_1_reg_1201 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal sub_ln681_7_fu_709_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_7_reg_1206 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln17_1_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_2_fu_719_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_2_reg_1211 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op304_write_state42 : BOOLEAN;
    signal ap_block_state42 : BOOLEAN;
    signal add_ln22_1_fu_768_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_1_reg_1224 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_1_fu_774_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_1_reg_1229 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_2_fu_791_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln12_2_reg_1237 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state78 : BOOLEAN;
    signal tmp_data_V_3_reg_1242 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln17_2_fu_812_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_2_reg_1259 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal sub_ln681_11_fu_874_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_11_reg_1264 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln17_2_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_4_fu_884_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_4_reg_1269 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op391_write_state80 : BOOLEAN;
    signal ap_block_state80 : BOOLEAN;
    signal add_ln22_2_fu_933_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_2_reg_1282 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_2_fu_939_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_2_reg_1287 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_3_fu_956_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln12_3_reg_1295 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state116 : BOOLEAN;
    signal tmp_data_V_4_reg_1300 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln17_3_fu_972_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_3_reg_1309 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal sub_ln681_15_fu_1034_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_15_reg_1314 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln17_3_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln681_6_fu_1044_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_6_reg_1319 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op475_write_state118 : BOOLEAN;
    signal ap_block_state118 : BOOLEAN;
    signal add_ln22_3_fu_1093_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_3_reg_1332 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_3_fu_1099_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_3_reg_1337 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_0_reg_266 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal Hi_assign_0_reg_277 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal Lo_assign_0_reg_289 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_0_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_1_reg_312 : STD_LOGIC_VECTOR (1 downto 0);
    signal Hi_assign_1_reg_323 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal Lo_assign_1_reg_335 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_1_reg_347 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_2_reg_358 : STD_LOGIC_VECTOR (1 downto 0);
    signal Hi_assign_2_reg_369 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal Lo_assign_2_reg_381 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_2_reg_393 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_3_reg_404 : STD_LOGIC_VECTOR (1 downto 0);
    signal Hi_assign_3_reg_415 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal Lo_assign_3_reg_427 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_3_reg_439 : STD_LOGIC_VECTOR (3 downto 0);
    signal channel_idx_0_0_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_idx_0_1_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_idx_0_2_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_idx_0_3_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_577_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_742_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_907_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_1067_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln681_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_fu_503_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_2_fu_515_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_494_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln681_1_fu_509_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_fu_521_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_2_fu_536_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_1_fu_529_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_1_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_1_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln681_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln681_1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_4_fu_668_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_6_fu_680_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_659_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln681_5_fu_674_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_3_fu_686_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_5_fu_701_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_4_fu_694_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_2_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_3_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_3_fu_731_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln681_1_fu_737_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_762_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_762_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln681_2_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_8_fu_833_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_10_fu_845_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_824_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln681_9_fu_839_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_6_fu_851_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_8_fu_866_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_7_fu_859_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_4_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_5_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_5_fu_896_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln681_2_fu_902_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_927_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_927_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln681_3_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln681_12_fu_993_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln681_14_fu_1005_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_984_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln681_13_fu_999_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_9_fu_1011_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_11_fu_1026_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln681_10_fu_1019_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_6_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_7_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln681_7_fu_1056_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln681_3_fu_1062_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1087_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1087_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_597_ap_start : STD_LOGIC;
    signal grp_fu_597_ap_done : STD_LOGIC;
    signal grp_fu_597_ce : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_762_ap_start : STD_LOGIC;
    signal grp_fu_762_ap_done : STD_LOGIC;
    signal grp_fu_762_ce : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_927_ap_start : STD_LOGIC;
    signal grp_fu_927_ap_done : STD_LOGIC;
    signal grp_fu_927_ce : STD_LOGIC;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal grp_fu_1087_ap_start : STD_LOGIC;
    signal grp_fu_1087_ap_done : STD_LOGIC;
    signal grp_fu_1087_ce : STD_LOGIC;
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (152 downto 0);
    signal regslice_both_in_0_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_0_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal in_0_TVALID_int : STD_LOGIC;
    signal in_0_TREADY_int : STD_LOGIC;
    signal regslice_both_in_0_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_1_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal in_1_TVALID_int : STD_LOGIC;
    signal in_1_TREADY_int : STD_LOGIC;
    signal regslice_both_in_1_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_2_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_2_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal in_2_TVALID_int : STD_LOGIC;
    signal in_2_TREADY_int : STD_LOGIC;
    signal regslice_both_in_2_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_3_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_3_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal in_3_TVALID_int : STD_LOGIC;
    signal in_3_TREADY_int : STD_LOGIC;
    signal regslice_both_in_3_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_0_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_0_TKEEP_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_0_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_0_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_1_TKEEP_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_1_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_2_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_2_TKEEP_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_2_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_2_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_3_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_3_TKEEP_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_3_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_3_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_0_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_0_TSTRB_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_0_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_0_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_1_TSTRB_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_1_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_2_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_2_TSTRB_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_2_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_2_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_3_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_3_TSTRB_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_3_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_3_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_0_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_0_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_0_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_0_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_1_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_1_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_2_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_2_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_2_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_2_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_3_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_3_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_3_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_3_V_last_V_U_ack_in : STD_LOGIC;

    component cnn_srem_32ns_3nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    cnn_srem_32ns_3nsbkb_U1 : component cnn_srem_32ns_3nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_597_ap_start,
        done => grp_fu_597_ap_done,
        din0 => grp_fu_597_p0,
        din1 => grp_fu_597_p1,
        ce => grp_fu_597_ce,
        dout => grp_fu_597_p2);

    cnn_srem_32ns_3nsbkb_U2 : component cnn_srem_32ns_3nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_762_ap_start,
        done => grp_fu_762_ap_done,
        din0 => grp_fu_762_p0,
        din1 => grp_fu_762_p1,
        ce => grp_fu_762_ce,
        dout => grp_fu_762_p2);

    cnn_srem_32ns_3nsbkb_U3 : component cnn_srem_32ns_3nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_927_ap_start,
        done => grp_fu_927_ap_done,
        din0 => grp_fu_927_p0,
        din1 => grp_fu_927_p1,
        ce => grp_fu_927_ce,
        dout => grp_fu_927_p2);

    cnn_srem_32ns_3nsbkb_U4 : component cnn_srem_32ns_3nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1087_ap_start,
        done => grp_fu_1087_ap_done,
        din0 => grp_fu_1087_p0,
        din1 => grp_fu_1087_p1,
        ce => grp_fu_1087_ce,
        dout => grp_fu_1087_p2);

    regslice_both_in_0_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_0_TDATA,
        vld_in => in_0_TVALID,
        ack_in => regslice_both_in_0_V_data_V_U_ack_in,
        data_out => in_0_TDATA_int,
        vld_out => in_0_TVALID_int,
        ack_out => in_0_TREADY_int,
        apdone_blk => regslice_both_in_0_V_data_V_U_apdone_blk);

    regslice_both_in_1_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_1_TDATA,
        vld_in => in_1_TVALID,
        ack_in => regslice_both_in_1_V_data_V_U_ack_in,
        data_out => in_1_TDATA_int,
        vld_out => in_1_TVALID_int,
        ack_out => in_1_TREADY_int,
        apdone_blk => regslice_both_in_1_V_data_V_U_apdone_blk);

    regslice_both_in_2_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_2_TDATA,
        vld_in => in_2_TVALID,
        ack_in => regslice_both_in_2_V_data_V_U_ack_in,
        data_out => in_2_TDATA_int,
        vld_out => in_2_TVALID_int,
        ack_out => in_2_TREADY_int,
        apdone_blk => regslice_both_in_2_V_data_V_U_apdone_blk);

    regslice_both_in_3_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_3_TDATA,
        vld_in => in_3_TVALID,
        ack_in => regslice_both_in_3_V_data_V_U_ack_in,
        data_out => in_3_TDATA_int,
        vld_out => in_3_TVALID_int,
        ack_out => in_3_TREADY_int,
        apdone_blk => regslice_both_in_3_V_data_V_U_apdone_blk);

    regslice_both_in_0_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_0_TKEEP,
        vld_in => in_0_TVALID,
        ack_in => regslice_both_in_0_V_keep_V_U_ack_in,
        data_out => in_0_TKEEP_int,
        vld_out => regslice_both_in_0_V_keep_V_U_vld_out,
        ack_out => in_0_TREADY_int,
        apdone_blk => regslice_both_in_0_V_keep_V_U_apdone_blk);

    regslice_both_in_1_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_1_TKEEP,
        vld_in => in_1_TVALID,
        ack_in => regslice_both_in_1_V_keep_V_U_ack_in,
        data_out => in_1_TKEEP_int,
        vld_out => regslice_both_in_1_V_keep_V_U_vld_out,
        ack_out => in_1_TREADY_int,
        apdone_blk => regslice_both_in_1_V_keep_V_U_apdone_blk);

    regslice_both_in_2_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_2_TKEEP,
        vld_in => in_2_TVALID,
        ack_in => regslice_both_in_2_V_keep_V_U_ack_in,
        data_out => in_2_TKEEP_int,
        vld_out => regslice_both_in_2_V_keep_V_U_vld_out,
        ack_out => in_2_TREADY_int,
        apdone_blk => regslice_both_in_2_V_keep_V_U_apdone_blk);

    regslice_both_in_3_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_3_TKEEP,
        vld_in => in_3_TVALID,
        ack_in => regslice_both_in_3_V_keep_V_U_ack_in,
        data_out => in_3_TKEEP_int,
        vld_out => regslice_both_in_3_V_keep_V_U_vld_out,
        ack_out => in_3_TREADY_int,
        apdone_blk => regslice_both_in_3_V_keep_V_U_apdone_blk);

    regslice_both_in_0_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_0_TSTRB,
        vld_in => in_0_TVALID,
        ack_in => regslice_both_in_0_V_strb_V_U_ack_in,
        data_out => in_0_TSTRB_int,
        vld_out => regslice_both_in_0_V_strb_V_U_vld_out,
        ack_out => in_0_TREADY_int,
        apdone_blk => regslice_both_in_0_V_strb_V_U_apdone_blk);

    regslice_both_in_1_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_1_TSTRB,
        vld_in => in_1_TVALID,
        ack_in => regslice_both_in_1_V_strb_V_U_ack_in,
        data_out => in_1_TSTRB_int,
        vld_out => regslice_both_in_1_V_strb_V_U_vld_out,
        ack_out => in_1_TREADY_int,
        apdone_blk => regslice_both_in_1_V_strb_V_U_apdone_blk);

    regslice_both_in_2_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_2_TSTRB,
        vld_in => in_2_TVALID,
        ack_in => regslice_both_in_2_V_strb_V_U_ack_in,
        data_out => in_2_TSTRB_int,
        vld_out => regslice_both_in_2_V_strb_V_U_vld_out,
        ack_out => in_2_TREADY_int,
        apdone_blk => regslice_both_in_2_V_strb_V_U_apdone_blk);

    regslice_both_in_3_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_3_TSTRB,
        vld_in => in_3_TVALID,
        ack_in => regslice_both_in_3_V_strb_V_U_ack_in,
        data_out => in_3_TSTRB_int,
        vld_out => regslice_both_in_3_V_strb_V_U_vld_out,
        ack_out => in_3_TREADY_int,
        apdone_blk => regslice_both_in_3_V_strb_V_U_apdone_blk);

    regslice_both_in_0_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_0_TLAST,
        vld_in => in_0_TVALID,
        ack_in => regslice_both_in_0_V_last_V_U_ack_in,
        data_out => in_0_TLAST_int,
        vld_out => regslice_both_in_0_V_last_V_U_vld_out,
        ack_out => in_0_TREADY_int,
        apdone_blk => regslice_both_in_0_V_last_V_U_apdone_blk);

    regslice_both_in_1_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_1_TLAST,
        vld_in => in_1_TVALID,
        ack_in => regslice_both_in_1_V_last_V_U_ack_in,
        data_out => in_1_TLAST_int,
        vld_out => regslice_both_in_1_V_last_V_U_vld_out,
        ack_out => in_1_TREADY_int,
        apdone_blk => regslice_both_in_1_V_last_V_U_apdone_blk);

    regslice_both_in_2_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_2_TLAST,
        vld_in => in_2_TVALID,
        ack_in => regslice_both_in_2_V_last_V_U_ack_in,
        data_out => in_2_TLAST_int,
        vld_out => regslice_both_in_2_V_last_V_U_vld_out,
        ack_out => in_2_TREADY_int,
        apdone_blk => regslice_both_in_2_V_last_V_U_apdone_blk);

    regslice_both_in_3_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_3_TLAST,
        vld_in => in_3_TVALID,
        ack_in => regslice_both_in_3_V_last_V_U_ack_in,
        data_out => in_3_TLAST_int,
        vld_out => regslice_both_in_3_V_last_V_U_vld_out,
        ack_out => in_3_TREADY_int,
        apdone_blk => regslice_both_in_3_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Hi_assign_0_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                Hi_assign_0_reg_277 <= add_ln22_reg_1166;
            elsif ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Hi_assign_0_reg_277 <= ap_const_lv7_7;
            end if; 
        end if;
    end process;

    Hi_assign_1_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                Hi_assign_1_reg_323 <= add_ln22_1_reg_1224;
            elsif ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                Hi_assign_1_reg_323 <= ap_const_lv7_7;
            end if; 
        end if;
    end process;

    Hi_assign_2_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
                Hi_assign_2_reg_369 <= add_ln22_2_reg_1282;
            elsif ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                Hi_assign_2_reg_369 <= ap_const_lv7_7;
            end if; 
        end if;
    end process;

    Hi_assign_3_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
                Hi_assign_3_reg_415 <= add_ln22_3_reg_1332;
            elsif ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
                Hi_assign_3_reg_415 <= ap_const_lv7_7;
            end if; 
        end if;
    end process;

    Lo_assign_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                Lo_assign_0_reg_289 <= add_ln23_reg_1171;
            elsif ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                Lo_assign_0_reg_289 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    Lo_assign_1_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                Lo_assign_1_reg_335 <= add_ln23_1_reg_1229;
            elsif ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                Lo_assign_1_reg_335 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    Lo_assign_2_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
                Lo_assign_2_reg_381 <= add_ln23_2_reg_1287;
            elsif ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                Lo_assign_2_reg_381 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    Lo_assign_3_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
                Lo_assign_3_reg_427 <= add_ln23_3_reg_1337;
            elsif ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
                Lo_assign_3_reg_427 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    channel_idx_0_0_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                channel_idx_0_0_fu_118 <= grp_fu_597_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                channel_idx_0_0_fu_118 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    channel_idx_0_1_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                channel_idx_0_1_fu_122 <= grp_fu_762_p2;
            elsif ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                channel_idx_0_1_fu_122 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    channel_idx_0_2_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
                channel_idx_0_2_fu_126 <= grp_fu_927_p2;
            elsif ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                channel_idx_0_2_fu_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    channel_idx_0_3_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
                channel_idx_0_3_fu_130 <= grp_fu_1087_p2;
            elsif ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                channel_idx_0_3_fu_130 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_0_reg_266 <= add_ln12_reg_1121;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_266 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_1_fu_641_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                j_0_1_reg_312 <= add_ln12_1_reg_1179;
            elsif ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_1_reg_312 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_2_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_2_fu_806_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                j_0_2_reg_358 <= add_ln12_2_reg_1237;
            elsif ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                j_0_2_reg_358 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_3_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_3_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state117))) then 
                j_0_3_reg_404 <= add_ln12_3_reg_1295;
            elsif ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                j_0_3_reg_404 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                k_0_0_reg_301 <= add_ln17_reg_1143;
            elsif ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_0_reg_301 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_1_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                k_0_1_reg_347 <= add_ln17_1_reg_1201;
            elsif ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                k_0_1_reg_347 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_2_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
                k_0_2_reg_393 <= add_ln17_2_reg_1259;
            elsif ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                k_0_2_reg_393 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_3_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
                k_0_3_reg_439 <= add_ln17_3_reg_1309;
            elsif ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
                k_0_3_reg_439 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                add_ln12_1_reg_1179 <= add_ln12_1_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                add_ln12_2_reg_1237 <= add_ln12_2_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                add_ln12_3_reg_1295 <= add_ln12_3_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln12_reg_1121 <= add_ln12_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln17_1_reg_1201 <= add_ln17_1_fu_647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                add_ln17_2_reg_1259 <= add_ln17_2_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                add_ln17_3_reg_1309 <= add_ln17_3_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln17_reg_1143 <= add_ln17_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((inputs_1_2_V_full_n = ap_const_logic_0) and (ap_predicate_op304_write_state42 = ap_const_boolean_1)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (inputs_1_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (inputs_1_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                add_ln22_1_reg_1224 <= add_ln22_1_fu_768_p2;
                add_ln23_1_reg_1229 <= add_ln23_1_fu_774_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((inputs_2_2_V_full_n = ap_const_logic_0) and (ap_predicate_op391_write_state80 = ap_const_boolean_1)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (inputs_2_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (inputs_2_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                add_ln22_2_reg_1282 <= add_ln22_2_fu_933_p2;
                add_ln23_2_reg_1287 <= add_ln23_2_fu_939_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((inputs_3_2_V_full_n = ap_const_logic_0) and (ap_predicate_op475_write_state118 = ap_const_boolean_1)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (inputs_3_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (inputs_3_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                add_ln22_3_reg_1332 <= add_ln22_3_fu_1093_p2;
                add_ln23_3_reg_1337 <= add_ln23_3_fu_1099_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((inputs_0_2_V_full_n = ap_const_logic_0) and (ap_predicate_op217_write_state4 = ap_const_boolean_1)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (inputs_0_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (inputs_0_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln22_reg_1166 <= add_ln22_fu_603_p2;
                add_ln23_reg_1171 <= add_ln23_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_1_fu_641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                lshr_ln681_2_reg_1211 <= lshr_ln681_2_fu_719_p2;
                sub_ln681_7_reg_1206 <= sub_ln681_7_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_2_fu_806_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                lshr_ln681_4_reg_1269 <= lshr_ln681_4_fu_884_p2;
                sub_ln681_11_reg_1264 <= sub_ln681_11_fu_874_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_3_fu_966_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                lshr_ln681_6_reg_1319 <= lshr_ln681_6_fu_1044_p2;
                sub_ln681_15_reg_1314 <= sub_ln681_15_fu_1034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                lshr_ln681_reg_1153 <= lshr_ln681_fu_554_p2;
                sub_ln681_3_reg_1148 <= sub_ln681_3_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                tmp_data_V_2_reg_1184 <= in_1_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                tmp_data_V_3_reg_1242 <= in_2_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                tmp_data_V_4_reg_1300 <= in_3_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_1126 <= in_0_TDATA_int;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, inputs_0_0_V_full_n, inputs_0_1_V_full_n, inputs_0_2_V_full_n, inputs_1_0_V_full_n, inputs_1_1_V_full_n, inputs_1_2_V_full_n, inputs_2_0_V_full_n, inputs_2_1_V_full_n, inputs_2_2_V_full_n, inputs_3_0_V_full_n, inputs_3_1_V_full_n, inputs_3_2_V_full_n, ap_CS_fsm_state2, icmp_ln12_fu_455_p2, ap_CS_fsm_state40, icmp_ln12_1_fu_620_p2, ap_CS_fsm_state78, icmp_ln12_2_fu_785_p2, ap_CS_fsm_state116, icmp_ln12_3_fu_950_p2, ap_CS_fsm_state4, trunc_ln182_fu_584_p1, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1, ap_CS_fsm_state3, icmp_ln17_fu_476_p2, ap_predicate_op217_write_state4, ap_CS_fsm_state41, icmp_ln17_1_fu_641_p2, ap_predicate_op304_write_state42, ap_CS_fsm_state79, icmp_ln17_2_fu_806_p2, ap_predicate_op391_write_state80, ap_CS_fsm_state117, icmp_ln17_3_fu_966_p2, ap_predicate_op475_write_state118, in_0_TVALID_int, in_1_TVALID_int, in_2_TVALID_int, in_3_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln17_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not((((inputs_0_2_V_full_n = ap_const_logic_0) and (ap_predicate_op217_write_state4 = ap_const_boolean_1)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (inputs_0_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (inputs_0_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state40 => 
                if ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                elsif ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((icmp_ln17_1_fu_641_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if ((not((((inputs_1_2_V_full_n = ap_const_logic_0) and (ap_predicate_op304_write_state42 = ap_const_boolean_1)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (inputs_1_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (inputs_1_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state78 => 
                if ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                elsif ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((icmp_ln17_2_fu_806_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state80 => 
                if ((not((((inputs_2_2_V_full_n = ap_const_logic_0) and (ap_predicate_op391_write_state80 = ap_const_boolean_1)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (inputs_2_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (inputs_2_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state116 => 
                if ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state117 => 
                if (((icmp_ln17_3_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when ap_ST_fsm_state118 => 
                if ((not((((inputs_3_2_V_full_n = ap_const_logic_0) and (ap_predicate_op475_write_state118 = ap_const_boolean_1)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (inputs_3_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (inputs_3_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    ap_NS_fsm <= ap_ST_fsm_state119;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln12_1_fu_626_p2 <= std_logic_vector(unsigned(j_0_1_reg_312) + unsigned(ap_const_lv2_1));
    add_ln12_2_fu_791_p2 <= std_logic_vector(unsigned(j_0_2_reg_358) + unsigned(ap_const_lv2_1));
    add_ln12_3_fu_956_p2 <= std_logic_vector(unsigned(j_0_3_reg_404) + unsigned(ap_const_lv2_1));
    add_ln12_fu_461_p2 <= std_logic_vector(unsigned(j_0_0_reg_266) + unsigned(ap_const_lv2_1));
    add_ln17_1_fu_647_p2 <= std_logic_vector(unsigned(k_0_1_reg_347) + unsigned(ap_const_lv4_1));
    add_ln17_2_fu_812_p2 <= std_logic_vector(unsigned(k_0_2_reg_393) + unsigned(ap_const_lv4_1));
    add_ln17_3_fu_972_p2 <= std_logic_vector(unsigned(k_0_3_reg_439) + unsigned(ap_const_lv4_1));
    add_ln17_fu_482_p2 <= std_logic_vector(unsigned(k_0_0_reg_301) + unsigned(ap_const_lv4_1));
    add_ln22_1_fu_768_p2 <= std_logic_vector(unsigned(Hi_assign_1_reg_323) + unsigned(ap_const_lv7_8));
    add_ln22_2_fu_933_p2 <= std_logic_vector(unsigned(Hi_assign_2_reg_369) + unsigned(ap_const_lv7_8));
    add_ln22_3_fu_1093_p2 <= std_logic_vector(unsigned(Hi_assign_3_reg_415) + unsigned(ap_const_lv7_8));
    add_ln22_fu_603_p2 <= std_logic_vector(unsigned(Hi_assign_0_reg_277) + unsigned(ap_const_lv7_8));
    add_ln23_1_fu_774_p2 <= std_logic_vector(unsigned(Lo_assign_1_reg_335) + unsigned(ap_const_lv7_8));
    add_ln23_2_fu_939_p2 <= std_logic_vector(unsigned(Lo_assign_2_reg_381) + unsigned(ap_const_lv7_8));
    add_ln23_3_fu_1099_p2 <= std_logic_vector(unsigned(Lo_assign_3_reg_427) + unsigned(ap_const_lv7_8));
    add_ln23_fu_609_p2 <= std_logic_vector(unsigned(Lo_assign_0_reg_289) + unsigned(ap_const_lv7_8));
    and_ln681_1_fu_737_p2 <= (lshr_ln681_3_fu_731_p2 and lshr_ln681_2_reg_1211);
    and_ln681_2_fu_902_p2 <= (lshr_ln681_5_fu_896_p2 and lshr_ln681_4_reg_1269);
    and_ln681_3_fu_1062_p2 <= (lshr_ln681_7_fu_1056_p2 and lshr_ln681_6_reg_1319);
    and_ln681_fu_572_p2 <= (lshr_ln681_reg_1153 and lshr_ln681_1_fu_566_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state150 <= ap_CS_fsm(149);
    ap_CS_fsm_state151 <= ap_CS_fsm(150);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state116_assign_proc : process(icmp_ln12_3_fu_950_p2, in_3_TVALID_int)
    begin
                ap_block_state116 <= ((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0));
    end process;


    ap_block_state118_assign_proc : process(inputs_3_0_V_full_n, inputs_3_1_V_full_n, inputs_3_2_V_full_n, trunc_ln182_3_fu_1074_p1, ap_predicate_op475_write_state118)
    begin
                ap_block_state118 <= (((inputs_3_2_V_full_n = ap_const_logic_0) and (ap_predicate_op475_write_state118 = ap_const_boolean_1)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (inputs_3_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (inputs_3_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln12_fu_455_p2, in_0_TVALID_int)
    begin
                ap_block_state2 <= ((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0));
    end process;


    ap_block_state4_assign_proc : process(inputs_0_0_V_full_n, inputs_0_1_V_full_n, inputs_0_2_V_full_n, trunc_ln182_fu_584_p1, ap_predicate_op217_write_state4)
    begin
                ap_block_state4 <= (((inputs_0_2_V_full_n = ap_const_logic_0) and (ap_predicate_op217_write_state4 = ap_const_boolean_1)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (inputs_0_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (inputs_0_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state40_assign_proc : process(icmp_ln12_1_fu_620_p2, in_1_TVALID_int)
    begin
                ap_block_state40 <= ((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0));
    end process;


    ap_block_state42_assign_proc : process(inputs_1_0_V_full_n, inputs_1_1_V_full_n, inputs_1_2_V_full_n, trunc_ln182_1_fu_749_p1, ap_predicate_op304_write_state42)
    begin
                ap_block_state42 <= (((inputs_1_2_V_full_n = ap_const_logic_0) and (ap_predicate_op304_write_state42 = ap_const_boolean_1)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (inputs_1_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (inputs_1_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state78_assign_proc : process(icmp_ln12_2_fu_785_p2, in_2_TVALID_int)
    begin
                ap_block_state78 <= ((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0));
    end process;


    ap_block_state80_assign_proc : process(inputs_2_0_V_full_n, inputs_2_1_V_full_n, inputs_2_2_V_full_n, trunc_ln182_2_fu_914_p1, ap_predicate_op391_write_state80)
    begin
                ap_block_state80 <= (((inputs_2_2_V_full_n = ap_const_logic_0) and (ap_predicate_op391_write_state80 = ap_const_boolean_1)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (inputs_2_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (inputs_2_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state116, icmp_ln12_3_fu_950_p2, in_3_TVALID_int)
    begin
        if ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op217_write_state4_assign_proc : process(trunc_ln182_fu_584_p1)
    begin
                ap_predicate_op217_write_state4 <= (not((trunc_ln182_fu_584_p1 = ap_const_lv2_1)) and not((trunc_ln182_fu_584_p1 = ap_const_lv2_0)));
    end process;


    ap_predicate_op304_write_state42_assign_proc : process(trunc_ln182_1_fu_749_p1)
    begin
                ap_predicate_op304_write_state42 <= (not((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1)) and not((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0)));
    end process;


    ap_predicate_op391_write_state80_assign_proc : process(trunc_ln182_2_fu_914_p1)
    begin
                ap_predicate_op391_write_state80 <= (not((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1)) and not((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0)));
    end process;


    ap_predicate_op475_write_state118_assign_proc : process(trunc_ln182_3_fu_1074_p1)
    begin
                ap_predicate_op475_write_state118 <= (not((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1)) and not((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0)));
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_1087_ap_start_assign_proc : process(inputs_3_0_V_full_n, inputs_3_1_V_full_n, inputs_3_2_V_full_n, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1, ap_predicate_op475_write_state118)
    begin
        if ((not((((inputs_3_2_V_full_n = ap_const_logic_0) and (ap_predicate_op475_write_state118 = ap_const_boolean_1)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (inputs_3_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (inputs_3_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            grp_fu_1087_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1087_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1087_ce_assign_proc : process(ap_CS_fsm_state118, ap_CS_fsm_state153, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state132, ap_CS_fsm_state133, ap_CS_fsm_state134, ap_CS_fsm_state135, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state138, ap_CS_fsm_state139, ap_CS_fsm_state140, ap_CS_fsm_state141, ap_CS_fsm_state142, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state147, ap_CS_fsm_state148, ap_CS_fsm_state149, ap_CS_fsm_state150, ap_CS_fsm_state151, ap_CS_fsm_state152)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state153) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state144) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state142) or (ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state133) or (ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            grp_fu_1087_ce <= ap_const_logic_1;
        else 
            grp_fu_1087_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1087_p0 <= std_logic_vector(unsigned(channel_idx_0_3_fu_130) + unsigned(ap_const_lv32_1));
    grp_fu_1087_p1 <= ap_const_lv32_3(3 - 1 downto 0);

    grp_fu_597_ap_start_assign_proc : process(inputs_0_0_V_full_n, inputs_0_1_V_full_n, inputs_0_2_V_full_n, ap_CS_fsm_state4, trunc_ln182_fu_584_p1, ap_predicate_op217_write_state4)
    begin
        if ((not((((inputs_0_2_V_full_n = ap_const_logic_0) and (ap_predicate_op217_write_state4 = ap_const_boolean_1)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (inputs_0_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (inputs_0_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_597_ap_start <= ap_const_logic_1;
        else 
            grp_fu_597_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_597_ce_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state39, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_597_ce <= ap_const_logic_1;
        else 
            grp_fu_597_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_597_p0 <= std_logic_vector(unsigned(channel_idx_0_0_fu_118) + unsigned(ap_const_lv32_1));
    grp_fu_597_p1 <= ap_const_lv32_3(3 - 1 downto 0);

    grp_fu_762_ap_start_assign_proc : process(inputs_1_0_V_full_n, inputs_1_1_V_full_n, inputs_1_2_V_full_n, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1, ap_predicate_op304_write_state42)
    begin
        if ((not((((inputs_1_2_V_full_n = ap_const_logic_0) and (ap_predicate_op304_write_state42 = ap_const_boolean_1)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (inputs_1_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (inputs_1_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_fu_762_ap_start <= ap_const_logic_1;
        else 
            grp_fu_762_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_762_ce_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state77, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_fu_762_ce <= ap_const_logic_1;
        else 
            grp_fu_762_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_762_p0 <= std_logic_vector(unsigned(channel_idx_0_1_fu_122) + unsigned(ap_const_lv32_1));
    grp_fu_762_p1 <= ap_const_lv32_3(3 - 1 downto 0);

    grp_fu_927_ap_start_assign_proc : process(inputs_2_0_V_full_n, inputs_2_1_V_full_n, inputs_2_2_V_full_n, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1, ap_predicate_op391_write_state80)
    begin
        if ((not((((inputs_2_2_V_full_n = ap_const_logic_0) and (ap_predicate_op391_write_state80 = ap_const_boolean_1)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (inputs_2_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (inputs_2_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            grp_fu_927_ap_start <= ap_const_logic_1;
        else 
            grp_fu_927_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_927_ce_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state115, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            grp_fu_927_ce <= ap_const_logic_1;
        else 
            grp_fu_927_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_927_p0 <= std_logic_vector(unsigned(channel_idx_0_2_fu_126) + unsigned(ap_const_lv32_1));
    grp_fu_927_p1 <= ap_const_lv32_3(3 - 1 downto 0);
    icmp_ln12_1_fu_620_p2 <= "1" when (j_0_1_reg_312 = ap_const_lv2_3) else "0";
    icmp_ln12_2_fu_785_p2 <= "1" when (j_0_2_reg_358 = ap_const_lv2_3) else "0";
    icmp_ln12_3_fu_950_p2 <= "1" when (j_0_3_reg_404 = ap_const_lv2_3) else "0";
    icmp_ln12_fu_455_p2 <= "1" when (j_0_0_reg_266 = ap_const_lv2_3) else "0";
    icmp_ln17_1_fu_641_p2 <= "1" when (k_0_1_reg_347 = ap_const_lv4_8) else "0";
    icmp_ln17_2_fu_806_p2 <= "1" when (k_0_2_reg_393 = ap_const_lv4_8) else "0";
    icmp_ln17_3_fu_966_p2 <= "1" when (k_0_3_reg_439 = ap_const_lv4_8) else "0";
    icmp_ln17_fu_476_p2 <= "1" when (k_0_0_reg_301 = ap_const_lv4_8) else "0";
    icmp_ln681_1_fu_653_p2 <= "1" when (unsigned(Lo_assign_1_reg_335) > unsigned(Hi_assign_1_reg_323)) else "0";
    icmp_ln681_2_fu_818_p2 <= "1" when (unsigned(Lo_assign_2_reg_381) > unsigned(Hi_assign_2_reg_369)) else "0";
    icmp_ln681_3_fu_978_p2 <= "1" when (unsigned(Lo_assign_3_reg_427) > unsigned(Hi_assign_3_reg_415)) else "0";
    icmp_ln681_fu_488_p2 <= "1" when (unsigned(Lo_assign_0_reg_289) > unsigned(Hi_assign_0_reg_277)) else "0";

    in_0_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_455_p2, in_0_TVALID_int)
    begin
        if (((icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_0_TDATA_blk_n <= in_0_TVALID_int;
        else 
            in_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_0_TREADY_assign_proc : process(in_0_TVALID, regslice_both_in_0_V_data_V_U_ack_in)
    begin
        if (((regslice_both_in_0_V_data_V_U_ack_in = ap_const_logic_1) and (in_0_TVALID = ap_const_logic_1))) then 
            in_0_TREADY <= ap_const_logic_1;
        else 
            in_0_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_0_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_455_p2, in_0_TVALID_int)
    begin
        if ((not(((in_0_TVALID_int = ap_const_logic_0) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0))) and (icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_0_TREADY_int <= ap_const_logic_1;
        else 
            in_0_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    in_1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state40, icmp_ln12_1_fu_620_p2, in_1_TVALID_int)
    begin
        if (((icmp_ln12_1_fu_620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            in_1_TDATA_blk_n <= in_1_TVALID_int;
        else 
            in_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_1_TREADY_assign_proc : process(in_1_TVALID, regslice_both_in_1_V_data_V_U_ack_in)
    begin
        if (((regslice_both_in_1_V_data_V_U_ack_in = ap_const_logic_1) and (in_1_TVALID = ap_const_logic_1))) then 
            in_1_TREADY <= ap_const_logic_1;
        else 
            in_1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_1_TREADY_int_assign_proc : process(ap_CS_fsm_state40, icmp_ln12_1_fu_620_p2, in_1_TVALID_int)
    begin
        if ((not(((in_1_TVALID_int = ap_const_logic_0) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0))) and (icmp_ln12_1_fu_620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            in_1_TREADY_int <= ap_const_logic_1;
        else 
            in_1_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    in_2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state78, icmp_ln12_2_fu_785_p2, in_2_TVALID_int)
    begin
        if (((icmp_ln12_2_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            in_2_TDATA_blk_n <= in_2_TVALID_int;
        else 
            in_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_2_TREADY_assign_proc : process(in_2_TVALID, regslice_both_in_2_V_data_V_U_ack_in)
    begin
        if (((regslice_both_in_2_V_data_V_U_ack_in = ap_const_logic_1) and (in_2_TVALID = ap_const_logic_1))) then 
            in_2_TREADY <= ap_const_logic_1;
        else 
            in_2_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_2_TREADY_int_assign_proc : process(ap_CS_fsm_state78, icmp_ln12_2_fu_785_p2, in_2_TVALID_int)
    begin
        if ((not(((in_2_TVALID_int = ap_const_logic_0) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0))) and (icmp_ln12_2_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            in_2_TREADY_int <= ap_const_logic_1;
        else 
            in_2_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    in_3_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state116, icmp_ln12_3_fu_950_p2, in_3_TVALID_int)
    begin
        if (((icmp_ln12_3_fu_950_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            in_3_TDATA_blk_n <= in_3_TVALID_int;
        else 
            in_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_3_TREADY_assign_proc : process(in_3_TVALID, regslice_both_in_3_V_data_V_U_ack_in)
    begin
        if (((regslice_both_in_3_V_data_V_U_ack_in = ap_const_logic_1) and (in_3_TVALID = ap_const_logic_1))) then 
            in_3_TREADY <= ap_const_logic_1;
        else 
            in_3_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_3_TREADY_int_assign_proc : process(ap_CS_fsm_state116, icmp_ln12_3_fu_950_p2, in_3_TVALID_int)
    begin
        if ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            in_3_TREADY_int <= ap_const_logic_1;
        else 
            in_3_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    inputs_0_0_V_blk_n_assign_proc : process(inputs_0_0_V_full_n, ap_CS_fsm_state4, trunc_ln182_fu_584_p1)
    begin
        if (((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputs_0_0_V_blk_n <= inputs_0_0_V_full_n;
        else 
            inputs_0_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_0_0_V_din <= tmp_12_fu_577_p1;

    inputs_0_0_V_write_assign_proc : process(inputs_0_0_V_full_n, inputs_0_1_V_full_n, inputs_0_2_V_full_n, ap_CS_fsm_state4, trunc_ln182_fu_584_p1, ap_predicate_op217_write_state4)
    begin
        if ((not((((inputs_0_2_V_full_n = ap_const_logic_0) and (ap_predicate_op217_write_state4 = ap_const_boolean_1)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (inputs_0_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (inputs_0_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputs_0_0_V_write <= ap_const_logic_1;
        else 
            inputs_0_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_0_1_V_blk_n_assign_proc : process(inputs_0_1_V_full_n, ap_CS_fsm_state4, trunc_ln182_fu_584_p1)
    begin
        if (((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputs_0_1_V_blk_n <= inputs_0_1_V_full_n;
        else 
            inputs_0_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_0_1_V_din <= tmp_12_fu_577_p1;

    inputs_0_1_V_write_assign_proc : process(inputs_0_0_V_full_n, inputs_0_1_V_full_n, inputs_0_2_V_full_n, ap_CS_fsm_state4, trunc_ln182_fu_584_p1, ap_predicate_op217_write_state4)
    begin
        if ((not((((inputs_0_2_V_full_n = ap_const_logic_0) and (ap_predicate_op217_write_state4 = ap_const_boolean_1)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (inputs_0_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (inputs_0_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputs_0_1_V_write <= ap_const_logic_1;
        else 
            inputs_0_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_0_2_V_blk_n_assign_proc : process(inputs_0_2_V_full_n, ap_CS_fsm_state4, trunc_ln182_fu_584_p1)
    begin
        if ((not((trunc_ln182_fu_584_p1 = ap_const_lv2_1)) and not((trunc_ln182_fu_584_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputs_0_2_V_blk_n <= inputs_0_2_V_full_n;
        else 
            inputs_0_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_0_2_V_din <= tmp_12_fu_577_p1;

    inputs_0_2_V_write_assign_proc : process(inputs_0_0_V_full_n, inputs_0_1_V_full_n, inputs_0_2_V_full_n, ap_CS_fsm_state4, trunc_ln182_fu_584_p1, ap_predicate_op217_write_state4)
    begin
        if ((not((((inputs_0_2_V_full_n = ap_const_logic_0) and (ap_predicate_op217_write_state4 = ap_const_boolean_1)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_1) and (inputs_0_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_fu_584_p1 = ap_const_lv2_0) and (inputs_0_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op217_write_state4 = ap_const_boolean_1))) then 
            inputs_0_2_V_write <= ap_const_logic_1;
        else 
            inputs_0_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_1_0_V_blk_n_assign_proc : process(inputs_1_0_V_full_n, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1)
    begin
        if (((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            inputs_1_0_V_blk_n <= inputs_1_0_V_full_n;
        else 
            inputs_1_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_1_0_V_din <= tmp_14_fu_742_p1;

    inputs_1_0_V_write_assign_proc : process(inputs_1_0_V_full_n, inputs_1_1_V_full_n, inputs_1_2_V_full_n, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1, ap_predicate_op304_write_state42)
    begin
        if ((not((((inputs_1_2_V_full_n = ap_const_logic_0) and (ap_predicate_op304_write_state42 = ap_const_boolean_1)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (inputs_1_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (inputs_1_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            inputs_1_0_V_write <= ap_const_logic_1;
        else 
            inputs_1_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_1_1_V_blk_n_assign_proc : process(inputs_1_1_V_full_n, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1)
    begin
        if (((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            inputs_1_1_V_blk_n <= inputs_1_1_V_full_n;
        else 
            inputs_1_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_1_1_V_din <= tmp_14_fu_742_p1;

    inputs_1_1_V_write_assign_proc : process(inputs_1_0_V_full_n, inputs_1_1_V_full_n, inputs_1_2_V_full_n, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1, ap_predicate_op304_write_state42)
    begin
        if ((not((((inputs_1_2_V_full_n = ap_const_logic_0) and (ap_predicate_op304_write_state42 = ap_const_boolean_1)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (inputs_1_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (inputs_1_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            inputs_1_1_V_write <= ap_const_logic_1;
        else 
            inputs_1_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_1_2_V_blk_n_assign_proc : process(inputs_1_2_V_full_n, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1)
    begin
        if ((not((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1)) and not((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            inputs_1_2_V_blk_n <= inputs_1_2_V_full_n;
        else 
            inputs_1_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_1_2_V_din <= tmp_14_fu_742_p1;

    inputs_1_2_V_write_assign_proc : process(inputs_1_0_V_full_n, inputs_1_1_V_full_n, inputs_1_2_V_full_n, ap_CS_fsm_state42, trunc_ln182_1_fu_749_p1, ap_predicate_op304_write_state42)
    begin
        if ((not((((inputs_1_2_V_full_n = ap_const_logic_0) and (ap_predicate_op304_write_state42 = ap_const_boolean_1)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_1) and (inputs_1_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_1_fu_749_p1 = ap_const_lv2_0) and (inputs_1_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state42) and (ap_predicate_op304_write_state42 = ap_const_boolean_1))) then 
            inputs_1_2_V_write <= ap_const_logic_1;
        else 
            inputs_1_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_2_0_V_blk_n_assign_proc : process(inputs_2_0_V_full_n, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1)
    begin
        if (((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            inputs_2_0_V_blk_n <= inputs_2_0_V_full_n;
        else 
            inputs_2_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_2_0_V_din <= tmp_16_fu_907_p1;

    inputs_2_0_V_write_assign_proc : process(inputs_2_0_V_full_n, inputs_2_1_V_full_n, inputs_2_2_V_full_n, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1, ap_predicate_op391_write_state80)
    begin
        if ((not((((inputs_2_2_V_full_n = ap_const_logic_0) and (ap_predicate_op391_write_state80 = ap_const_boolean_1)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (inputs_2_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (inputs_2_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            inputs_2_0_V_write <= ap_const_logic_1;
        else 
            inputs_2_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_2_1_V_blk_n_assign_proc : process(inputs_2_1_V_full_n, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1)
    begin
        if (((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            inputs_2_1_V_blk_n <= inputs_2_1_V_full_n;
        else 
            inputs_2_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_2_1_V_din <= tmp_16_fu_907_p1;

    inputs_2_1_V_write_assign_proc : process(inputs_2_0_V_full_n, inputs_2_1_V_full_n, inputs_2_2_V_full_n, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1, ap_predicate_op391_write_state80)
    begin
        if ((not((((inputs_2_2_V_full_n = ap_const_logic_0) and (ap_predicate_op391_write_state80 = ap_const_boolean_1)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (inputs_2_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (inputs_2_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            inputs_2_1_V_write <= ap_const_logic_1;
        else 
            inputs_2_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_2_2_V_blk_n_assign_proc : process(inputs_2_2_V_full_n, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1)
    begin
        if ((not((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1)) and not((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            inputs_2_2_V_blk_n <= inputs_2_2_V_full_n;
        else 
            inputs_2_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_2_2_V_din <= tmp_16_fu_907_p1;

    inputs_2_2_V_write_assign_proc : process(inputs_2_0_V_full_n, inputs_2_1_V_full_n, inputs_2_2_V_full_n, ap_CS_fsm_state80, trunc_ln182_2_fu_914_p1, ap_predicate_op391_write_state80)
    begin
        if ((not((((inputs_2_2_V_full_n = ap_const_logic_0) and (ap_predicate_op391_write_state80 = ap_const_boolean_1)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_1) and (inputs_2_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_2_fu_914_p1 = ap_const_lv2_0) and (inputs_2_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state80) and (ap_predicate_op391_write_state80 = ap_const_boolean_1))) then 
            inputs_2_2_V_write <= ap_const_logic_1;
        else 
            inputs_2_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_3_0_V_blk_n_assign_proc : process(inputs_3_0_V_full_n, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1)
    begin
        if (((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            inputs_3_0_V_blk_n <= inputs_3_0_V_full_n;
        else 
            inputs_3_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_3_0_V_din <= tmp_18_fu_1067_p1;

    inputs_3_0_V_write_assign_proc : process(inputs_3_0_V_full_n, inputs_3_1_V_full_n, inputs_3_2_V_full_n, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1, ap_predicate_op475_write_state118)
    begin
        if ((not((((inputs_3_2_V_full_n = ap_const_logic_0) and (ap_predicate_op475_write_state118 = ap_const_boolean_1)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (inputs_3_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (inputs_3_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            inputs_3_0_V_write <= ap_const_logic_1;
        else 
            inputs_3_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_3_1_V_blk_n_assign_proc : process(inputs_3_1_V_full_n, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1)
    begin
        if (((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            inputs_3_1_V_blk_n <= inputs_3_1_V_full_n;
        else 
            inputs_3_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_3_1_V_din <= tmp_18_fu_1067_p1;

    inputs_3_1_V_write_assign_proc : process(inputs_3_0_V_full_n, inputs_3_1_V_full_n, inputs_3_2_V_full_n, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1, ap_predicate_op475_write_state118)
    begin
        if ((not((((inputs_3_2_V_full_n = ap_const_logic_0) and (ap_predicate_op475_write_state118 = ap_const_boolean_1)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (inputs_3_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (inputs_3_0_V_full_n = ap_const_logic_0)))) and (trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            inputs_3_1_V_write <= ap_const_logic_1;
        else 
            inputs_3_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_3_2_V_blk_n_assign_proc : process(inputs_3_2_V_full_n, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1)
    begin
        if ((not((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1)) and not((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            inputs_3_2_V_blk_n <= inputs_3_2_V_full_n;
        else 
            inputs_3_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputs_3_2_V_din <= tmp_18_fu_1067_p1;

    inputs_3_2_V_write_assign_proc : process(inputs_3_0_V_full_n, inputs_3_1_V_full_n, inputs_3_2_V_full_n, ap_CS_fsm_state118, trunc_ln182_3_fu_1074_p1, ap_predicate_op475_write_state118)
    begin
        if ((not((((inputs_3_2_V_full_n = ap_const_logic_0) and (ap_predicate_op475_write_state118 = ap_const_boolean_1)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_1) and (inputs_3_1_V_full_n = ap_const_logic_0)) or ((trunc_ln182_3_fu_1074_p1 = ap_const_lv2_0) and (inputs_3_0_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state118) and (ap_predicate_op475_write_state118 = ap_const_boolean_1))) then 
            inputs_3_2_V_write <= ap_const_logic_1;
        else 
            inputs_3_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state116, icmp_ln12_3_fu_950_p2, in_3_TVALID_int)
    begin
        if ((not(((in_3_TVALID_int = ap_const_logic_0) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_0))) and (icmp_ln12_3_fu_950_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln681_1_fu_566_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_1_fu_563_p1(31-1 downto 0)))));
    lshr_ln681_2_fu_719_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_4_fu_694_p3),to_integer(unsigned('0' & zext_ln681_2_fu_715_p1(31-1 downto 0)))));
    lshr_ln681_3_fu_731_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_3_fu_728_p1(31-1 downto 0)))));
    lshr_ln681_4_fu_884_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_7_fu_859_p3),to_integer(unsigned('0' & zext_ln681_4_fu_880_p1(31-1 downto 0)))));
    lshr_ln681_5_fu_896_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_5_fu_893_p1(31-1 downto 0)))));
    lshr_ln681_6_fu_1044_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_10_fu_1019_p3),to_integer(unsigned('0' & zext_ln681_6_fu_1040_p1(31-1 downto 0)))));
    lshr_ln681_7_fu_1056_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln681_7_fu_1053_p1(31-1 downto 0)))));
    lshr_ln681_fu_554_p2 <= std_logic_vector(shift_right(unsigned(select_ln681_1_fu_529_p3),to_integer(unsigned('0' & zext_ln681_fu_550_p1(31-1 downto 0)))));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln681_10_fu_1019_p3 <= 
        tmp_17_fu_984_p4 when (icmp_ln681_3_fu_978_p2(0) = '1') else 
        tmp_data_V_4_reg_1300;
    select_ln681_11_fu_1026_p3 <= 
        sub_ln681_13_fu_999_p2 when (icmp_ln681_3_fu_978_p2(0) = '1') else 
        Lo_assign_3_reg_427;
    select_ln681_1_fu_529_p3 <= 
        tmp_fu_494_p4 when (icmp_ln681_fu_488_p2(0) = '1') else 
        tmp_data_V_reg_1126;
    select_ln681_2_fu_536_p3 <= 
        sub_ln681_1_fu_509_p2 when (icmp_ln681_fu_488_p2(0) = '1') else 
        Lo_assign_0_reg_289;
    select_ln681_3_fu_686_p3 <= 
        sub_ln681_4_fu_668_p2 when (icmp_ln681_1_fu_653_p2(0) = '1') else 
        sub_ln681_6_fu_680_p2;
    select_ln681_4_fu_694_p3 <= 
        tmp_13_fu_659_p4 when (icmp_ln681_1_fu_653_p2(0) = '1') else 
        tmp_data_V_2_reg_1184;
    select_ln681_5_fu_701_p3 <= 
        sub_ln681_5_fu_674_p2 when (icmp_ln681_1_fu_653_p2(0) = '1') else 
        Lo_assign_1_reg_335;
    select_ln681_6_fu_851_p3 <= 
        sub_ln681_8_fu_833_p2 when (icmp_ln681_2_fu_818_p2(0) = '1') else 
        sub_ln681_10_fu_845_p2;
    select_ln681_7_fu_859_p3 <= 
        tmp_15_fu_824_p4 when (icmp_ln681_2_fu_818_p2(0) = '1') else 
        tmp_data_V_3_reg_1242;
    select_ln681_8_fu_866_p3 <= 
        sub_ln681_9_fu_839_p2 when (icmp_ln681_2_fu_818_p2(0) = '1') else 
        Lo_assign_2_reg_381;
    select_ln681_9_fu_1011_p3 <= 
        sub_ln681_12_fu_993_p2 when (icmp_ln681_3_fu_978_p2(0) = '1') else 
        sub_ln681_14_fu_1005_p2;
    select_ln681_fu_521_p3 <= 
        sub_ln681_fu_503_p2 when (icmp_ln681_fu_488_p2(0) = '1') else 
        sub_ln681_2_fu_515_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln681_10_fu_845_p2 <= std_logic_vector(unsigned(Hi_assign_2_reg_369) - unsigned(Lo_assign_2_reg_381));
    sub_ln681_11_fu_874_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_6_fu_851_p3));
    sub_ln681_12_fu_993_p2 <= std_logic_vector(unsigned(Lo_assign_3_reg_427) - unsigned(Hi_assign_3_reg_415));
    sub_ln681_13_fu_999_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(Lo_assign_3_reg_427));
    sub_ln681_14_fu_1005_p2 <= std_logic_vector(unsigned(Hi_assign_3_reg_415) - unsigned(Lo_assign_3_reg_427));
    sub_ln681_15_fu_1034_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_9_fu_1011_p3));
    sub_ln681_1_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(Lo_assign_0_reg_289));
    sub_ln681_2_fu_515_p2 <= std_logic_vector(unsigned(Hi_assign_0_reg_277) - unsigned(Lo_assign_0_reg_289));
    sub_ln681_3_fu_544_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_fu_521_p3));
    sub_ln681_4_fu_668_p2 <= std_logic_vector(unsigned(Lo_assign_1_reg_335) - unsigned(Hi_assign_1_reg_323));
    sub_ln681_5_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(Lo_assign_1_reg_335));
    sub_ln681_6_fu_680_p2 <= std_logic_vector(unsigned(Hi_assign_1_reg_323) - unsigned(Lo_assign_1_reg_335));
    sub_ln681_7_fu_709_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln681_3_fu_686_p3));
    sub_ln681_8_fu_833_p2 <= std_logic_vector(unsigned(Lo_assign_2_reg_381) - unsigned(Hi_assign_2_reg_369));
    sub_ln681_9_fu_839_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(Lo_assign_2_reg_381));
    sub_ln681_fu_503_p2 <= std_logic_vector(unsigned(Lo_assign_0_reg_289) - unsigned(Hi_assign_0_reg_277));
    tmp_12_fu_577_p1 <= and_ln681_fu_572_p2(8 - 1 downto 0);
    
    tmp_13_fu_659_p4_proc : process(tmp_data_V_2_reg_1184)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_13_fu_659_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_data_V_2_reg_1184;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_13_fu_659_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_13_fu_659_p4_i) := tmp_data_V_2_reg_1184(64-1-tmp_13_fu_659_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_659_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_14_fu_742_p1 <= and_ln681_1_fu_737_p2(8 - 1 downto 0);
    
    tmp_15_fu_824_p4_proc : process(tmp_data_V_3_reg_1242)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_15_fu_824_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_data_V_3_reg_1242;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_15_fu_824_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_15_fu_824_p4_i) := tmp_data_V_3_reg_1242(64-1-tmp_15_fu_824_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_824_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_16_fu_907_p1 <= and_ln681_2_fu_902_p2(8 - 1 downto 0);
    
    tmp_17_fu_984_p4_proc : process(tmp_data_V_4_reg_1300)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_17_fu_984_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_data_V_4_reg_1300;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_17_fu_984_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_17_fu_984_p4_i) := tmp_data_V_4_reg_1300(64-1-tmp_17_fu_984_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_17_fu_984_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_18_fu_1067_p1 <= and_ln681_3_fu_1062_p2(8 - 1 downto 0);
    
    tmp_fu_494_p4_proc : process(tmp_data_V_reg_1126)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_fu_494_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_data_V_reg_1126;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_fu_494_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_fu_494_p4_i) := tmp_data_V_reg_1126(64-1-tmp_fu_494_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_494_p4 <= resvalue(64-1 downto 0);
    end process;

    trunc_ln182_1_fu_749_p1 <= channel_idx_0_1_fu_122(2 - 1 downto 0);
    trunc_ln182_2_fu_914_p1 <= channel_idx_0_2_fu_126(2 - 1 downto 0);
    trunc_ln182_3_fu_1074_p1 <= channel_idx_0_3_fu_130(2 - 1 downto 0);
    trunc_ln182_fu_584_p1 <= channel_idx_0_0_fu_118(2 - 1 downto 0);
    zext_ln681_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_3_reg_1148),64));
    zext_ln681_2_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_5_fu_701_p3),64));
    zext_ln681_3_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_7_reg_1206),64));
    zext_ln681_4_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_8_fu_866_p3),64));
    zext_ln681_5_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_11_reg_1264),64));
    zext_ln681_6_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_11_fu_1026_p3),64));
    zext_ln681_7_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln681_15_reg_1314),64));
    zext_ln681_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln681_2_fu_536_p3),64));
end behav;
