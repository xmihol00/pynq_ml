-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    weights_TVALID : IN STD_LOGIC;
    weights_TREADY : OUT STD_LOGIC;
    weights_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    weights_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=12.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=12.890000,HLS_SYN_LAT=34,HLS_SYN_TPT=35,HLS_SYN_MEM=44,HLS_SYN_DSP=183,HLS_SYN_FF=19197,HLS_SYN_LUT=29932,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal grp_kernel_fu_226_in_r_TDATA_blk_n : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_kernel_fu_226_weights_TDATA_blk_n : STD_LOGIC;
    signal weights_TDATA_blk_n : STD_LOGIC;
    signal grp_kernel_fu_226_out_r_TDATA_blk_n : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal grp_kernel_fu_226_ap_start : STD_LOGIC;
    signal grp_kernel_fu_226_ap_done : STD_LOGIC;
    signal grp_kernel_fu_226_ap_idle : STD_LOGIC;
    signal grp_kernel_fu_226_ap_ready : STD_LOGIC;
    signal grp_kernel_fu_226_in_r_TREADY : STD_LOGIC;
    signal grp_kernel_fu_226_weights_TREADY : STD_LOGIC;
    signal grp_kernel_fu_226_out_r_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_kernel_fu_226_out_r_TVALID : STD_LOGIC;
    signal grp_kernel_fu_226_out_r_TREADY : STD_LOGIC;
    signal grp_kernel_fu_226_out_r_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel_fu_226_out_r_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_kernel_fu_226_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kernel_fu_226_ap_ce : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state34 : BOOLEAN;
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_kernel_fu_226_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (63 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weights_V_data_V_U_apdone_blk : STD_LOGIC;
    signal weights_TDATA_int : STD_LOGIC_VECTOR (127 downto 0);
    signal weights_TVALID_int : STD_LOGIC;
    signal weights_TREADY_int : STD_LOGIC;
    signal regslice_both_weights_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weights_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal weights_TKEEP_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_weights_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_weights_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weights_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal weights_TSTRB_int : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_weights_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_weights_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weights_V_last_V_U_apdone_blk : STD_LOGIC;
    signal weights_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_weights_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_weights_V_last_V_U_ack_in : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;

    component kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        weights_TVALID : IN STD_LOGIC;
        weights_TREADY : OUT STD_LOGIC;
        weights_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        weights_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        in_r_TDATA_blk_n : OUT STD_LOGIC;
        weights_TDATA_blk_n : OUT STD_LOGIC;
        out_r_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_kernel_fu_226 : component kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_kernel_fu_226_ap_start,
        ap_done => grp_kernel_fu_226_ap_done,
        ap_idle => grp_kernel_fu_226_ap_idle,
        ap_ready => grp_kernel_fu_226_ap_ready,
        in_r_TDATA => in_r_TDATA_int,
        in_r_TVALID => in_r_TVALID_int,
        in_r_TREADY => grp_kernel_fu_226_in_r_TREADY,
        in_r_TKEEP => in_r_TKEEP_int,
        in_r_TSTRB => in_r_TSTRB_int,
        in_r_TLAST => in_r_TLAST_int,
        weights_TDATA => weights_TDATA_int,
        weights_TVALID => weights_TVALID_int,
        weights_TREADY => grp_kernel_fu_226_weights_TREADY,
        weights_TKEEP => weights_TKEEP_int,
        weights_TSTRB => weights_TSTRB_int,
        weights_TLAST => weights_TLAST_int,
        out_r_TDATA => grp_kernel_fu_226_out_r_TDATA,
        out_r_TVALID => grp_kernel_fu_226_out_r_TVALID,
        out_r_TREADY => grp_kernel_fu_226_out_r_TREADY,
        out_r_TKEEP => grp_kernel_fu_226_out_r_TKEEP,
        out_r_TSTRB => grp_kernel_fu_226_out_r_TSTRB,
        out_r_TLAST => grp_kernel_fu_226_out_r_TLAST,
        in_r_TDATA_blk_n => grp_kernel_fu_226_in_r_TDATA_blk_n,
        weights_TDATA_blk_n => grp_kernel_fu_226_weights_TDATA_blk_n,
        out_r_TDATA_blk_n => grp_kernel_fu_226_out_r_TDATA_blk_n,
        ap_ce => grp_kernel_fu_226_ap_ce);

    regslice_both_in_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_data_V_U_apdone_blk);

    regslice_both_in_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int,
        vld_out => regslice_both_in_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_keep_V_U_apdone_blk);

    regslice_both_in_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int,
        vld_out => regslice_both_in_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_strb_V_U_apdone_blk);

    regslice_both_in_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_last_V_U_apdone_blk);

    regslice_both_weights_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weights_TDATA,
        vld_in => weights_TVALID,
        ack_in => regslice_both_weights_V_data_V_U_ack_in,
        data_out => weights_TDATA_int,
        vld_out => weights_TVALID_int,
        ack_out => weights_TREADY_int,
        apdone_blk => regslice_both_weights_V_data_V_U_apdone_blk);

    regslice_both_weights_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weights_TKEEP,
        vld_in => weights_TVALID,
        ack_in => regslice_both_weights_V_keep_V_U_ack_in,
        data_out => weights_TKEEP_int,
        vld_out => regslice_both_weights_V_keep_V_U_vld_out,
        ack_out => weights_TREADY_int,
        apdone_blk => regslice_both_weights_V_keep_V_U_apdone_blk);

    regslice_both_weights_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weights_TSTRB,
        vld_in => weights_TVALID,
        ack_in => regslice_both_weights_V_strb_V_U_ack_in,
        data_out => weights_TSTRB_int,
        vld_out => regslice_both_weights_V_strb_V_U_vld_out,
        ack_out => weights_TREADY_int,
        apdone_blk => regslice_both_weights_V_strb_V_U_apdone_blk);

    regslice_both_weights_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weights_TLAST,
        vld_in => weights_TVALID,
        ack_in => regslice_both_weights_V_last_V_U_ack_in,
        data_out => weights_TLAST_int,
        vld_out => regslice_both_weights_V_last_V_U_vld_out,
        ack_out => weights_TREADY_int,
        apdone_blk => regslice_both_weights_V_last_V_U_apdone_blk);

    regslice_both_out_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_kernel_fu_226_out_r_TDATA,
        vld_in => grp_kernel_fu_226_out_r_TVALID,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_kernel_fu_226_out_r_TKEEP,
        vld_in => grp_kernel_fu_226_out_r_TVALID,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_kernel_fu_226_out_r_TSTRB,
        vld_in => grp_kernel_fu_226_out_r_TVALID,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_kernel_fu_226_out_r_TLAST,
        vld_in => grp_kernel_fu_226_out_r_TVALID,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_kernel_fu_226_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_kernel_fu_226_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_kernel_fu_226_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_kernel_fu_226_ap_ready = ap_const_logic_1)) then 
                    grp_kernel_fu_226_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (grp_kernel_fu_226_in_r_TDATA_blk_n, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state34, grp_kernel_fu_226_weights_TDATA_blk_n, grp_kernel_fu_226_out_r_TDATA_blk_n, ap_CS_fsm_state35, regslice_both_out_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((grp_kernel_fu_226_out_r_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_weights_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_in_r_TDATA_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if ((not(((grp_kernel_fu_226_out_r_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_weights_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_in_r_TDATA_blk_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_block_state3_assign_proc : process(grp_kernel_fu_226_in_r_TDATA_blk_n, grp_kernel_fu_226_weights_TDATA_blk_n, grp_kernel_fu_226_out_r_TDATA_blk_n)
    begin
                ap_block_state3 <= ((grp_kernel_fu_226_out_r_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_weights_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_in_r_TDATA_blk_n = ap_const_logic_0));
    end process;


    ap_block_state34_assign_proc : process(grp_kernel_fu_226_in_r_TDATA_blk_n, grp_kernel_fu_226_weights_TDATA_blk_n, grp_kernel_fu_226_out_r_TDATA_blk_n)
    begin
                ap_block_state34 <= ((grp_kernel_fu_226_out_r_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_weights_TDATA_blk_n = ap_const_logic_0) or (grp_kernel_fu_226_in_r_TDATA_blk_n = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_kernel_fu_226_ap_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_kernel_fu_226_ap_ce <= ap_const_logic_0;
        else 
            grp_kernel_fu_226_ap_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_kernel_fu_226_ap_start <= grp_kernel_fu_226_ap_start_reg;
    grp_kernel_fu_226_out_r_TREADY <= (out_r_TREADY_int and ap_CS_fsm_state34);

    in_r_TDATA_blk_n_assign_proc : process(grp_kernel_fu_226_in_r_TDATA_blk_n, ap_CS_fsm_state3, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_TDATA_blk_n <= grp_kernel_fu_226_in_r_TDATA_blk_n;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_V_data_V_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_V_data_V_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_state3, grp_kernel_fu_226_in_r_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_TREADY_int <= grp_kernel_fu_226_in_r_TREADY;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state34, grp_kernel_fu_226_out_r_TDATA_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_r_TDATA_blk_n <= grp_kernel_fu_226_out_r_TDATA_blk_n;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    weights_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state34, grp_kernel_fu_226_weights_TDATA_blk_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_TDATA_blk_n <= grp_kernel_fu_226_weights_TDATA_blk_n;
        else 
            weights_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weights_TREADY_assign_proc : process(weights_TVALID, regslice_both_weights_V_data_V_U_ack_in)
    begin
        if (((weights_TVALID = ap_const_logic_1) and (regslice_both_weights_V_data_V_U_ack_in = ap_const_logic_1))) then 
            weights_TREADY <= ap_const_logic_1;
        else 
            weights_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    weights_TREADY_int_assign_proc : process(ap_CS_fsm_state3, grp_kernel_fu_226_weights_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_TREADY_int <= grp_kernel_fu_226_weights_TREADY;
        else 
            weights_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
