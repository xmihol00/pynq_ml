-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    in_0_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_1_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_2_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_3_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_0_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_1_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_2_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_3_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_0_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_1_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_2_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_3_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_3_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_0_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_1_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_0_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_1_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_0_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_1_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_0_TVALID : IN STD_LOGIC;
    in_0_TREADY : OUT STD_LOGIC;
    in_1_TVALID : IN STD_LOGIC;
    in_1_TREADY : OUT STD_LOGIC;
    in_2_TVALID : IN STD_LOGIC;
    in_2_TREADY : OUT STD_LOGIC;
    in_3_TVALID : IN STD_LOGIC;
    in_3_TREADY : OUT STD_LOGIC;
    out_0_TVALID : OUT STD_LOGIC;
    out_0_TREADY : IN STD_LOGIC;
    out_1_TVALID : OUT STD_LOGIC;
    out_1_TREADY : IN STD_LOGIC );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=6904,HLS_SYN_TPT=6650,HLS_SYN_MEM=16,HLS_SYN_DSP=24,HLS_SYN_FF=17401,HLS_SYN_LUT=27625,HLS_VERSION=2020_1}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal read_input_U0_ap_start : STD_LOGIC;
    signal read_input_U0_ap_done : STD_LOGIC;
    signal read_input_U0_ap_continue : STD_LOGIC;
    signal read_input_U0_ap_idle : STD_LOGIC;
    signal read_input_U0_ap_ready : STD_LOGIC;
    signal read_input_U0_start_out : STD_LOGIC;
    signal read_input_U0_start_write : STD_LOGIC;
    signal read_input_U0_in_0_TREADY : STD_LOGIC;
    signal read_input_U0_in_1_TREADY : STD_LOGIC;
    signal read_input_U0_in_2_TREADY : STD_LOGIC;
    signal read_input_U0_in_3_TREADY : STD_LOGIC;
    signal read_input_U0_inputs_0_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_0_0_V_write : STD_LOGIC;
    signal read_input_U0_inputs_0_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_0_1_V_write : STD_LOGIC;
    signal read_input_U0_inputs_0_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_0_2_V_write : STD_LOGIC;
    signal read_input_U0_inputs_1_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_1_0_V_write : STD_LOGIC;
    signal read_input_U0_inputs_1_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_1_1_V_write : STD_LOGIC;
    signal read_input_U0_inputs_1_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_1_2_V_write : STD_LOGIC;
    signal read_input_U0_inputs_2_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_2_0_V_write : STD_LOGIC;
    signal read_input_U0_inputs_2_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_2_1_V_write : STD_LOGIC;
    signal read_input_U0_inputs_2_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_2_2_V_write : STD_LOGIC;
    signal read_input_U0_inputs_3_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_3_0_V_write : STD_LOGIC;
    signal read_input_U0_inputs_3_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_3_1_V_write : STD_LOGIC;
    signal read_input_U0_inputs_3_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input_U0_inputs_3_2_V_write : STD_LOGIC;
    signal kernel_U0_ap_start : STD_LOGIC;
    signal kernel_U0_ap_done : STD_LOGIC;
    signal kernel_U0_ap_continue : STD_LOGIC;
    signal kernel_U0_ap_idle : STD_LOGIC;
    signal kernel_U0_ap_ready : STD_LOGIC;
    signal kernel_U0_start_out : STD_LOGIC;
    signal kernel_U0_start_write : STD_LOGIC;
    signal kernel_U0_inputs_0_0_V_read : STD_LOGIC;
    signal kernel_U0_inputs_0_1_V_read : STD_LOGIC;
    signal kernel_U0_inputs_0_2_V_read : STD_LOGIC;
    signal kernel_U0_inputs_1_0_V_read : STD_LOGIC;
    signal kernel_U0_inputs_1_1_V_read : STD_LOGIC;
    signal kernel_U0_inputs_1_2_V_read : STD_LOGIC;
    signal kernel_U0_inputs_2_0_V_read : STD_LOGIC;
    signal kernel_U0_inputs_2_1_V_read : STD_LOGIC;
    signal kernel_U0_inputs_2_2_V_read : STD_LOGIC;
    signal kernel_U0_inputs_3_0_V_read : STD_LOGIC;
    signal kernel_U0_inputs_3_1_V_read : STD_LOGIC;
    signal kernel_U0_inputs_3_2_V_read : STD_LOGIC;
    signal kernel_U0_outputs_0_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_0_0_V_write : STD_LOGIC;
    signal kernel_U0_outputs_0_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_0_1_V_write : STD_LOGIC;
    signal kernel_U0_outputs_0_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_0_2_V_write : STD_LOGIC;
    signal kernel_U0_outputs_0_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_0_3_V_write : STD_LOGIC;
    signal kernel_U0_outputs_1_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_1_0_V_write : STD_LOGIC;
    signal kernel_U0_outputs_1_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_1_1_V_write : STD_LOGIC;
    signal kernel_U0_outputs_1_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_1_2_V_write : STD_LOGIC;
    signal kernel_U0_outputs_1_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_U0_outputs_1_3_V_write : STD_LOGIC;
    signal write_output_U0_ap_start : STD_LOGIC;
    signal write_output_U0_ap_done : STD_LOGIC;
    signal write_output_U0_ap_continue : STD_LOGIC;
    signal write_output_U0_ap_idle : STD_LOGIC;
    signal write_output_U0_ap_ready : STD_LOGIC;
    signal write_output_U0_outputs_0_0_V_read : STD_LOGIC;
    signal write_output_U0_outputs_0_1_V_read : STD_LOGIC;
    signal write_output_U0_outputs_0_2_V_read : STD_LOGIC;
    signal write_output_U0_outputs_0_3_V_read : STD_LOGIC;
    signal write_output_U0_outputs_1_0_V_read : STD_LOGIC;
    signal write_output_U0_outputs_1_1_V_read : STD_LOGIC;
    signal write_output_U0_outputs_1_2_V_read : STD_LOGIC;
    signal write_output_U0_outputs_1_3_V_read : STD_LOGIC;
    signal write_output_U0_out_0_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal write_output_U0_out_0_TVALID : STD_LOGIC;
    signal write_output_U0_out_1_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal write_output_U0_out_1_TVALID : STD_LOGIC;
    signal write_output_U0_out_0_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal write_output_U0_out_1_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal write_output_U0_out_0_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal write_output_U0_out_1_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal write_output_U0_out_0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_U0_out_1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal inputs_0_0_V_full_n : STD_LOGIC;
    signal inputs_0_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_0_0_V_empty_n : STD_LOGIC;
    signal inputs_0_1_V_full_n : STD_LOGIC;
    signal inputs_0_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_0_1_V_empty_n : STD_LOGIC;
    signal inputs_0_2_V_full_n : STD_LOGIC;
    signal inputs_0_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_0_2_V_empty_n : STD_LOGIC;
    signal inputs_1_0_V_full_n : STD_LOGIC;
    signal inputs_1_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_1_0_V_empty_n : STD_LOGIC;
    signal inputs_1_1_V_full_n : STD_LOGIC;
    signal inputs_1_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_1_1_V_empty_n : STD_LOGIC;
    signal inputs_1_2_V_full_n : STD_LOGIC;
    signal inputs_1_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_1_2_V_empty_n : STD_LOGIC;
    signal inputs_2_0_V_full_n : STD_LOGIC;
    signal inputs_2_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_2_0_V_empty_n : STD_LOGIC;
    signal inputs_2_1_V_full_n : STD_LOGIC;
    signal inputs_2_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_2_1_V_empty_n : STD_LOGIC;
    signal inputs_2_2_V_full_n : STD_LOGIC;
    signal inputs_2_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_2_2_V_empty_n : STD_LOGIC;
    signal inputs_3_0_V_full_n : STD_LOGIC;
    signal inputs_3_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_3_0_V_empty_n : STD_LOGIC;
    signal inputs_3_1_V_full_n : STD_LOGIC;
    signal inputs_3_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_3_1_V_empty_n : STD_LOGIC;
    signal inputs_3_2_V_full_n : STD_LOGIC;
    signal inputs_3_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inputs_3_2_V_empty_n : STD_LOGIC;
    signal outputs_0_0_V_full_n : STD_LOGIC;
    signal outputs_0_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_0_0_V_empty_n : STD_LOGIC;
    signal outputs_0_1_V_full_n : STD_LOGIC;
    signal outputs_0_1_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_0_1_V_empty_n : STD_LOGIC;
    signal outputs_0_2_V_full_n : STD_LOGIC;
    signal outputs_0_2_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_0_2_V_empty_n : STD_LOGIC;
    signal outputs_0_3_V_full_n : STD_LOGIC;
    signal outputs_0_3_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_0_3_V_empty_n : STD_LOGIC;
    signal outputs_1_0_V_full_n : STD_LOGIC;
    signal outputs_1_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_1_0_V_empty_n : STD_LOGIC;
    signal outputs_1_1_V_full_n : STD_LOGIC;
    signal outputs_1_1_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_1_1_V_empty_n : STD_LOGIC;
    signal outputs_1_2_V_full_n : STD_LOGIC;
    signal outputs_1_2_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_1_2_V_empty_n : STD_LOGIC;
    signal outputs_1_3_V_full_n : STD_LOGIC;
    signal outputs_1_3_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outputs_1_3_V_empty_n : STD_LOGIC;
    signal start_for_kernel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_kernel_U0_full_n : STD_LOGIC;
    signal start_for_kernel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_kernel_U0_empty_n : STD_LOGIC;
    signal start_for_write_output_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_output_U0_full_n : STD_LOGIC;
    signal start_for_write_output_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_output_U0_empty_n : STD_LOGIC;
    signal write_output_U0_start_full_n : STD_LOGIC;
    signal write_output_U0_start_write : STD_LOGIC;

    component read_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_0_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_0_TVALID : IN STD_LOGIC;
        in_0_TREADY : OUT STD_LOGIC;
        in_1_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_1_TVALID : IN STD_LOGIC;
        in_1_TREADY : OUT STD_LOGIC;
        in_2_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_2_TVALID : IN STD_LOGIC;
        in_2_TREADY : OUT STD_LOGIC;
        in_3_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_3_TVALID : IN STD_LOGIC;
        in_3_TREADY : OUT STD_LOGIC;
        in_0_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        in_1_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        in_2_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        in_3_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        in_0_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        in_1_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        in_2_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        in_3_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        in_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_3_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_0_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_0_0_V_full_n : IN STD_LOGIC;
        inputs_0_0_V_write : OUT STD_LOGIC;
        inputs_0_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_0_1_V_full_n : IN STD_LOGIC;
        inputs_0_1_V_write : OUT STD_LOGIC;
        inputs_0_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_0_2_V_full_n : IN STD_LOGIC;
        inputs_0_2_V_write : OUT STD_LOGIC;
        inputs_1_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_1_0_V_full_n : IN STD_LOGIC;
        inputs_1_0_V_write : OUT STD_LOGIC;
        inputs_1_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_1_1_V_full_n : IN STD_LOGIC;
        inputs_1_1_V_write : OUT STD_LOGIC;
        inputs_1_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_1_2_V_full_n : IN STD_LOGIC;
        inputs_1_2_V_write : OUT STD_LOGIC;
        inputs_2_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_2_0_V_full_n : IN STD_LOGIC;
        inputs_2_0_V_write : OUT STD_LOGIC;
        inputs_2_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_2_1_V_full_n : IN STD_LOGIC;
        inputs_2_1_V_write : OUT STD_LOGIC;
        inputs_2_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_2_2_V_full_n : IN STD_LOGIC;
        inputs_2_2_V_write : OUT STD_LOGIC;
        inputs_3_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_3_0_V_full_n : IN STD_LOGIC;
        inputs_3_0_V_write : OUT STD_LOGIC;
        inputs_3_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_3_1_V_full_n : IN STD_LOGIC;
        inputs_3_1_V_write : OUT STD_LOGIC;
        inputs_3_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputs_3_2_V_full_n : IN STD_LOGIC;
        inputs_3_2_V_write : OUT STD_LOGIC );
    end component;


    component kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        inputs_0_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_0_0_V_empty_n : IN STD_LOGIC;
        inputs_0_0_V_read : OUT STD_LOGIC;
        inputs_0_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_0_1_V_empty_n : IN STD_LOGIC;
        inputs_0_1_V_read : OUT STD_LOGIC;
        inputs_0_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_0_2_V_empty_n : IN STD_LOGIC;
        inputs_0_2_V_read : OUT STD_LOGIC;
        inputs_1_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_1_0_V_empty_n : IN STD_LOGIC;
        inputs_1_0_V_read : OUT STD_LOGIC;
        inputs_1_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_1_1_V_empty_n : IN STD_LOGIC;
        inputs_1_1_V_read : OUT STD_LOGIC;
        inputs_1_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_1_2_V_empty_n : IN STD_LOGIC;
        inputs_1_2_V_read : OUT STD_LOGIC;
        inputs_2_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_2_0_V_empty_n : IN STD_LOGIC;
        inputs_2_0_V_read : OUT STD_LOGIC;
        inputs_2_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_2_1_V_empty_n : IN STD_LOGIC;
        inputs_2_1_V_read : OUT STD_LOGIC;
        inputs_2_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_2_2_V_empty_n : IN STD_LOGIC;
        inputs_2_2_V_read : OUT STD_LOGIC;
        inputs_3_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_3_0_V_empty_n : IN STD_LOGIC;
        inputs_3_0_V_read : OUT STD_LOGIC;
        inputs_3_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_3_1_V_empty_n : IN STD_LOGIC;
        inputs_3_1_V_read : OUT STD_LOGIC;
        inputs_3_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inputs_3_2_V_empty_n : IN STD_LOGIC;
        inputs_3_2_V_read : OUT STD_LOGIC;
        outputs_0_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_0_V_full_n : IN STD_LOGIC;
        outputs_0_0_V_write : OUT STD_LOGIC;
        outputs_0_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_1_V_full_n : IN STD_LOGIC;
        outputs_0_1_V_write : OUT STD_LOGIC;
        outputs_0_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_2_V_full_n : IN STD_LOGIC;
        outputs_0_2_V_write : OUT STD_LOGIC;
        outputs_0_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_3_V_full_n : IN STD_LOGIC;
        outputs_0_3_V_write : OUT STD_LOGIC;
        outputs_1_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_0_V_full_n : IN STD_LOGIC;
        outputs_1_0_V_write : OUT STD_LOGIC;
        outputs_1_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_1_V_full_n : IN STD_LOGIC;
        outputs_1_1_V_write : OUT STD_LOGIC;
        outputs_1_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_2_V_full_n : IN STD_LOGIC;
        outputs_1_2_V_write : OUT STD_LOGIC;
        outputs_1_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_3_V_full_n : IN STD_LOGIC;
        outputs_1_3_V_write : OUT STD_LOGIC );
    end component;


    component write_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputs_0_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_0_V_empty_n : IN STD_LOGIC;
        outputs_0_0_V_read : OUT STD_LOGIC;
        outputs_0_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_1_V_empty_n : IN STD_LOGIC;
        outputs_0_1_V_read : OUT STD_LOGIC;
        outputs_0_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_2_V_empty_n : IN STD_LOGIC;
        outputs_0_2_V_read : OUT STD_LOGIC;
        outputs_0_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_0_3_V_empty_n : IN STD_LOGIC;
        outputs_0_3_V_read : OUT STD_LOGIC;
        outputs_1_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_0_V_empty_n : IN STD_LOGIC;
        outputs_1_0_V_read : OUT STD_LOGIC;
        outputs_1_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_1_V_empty_n : IN STD_LOGIC;
        outputs_1_1_V_read : OUT STD_LOGIC;
        outputs_1_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_2_V_empty_n : IN STD_LOGIC;
        outputs_1_2_V_read : OUT STD_LOGIC;
        outputs_1_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outputs_1_3_V_empty_n : IN STD_LOGIC;
        outputs_1_3_V_read : OUT STD_LOGIC;
        out_0_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_0_TVALID : OUT STD_LOGIC;
        out_0_TREADY : IN STD_LOGIC;
        out_1_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_1_TVALID : OUT STD_LOGIC;
        out_1_TREADY : IN STD_LOGIC;
        out_0_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_1_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_0_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_1_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_kernel_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_write_ofYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    read_input_U0 : component read_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_input_U0_ap_start,
        start_full_n => start_for_kernel_U0_full_n,
        ap_done => read_input_U0_ap_done,
        ap_continue => read_input_U0_ap_continue,
        ap_idle => read_input_U0_ap_idle,
        ap_ready => read_input_U0_ap_ready,
        start_out => read_input_U0_start_out,
        start_write => read_input_U0_start_write,
        in_0_TDATA => in_0_TDATA,
        in_0_TVALID => in_0_TVALID,
        in_0_TREADY => read_input_U0_in_0_TREADY,
        in_1_TDATA => in_1_TDATA,
        in_1_TVALID => in_1_TVALID,
        in_1_TREADY => read_input_U0_in_1_TREADY,
        in_2_TDATA => in_2_TDATA,
        in_2_TVALID => in_2_TVALID,
        in_2_TREADY => read_input_U0_in_2_TREADY,
        in_3_TDATA => in_3_TDATA,
        in_3_TVALID => in_3_TVALID,
        in_3_TREADY => read_input_U0_in_3_TREADY,
        in_0_TKEEP => in_0_TKEEP,
        in_1_TKEEP => in_1_TKEEP,
        in_2_TKEEP => in_2_TKEEP,
        in_3_TKEEP => in_3_TKEEP,
        in_0_TSTRB => in_0_TSTRB,
        in_1_TSTRB => in_1_TSTRB,
        in_2_TSTRB => in_2_TSTRB,
        in_3_TSTRB => in_3_TSTRB,
        in_0_TLAST => in_0_TLAST,
        in_1_TLAST => in_1_TLAST,
        in_2_TLAST => in_2_TLAST,
        in_3_TLAST => in_3_TLAST,
        inputs_0_0_V_din => read_input_U0_inputs_0_0_V_din,
        inputs_0_0_V_full_n => inputs_0_0_V_full_n,
        inputs_0_0_V_write => read_input_U0_inputs_0_0_V_write,
        inputs_0_1_V_din => read_input_U0_inputs_0_1_V_din,
        inputs_0_1_V_full_n => inputs_0_1_V_full_n,
        inputs_0_1_V_write => read_input_U0_inputs_0_1_V_write,
        inputs_0_2_V_din => read_input_U0_inputs_0_2_V_din,
        inputs_0_2_V_full_n => inputs_0_2_V_full_n,
        inputs_0_2_V_write => read_input_U0_inputs_0_2_V_write,
        inputs_1_0_V_din => read_input_U0_inputs_1_0_V_din,
        inputs_1_0_V_full_n => inputs_1_0_V_full_n,
        inputs_1_0_V_write => read_input_U0_inputs_1_0_V_write,
        inputs_1_1_V_din => read_input_U0_inputs_1_1_V_din,
        inputs_1_1_V_full_n => inputs_1_1_V_full_n,
        inputs_1_1_V_write => read_input_U0_inputs_1_1_V_write,
        inputs_1_2_V_din => read_input_U0_inputs_1_2_V_din,
        inputs_1_2_V_full_n => inputs_1_2_V_full_n,
        inputs_1_2_V_write => read_input_U0_inputs_1_2_V_write,
        inputs_2_0_V_din => read_input_U0_inputs_2_0_V_din,
        inputs_2_0_V_full_n => inputs_2_0_V_full_n,
        inputs_2_0_V_write => read_input_U0_inputs_2_0_V_write,
        inputs_2_1_V_din => read_input_U0_inputs_2_1_V_din,
        inputs_2_1_V_full_n => inputs_2_1_V_full_n,
        inputs_2_1_V_write => read_input_U0_inputs_2_1_V_write,
        inputs_2_2_V_din => read_input_U0_inputs_2_2_V_din,
        inputs_2_2_V_full_n => inputs_2_2_V_full_n,
        inputs_2_2_V_write => read_input_U0_inputs_2_2_V_write,
        inputs_3_0_V_din => read_input_U0_inputs_3_0_V_din,
        inputs_3_0_V_full_n => inputs_3_0_V_full_n,
        inputs_3_0_V_write => read_input_U0_inputs_3_0_V_write,
        inputs_3_1_V_din => read_input_U0_inputs_3_1_V_din,
        inputs_3_1_V_full_n => inputs_3_1_V_full_n,
        inputs_3_1_V_write => read_input_U0_inputs_3_1_V_write,
        inputs_3_2_V_din => read_input_U0_inputs_3_2_V_din,
        inputs_3_2_V_full_n => inputs_3_2_V_full_n,
        inputs_3_2_V_write => read_input_U0_inputs_3_2_V_write);

    kernel_U0 : component kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => kernel_U0_ap_start,
        start_full_n => start_for_write_output_U0_full_n,
        ap_done => kernel_U0_ap_done,
        ap_continue => kernel_U0_ap_continue,
        ap_idle => kernel_U0_ap_idle,
        ap_ready => kernel_U0_ap_ready,
        start_out => kernel_U0_start_out,
        start_write => kernel_U0_start_write,
        inputs_0_0_V_dout => inputs_0_0_V_dout,
        inputs_0_0_V_empty_n => inputs_0_0_V_empty_n,
        inputs_0_0_V_read => kernel_U0_inputs_0_0_V_read,
        inputs_0_1_V_dout => inputs_0_1_V_dout,
        inputs_0_1_V_empty_n => inputs_0_1_V_empty_n,
        inputs_0_1_V_read => kernel_U0_inputs_0_1_V_read,
        inputs_0_2_V_dout => inputs_0_2_V_dout,
        inputs_0_2_V_empty_n => inputs_0_2_V_empty_n,
        inputs_0_2_V_read => kernel_U0_inputs_0_2_V_read,
        inputs_1_0_V_dout => inputs_1_0_V_dout,
        inputs_1_0_V_empty_n => inputs_1_0_V_empty_n,
        inputs_1_0_V_read => kernel_U0_inputs_1_0_V_read,
        inputs_1_1_V_dout => inputs_1_1_V_dout,
        inputs_1_1_V_empty_n => inputs_1_1_V_empty_n,
        inputs_1_1_V_read => kernel_U0_inputs_1_1_V_read,
        inputs_1_2_V_dout => inputs_1_2_V_dout,
        inputs_1_2_V_empty_n => inputs_1_2_V_empty_n,
        inputs_1_2_V_read => kernel_U0_inputs_1_2_V_read,
        inputs_2_0_V_dout => inputs_2_0_V_dout,
        inputs_2_0_V_empty_n => inputs_2_0_V_empty_n,
        inputs_2_0_V_read => kernel_U0_inputs_2_0_V_read,
        inputs_2_1_V_dout => inputs_2_1_V_dout,
        inputs_2_1_V_empty_n => inputs_2_1_V_empty_n,
        inputs_2_1_V_read => kernel_U0_inputs_2_1_V_read,
        inputs_2_2_V_dout => inputs_2_2_V_dout,
        inputs_2_2_V_empty_n => inputs_2_2_V_empty_n,
        inputs_2_2_V_read => kernel_U0_inputs_2_2_V_read,
        inputs_3_0_V_dout => inputs_3_0_V_dout,
        inputs_3_0_V_empty_n => inputs_3_0_V_empty_n,
        inputs_3_0_V_read => kernel_U0_inputs_3_0_V_read,
        inputs_3_1_V_dout => inputs_3_1_V_dout,
        inputs_3_1_V_empty_n => inputs_3_1_V_empty_n,
        inputs_3_1_V_read => kernel_U0_inputs_3_1_V_read,
        inputs_3_2_V_dout => inputs_3_2_V_dout,
        inputs_3_2_V_empty_n => inputs_3_2_V_empty_n,
        inputs_3_2_V_read => kernel_U0_inputs_3_2_V_read,
        outputs_0_0_V_din => kernel_U0_outputs_0_0_V_din,
        outputs_0_0_V_full_n => outputs_0_0_V_full_n,
        outputs_0_0_V_write => kernel_U0_outputs_0_0_V_write,
        outputs_0_1_V_din => kernel_U0_outputs_0_1_V_din,
        outputs_0_1_V_full_n => outputs_0_1_V_full_n,
        outputs_0_1_V_write => kernel_U0_outputs_0_1_V_write,
        outputs_0_2_V_din => kernel_U0_outputs_0_2_V_din,
        outputs_0_2_V_full_n => outputs_0_2_V_full_n,
        outputs_0_2_V_write => kernel_U0_outputs_0_2_V_write,
        outputs_0_3_V_din => kernel_U0_outputs_0_3_V_din,
        outputs_0_3_V_full_n => outputs_0_3_V_full_n,
        outputs_0_3_V_write => kernel_U0_outputs_0_3_V_write,
        outputs_1_0_V_din => kernel_U0_outputs_1_0_V_din,
        outputs_1_0_V_full_n => outputs_1_0_V_full_n,
        outputs_1_0_V_write => kernel_U0_outputs_1_0_V_write,
        outputs_1_1_V_din => kernel_U0_outputs_1_1_V_din,
        outputs_1_1_V_full_n => outputs_1_1_V_full_n,
        outputs_1_1_V_write => kernel_U0_outputs_1_1_V_write,
        outputs_1_2_V_din => kernel_U0_outputs_1_2_V_din,
        outputs_1_2_V_full_n => outputs_1_2_V_full_n,
        outputs_1_2_V_write => kernel_U0_outputs_1_2_V_write,
        outputs_1_3_V_din => kernel_U0_outputs_1_3_V_din,
        outputs_1_3_V_full_n => outputs_1_3_V_full_n,
        outputs_1_3_V_write => kernel_U0_outputs_1_3_V_write);

    write_output_U0 : component write_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_output_U0_ap_start,
        ap_done => write_output_U0_ap_done,
        ap_continue => write_output_U0_ap_continue,
        ap_idle => write_output_U0_ap_idle,
        ap_ready => write_output_U0_ap_ready,
        outputs_0_0_V_dout => outputs_0_0_V_dout,
        outputs_0_0_V_empty_n => outputs_0_0_V_empty_n,
        outputs_0_0_V_read => write_output_U0_outputs_0_0_V_read,
        outputs_0_1_V_dout => outputs_0_1_V_dout,
        outputs_0_1_V_empty_n => outputs_0_1_V_empty_n,
        outputs_0_1_V_read => write_output_U0_outputs_0_1_V_read,
        outputs_0_2_V_dout => outputs_0_2_V_dout,
        outputs_0_2_V_empty_n => outputs_0_2_V_empty_n,
        outputs_0_2_V_read => write_output_U0_outputs_0_2_V_read,
        outputs_0_3_V_dout => outputs_0_3_V_dout,
        outputs_0_3_V_empty_n => outputs_0_3_V_empty_n,
        outputs_0_3_V_read => write_output_U0_outputs_0_3_V_read,
        outputs_1_0_V_dout => outputs_1_0_V_dout,
        outputs_1_0_V_empty_n => outputs_1_0_V_empty_n,
        outputs_1_0_V_read => write_output_U0_outputs_1_0_V_read,
        outputs_1_1_V_dout => outputs_1_1_V_dout,
        outputs_1_1_V_empty_n => outputs_1_1_V_empty_n,
        outputs_1_1_V_read => write_output_U0_outputs_1_1_V_read,
        outputs_1_2_V_dout => outputs_1_2_V_dout,
        outputs_1_2_V_empty_n => outputs_1_2_V_empty_n,
        outputs_1_2_V_read => write_output_U0_outputs_1_2_V_read,
        outputs_1_3_V_dout => outputs_1_3_V_dout,
        outputs_1_3_V_empty_n => outputs_1_3_V_empty_n,
        outputs_1_3_V_read => write_output_U0_outputs_1_3_V_read,
        out_0_TDATA => write_output_U0_out_0_TDATA,
        out_0_TVALID => write_output_U0_out_0_TVALID,
        out_0_TREADY => out_0_TREADY,
        out_1_TDATA => write_output_U0_out_1_TDATA,
        out_1_TVALID => write_output_U0_out_1_TVALID,
        out_1_TREADY => out_1_TREADY,
        out_0_TKEEP => write_output_U0_out_0_TKEEP,
        out_1_TKEEP => write_output_U0_out_1_TKEEP,
        out_0_TSTRB => write_output_U0_out_0_TSTRB,
        out_1_TSTRB => write_output_U0_out_1_TSTRB,
        out_0_TLAST => write_output_U0_out_0_TLAST,
        out_1_TLAST => write_output_U0_out_1_TLAST);

    inputs_0_0_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_0_0_V_din,
        if_full_n => inputs_0_0_V_full_n,
        if_write => read_input_U0_inputs_0_0_V_write,
        if_dout => inputs_0_0_V_dout,
        if_empty_n => inputs_0_0_V_empty_n,
        if_read => kernel_U0_inputs_0_0_V_read);

    inputs_0_1_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_0_1_V_din,
        if_full_n => inputs_0_1_V_full_n,
        if_write => read_input_U0_inputs_0_1_V_write,
        if_dout => inputs_0_1_V_dout,
        if_empty_n => inputs_0_1_V_empty_n,
        if_read => kernel_U0_inputs_0_1_V_read);

    inputs_0_2_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_0_2_V_din,
        if_full_n => inputs_0_2_V_full_n,
        if_write => read_input_U0_inputs_0_2_V_write,
        if_dout => inputs_0_2_V_dout,
        if_empty_n => inputs_0_2_V_empty_n,
        if_read => kernel_U0_inputs_0_2_V_read);

    inputs_1_0_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_1_0_V_din,
        if_full_n => inputs_1_0_V_full_n,
        if_write => read_input_U0_inputs_1_0_V_write,
        if_dout => inputs_1_0_V_dout,
        if_empty_n => inputs_1_0_V_empty_n,
        if_read => kernel_U0_inputs_1_0_V_read);

    inputs_1_1_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_1_1_V_din,
        if_full_n => inputs_1_1_V_full_n,
        if_write => read_input_U0_inputs_1_1_V_write,
        if_dout => inputs_1_1_V_dout,
        if_empty_n => inputs_1_1_V_empty_n,
        if_read => kernel_U0_inputs_1_1_V_read);

    inputs_1_2_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_1_2_V_din,
        if_full_n => inputs_1_2_V_full_n,
        if_write => read_input_U0_inputs_1_2_V_write,
        if_dout => inputs_1_2_V_dout,
        if_empty_n => inputs_1_2_V_empty_n,
        if_read => kernel_U0_inputs_1_2_V_read);

    inputs_2_0_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_2_0_V_din,
        if_full_n => inputs_2_0_V_full_n,
        if_write => read_input_U0_inputs_2_0_V_write,
        if_dout => inputs_2_0_V_dout,
        if_empty_n => inputs_2_0_V_empty_n,
        if_read => kernel_U0_inputs_2_0_V_read);

    inputs_2_1_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_2_1_V_din,
        if_full_n => inputs_2_1_V_full_n,
        if_write => read_input_U0_inputs_2_1_V_write,
        if_dout => inputs_2_1_V_dout,
        if_empty_n => inputs_2_1_V_empty_n,
        if_read => kernel_U0_inputs_2_1_V_read);

    inputs_2_2_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_2_2_V_din,
        if_full_n => inputs_2_2_V_full_n,
        if_write => read_input_U0_inputs_2_2_V_write,
        if_dout => inputs_2_2_V_dout,
        if_empty_n => inputs_2_2_V_empty_n,
        if_read => kernel_U0_inputs_2_2_V_read);

    inputs_3_0_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_3_0_V_din,
        if_full_n => inputs_3_0_V_full_n,
        if_write => read_input_U0_inputs_3_0_V_write,
        if_dout => inputs_3_0_V_dout,
        if_empty_n => inputs_3_0_V_empty_n,
        if_read => kernel_U0_inputs_3_0_V_read);

    inputs_3_1_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_3_1_V_din,
        if_full_n => inputs_3_1_V_full_n,
        if_write => read_input_U0_inputs_3_1_V_write,
        if_dout => inputs_3_1_V_dout,
        if_empty_n => inputs_3_1_V_empty_n,
        if_read => kernel_U0_inputs_3_1_V_read);

    inputs_3_2_V_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inputs_3_2_V_din,
        if_full_n => inputs_3_2_V_full_n,
        if_write => read_input_U0_inputs_3_2_V_write,
        if_dout => inputs_3_2_V_dout,
        if_empty_n => inputs_3_2_V_empty_n,
        if_read => kernel_U0_inputs_3_2_V_read);

    outputs_0_0_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_0_0_V_din,
        if_full_n => outputs_0_0_V_full_n,
        if_write => kernel_U0_outputs_0_0_V_write,
        if_dout => outputs_0_0_V_dout,
        if_empty_n => outputs_0_0_V_empty_n,
        if_read => write_output_U0_outputs_0_0_V_read);

    outputs_0_1_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_0_1_V_din,
        if_full_n => outputs_0_1_V_full_n,
        if_write => kernel_U0_outputs_0_1_V_write,
        if_dout => outputs_0_1_V_dout,
        if_empty_n => outputs_0_1_V_empty_n,
        if_read => write_output_U0_outputs_0_1_V_read);

    outputs_0_2_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_0_2_V_din,
        if_full_n => outputs_0_2_V_full_n,
        if_write => kernel_U0_outputs_0_2_V_write,
        if_dout => outputs_0_2_V_dout,
        if_empty_n => outputs_0_2_V_empty_n,
        if_read => write_output_U0_outputs_0_2_V_read);

    outputs_0_3_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_0_3_V_din,
        if_full_n => outputs_0_3_V_full_n,
        if_write => kernel_U0_outputs_0_3_V_write,
        if_dout => outputs_0_3_V_dout,
        if_empty_n => outputs_0_3_V_empty_n,
        if_read => write_output_U0_outputs_0_3_V_read);

    outputs_1_0_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_1_0_V_din,
        if_full_n => outputs_1_0_V_full_n,
        if_write => kernel_U0_outputs_1_0_V_write,
        if_dout => outputs_1_0_V_dout,
        if_empty_n => outputs_1_0_V_empty_n,
        if_read => write_output_U0_outputs_1_0_V_read);

    outputs_1_1_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_1_1_V_din,
        if_full_n => outputs_1_1_V_full_n,
        if_write => kernel_U0_outputs_1_1_V_write,
        if_dout => outputs_1_1_V_dout,
        if_empty_n => outputs_1_1_V_empty_n,
        if_read => write_output_U0_outputs_1_1_V_read);

    outputs_1_2_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_1_2_V_din,
        if_full_n => outputs_1_2_V_full_n,
        if_write => kernel_U0_outputs_1_2_V_write,
        if_dout => outputs_1_2_V_dout,
        if_empty_n => outputs_1_2_V_empty_n,
        if_read => write_output_U0_outputs_1_2_V_read);

    outputs_1_3_V_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kernel_U0_outputs_1_3_V_din,
        if_full_n => outputs_1_3_V_full_n,
        if_write => kernel_U0_outputs_1_3_V_write,
        if_dout => outputs_1_3_V_dout,
        if_empty_n => outputs_1_3_V_empty_n,
        if_read => write_output_U0_outputs_1_3_V_read);

    start_for_kernel_U0_U : component start_for_kernel_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_kernel_U0_din,
        if_full_n => start_for_kernel_U0_full_n,
        if_write => read_input_U0_start_write,
        if_dout => start_for_kernel_U0_dout,
        if_empty_n => start_for_kernel_U0_empty_n,
        if_read => kernel_U0_ap_ready);

    start_for_write_ofYi_U : component start_for_write_ofYi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_output_U0_din,
        if_full_n => start_for_write_output_U0_full_n,
        if_write => kernel_U0_start_write,
        if_dout => start_for_write_output_U0_dout,
        if_empty_n => start_for_write_output_U0_empty_n,
        if_read => write_output_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    in_0_TREADY <= read_input_U0_in_0_TREADY;
    in_1_TREADY <= read_input_U0_in_1_TREADY;
    in_2_TREADY <= read_input_U0_in_2_TREADY;
    in_3_TREADY <= read_input_U0_in_3_TREADY;
    kernel_U0_ap_continue <= ap_const_logic_1;
    kernel_U0_ap_start <= start_for_kernel_U0_empty_n;
    out_0_TDATA <= write_output_U0_out_0_TDATA;
    out_0_TKEEP <= write_output_U0_out_0_TKEEP;
    out_0_TLAST <= write_output_U0_out_0_TLAST;
    out_0_TSTRB <= write_output_U0_out_0_TSTRB;
    out_0_TVALID <= write_output_U0_out_0_TVALID;
    out_1_TDATA <= write_output_U0_out_1_TDATA;
    out_1_TKEEP <= write_output_U0_out_1_TKEEP;
    out_1_TLAST <= write_output_U0_out_1_TLAST;
    out_1_TSTRB <= write_output_U0_out_1_TSTRB;
    out_1_TVALID <= write_output_U0_out_1_TVALID;
    read_input_U0_ap_continue <= ap_const_logic_1;
    read_input_U0_ap_start <= ap_const_logic_1;
    start_for_kernel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_output_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_output_U0_ap_continue <= ap_const_logic_1;
    write_output_U0_ap_start <= start_for_write_output_U0_empty_n;
    write_output_U0_start_full_n <= ap_const_logic_1;
    write_output_U0_start_write <= ap_const_logic_0;
end behav;
