// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cnn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=12.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=12.890000,HLS_SYN_LAT=34,HLS_SYN_TPT=35,HLS_SYN_MEM=44,HLS_SYN_DSP=183,HLS_SYN_FF=19197,HLS_SYN_LUT=29932,HLS_VERSION=2020_1}" *)

module cnn (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TLAST,
        weights_TDATA,
        weights_TVALID,
        weights_TREADY,
        weights_TKEEP,
        weights_TSTRB,
        weights_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;

input   ap_clk;
input   ap_rst_n;
input  [63:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [7:0] in_r_TKEEP;
input  [7:0] in_r_TSTRB;
input  [0:0] in_r_TLAST;
input  [127:0] weights_TDATA;
input   weights_TVALID;
output   weights_TREADY;
input  [15:0] weights_TKEEP;
input  [15:0] weights_TSTRB;
input  [0:0] weights_TLAST;
output  [511:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [63:0] out_r_TKEEP;
output  [63:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;

reg in_r_TREADY;
reg weights_TREADY;

 reg    ap_rst_n_inv;
wire    grp_kernel_fu_226_in_r_TDATA_blk_n;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state34;
wire    grp_kernel_fu_226_weights_TDATA_blk_n;
reg    weights_TDATA_blk_n;
wire    grp_kernel_fu_226_out_r_TDATA_blk_n;
reg    out_r_TDATA_blk_n;
wire    grp_kernel_fu_226_ap_start;
wire    grp_kernel_fu_226_ap_done;
wire    grp_kernel_fu_226_ap_idle;
wire    grp_kernel_fu_226_ap_ready;
wire    grp_kernel_fu_226_in_r_TREADY;
wire    grp_kernel_fu_226_weights_TREADY;
wire   [511:0] grp_kernel_fu_226_out_r_TDATA;
wire    grp_kernel_fu_226_out_r_TVALID;
wire    grp_kernel_fu_226_out_r_TREADY;
wire   [63:0] grp_kernel_fu_226_out_r_TKEEP;
wire   [63:0] grp_kernel_fu_226_out_r_TSTRB;
wire   [0:0] grp_kernel_fu_226_out_r_TLAST;
reg    grp_kernel_fu_226_ap_ce;
reg    ap_block_state3;
reg    ap_block_state34;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state35;
reg    grp_kernel_fu_226_ap_start_reg;
reg   [34:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    regslice_both_out_V_data_V_U_apdone_blk;
wire    regslice_both_in_V_data_V_U_apdone_blk;
wire   [63:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_V_data_V_U_ack_in;
wire    regslice_both_in_V_keep_V_U_apdone_blk;
wire   [7:0] in_r_TKEEP_int;
wire    regslice_both_in_V_keep_V_U_vld_out;
wire    regslice_both_in_V_keep_V_U_ack_in;
wire    regslice_both_in_V_strb_V_U_apdone_blk;
wire   [7:0] in_r_TSTRB_int;
wire    regslice_both_in_V_strb_V_U_vld_out;
wire    regslice_both_in_V_strb_V_U_ack_in;
wire    regslice_both_in_V_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    regslice_both_in_V_last_V_U_vld_out;
wire    regslice_both_in_V_last_V_U_ack_in;
wire    regslice_both_weights_V_data_V_U_apdone_blk;
wire   [127:0] weights_TDATA_int;
wire    weights_TVALID_int;
reg    weights_TREADY_int;
wire    regslice_both_weights_V_data_V_U_ack_in;
wire    regslice_both_weights_V_keep_V_U_apdone_blk;
wire   [15:0] weights_TKEEP_int;
wire    regslice_both_weights_V_keep_V_U_vld_out;
wire    regslice_both_weights_V_keep_V_U_ack_in;
wire    regslice_both_weights_V_strb_V_U_apdone_blk;
wire   [15:0] weights_TSTRB_int;
wire    regslice_both_weights_V_strb_V_U_vld_out;
wire    regslice_both_weights_V_strb_V_U_ack_in;
wire    regslice_both_weights_V_last_V_U_apdone_blk;
wire   [0:0] weights_TLAST_int;
wire    regslice_both_weights_V_last_V_U_vld_out;
wire    regslice_both_weights_V_last_V_U_ack_in;
wire    out_r_TREADY_int;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 grp_kernel_fu_226_ap_start_reg = 1'b0;
end

kernel grp_kernel_fu_226(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_kernel_fu_226_ap_start),
    .ap_done(grp_kernel_fu_226_ap_done),
    .ap_idle(grp_kernel_fu_226_ap_idle),
    .ap_ready(grp_kernel_fu_226_ap_ready),
    .in_r_TDATA(in_r_TDATA_int),
    .in_r_TVALID(in_r_TVALID_int),
    .in_r_TREADY(grp_kernel_fu_226_in_r_TREADY),
    .in_r_TKEEP(in_r_TKEEP_int),
    .in_r_TSTRB(in_r_TSTRB_int),
    .in_r_TLAST(in_r_TLAST_int),
    .weights_TDATA(weights_TDATA_int),
    .weights_TVALID(weights_TVALID_int),
    .weights_TREADY(grp_kernel_fu_226_weights_TREADY),
    .weights_TKEEP(weights_TKEEP_int),
    .weights_TSTRB(weights_TSTRB_int),
    .weights_TLAST(weights_TLAST_int),
    .out_r_TDATA(grp_kernel_fu_226_out_r_TDATA),
    .out_r_TVALID(grp_kernel_fu_226_out_r_TVALID),
    .out_r_TREADY(grp_kernel_fu_226_out_r_TREADY),
    .out_r_TKEEP(grp_kernel_fu_226_out_r_TKEEP),
    .out_r_TSTRB(grp_kernel_fu_226_out_r_TSTRB),
    .out_r_TLAST(grp_kernel_fu_226_out_r_TLAST),
    .in_r_TDATA_blk_n(grp_kernel_fu_226_in_r_TDATA_blk_n),
    .weights_TDATA_blk_n(grp_kernel_fu_226_weights_TDATA_blk_n),
    .out_r_TDATA_blk_n(grp_kernel_fu_226_out_r_TDATA_blk_n),
    .ap_ce(grp_kernel_fu_226_ap_ce)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_data_V_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TKEEP),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_keep_V_U_ack_in),
    .data_out(in_r_TKEEP_int),
    .vld_out(regslice_both_in_V_keep_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TSTRB),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_strb_V_U_ack_in),
    .data_out(in_r_TSTRB_int),
    .vld_out(regslice_both_in_V_strb_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_in_V_last_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_weights_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weights_TDATA),
    .vld_in(weights_TVALID),
    .ack_in(regslice_both_weights_V_data_V_U_ack_in),
    .data_out(weights_TDATA_int),
    .vld_out(weights_TVALID_int),
    .ack_out(weights_TREADY_int),
    .apdone_blk(regslice_both_weights_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_weights_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weights_TKEEP),
    .vld_in(weights_TVALID),
    .ack_in(regslice_both_weights_V_keep_V_U_ack_in),
    .data_out(weights_TKEEP_int),
    .vld_out(regslice_both_weights_V_keep_V_U_vld_out),
    .ack_out(weights_TREADY_int),
    .apdone_blk(regslice_both_weights_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_weights_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weights_TSTRB),
    .vld_in(weights_TVALID),
    .ack_in(regslice_both_weights_V_strb_V_U_ack_in),
    .data_out(weights_TSTRB_int),
    .vld_out(regslice_both_weights_V_strb_V_U_vld_out),
    .ack_out(weights_TREADY_int),
    .apdone_blk(regslice_both_weights_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_weights_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weights_TLAST),
    .vld_in(weights_TVALID),
    .ack_in(regslice_both_weights_V_last_V_U_ack_in),
    .data_out(weights_TLAST_int),
    .vld_out(regslice_both_weights_V_last_V_U_vld_out),
    .ack_out(weights_TREADY_int),
    .apdone_blk(regslice_both_weights_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_kernel_fu_226_out_r_TDATA),
    .vld_in(grp_kernel_fu_226_out_r_TVALID),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_kernel_fu_226_out_r_TKEEP),
    .vld_in(grp_kernel_fu_226_out_r_TVALID),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_kernel_fu_226_out_r_TSTRB),
    .vld_in(grp_kernel_fu_226_out_r_TVALID),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_kernel_fu_226_out_r_TLAST),
    .vld_in(grp_kernel_fu_226_out_r_TVALID),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_kernel_fu_226_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_kernel_fu_226_ap_start_reg <= 1'b1;
        end else if ((grp_kernel_fu_226_ap_ready == 1'b1)) begin
            grp_kernel_fu_226_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_kernel_fu_226_ap_ce = 1'b0;
    end else begin
        grp_kernel_fu_226_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state3))) begin
        in_r_TDATA_blk_n = grp_kernel_fu_226_in_r_TDATA_blk_n;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_r_TVALID == 1'b1) & (regslice_both_in_V_data_V_U_ack_in == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_TREADY_int = grp_kernel_fu_226_in_r_TREADY;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state3))) begin
        out_r_TDATA_blk_n = grp_kernel_fu_226_out_r_TDATA_blk_n;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state3))) begin
        weights_TDATA_blk_n = grp_kernel_fu_226_weights_TDATA_blk_n;
    end else begin
        weights_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((weights_TVALID == 1'b1) & (regslice_both_weights_V_data_V_U_ack_in == 1'b1))) begin
        weights_TREADY = 1'b1;
    end else begin
        weights_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_TREADY_int = grp_kernel_fu_226_weights_TREADY;
    end else begin
        weights_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((grp_kernel_fu_226_out_r_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_weights_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_in_r_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if ((~((grp_kernel_fu_226_out_r_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_weights_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_in_r_TDATA_blk_n == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (regslice_both_out_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state3 = ((grp_kernel_fu_226_out_r_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_weights_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_in_r_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state34 = ((grp_kernel_fu_226_out_r_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_weights_TDATA_blk_n == 1'b0) | (grp_kernel_fu_226_in_r_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_kernel_fu_226_ap_start = grp_kernel_fu_226_ap_start_reg;

assign grp_kernel_fu_226_out_r_TREADY = (out_r_TREADY_int & ap_CS_fsm_state34);

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

endmodule //cnn
