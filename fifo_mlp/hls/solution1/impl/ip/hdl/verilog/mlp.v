// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.653000,HLS_SYN_LAT=14657,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=496,HLS_SYN_LUT=939,HLS_VERSION=2020_1}" *)

module mlp (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_TDATA,
        in_V_TVALID,
        in_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_V_TDATA;
input   in_V_TVALID;
output   in_V_TREADY;
output  [15:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln392_fu_327_p2;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [6:0] i_2_fu_333_p2;
reg   [6:0] i_2_reg_408;
reg    ap_block_state2;
wire   [3:0] i_fu_371_p2;
reg   [3:0] i_reg_419;
wire    ap_CS_fsm_state5;
wire    regslice_both_out_V_U_apdone_blk;
wire   [0:0] trunc_ln403_fu_377_p1;
reg   [0:0] trunc_ln403_reg_424;
wire   [0:0] icmp_ln401_fu_365_p2;
reg   [2:0] sample_0_address0;
reg    sample_0_ce0;
reg    sample_0_we0;
wire   [7:0] sample_0_q0;
reg   [2:0] sample_1_address0;
reg    sample_1_ce0;
reg    sample_1_we0;
wire   [7:0] sample_1_q0;
reg   [2:0] sample_2_address0;
reg    sample_2_ce0;
reg    sample_2_we0;
wire   [7:0] sample_2_q0;
reg   [2:0] sample_3_address0;
reg    sample_3_ce0;
reg    sample_3_we0;
wire   [7:0] sample_3_q0;
reg   [2:0] sample_4_address0;
reg    sample_4_ce0;
reg    sample_4_we0;
wire   [7:0] sample_4_q0;
reg   [2:0] sample_5_address0;
reg    sample_5_ce0;
reg    sample_5_we0;
wire   [7:0] sample_5_q0;
reg   [2:0] sample_6_address0;
reg    sample_6_ce0;
reg    sample_6_we0;
wire   [7:0] sample_6_q0;
reg   [2:0] sample_7_address0;
reg    sample_7_ce0;
reg    sample_7_we0;
wire   [7:0] sample_7_q0;
reg   [2:0] prediction_0_address0;
reg    prediction_0_ce0;
reg    prediction_0_we0;
wire   [15:0] prediction_0_q0;
reg   [2:0] prediction_1_address0;
reg    prediction_1_ce0;
reg    prediction_1_we0;
wire   [15:0] prediction_1_q0;
wire    grp_mlp_kernel_fu_297_ap_start;
wire    grp_mlp_kernel_fu_297_ap_done;
wire    grp_mlp_kernel_fu_297_ap_idle;
wire    grp_mlp_kernel_fu_297_ap_ready;
wire   [2:0] grp_mlp_kernel_fu_297_sample_0_address0;
wire    grp_mlp_kernel_fu_297_sample_0_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_sample_1_address0;
wire    grp_mlp_kernel_fu_297_sample_1_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_sample_2_address0;
wire    grp_mlp_kernel_fu_297_sample_2_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_sample_3_address0;
wire    grp_mlp_kernel_fu_297_sample_3_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_sample_4_address0;
wire    grp_mlp_kernel_fu_297_sample_4_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_sample_5_address0;
wire    grp_mlp_kernel_fu_297_sample_5_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_sample_6_address0;
wire    grp_mlp_kernel_fu_297_sample_6_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_sample_7_address0;
wire    grp_mlp_kernel_fu_297_sample_7_ce0;
wire   [2:0] grp_mlp_kernel_fu_297_prediction_0_address0;
wire    grp_mlp_kernel_fu_297_prediction_0_ce0;
wire    grp_mlp_kernel_fu_297_prediction_0_we0;
wire   [15:0] grp_mlp_kernel_fu_297_prediction_0_d0;
wire   [2:0] grp_mlp_kernel_fu_297_prediction_1_address0;
wire    grp_mlp_kernel_fu_297_prediction_1_ce0;
wire    grp_mlp_kernel_fu_297_prediction_1_we0;
wire   [15:0] grp_mlp_kernel_fu_297_prediction_1_d0;
reg   [6:0] i_0_reg_275;
wire    ap_CS_fsm_state3;
reg   [3:0] i1_0_reg_286;
wire    ap_CS_fsm_state4;
reg    grp_mlp_kernel_fu_297_ap_start_reg;
reg    ap_block_state2_ignore_call0;
wire   [63:0] zext_ln394_fu_353_p1;
wire   [63:0] zext_ln403_fu_391_p1;
wire   [2:0] trunc_ln394_fu_339_p1;
wire   [3:0] lshr_ln_fu_343_p4;
wire   [2:0] lshr_ln4_fu_381_p4;
reg   [6:0] ap_NS_fsm;
wire    regslice_both_in_V_U_apdone_blk;
wire   [7:0] in_V_TDATA_int;
wire    in_V_TVALID_int;
reg    in_V_TREADY_int;
wire    regslice_both_in_V_U_ack_in;
wire   [15:0] out_V_TDATA_int;
reg    out_V_TVALID_int;
wire    out_V_TREADY_int;
wire    regslice_both_out_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_mlp_kernel_fu_297_ap_start_reg = 1'b0;
end

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_0_address0),
    .ce0(sample_0_ce0),
    .we0(sample_0_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_0_q0)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_1_address0),
    .ce0(sample_1_ce0),
    .we0(sample_1_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_1_q0)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_2_address0),
    .ce0(sample_2_ce0),
    .we0(sample_2_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_2_q0)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_3_address0),
    .ce0(sample_3_ce0),
    .we0(sample_3_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_3_q0)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_4_address0),
    .ce0(sample_4_ce0),
    .we0(sample_4_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_4_q0)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_5_address0),
    .ce0(sample_5_ce0),
    .we0(sample_5_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_5_q0)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_6_address0),
    .ce0(sample_6_ce0),
    .we0(sample_6_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_6_q0)
);

mlp_sample_0 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sample_7_address0),
    .ce0(sample_7_ce0),
    .we0(sample_7_we0),
    .d0(in_V_TDATA_int),
    .q0(sample_7_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
prediction_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_0_address0),
    .ce0(prediction_0_ce0),
    .we0(prediction_0_we0),
    .d0(grp_mlp_kernel_fu_297_prediction_0_d0),
    .q0(prediction_0_q0)
);

mlp_prediction_0 #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
prediction_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_1_address0),
    .ce0(prediction_1_ce0),
    .we0(prediction_1_we0),
    .d0(grp_mlp_kernel_fu_297_prediction_1_d0),
    .q0(prediction_1_q0)
);

mlp_kernel grp_mlp_kernel_fu_297(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mlp_kernel_fu_297_ap_start),
    .ap_done(grp_mlp_kernel_fu_297_ap_done),
    .ap_idle(grp_mlp_kernel_fu_297_ap_idle),
    .ap_ready(grp_mlp_kernel_fu_297_ap_ready),
    .sample_0_address0(grp_mlp_kernel_fu_297_sample_0_address0),
    .sample_0_ce0(grp_mlp_kernel_fu_297_sample_0_ce0),
    .sample_0_q0(sample_0_q0),
    .sample_1_address0(grp_mlp_kernel_fu_297_sample_1_address0),
    .sample_1_ce0(grp_mlp_kernel_fu_297_sample_1_ce0),
    .sample_1_q0(sample_1_q0),
    .sample_2_address0(grp_mlp_kernel_fu_297_sample_2_address0),
    .sample_2_ce0(grp_mlp_kernel_fu_297_sample_2_ce0),
    .sample_2_q0(sample_2_q0),
    .sample_3_address0(grp_mlp_kernel_fu_297_sample_3_address0),
    .sample_3_ce0(grp_mlp_kernel_fu_297_sample_3_ce0),
    .sample_3_q0(sample_3_q0),
    .sample_4_address0(grp_mlp_kernel_fu_297_sample_4_address0),
    .sample_4_ce0(grp_mlp_kernel_fu_297_sample_4_ce0),
    .sample_4_q0(sample_4_q0),
    .sample_5_address0(grp_mlp_kernel_fu_297_sample_5_address0),
    .sample_5_ce0(grp_mlp_kernel_fu_297_sample_5_ce0),
    .sample_5_q0(sample_5_q0),
    .sample_6_address0(grp_mlp_kernel_fu_297_sample_6_address0),
    .sample_6_ce0(grp_mlp_kernel_fu_297_sample_6_ce0),
    .sample_6_q0(sample_6_q0),
    .sample_7_address0(grp_mlp_kernel_fu_297_sample_7_address0),
    .sample_7_ce0(grp_mlp_kernel_fu_297_sample_7_ce0),
    .sample_7_q0(sample_7_q0),
    .prediction_0_address0(grp_mlp_kernel_fu_297_prediction_0_address0),
    .prediction_0_ce0(grp_mlp_kernel_fu_297_prediction_0_ce0),
    .prediction_0_we0(grp_mlp_kernel_fu_297_prediction_0_we0),
    .prediction_0_d0(grp_mlp_kernel_fu_297_prediction_0_d0),
    .prediction_1_address0(grp_mlp_kernel_fu_297_prediction_1_address0),
    .prediction_1_ce0(grp_mlp_kernel_fu_297_prediction_1_ce0),
    .prediction_1_we0(grp_mlp_kernel_fu_297_prediction_1_we0),
    .prediction_1_d0(grp_mlp_kernel_fu_297_prediction_1_d0)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_V_TDATA),
    .vld_in(in_V_TVALID),
    .ack_in(regslice_both_in_V_U_ack_in),
    .data_out(in_V_TDATA_int),
    .vld_out(in_V_TVALID_int),
    .ack_out(in_V_TREADY_int),
    .apdone_blk(regslice_both_in_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_V_TDATA_int),
    .vld_in(out_V_TVALID_int),
    .ack_in(out_V_TREADY_int),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mlp_kernel_fu_297_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_mlp_kernel_fu_297_ap_start_reg <= 1'b1;
        end else if ((grp_mlp_kernel_fu_297_ap_ready == 1'b1)) begin
            grp_mlp_kernel_fu_297_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((out_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        i1_0_reg_286 <= i_reg_419;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_mlp_kernel_fu_297_ap_done == 1'b1))) begin
        i1_0_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_275 <= i_2_reg_408;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_275 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_408 <= i_2_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_419 <= i_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (icmp_ln401_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        trunc_ln403_reg_424 <= trunc_ln403_fu_377_p1;
    end
end

always @ (*) begin
    if (((icmp_ln401_fu_365_p2 == 1'd1) & (regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln401_fu_365_p2 == 1'd1) & (regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_TDATA_blk_n = in_V_TVALID_int;
    end else begin
        in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_V_U_ack_in == 1'b1) & (in_V_TVALID == 1'b1))) begin
        in_V_TREADY = 1'b1;
    end else begin
        in_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_TREADY_int = 1'b1;
    end else begin
        in_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_TVALID_int = 1'b1;
    end else begin
        out_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        prediction_0_address0 = zext_ln403_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prediction_0_address0 = grp_mlp_kernel_fu_297_prediction_0_address0;
    end else begin
        prediction_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        prediction_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prediction_0_ce0 = grp_mlp_kernel_fu_297_prediction_0_ce0;
    end else begin
        prediction_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prediction_0_we0 = grp_mlp_kernel_fu_297_prediction_0_we0;
    end else begin
        prediction_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        prediction_1_address0 = zext_ln403_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prediction_1_address0 = grp_mlp_kernel_fu_297_prediction_1_address0;
    end else begin
        prediction_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        prediction_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prediction_1_ce0 = grp_mlp_kernel_fu_297_prediction_1_ce0;
    end else begin
        prediction_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prediction_1_we0 = grp_mlp_kernel_fu_297_prediction_1_we0;
    end else begin
        prediction_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_0_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_0_address0 = grp_mlp_kernel_fu_297_sample_0_address0;
    end else begin
        sample_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_0_ce0 = grp_mlp_kernel_fu_297_sample_0_ce0;
    end else begin
        sample_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_0_we0 = 1'b1;
    end else begin
        sample_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_1_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_1_address0 = grp_mlp_kernel_fu_297_sample_1_address0;
    end else begin
        sample_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_1_ce0 = grp_mlp_kernel_fu_297_sample_1_ce0;
    end else begin
        sample_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_1_we0 = 1'b1;
    end else begin
        sample_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_2_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_2_address0 = grp_mlp_kernel_fu_297_sample_2_address0;
    end else begin
        sample_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_2_ce0 = grp_mlp_kernel_fu_297_sample_2_ce0;
    end else begin
        sample_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_2_we0 = 1'b1;
    end else begin
        sample_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_3_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_3_address0 = grp_mlp_kernel_fu_297_sample_3_address0;
    end else begin
        sample_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_3_ce0 = grp_mlp_kernel_fu_297_sample_3_ce0;
    end else begin
        sample_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_3_we0 = 1'b1;
    end else begin
        sample_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_4_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_4_address0 = grp_mlp_kernel_fu_297_sample_4_address0;
    end else begin
        sample_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_4_ce0 = grp_mlp_kernel_fu_297_sample_4_ce0;
    end else begin
        sample_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_4_we0 = 1'b1;
    end else begin
        sample_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd5) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_5_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_5_address0 = grp_mlp_kernel_fu_297_sample_5_address0;
    end else begin
        sample_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd5) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_5_ce0 = grp_mlp_kernel_fu_297_sample_5_ce0;
    end else begin
        sample_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd5) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_5_we0 = 1'b1;
    end else begin
        sample_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd6) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_6_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_6_address0 = grp_mlp_kernel_fu_297_sample_6_address0;
    end else begin
        sample_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd6) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_6_ce0 = grp_mlp_kernel_fu_297_sample_6_ce0;
    end else begin
        sample_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd6) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_6_we0 = 1'b1;
    end else begin
        sample_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd7) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_7_address0 = zext_ln394_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_7_address0 = grp_mlp_kernel_fu_297_sample_7_address0;
    end else begin
        sample_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd7) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_7_ce0 = grp_mlp_kernel_fu_297_sample_7_ce0;
    end else begin
        sample_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (trunc_ln394_fu_339_p1 == 3'd7) & (1'b1 == ap_CS_fsm_state2))) begin
        sample_7_we0 = 1'b1;
    end else begin
        sample_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0)) & (icmp_ln392_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_mlp_kernel_fu_297_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln401_fu_365_p2 == 1'd1) & (regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (icmp_ln401_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((out_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((out_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state2 = ((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call0 = ((icmp_ln392_fu_327_p2 == 1'd0) & (in_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_mlp_kernel_fu_297_ap_start = grp_mlp_kernel_fu_297_ap_start_reg;

assign i_2_fu_333_p2 = (i_0_reg_275 + 7'd1);

assign i_fu_371_p2 = (i1_0_reg_286 + 4'd1);

assign icmp_ln392_fu_327_p2 = ((i_0_reg_275 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln401_fu_365_p2 = ((i1_0_reg_286 == 4'd10) ? 1'b1 : 1'b0);

assign lshr_ln4_fu_381_p4 = {{i1_0_reg_286[3:1]}};

assign lshr_ln_fu_343_p4 = {{i_0_reg_275[6:3]}};

assign out_V_TDATA_int = ((trunc_ln403_reg_424[0:0] === 1'b1) ? prediction_1_q0 : prediction_0_q0);

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign trunc_ln394_fu_339_p1 = i_0_reg_275[2:0];

assign trunc_ln403_fu_377_p1 = i1_0_reg_286[0:0];

assign zext_ln394_fu_353_p1 = lshr_ln_fu_343_p4;

assign zext_ln403_fu_391_p1 = lshr_ln4_fu_381_p4;

endmodule //mlp
