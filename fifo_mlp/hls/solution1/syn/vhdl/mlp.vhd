-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_TVALID : IN STD_LOGIC;
    in_V_TREADY : OUT STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mlp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.653000,HLS_SYN_LAT=14657,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=496,HLS_SYN_LUT=939,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln392_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_fu_333_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_408 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_419 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_out_V_U_apdone_blk : STD_LOGIC;
    signal trunc_ln403_fu_377_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln403_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln401_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sample_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_0_ce0 : STD_LOGIC;
    signal sample_0_we0 : STD_LOGIC;
    signal sample_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_1_ce0 : STD_LOGIC;
    signal sample_1_we0 : STD_LOGIC;
    signal sample_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_2_ce0 : STD_LOGIC;
    signal sample_2_we0 : STD_LOGIC;
    signal sample_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_3_ce0 : STD_LOGIC;
    signal sample_3_we0 : STD_LOGIC;
    signal sample_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_4_ce0 : STD_LOGIC;
    signal sample_4_we0 : STD_LOGIC;
    signal sample_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_5_ce0 : STD_LOGIC;
    signal sample_5_we0 : STD_LOGIC;
    signal sample_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_6_ce0 : STD_LOGIC;
    signal sample_6_we0 : STD_LOGIC;
    signal sample_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_7_ce0 : STD_LOGIC;
    signal sample_7_we0 : STD_LOGIC;
    signal sample_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal prediction_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal prediction_0_ce0 : STD_LOGIC;
    signal prediction_0_we0 : STD_LOGIC;
    signal prediction_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal prediction_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal prediction_1_ce0 : STD_LOGIC;
    signal prediction_1_we0 : STD_LOGIC;
    signal prediction_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mlp_kernel_fu_297_ap_start : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_ap_done : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_ap_idle : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_ap_ready : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_0_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_1_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_2_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_3_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_4_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_5_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_6_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_sample_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_sample_7_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_prediction_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_prediction_0_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_prediction_0_we0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_prediction_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mlp_kernel_fu_297_prediction_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mlp_kernel_fu_297_prediction_1_ce0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_prediction_1_we0 : STD_LOGIC;
    signal grp_mlp_kernel_fu_297_prediction_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_275 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_286 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_mlp_kernel_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call0 : BOOLEAN;
    signal zext_ln394_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln403_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln394_fu_339_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_fu_343_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln4_fu_381_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal regslice_both_in_V_U_apdone_blk : STD_LOGIC;
    signal in_V_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_TVALID_int : STD_LOGIC;
    signal in_V_TREADY_int : STD_LOGIC;
    signal regslice_both_in_V_U_ack_in : STD_LOGIC;
    signal out_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal out_V_TVALID_int : STD_LOGIC;
    signal out_V_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_U_vld_out : STD_LOGIC;

    component mlp_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sample_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_0_ce0 : OUT STD_LOGIC;
        sample_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_1_ce0 : OUT STD_LOGIC;
        sample_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_2_ce0 : OUT STD_LOGIC;
        sample_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_3_ce0 : OUT STD_LOGIC;
        sample_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_4_ce0 : OUT STD_LOGIC;
        sample_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_5_ce0 : OUT STD_LOGIC;
        sample_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_6_ce0 : OUT STD_LOGIC;
        sample_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sample_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sample_7_ce0 : OUT STD_LOGIC;
        sample_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        prediction_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        prediction_0_ce0 : OUT STD_LOGIC;
        prediction_0_we0 : OUT STD_LOGIC;
        prediction_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        prediction_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        prediction_1_ce0 : OUT STD_LOGIC;
        prediction_1_we0 : OUT STD_LOGIC;
        prediction_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mlp_sample_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_prediction_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    sample_0_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_0_address0,
        ce0 => sample_0_ce0,
        we0 => sample_0_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_0_q0);

    sample_1_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_1_address0,
        ce0 => sample_1_ce0,
        we0 => sample_1_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_1_q0);

    sample_2_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_2_address0,
        ce0 => sample_2_ce0,
        we0 => sample_2_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_2_q0);

    sample_3_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_3_address0,
        ce0 => sample_3_ce0,
        we0 => sample_3_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_3_q0);

    sample_4_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_4_address0,
        ce0 => sample_4_ce0,
        we0 => sample_4_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_4_q0);

    sample_5_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_5_address0,
        ce0 => sample_5_ce0,
        we0 => sample_5_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_5_q0);

    sample_6_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_6_address0,
        ce0 => sample_6_ce0,
        we0 => sample_6_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_6_q0);

    sample_7_U : component mlp_sample_0
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sample_7_address0,
        ce0 => sample_7_ce0,
        we0 => sample_7_we0,
        d0 => in_V_TDATA_int,
        q0 => sample_7_q0);

    prediction_0_U : component mlp_prediction_0
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => prediction_0_address0,
        ce0 => prediction_0_ce0,
        we0 => prediction_0_we0,
        d0 => grp_mlp_kernel_fu_297_prediction_0_d0,
        q0 => prediction_0_q0);

    prediction_1_U : component mlp_prediction_0
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => prediction_1_address0,
        ce0 => prediction_1_ce0,
        we0 => prediction_1_we0,
        d0 => grp_mlp_kernel_fu_297_prediction_1_d0,
        q0 => prediction_1_q0);

    grp_mlp_kernel_fu_297 : component mlp_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mlp_kernel_fu_297_ap_start,
        ap_done => grp_mlp_kernel_fu_297_ap_done,
        ap_idle => grp_mlp_kernel_fu_297_ap_idle,
        ap_ready => grp_mlp_kernel_fu_297_ap_ready,
        sample_0_address0 => grp_mlp_kernel_fu_297_sample_0_address0,
        sample_0_ce0 => grp_mlp_kernel_fu_297_sample_0_ce0,
        sample_0_q0 => sample_0_q0,
        sample_1_address0 => grp_mlp_kernel_fu_297_sample_1_address0,
        sample_1_ce0 => grp_mlp_kernel_fu_297_sample_1_ce0,
        sample_1_q0 => sample_1_q0,
        sample_2_address0 => grp_mlp_kernel_fu_297_sample_2_address0,
        sample_2_ce0 => grp_mlp_kernel_fu_297_sample_2_ce0,
        sample_2_q0 => sample_2_q0,
        sample_3_address0 => grp_mlp_kernel_fu_297_sample_3_address0,
        sample_3_ce0 => grp_mlp_kernel_fu_297_sample_3_ce0,
        sample_3_q0 => sample_3_q0,
        sample_4_address0 => grp_mlp_kernel_fu_297_sample_4_address0,
        sample_4_ce0 => grp_mlp_kernel_fu_297_sample_4_ce0,
        sample_4_q0 => sample_4_q0,
        sample_5_address0 => grp_mlp_kernel_fu_297_sample_5_address0,
        sample_5_ce0 => grp_mlp_kernel_fu_297_sample_5_ce0,
        sample_5_q0 => sample_5_q0,
        sample_6_address0 => grp_mlp_kernel_fu_297_sample_6_address0,
        sample_6_ce0 => grp_mlp_kernel_fu_297_sample_6_ce0,
        sample_6_q0 => sample_6_q0,
        sample_7_address0 => grp_mlp_kernel_fu_297_sample_7_address0,
        sample_7_ce0 => grp_mlp_kernel_fu_297_sample_7_ce0,
        sample_7_q0 => sample_7_q0,
        prediction_0_address0 => grp_mlp_kernel_fu_297_prediction_0_address0,
        prediction_0_ce0 => grp_mlp_kernel_fu_297_prediction_0_ce0,
        prediction_0_we0 => grp_mlp_kernel_fu_297_prediction_0_we0,
        prediction_0_d0 => grp_mlp_kernel_fu_297_prediction_0_d0,
        prediction_1_address0 => grp_mlp_kernel_fu_297_prediction_1_address0,
        prediction_1_ce0 => grp_mlp_kernel_fu_297_prediction_1_ce0,
        prediction_1_we0 => grp_mlp_kernel_fu_297_prediction_1_we0,
        prediction_1_d0 => grp_mlp_kernel_fu_297_prediction_1_d0);

    regslice_both_in_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_V_TDATA,
        vld_in => in_V_TVALID,
        ack_in => regslice_both_in_V_U_ack_in,
        data_out => in_V_TDATA_int,
        vld_out => in_V_TVALID_int,
        ack_out => in_V_TREADY_int,
        apdone_blk => regslice_both_in_V_U_apdone_blk);

    regslice_both_out_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_V_TDATA_int,
        vld_in => out_V_TVALID_int,
        ack_in => out_V_TREADY_int,
        data_out => out_V_TDATA,
        vld_out => regslice_both_out_V_U_vld_out,
        ack_out => out_V_TREADY,
        apdone_blk => regslice_both_out_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mlp_kernel_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mlp_kernel_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_mlp_kernel_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mlp_kernel_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_mlp_kernel_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_0_reg_286 <= i_reg_419;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_mlp_kernel_fu_297_ap_done = ap_const_logic_1))) then 
                i1_0_reg_286 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_275 <= i_2_reg_408;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_275 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_2_reg_408 <= i_2_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_reg_419 <= i_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln401_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                trunc_ln403_reg_424 <= trunc_ln403_fu_377_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln392_fu_327_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, regslice_both_out_V_U_apdone_blk, icmp_ln401_fu_365_p2, grp_mlp_kernel_fu_297_ap_done, ap_CS_fsm_state4, in_V_TVALID_int, out_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_mlp_kernel_fu_297_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln401_fu_365_p2 = ap_const_lv1_1) and (regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln401_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((out_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((out_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state2_assign_proc : process(icmp_ln392_fu_327_p2, in_V_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call0_assign_proc : process(icmp_ln392_fu_327_p2, in_V_TVALID_int)
    begin
                ap_block_state2_ignore_call0 <= ((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_out_V_U_apdone_blk, icmp_ln401_fu_365_p2)
    begin
        if (((icmp_ln401_fu_365_p2 = ap_const_lv1_1) and (regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_out_V_U_apdone_blk, icmp_ln401_fu_365_p2)
    begin
        if (((icmp_ln401_fu_365_p2 = ap_const_lv1_1) and (regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_mlp_kernel_fu_297_ap_start <= grp_mlp_kernel_fu_297_ap_start_reg;
    i_2_fu_333_p2 <= std_logic_vector(unsigned(i_0_reg_275) + unsigned(ap_const_lv7_1));
    i_fu_371_p2 <= std_logic_vector(unsigned(i1_0_reg_286) + unsigned(ap_const_lv4_1));
    icmp_ln392_fu_327_p2 <= "1" when (i_0_reg_275 = ap_const_lv7_40) else "0";
    icmp_ln401_fu_365_p2 <= "1" when (i1_0_reg_286 = ap_const_lv4_A) else "0";

    in_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, in_V_TVALID_int)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_TDATA_blk_n <= in_V_TVALID_int;
        else 
            in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_TREADY_assign_proc : process(in_V_TVALID, regslice_both_in_V_U_ack_in)
    begin
        if (((regslice_both_in_V_U_ack_in = ap_const_logic_1) and (in_V_TVALID = ap_const_logic_1))) then 
            in_V_TREADY <= ap_const_logic_1;
        else 
            in_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_V_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_TREADY_int <= ap_const_logic_1;
        else 
            in_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln4_fu_381_p4 <= i1_0_reg_286(3 downto 1);
    lshr_ln_fu_343_p4 <= i_0_reg_275(6 downto 3);

    out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, out_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_TDATA_blk_n <= out_V_TREADY_int;
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_TDATA_int <= 
        prediction_1_q0 when (trunc_ln403_reg_424(0) = '1') else 
        prediction_0_q0;
    out_V_TVALID <= regslice_both_out_V_U_vld_out;

    out_V_TVALID_int_assign_proc : process(ap_CS_fsm_state6, out_V_TREADY_int)
    begin
        if (((out_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_V_TVALID_int <= ap_const_logic_1;
        else 
            out_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    prediction_0_address0_assign_proc : process(ap_CS_fsm_state5, grp_mlp_kernel_fu_297_prediction_0_address0, ap_CS_fsm_state4, zext_ln403_fu_391_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prediction_0_address0 <= zext_ln403_fu_391_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prediction_0_address0 <= grp_mlp_kernel_fu_297_prediction_0_address0;
        else 
            prediction_0_address0 <= "XXX";
        end if; 
    end process;


    prediction_0_ce0_assign_proc : process(ap_CS_fsm_state5, regslice_both_out_V_U_apdone_blk, grp_mlp_kernel_fu_297_prediction_0_ce0, ap_CS_fsm_state4)
    begin
        if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            prediction_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prediction_0_ce0 <= grp_mlp_kernel_fu_297_prediction_0_ce0;
        else 
            prediction_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_0_we0_assign_proc : process(grp_mlp_kernel_fu_297_prediction_0_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prediction_0_we0 <= grp_mlp_kernel_fu_297_prediction_0_we0;
        else 
            prediction_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_1_address0_assign_proc : process(ap_CS_fsm_state5, grp_mlp_kernel_fu_297_prediction_1_address0, ap_CS_fsm_state4, zext_ln403_fu_391_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prediction_1_address0 <= zext_ln403_fu_391_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prediction_1_address0 <= grp_mlp_kernel_fu_297_prediction_1_address0;
        else 
            prediction_1_address0 <= "XXX";
        end if; 
    end process;


    prediction_1_ce0_assign_proc : process(ap_CS_fsm_state5, regslice_both_out_V_U_apdone_blk, grp_mlp_kernel_fu_297_prediction_1_ce0, ap_CS_fsm_state4)
    begin
        if (((regslice_both_out_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            prediction_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prediction_1_ce0 <= grp_mlp_kernel_fu_297_prediction_1_ce0;
        else 
            prediction_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_1_we0_assign_proc : process(grp_mlp_kernel_fu_297_prediction_1_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prediction_1_we0 <= grp_mlp_kernel_fu_297_prediction_1_we0;
        else 
            prediction_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_0_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_0_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_0_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_0_address0 <= grp_mlp_kernel_fu_297_sample_0_address0;
        else 
            sample_0_address0 <= "XXX";
        end if; 
    end process;


    sample_0_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_0_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_0_ce0 <= grp_mlp_kernel_fu_297_sample_0_ce0;
        else 
            sample_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_0_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_0_we0 <= ap_const_logic_1;
        else 
            sample_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_1_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_1_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_1_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_1_address0 <= grp_mlp_kernel_fu_297_sample_1_address0;
        else 
            sample_1_address0 <= "XXX";
        end if; 
    end process;


    sample_1_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_1_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_1_ce0 <= grp_mlp_kernel_fu_297_sample_1_ce0;
        else 
            sample_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_1_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_1_we0 <= ap_const_logic_1;
        else 
            sample_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_2_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_2_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_2_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_2_address0 <= grp_mlp_kernel_fu_297_sample_2_address0;
        else 
            sample_2_address0 <= "XXX";
        end if; 
    end process;


    sample_2_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_2_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_2_ce0 <= grp_mlp_kernel_fu_297_sample_2_ce0;
        else 
            sample_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_2_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_2_we0 <= ap_const_logic_1;
        else 
            sample_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_3_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_3_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_3_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_3_address0 <= grp_mlp_kernel_fu_297_sample_3_address0;
        else 
            sample_3_address0 <= "XXX";
        end if; 
    end process;


    sample_3_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_3_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_3_ce0 <= grp_mlp_kernel_fu_297_sample_3_ce0;
        else 
            sample_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_3_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_3_we0 <= ap_const_logic_1;
        else 
            sample_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_4_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_4_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_4_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_4_address0 <= grp_mlp_kernel_fu_297_sample_4_address0;
        else 
            sample_4_address0 <= "XXX";
        end if; 
    end process;


    sample_4_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_4_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_4_ce0 <= grp_mlp_kernel_fu_297_sample_4_ce0;
        else 
            sample_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_4_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_4_we0 <= ap_const_logic_1;
        else 
            sample_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_5_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_5_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_5_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_5_address0 <= grp_mlp_kernel_fu_297_sample_5_address0;
        else 
            sample_5_address0 <= "XXX";
        end if; 
    end process;


    sample_5_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_5_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_5_ce0 <= grp_mlp_kernel_fu_297_sample_5_ce0;
        else 
            sample_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_5_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_5_we0 <= ap_const_logic_1;
        else 
            sample_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_6_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_6_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_6_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_6_address0 <= grp_mlp_kernel_fu_297_sample_6_address0;
        else 
            sample_6_address0 <= "XXX";
        end if; 
    end process;


    sample_6_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_6_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_6_ce0 <= grp_mlp_kernel_fu_297_sample_6_ce0;
        else 
            sample_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_6_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_6_we0 <= ap_const_logic_1;
        else 
            sample_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_7_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_7_address0, ap_CS_fsm_state4, zext_ln394_fu_353_p1, trunc_ln394_fu_339_p1)
    begin
        if (((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_7_address0 <= zext_ln394_fu_353_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_7_address0 <= grp_mlp_kernel_fu_297_sample_7_address0;
        else 
            sample_7_address0 <= "XXX";
        end if; 
    end process;


    sample_7_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, grp_mlp_kernel_fu_297_sample_7_ce0, ap_CS_fsm_state4, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_7_ce0 <= grp_mlp_kernel_fu_297_sample_7_ce0;
        else 
            sample_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_7_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln392_fu_327_p2, trunc_ln394_fu_339_p1, in_V_TVALID_int)
    begin
        if ((not(((icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (in_V_TVALID_int = ap_const_logic_0))) and (icmp_ln392_fu_327_p2 = ap_const_lv1_0) and (trunc_ln394_fu_339_p1 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sample_7_we0 <= ap_const_logic_1;
        else 
            sample_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln394_fu_339_p1 <= i_0_reg_275(3 - 1 downto 0);
    trunc_ln403_fu_377_p1 <= i1_0_reg_286(1 - 1 downto 0);
    zext_ln394_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_343_p4),64));
    zext_ln403_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_381_p4),64));
end behav;
