// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mlp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mlp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mlp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> mlp::ap_ST_fsm_state1 = "1";
const sc_lv<7> mlp::ap_ST_fsm_state2 = "10";
const sc_lv<7> mlp::ap_ST_fsm_state3 = "100";
const sc_lv<7> mlp::ap_ST_fsm_state4 = "1000";
const sc_lv<7> mlp::ap_ST_fsm_state5 = "10000";
const sc_lv<7> mlp::ap_ST_fsm_state6 = "100000";
const sc_lv<7> mlp::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> mlp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mlp::ap_const_lv32_1 = "1";
const sc_lv<1> mlp::ap_const_lv1_0 = "0";
const sc_lv<32> mlp::ap_const_lv32_5 = "101";
const sc_lv<32> mlp::ap_const_lv32_6 = "110";
const sc_lv<32> mlp::ap_const_lv32_4 = "100";
const sc_lv<7> mlp::ap_const_lv7_0 = "0000000";
const sc_lv<32> mlp::ap_const_lv32_2 = "10";
const sc_lv<4> mlp::ap_const_lv4_0 = "0000";
const sc_lv<32> mlp::ap_const_lv32_3 = "11";
const sc_lv<1> mlp::ap_const_lv1_1 = "1";
const sc_lv<3> mlp::ap_const_lv3_6 = "110";
const sc_lv<3> mlp::ap_const_lv3_5 = "101";
const sc_lv<3> mlp::ap_const_lv3_4 = "100";
const sc_lv<3> mlp::ap_const_lv3_3 = "11";
const sc_lv<3> mlp::ap_const_lv3_2 = "10";
const sc_lv<3> mlp::ap_const_lv3_1 = "1";
const sc_lv<3> mlp::ap_const_lv3_0 = "000";
const sc_lv<3> mlp::ap_const_lv3_7 = "111";
const sc_lv<7> mlp::ap_const_lv7_40 = "1000000";
const sc_lv<7> mlp::ap_const_lv7_1 = "1";
const sc_lv<4> mlp::ap_const_lv4_A = "1010";
const sc_lv<4> mlp::ap_const_lv4_1 = "1";
const bool mlp::ap_const_boolean_1 = true;

mlp::mlp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sample_0_U = new mlp_sample_0("sample_0_U");
    sample_0_U->clk(ap_clk);
    sample_0_U->reset(ap_rst_n_inv);
    sample_0_U->address0(sample_0_address0);
    sample_0_U->ce0(sample_0_ce0);
    sample_0_U->we0(sample_0_we0);
    sample_0_U->d0(in_V_TDATA_int);
    sample_0_U->q0(sample_0_q0);
    sample_1_U = new mlp_sample_0("sample_1_U");
    sample_1_U->clk(ap_clk);
    sample_1_U->reset(ap_rst_n_inv);
    sample_1_U->address0(sample_1_address0);
    sample_1_U->ce0(sample_1_ce0);
    sample_1_U->we0(sample_1_we0);
    sample_1_U->d0(in_V_TDATA_int);
    sample_1_U->q0(sample_1_q0);
    sample_2_U = new mlp_sample_0("sample_2_U");
    sample_2_U->clk(ap_clk);
    sample_2_U->reset(ap_rst_n_inv);
    sample_2_U->address0(sample_2_address0);
    sample_2_U->ce0(sample_2_ce0);
    sample_2_U->we0(sample_2_we0);
    sample_2_U->d0(in_V_TDATA_int);
    sample_2_U->q0(sample_2_q0);
    sample_3_U = new mlp_sample_0("sample_3_U");
    sample_3_U->clk(ap_clk);
    sample_3_U->reset(ap_rst_n_inv);
    sample_3_U->address0(sample_3_address0);
    sample_3_U->ce0(sample_3_ce0);
    sample_3_U->we0(sample_3_we0);
    sample_3_U->d0(in_V_TDATA_int);
    sample_3_U->q0(sample_3_q0);
    sample_4_U = new mlp_sample_0("sample_4_U");
    sample_4_U->clk(ap_clk);
    sample_4_U->reset(ap_rst_n_inv);
    sample_4_U->address0(sample_4_address0);
    sample_4_U->ce0(sample_4_ce0);
    sample_4_U->we0(sample_4_we0);
    sample_4_U->d0(in_V_TDATA_int);
    sample_4_U->q0(sample_4_q0);
    sample_5_U = new mlp_sample_0("sample_5_U");
    sample_5_U->clk(ap_clk);
    sample_5_U->reset(ap_rst_n_inv);
    sample_5_U->address0(sample_5_address0);
    sample_5_U->ce0(sample_5_ce0);
    sample_5_U->we0(sample_5_we0);
    sample_5_U->d0(in_V_TDATA_int);
    sample_5_U->q0(sample_5_q0);
    sample_6_U = new mlp_sample_0("sample_6_U");
    sample_6_U->clk(ap_clk);
    sample_6_U->reset(ap_rst_n_inv);
    sample_6_U->address0(sample_6_address0);
    sample_6_U->ce0(sample_6_ce0);
    sample_6_U->we0(sample_6_we0);
    sample_6_U->d0(in_V_TDATA_int);
    sample_6_U->q0(sample_6_q0);
    sample_7_U = new mlp_sample_0("sample_7_U");
    sample_7_U->clk(ap_clk);
    sample_7_U->reset(ap_rst_n_inv);
    sample_7_U->address0(sample_7_address0);
    sample_7_U->ce0(sample_7_ce0);
    sample_7_U->we0(sample_7_we0);
    sample_7_U->d0(in_V_TDATA_int);
    sample_7_U->q0(sample_7_q0);
    prediction_0_U = new mlp_prediction_0("prediction_0_U");
    prediction_0_U->clk(ap_clk);
    prediction_0_U->reset(ap_rst_n_inv);
    prediction_0_U->address0(prediction_0_address0);
    prediction_0_U->ce0(prediction_0_ce0);
    prediction_0_U->we0(prediction_0_we0);
    prediction_0_U->d0(grp_mlp_kernel_fu_297_prediction_0_d0);
    prediction_0_U->q0(prediction_0_q0);
    prediction_1_U = new mlp_prediction_0("prediction_1_U");
    prediction_1_U->clk(ap_clk);
    prediction_1_U->reset(ap_rst_n_inv);
    prediction_1_U->address0(prediction_1_address0);
    prediction_1_U->ce0(prediction_1_ce0);
    prediction_1_U->we0(prediction_1_we0);
    prediction_1_U->d0(grp_mlp_kernel_fu_297_prediction_1_d0);
    prediction_1_U->q0(prediction_1_q0);
    grp_mlp_kernel_fu_297 = new mlp_kernel("grp_mlp_kernel_fu_297");
    grp_mlp_kernel_fu_297->ap_clk(ap_clk);
    grp_mlp_kernel_fu_297->ap_rst(ap_rst_n_inv);
    grp_mlp_kernel_fu_297->ap_start(grp_mlp_kernel_fu_297_ap_start);
    grp_mlp_kernel_fu_297->ap_done(grp_mlp_kernel_fu_297_ap_done);
    grp_mlp_kernel_fu_297->ap_idle(grp_mlp_kernel_fu_297_ap_idle);
    grp_mlp_kernel_fu_297->ap_ready(grp_mlp_kernel_fu_297_ap_ready);
    grp_mlp_kernel_fu_297->sample_0_address0(grp_mlp_kernel_fu_297_sample_0_address0);
    grp_mlp_kernel_fu_297->sample_0_ce0(grp_mlp_kernel_fu_297_sample_0_ce0);
    grp_mlp_kernel_fu_297->sample_0_q0(sample_0_q0);
    grp_mlp_kernel_fu_297->sample_1_address0(grp_mlp_kernel_fu_297_sample_1_address0);
    grp_mlp_kernel_fu_297->sample_1_ce0(grp_mlp_kernel_fu_297_sample_1_ce0);
    grp_mlp_kernel_fu_297->sample_1_q0(sample_1_q0);
    grp_mlp_kernel_fu_297->sample_2_address0(grp_mlp_kernel_fu_297_sample_2_address0);
    grp_mlp_kernel_fu_297->sample_2_ce0(grp_mlp_kernel_fu_297_sample_2_ce0);
    grp_mlp_kernel_fu_297->sample_2_q0(sample_2_q0);
    grp_mlp_kernel_fu_297->sample_3_address0(grp_mlp_kernel_fu_297_sample_3_address0);
    grp_mlp_kernel_fu_297->sample_3_ce0(grp_mlp_kernel_fu_297_sample_3_ce0);
    grp_mlp_kernel_fu_297->sample_3_q0(sample_3_q0);
    grp_mlp_kernel_fu_297->sample_4_address0(grp_mlp_kernel_fu_297_sample_4_address0);
    grp_mlp_kernel_fu_297->sample_4_ce0(grp_mlp_kernel_fu_297_sample_4_ce0);
    grp_mlp_kernel_fu_297->sample_4_q0(sample_4_q0);
    grp_mlp_kernel_fu_297->sample_5_address0(grp_mlp_kernel_fu_297_sample_5_address0);
    grp_mlp_kernel_fu_297->sample_5_ce0(grp_mlp_kernel_fu_297_sample_5_ce0);
    grp_mlp_kernel_fu_297->sample_5_q0(sample_5_q0);
    grp_mlp_kernel_fu_297->sample_6_address0(grp_mlp_kernel_fu_297_sample_6_address0);
    grp_mlp_kernel_fu_297->sample_6_ce0(grp_mlp_kernel_fu_297_sample_6_ce0);
    grp_mlp_kernel_fu_297->sample_6_q0(sample_6_q0);
    grp_mlp_kernel_fu_297->sample_7_address0(grp_mlp_kernel_fu_297_sample_7_address0);
    grp_mlp_kernel_fu_297->sample_7_ce0(grp_mlp_kernel_fu_297_sample_7_ce0);
    grp_mlp_kernel_fu_297->sample_7_q0(sample_7_q0);
    grp_mlp_kernel_fu_297->prediction_0_address0(grp_mlp_kernel_fu_297_prediction_0_address0);
    grp_mlp_kernel_fu_297->prediction_0_ce0(grp_mlp_kernel_fu_297_prediction_0_ce0);
    grp_mlp_kernel_fu_297->prediction_0_we0(grp_mlp_kernel_fu_297_prediction_0_we0);
    grp_mlp_kernel_fu_297->prediction_0_d0(grp_mlp_kernel_fu_297_prediction_0_d0);
    grp_mlp_kernel_fu_297->prediction_1_address0(grp_mlp_kernel_fu_297_prediction_1_address0);
    grp_mlp_kernel_fu_297->prediction_1_ce0(grp_mlp_kernel_fu_297_prediction_1_ce0);
    grp_mlp_kernel_fu_297->prediction_1_we0(grp_mlp_kernel_fu_297_prediction_1_we0);
    grp_mlp_kernel_fu_297->prediction_1_d0(grp_mlp_kernel_fu_297_prediction_1_d0);
    regslice_both_in_V_U = new regslice_both<8>("regslice_both_in_V_U");
    regslice_both_in_V_U->ap_clk(ap_clk);
    regslice_both_in_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_in_V_U->data_in(in_V_TDATA);
    regslice_both_in_V_U->vld_in(in_V_TVALID);
    regslice_both_in_V_U->ack_in(regslice_both_in_V_U_ack_in);
    regslice_both_in_V_U->data_out(in_V_TDATA_int);
    regslice_both_in_V_U->vld_out(in_V_TVALID_int);
    regslice_both_in_V_U->ack_out(in_V_TREADY_int);
    regslice_both_in_V_U->apdone_blk(regslice_both_in_V_U_apdone_blk);
    regslice_both_out_V_U = new regslice_both<16>("regslice_both_out_V_U");
    regslice_both_out_V_U->ap_clk(ap_clk);
    regslice_both_out_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_out_V_U->data_in(out_V_TDATA_int);
    regslice_both_out_V_U->vld_in(out_V_TVALID_int);
    regslice_both_out_V_U->ack_in(out_V_TREADY_int);
    regslice_both_out_V_U->data_out(out_V_TDATA);
    regslice_both_out_V_U->vld_out(regslice_both_out_V_U_vld_out);
    regslice_both_out_V_U->ack_out(out_V_TREADY);
    regslice_both_out_V_U->apdone_blk(regslice_both_out_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_ap_block_state2_ignore_call0);
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_out_V_U_apdone_blk );
    sensitive << ( icmp_ln401_fu_365_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_out_V_U_apdone_blk );
    sensitive << ( icmp_ln401_fu_365_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_mlp_kernel_fu_297_ap_start);
    sensitive << ( grp_mlp_kernel_fu_297_ap_start_reg );

    SC_METHOD(thread_i_2_fu_333_p2);
    sensitive << ( i_0_reg_275 );

    SC_METHOD(thread_i_fu_371_p2);
    sensitive << ( i1_0_reg_286 );

    SC_METHOD(thread_icmp_ln392_fu_327_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( i_0_reg_275 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_icmp_ln401_fu_365_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_out_V_U_apdone_blk );
    sensitive << ( i1_0_reg_286 );

    SC_METHOD(thread_in_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_in_V_TREADY);
    sensitive << ( in_V_TVALID );
    sensitive << ( regslice_both_in_V_U_ack_in );

    SC_METHOD(thread_in_V_TREADY_int);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_lshr_ln4_fu_381_p4);
    sensitive << ( i1_0_reg_286 );

    SC_METHOD(thread_lshr_ln_fu_343_p4);
    sensitive << ( i_0_reg_275 );

    SC_METHOD(thread_out_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( out_V_TREADY_int );

    SC_METHOD(thread_out_V_TDATA_int);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( trunc_ln403_reg_424 );
    sensitive << ( prediction_0_q0 );
    sensitive << ( prediction_1_q0 );

    SC_METHOD(thread_out_V_TVALID);
    sensitive << ( regslice_both_out_V_U_vld_out );

    SC_METHOD(thread_out_V_TVALID_int);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( out_V_TREADY_int );

    SC_METHOD(thread_prediction_0_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_mlp_kernel_fu_297_prediction_0_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln403_fu_391_p1 );

    SC_METHOD(thread_prediction_0_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_out_V_U_apdone_blk );
    sensitive << ( grp_mlp_kernel_fu_297_prediction_0_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_prediction_0_we0);
    sensitive << ( grp_mlp_kernel_fu_297_prediction_0_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_prediction_1_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_mlp_kernel_fu_297_prediction_1_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln403_fu_391_p1 );

    SC_METHOD(thread_prediction_1_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_out_V_U_apdone_blk );
    sensitive << ( grp_mlp_kernel_fu_297_prediction_1_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_prediction_1_we0);
    sensitive << ( grp_mlp_kernel_fu_297_prediction_1_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sample_0_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_0_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_0_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_0_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_0_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_1_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_1_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_1_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_1_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_1_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_2_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_2_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_2_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_2_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_2_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_3_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_3_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_3_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_3_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_3_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_4_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_4_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_4_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_4_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_4_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_5_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_5_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_5_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_5_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_5_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_6_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_6_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_6_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_6_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_6_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_7_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_7_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln394_fu_353_p1 );
    sensitive << ( trunc_ln394_fu_339_p1 );

    SC_METHOD(thread_sample_7_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_sample_7_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_sample_7_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( trunc_ln394_fu_339_p1 );
    sensitive << ( in_V_TVALID_int );

    SC_METHOD(thread_trunc_ln394_fu_339_p1);
    sensitive << ( i_0_reg_275 );

    SC_METHOD(thread_trunc_ln403_fu_377_p1);
    sensitive << ( i1_0_reg_286 );

    SC_METHOD(thread_zext_ln394_fu_353_p1);
    sensitive << ( lshr_ln_fu_343_p4 );

    SC_METHOD(thread_zext_ln403_fu_391_p1);
    sensitive << ( lshr_ln4_fu_381_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln392_fu_327_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_out_V_U_apdone_blk );
    sensitive << ( icmp_ln401_fu_365_p2 );
    sensitive << ( grp_mlp_kernel_fu_297_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( in_V_TVALID_int );
    sensitive << ( out_V_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    grp_mlp_kernel_fu_297_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mlp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_TDATA, "(port)in_V_TDATA");
    sc_trace(mVcdFile, in_V_TVALID, "(port)in_V_TVALID");
    sc_trace(mVcdFile, in_V_TREADY, "(port)in_V_TREADY");
    sc_trace(mVcdFile, out_V_TDATA, "(port)out_V_TDATA");
    sc_trace(mVcdFile, out_V_TVALID, "(port)out_V_TVALID");
    sc_trace(mVcdFile, out_V_TREADY, "(port)out_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_TDATA_blk_n, "in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln392_fu_327_p2, "icmp_ln392_fu_327_p2");
    sc_trace(mVcdFile, out_V_TDATA_blk_n, "out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_2_fu_333_p2, "i_2_fu_333_p2");
    sc_trace(mVcdFile, i_2_reg_408, "i_2_reg_408");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_fu_371_p2, "i_fu_371_p2");
    sc_trace(mVcdFile, i_reg_419, "i_reg_419");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, regslice_both_out_V_U_apdone_blk, "regslice_both_out_V_U_apdone_blk");
    sc_trace(mVcdFile, trunc_ln403_fu_377_p1, "trunc_ln403_fu_377_p1");
    sc_trace(mVcdFile, trunc_ln403_reg_424, "trunc_ln403_reg_424");
    sc_trace(mVcdFile, icmp_ln401_fu_365_p2, "icmp_ln401_fu_365_p2");
    sc_trace(mVcdFile, sample_0_address0, "sample_0_address0");
    sc_trace(mVcdFile, sample_0_ce0, "sample_0_ce0");
    sc_trace(mVcdFile, sample_0_we0, "sample_0_we0");
    sc_trace(mVcdFile, sample_0_q0, "sample_0_q0");
    sc_trace(mVcdFile, sample_1_address0, "sample_1_address0");
    sc_trace(mVcdFile, sample_1_ce0, "sample_1_ce0");
    sc_trace(mVcdFile, sample_1_we0, "sample_1_we0");
    sc_trace(mVcdFile, sample_1_q0, "sample_1_q0");
    sc_trace(mVcdFile, sample_2_address0, "sample_2_address0");
    sc_trace(mVcdFile, sample_2_ce0, "sample_2_ce0");
    sc_trace(mVcdFile, sample_2_we0, "sample_2_we0");
    sc_trace(mVcdFile, sample_2_q0, "sample_2_q0");
    sc_trace(mVcdFile, sample_3_address0, "sample_3_address0");
    sc_trace(mVcdFile, sample_3_ce0, "sample_3_ce0");
    sc_trace(mVcdFile, sample_3_we0, "sample_3_we0");
    sc_trace(mVcdFile, sample_3_q0, "sample_3_q0");
    sc_trace(mVcdFile, sample_4_address0, "sample_4_address0");
    sc_trace(mVcdFile, sample_4_ce0, "sample_4_ce0");
    sc_trace(mVcdFile, sample_4_we0, "sample_4_we0");
    sc_trace(mVcdFile, sample_4_q0, "sample_4_q0");
    sc_trace(mVcdFile, sample_5_address0, "sample_5_address0");
    sc_trace(mVcdFile, sample_5_ce0, "sample_5_ce0");
    sc_trace(mVcdFile, sample_5_we0, "sample_5_we0");
    sc_trace(mVcdFile, sample_5_q0, "sample_5_q0");
    sc_trace(mVcdFile, sample_6_address0, "sample_6_address0");
    sc_trace(mVcdFile, sample_6_ce0, "sample_6_ce0");
    sc_trace(mVcdFile, sample_6_we0, "sample_6_we0");
    sc_trace(mVcdFile, sample_6_q0, "sample_6_q0");
    sc_trace(mVcdFile, sample_7_address0, "sample_7_address0");
    sc_trace(mVcdFile, sample_7_ce0, "sample_7_ce0");
    sc_trace(mVcdFile, sample_7_we0, "sample_7_we0");
    sc_trace(mVcdFile, sample_7_q0, "sample_7_q0");
    sc_trace(mVcdFile, prediction_0_address0, "prediction_0_address0");
    sc_trace(mVcdFile, prediction_0_ce0, "prediction_0_ce0");
    sc_trace(mVcdFile, prediction_0_we0, "prediction_0_we0");
    sc_trace(mVcdFile, prediction_0_q0, "prediction_0_q0");
    sc_trace(mVcdFile, prediction_1_address0, "prediction_1_address0");
    sc_trace(mVcdFile, prediction_1_ce0, "prediction_1_ce0");
    sc_trace(mVcdFile, prediction_1_we0, "prediction_1_we0");
    sc_trace(mVcdFile, prediction_1_q0, "prediction_1_q0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_ap_start, "grp_mlp_kernel_fu_297_ap_start");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_ap_done, "grp_mlp_kernel_fu_297_ap_done");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_ap_idle, "grp_mlp_kernel_fu_297_ap_idle");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_ap_ready, "grp_mlp_kernel_fu_297_ap_ready");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_0_address0, "grp_mlp_kernel_fu_297_sample_0_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_0_ce0, "grp_mlp_kernel_fu_297_sample_0_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_1_address0, "grp_mlp_kernel_fu_297_sample_1_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_1_ce0, "grp_mlp_kernel_fu_297_sample_1_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_2_address0, "grp_mlp_kernel_fu_297_sample_2_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_2_ce0, "grp_mlp_kernel_fu_297_sample_2_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_3_address0, "grp_mlp_kernel_fu_297_sample_3_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_3_ce0, "grp_mlp_kernel_fu_297_sample_3_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_4_address0, "grp_mlp_kernel_fu_297_sample_4_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_4_ce0, "grp_mlp_kernel_fu_297_sample_4_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_5_address0, "grp_mlp_kernel_fu_297_sample_5_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_5_ce0, "grp_mlp_kernel_fu_297_sample_5_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_6_address0, "grp_mlp_kernel_fu_297_sample_6_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_6_ce0, "grp_mlp_kernel_fu_297_sample_6_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_7_address0, "grp_mlp_kernel_fu_297_sample_7_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_sample_7_ce0, "grp_mlp_kernel_fu_297_sample_7_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_0_address0, "grp_mlp_kernel_fu_297_prediction_0_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_0_ce0, "grp_mlp_kernel_fu_297_prediction_0_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_0_we0, "grp_mlp_kernel_fu_297_prediction_0_we0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_0_d0, "grp_mlp_kernel_fu_297_prediction_0_d0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_1_address0, "grp_mlp_kernel_fu_297_prediction_1_address0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_1_ce0, "grp_mlp_kernel_fu_297_prediction_1_ce0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_1_we0, "grp_mlp_kernel_fu_297_prediction_1_we0");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_prediction_1_d0, "grp_mlp_kernel_fu_297_prediction_1_d0");
    sc_trace(mVcdFile, i_0_reg_275, "i_0_reg_275");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i1_0_reg_286, "i1_0_reg_286");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_mlp_kernel_fu_297_ap_start_reg, "grp_mlp_kernel_fu_297_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state2_ignore_call0, "ap_block_state2_ignore_call0");
    sc_trace(mVcdFile, zext_ln394_fu_353_p1, "zext_ln394_fu_353_p1");
    sc_trace(mVcdFile, zext_ln403_fu_391_p1, "zext_ln403_fu_391_p1");
    sc_trace(mVcdFile, trunc_ln394_fu_339_p1, "trunc_ln394_fu_339_p1");
    sc_trace(mVcdFile, lshr_ln_fu_343_p4, "lshr_ln_fu_343_p4");
    sc_trace(mVcdFile, lshr_ln4_fu_381_p4, "lshr_ln4_fu_381_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, regslice_both_in_V_U_apdone_blk, "regslice_both_in_V_U_apdone_blk");
    sc_trace(mVcdFile, in_V_TDATA_int, "in_V_TDATA_int");
    sc_trace(mVcdFile, in_V_TVALID_int, "in_V_TVALID_int");
    sc_trace(mVcdFile, in_V_TREADY_int, "in_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_in_V_U_ack_in, "regslice_both_in_V_U_ack_in");
    sc_trace(mVcdFile, out_V_TDATA_int, "out_V_TDATA_int");
    sc_trace(mVcdFile, out_V_TVALID_int, "out_V_TVALID_int");
    sc_trace(mVcdFile, out_V_TREADY_int, "out_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_out_V_U_vld_out, "regslice_both_out_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("mlp.hdltvin.dat");
    mHdltvoutHandle.open("mlp.hdltvout.dat");
}

mlp::~mlp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sample_0_U;
    delete sample_1_U;
    delete sample_2_U;
    delete sample_3_U;
    delete sample_4_U;
    delete sample_5_U;
    delete sample_6_U;
    delete sample_7_U;
    delete prediction_0_U;
    delete prediction_1_U;
    delete grp_mlp_kernel_fu_297;
    delete regslice_both_in_V_U;
    delete regslice_both_out_V_U;
}

void mlp::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_mlp_kernel_fu_297_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
            grp_mlp_kernel_fu_297_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mlp_kernel_fu_297_ap_ready.read())) {
            grp_mlp_kernel_fu_297_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(out_V_TREADY_int.read(), ap_const_logic_1))) {
        i1_0_reg_286 = i_reg_419.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(grp_mlp_kernel_fu_297_ap_done.read(), ap_const_logic_1))) {
        i1_0_reg_286 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_275 = i_2_reg_408.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_275 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        i_2_reg_408 = i_2_fu_333_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0))) {
        i_reg_419 = i_fu_371_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln401_fu_365_p2.read()))) {
        trunc_ln403_reg_424 = trunc_ln403_fu_377_p1.read();
    }
}

void mlp::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mlp::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mlp::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mlp::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mlp::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mlp::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mlp::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void mlp::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read()));
}

void mlp::thread_ap_block_state2_ignore_call0() {
    ap_block_state2_ignore_call0 = (esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read()));
}

void mlp::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln401_fu_365_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mlp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mlp::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln401_fu_365_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mlp::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mlp::thread_grp_mlp_kernel_fu_297_ap_start() {
    grp_mlp_kernel_fu_297_ap_start = grp_mlp_kernel_fu_297_ap_start_reg.read();
}

void mlp::thread_i_2_fu_333_p2() {
    i_2_fu_333_p2 = (!i_0_reg_275.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_275.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void mlp::thread_i_fu_371_p2() {
    i_fu_371_p2 = (!i1_0_reg_286.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i1_0_reg_286.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void mlp::thread_icmp_ln392_fu_327_p2() {
    icmp_ln392_fu_327_p2 = (!i_0_reg_275.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_275.read() == ap_const_lv7_40);
}

void mlp::thread_icmp_ln401_fu_365_p2() {
    icmp_ln401_fu_365_p2 = (!i1_0_reg_286.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i1_0_reg_286.read() == ap_const_lv4_A);
}

void mlp::thread_in_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0))) {
        in_V_TDATA_blk_n = in_V_TVALID_int.read();
    } else {
        in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mlp::thread_in_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_in_V_U_ack_in.read()))) {
        in_V_TREADY = ap_const_logic_1;
    } else {
        in_V_TREADY = ap_const_logic_0;
    }
}

void mlp::thread_in_V_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        in_V_TREADY_int = ap_const_logic_1;
    } else {
        in_V_TREADY_int = ap_const_logic_0;
    }
}

void mlp::thread_lshr_ln4_fu_381_p4() {
    lshr_ln4_fu_381_p4 = i1_0_reg_286.read().range(3, 1);
}

void mlp::thread_lshr_ln_fu_343_p4() {
    lshr_ln_fu_343_p4 = i_0_reg_275.read().range(6, 3);
}

void mlp::thread_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        out_V_TDATA_blk_n = out_V_TREADY_int.read();
    } else {
        out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void mlp::thread_out_V_TDATA_int() {
    out_V_TDATA_int = (!trunc_ln403_reg_424.read()[0].is_01())? sc_lv<16>(): ((trunc_ln403_reg_424.read()[0].to_bool())? prediction_1_q0.read(): prediction_0_q0.read());
}

void mlp::thread_out_V_TVALID() {
    out_V_TVALID = regslice_both_out_V_U_vld_out.read();
}

void mlp::thread_out_V_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(out_V_TREADY_int.read(), ap_const_logic_1))) {
        out_V_TVALID_int = ap_const_logic_1;
    } else {
        out_V_TVALID_int = ap_const_logic_0;
    }
}

void mlp::thread_prediction_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        prediction_0_address0 =  (sc_lv<3>) (zext_ln403_fu_391_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        prediction_0_address0 = grp_mlp_kernel_fu_297_prediction_0_address0.read();
    } else {
        prediction_0_address0 = "XXX";
    }
}

void mlp::thread_prediction_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0))) {
        prediction_0_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        prediction_0_ce0 = grp_mlp_kernel_fu_297_prediction_0_ce0.read();
    } else {
        prediction_0_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_prediction_0_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        prediction_0_we0 = grp_mlp_kernel_fu_297_prediction_0_we0.read();
    } else {
        prediction_0_we0 = ap_const_logic_0;
    }
}

void mlp::thread_prediction_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        prediction_1_address0 =  (sc_lv<3>) (zext_ln403_fu_391_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        prediction_1_address0 = grp_mlp_kernel_fu_297_prediction_1_address0.read();
    } else {
        prediction_1_address0 = "XXX";
    }
}

void mlp::thread_prediction_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0))) {
        prediction_1_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        prediction_1_ce0 = grp_mlp_kernel_fu_297_prediction_1_ce0.read();
    } else {
        prediction_1_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_prediction_1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        prediction_1_we0 = grp_mlp_kernel_fu_297_prediction_1_we0.read();
    } else {
        prediction_1_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_0_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_0))) {
        sample_0_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_0_address0 = grp_mlp_kernel_fu_297_sample_0_address0.read();
    } else {
        sample_0_address0 = "XXX";
    }
}

void mlp::thread_sample_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_0) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_0_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_0_ce0 = grp_mlp_kernel_fu_297_sample_0_ce0.read();
    } else {
        sample_0_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_0) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_0_we0 = ap_const_logic_1;
    } else {
        sample_0_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_1_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_1))) {
        sample_1_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_1_address0 = grp_mlp_kernel_fu_297_sample_1_address0.read();
    } else {
        sample_1_address0 = "XXX";
    }
}

void mlp::thread_sample_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_1) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_1_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_1_ce0 = grp_mlp_kernel_fu_297_sample_1_ce0.read();
    } else {
        sample_1_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_1) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_1_we0 = ap_const_logic_1;
    } else {
        sample_1_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_2_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_2))) {
        sample_2_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_2_address0 = grp_mlp_kernel_fu_297_sample_2_address0.read();
    } else {
        sample_2_address0 = "XXX";
    }
}

void mlp::thread_sample_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_2) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_2_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_2_ce0 = grp_mlp_kernel_fu_297_sample_2_ce0.read();
    } else {
        sample_2_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_2) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_2_we0 = ap_const_logic_1;
    } else {
        sample_2_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_3_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_3))) {
        sample_3_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_3_address0 = grp_mlp_kernel_fu_297_sample_3_address0.read();
    } else {
        sample_3_address0 = "XXX";
    }
}

void mlp::thread_sample_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_3) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_3_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_3_ce0 = grp_mlp_kernel_fu_297_sample_3_ce0.read();
    } else {
        sample_3_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_3_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_3) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_3_we0 = ap_const_logic_1;
    } else {
        sample_3_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_4_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_4))) {
        sample_4_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_4_address0 = grp_mlp_kernel_fu_297_sample_4_address0.read();
    } else {
        sample_4_address0 = "XXX";
    }
}

void mlp::thread_sample_4_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_4) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_4_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_4_ce0 = grp_mlp_kernel_fu_297_sample_4_ce0.read();
    } else {
        sample_4_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_4_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_4) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_4_we0 = ap_const_logic_1;
    } else {
        sample_4_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_5_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_5))) {
        sample_5_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_5_address0 = grp_mlp_kernel_fu_297_sample_5_address0.read();
    } else {
        sample_5_address0 = "XXX";
    }
}

void mlp::thread_sample_5_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_5) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_5_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_5_ce0 = grp_mlp_kernel_fu_297_sample_5_ce0.read();
    } else {
        sample_5_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_5_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_5) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_5_we0 = ap_const_logic_1;
    } else {
        sample_5_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_6_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_6))) {
        sample_6_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_6_address0 = grp_mlp_kernel_fu_297_sample_6_address0.read();
    } else {
        sample_6_address0 = "XXX";
    }
}

void mlp::thread_sample_6_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_6) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_6_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_6_ce0 = grp_mlp_kernel_fu_297_sample_6_ce0.read();
    } else {
        sample_6_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_6_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_6) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_6_we0 = ap_const_logic_1;
    } else {
        sample_6_we0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_7_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_7))) {
        sample_7_address0 =  (sc_lv<3>) (zext_ln394_fu_353_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_7_address0 = grp_mlp_kernel_fu_297_sample_7_address0.read();
    } else {
        sample_7_address0 = "XXX";
    }
}

void mlp::thread_sample_7_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_7) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_7_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sample_7_ce0 = grp_mlp_kernel_fu_297_sample_7_ce0.read();
    } else {
        sample_7_ce0 = ap_const_logic_0;
    }
}

void mlp::thread_sample_7_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,3,3>(trunc_ln394_fu_339_p1.read(), ap_const_lv3_7) && 
         !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
        sample_7_we0 = ap_const_logic_1;
    } else {
        sample_7_we0 = ap_const_logic_0;
    }
}

void mlp::thread_trunc_ln394_fu_339_p1() {
    trunc_ln394_fu_339_p1 = i_0_reg_275.read().range(3-1, 0);
}

void mlp::thread_trunc_ln403_fu_377_p1() {
    trunc_ln403_fu_377_p1 = i1_0_reg_286.read().range(1-1, 0);
}

void mlp::thread_zext_ln394_fu_353_p1() {
    zext_ln394_fu_353_p1 = esl_zext<64,4>(lshr_ln_fu_343_p4.read());
}

void mlp::thread_zext_ln403_fu_391_p1() {
    zext_ln403_fu_391_p1 = esl_zext<64,3>(lshr_ln4_fu_381_p4.read());
}

void mlp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(icmp_ln392_fu_327_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_mlp_kernel_fu_297_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln401_fu_365_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_both_out_V_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln401_fu_365_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(out_V_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(out_V_TREADY_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void mlp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_TDATA\" :  \"" << in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_TVALID\" :  \"" << in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_V_TREADY\" :  \"" << in_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TDATA\" :  \"" << out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TVALID\" :  \"" << out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_TREADY\" :  \"" << out_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

