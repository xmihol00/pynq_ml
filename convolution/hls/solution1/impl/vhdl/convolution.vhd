-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.137500,HLS_SYN_LAT=85652,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=6,HLS_SYN_FF=7320,HLS_SYN_LUT=10225,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal grp_write_output_fu_146_ap_start : STD_LOGIC;
    signal grp_write_output_fu_146_ap_done : STD_LOGIC;
    signal grp_write_output_fu_146_ap_idle : STD_LOGIC;
    signal grp_write_output_fu_146_ap_ready : STD_LOGIC;
    signal grp_write_output_fu_146_blue_output_V_read : STD_LOGIC;
    signal grp_write_output_fu_146_green_output_V_read : STD_LOGIC;
    signal grp_write_output_fu_146_red_output_V_read : STD_LOGIC;
    signal grp_write_output_fu_146_out_r_TDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_write_output_fu_146_out_r_TVALID : STD_LOGIC;
    signal grp_write_output_fu_146_out_r_TREADY : STD_LOGIC;
    signal grp_write_output_fu_146_out_r_TKEEP : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_output_fu_146_out_r_TSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_output_fu_146_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolve_fu_161_ap_start : STD_LOGIC;
    signal grp_convolve_fu_161_ap_done : STD_LOGIC;
    signal grp_convolve_fu_161_ap_idle : STD_LOGIC;
    signal grp_convolve_fu_161_ap_ready : STD_LOGIC;
    signal grp_convolve_fu_161_in_r_TREADY : STD_LOGIC;
    signal grp_convolve_fu_161_blue_output_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_convolve_fu_161_blue_output_V_write : STD_LOGIC;
    signal grp_convolve_fu_161_green_output_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_convolve_fu_161_green_output_V_write : STD_LOGIC;
    signal grp_convolve_fu_161_red_output_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_convolve_fu_161_red_output_V_write : STD_LOGIC;
    signal grp_write_output_fu_146_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal blue_output_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal blue_output_V_empty_n : STD_LOGIC;
    signal blue_output_V_read : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal green_output_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal green_output_V_empty_n : STD_LOGIC;
    signal green_output_V_read : STD_LOGIC;
    signal red_output_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal red_output_V_empty_n : STD_LOGIC;
    signal red_output_V_read : STD_LOGIC;
    signal grp_convolve_fu_161_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal blue_output_V_full_n : STD_LOGIC;
    signal blue_output_V_write : STD_LOGIC;
    signal green_output_V_full_n : STD_LOGIC;
    signal green_output_V_write : STD_LOGIC;
    signal red_output_V_full_n : STD_LOGIC;
    signal red_output_V_write : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_ack_in : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;

    component write_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        blue_output_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        blue_output_V_empty_n : IN STD_LOGIC;
        blue_output_V_read : OUT STD_LOGIC;
        green_output_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        green_output_V_empty_n : IN STD_LOGIC;
        green_output_V_read : OUT STD_LOGIC;
        red_output_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        red_output_V_empty_n : IN STD_LOGIC;
        red_output_V_read : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        blue_output_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        blue_output_V_full_n : IN STD_LOGIC;
        blue_output_V_write : OUT STD_LOGIC;
        green_output_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        green_output_V_full_n : IN STD_LOGIC;
        green_output_V_write : OUT STD_LOGIC;
        red_output_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        red_output_V_full_n : IN STD_LOGIC;
        red_output_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w16_d640_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component convolution_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    convolution_control_s_axi_U : component convolution_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    grp_write_output_fu_146 : component write_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_write_output_fu_146_ap_start,
        ap_done => grp_write_output_fu_146_ap_done,
        ap_idle => grp_write_output_fu_146_ap_idle,
        ap_ready => grp_write_output_fu_146_ap_ready,
        blue_output_V_dout => blue_output_V_dout,
        blue_output_V_empty_n => blue_output_V_empty_n,
        blue_output_V_read => grp_write_output_fu_146_blue_output_V_read,
        green_output_V_dout => green_output_V_dout,
        green_output_V_empty_n => green_output_V_empty_n,
        green_output_V_read => grp_write_output_fu_146_green_output_V_read,
        red_output_V_dout => red_output_V_dout,
        red_output_V_empty_n => red_output_V_empty_n,
        red_output_V_read => grp_write_output_fu_146_red_output_V_read,
        out_r_TDATA => grp_write_output_fu_146_out_r_TDATA,
        out_r_TVALID => grp_write_output_fu_146_out_r_TVALID,
        out_r_TREADY => grp_write_output_fu_146_out_r_TREADY,
        out_r_TKEEP => grp_write_output_fu_146_out_r_TKEEP,
        out_r_TSTRB => grp_write_output_fu_146_out_r_TSTRB,
        out_r_TLAST => grp_write_output_fu_146_out_r_TLAST);

    grp_convolve_fu_161 : component convolve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolve_fu_161_ap_start,
        ap_done => grp_convolve_fu_161_ap_done,
        ap_idle => grp_convolve_fu_161_ap_idle,
        ap_ready => grp_convolve_fu_161_ap_ready,
        in_r_TDATA => in_r_TDATA_int,
        in_r_TVALID => in_r_TVALID_int,
        in_r_TREADY => grp_convolve_fu_161_in_r_TREADY,
        in_r_TKEEP => in_r_TKEEP_int,
        in_r_TSTRB => in_r_TSTRB_int,
        in_r_TLAST => in_r_TLAST_int,
        blue_output_V_din => grp_convolve_fu_161_blue_output_V_din,
        blue_output_V_full_n => blue_output_V_full_n,
        blue_output_V_write => grp_convolve_fu_161_blue_output_V_write,
        green_output_V_din => grp_convolve_fu_161_green_output_V_din,
        green_output_V_full_n => green_output_V_full_n,
        green_output_V_write => grp_convolve_fu_161_green_output_V_write,
        red_output_V_din => grp_convolve_fu_161_red_output_V_din,
        red_output_V_full_n => red_output_V_full_n,
        red_output_V_write => grp_convolve_fu_161_red_output_V_write);

    blue_output_V_fifo_U : component fifo_w16_d640_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_convolve_fu_161_blue_output_V_din,
        if_full_n => blue_output_V_full_n,
        if_write => blue_output_V_write,
        if_dout => blue_output_V_dout,
        if_empty_n => blue_output_V_empty_n,
        if_read => blue_output_V_read);

    green_output_V_fifo_U : component fifo_w16_d640_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_convolve_fu_161_green_output_V_din,
        if_full_n => green_output_V_full_n,
        if_write => green_output_V_write,
        if_dout => green_output_V_dout,
        if_empty_n => green_output_V_empty_n,
        if_read => green_output_V_read);

    red_output_V_fifo_U : component fifo_w16_d640_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_convolve_fu_161_red_output_V_din,
        if_full_n => red_output_V_full_n,
        if_write => red_output_V_write,
        if_dout => red_output_V_dout,
        if_empty_n => red_output_V_empty_n,
        if_read => red_output_V_read);

    regslice_both_in_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_data_V_U_apdone_blk);

    regslice_both_in_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int,
        vld_out => regslice_both_in_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_keep_V_U_apdone_blk);

    regslice_both_in_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int,
        vld_out => regslice_both_in_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_strb_V_U_apdone_blk);

    regslice_both_in_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_V_last_V_U_apdone_blk);

    regslice_both_out_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_output_fu_146_out_r_TDATA,
        vld_in => grp_write_output_fu_146_out_r_TVALID,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_output_fu_146_out_r_TKEEP,
        vld_in => grp_write_output_fu_146_out_r_TVALID,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_output_fu_146_out_r_TSTRB,
        vld_in => grp_write_output_fu_146_out_r_TVALID,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_write_output_fu_146_out_r_TLAST,
        vld_in => grp_write_output_fu_146_out_r_TVALID,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolve_fu_161_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolve_fu_161_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_convolve_fu_161_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolve_fu_161_ap_ready = ap_const_logic_1)) then 
                    grp_convolve_fu_161_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_output_fu_146_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_write_output_fu_146_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_write_output_fu_146_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_output_fu_146_ap_ready = ap_const_logic_1)) then 
                    grp_write_output_fu_146_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_write_output_fu_146_ap_done, grp_convolve_fu_161_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6, regslice_both_out_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_convolve_fu_161_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_write_output_fu_146_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    blue_output_V_read_assign_proc : process(grp_write_output_fu_146_blue_output_V_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            blue_output_V_read <= grp_write_output_fu_146_blue_output_V_read;
        else 
            blue_output_V_read <= ap_const_logic_0;
        end if; 
    end process;


    blue_output_V_write_assign_proc : process(grp_convolve_fu_161_blue_output_V_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            blue_output_V_write <= grp_convolve_fu_161_blue_output_V_write;
        else 
            blue_output_V_write <= ap_const_logic_0;
        end if; 
    end process;


    green_output_V_read_assign_proc : process(grp_write_output_fu_146_green_output_V_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            green_output_V_read <= grp_write_output_fu_146_green_output_V_read;
        else 
            green_output_V_read <= ap_const_logic_0;
        end if; 
    end process;


    green_output_V_write_assign_proc : process(grp_convolve_fu_161_green_output_V_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            green_output_V_write <= grp_convolve_fu_161_green_output_V_write;
        else 
            green_output_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolve_fu_161_ap_start <= grp_convolve_fu_161_ap_start_reg;
    grp_write_output_fu_146_ap_start <= grp_write_output_fu_146_ap_start_reg;
    grp_write_output_fu_146_out_r_TREADY <= (out_r_TREADY_int and ap_CS_fsm_state5);

    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_V_data_V_U_ack_in)
    begin
        if (((regslice_both_in_V_data_V_U_ack_in = ap_const_logic_1) and (in_r_TVALID = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(grp_convolve_fu_161_in_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_TREADY_int <= grp_convolve_fu_161_in_r_TREADY;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    red_output_V_read_assign_proc : process(grp_write_output_fu_146_red_output_V_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            red_output_V_read <= grp_write_output_fu_146_red_output_V_read;
        else 
            red_output_V_read <= ap_const_logic_0;
        end if; 
    end process;


    red_output_V_write_assign_proc : process(grp_convolve_fu_161_red_output_V_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            red_output_V_write <= grp_convolve_fu_161_red_output_V_write;
        else 
            red_output_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
