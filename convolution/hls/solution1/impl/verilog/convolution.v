// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolution,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.209250,HLS_SYN_LAT=13448,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=7481,HLS_SYN_LUT=11055,HLS_VERSION=2020_1}" *)

module convolution (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [255:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [31:0] in_r_TKEEP;
input  [31:0] in_r_TSTRB;
input  [0:0] in_r_TLAST;
output  [255:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [31:0] out_r_TKEEP;
output  [31:0] out_r_TSTRB;
output  [0:0] out_r_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg in_r_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    grp_write_output_fu_136_ap_start;
wire    grp_write_output_fu_136_ap_done;
wire    grp_write_output_fu_136_ap_idle;
wire    grp_write_output_fu_136_ap_ready;
wire    grp_write_output_fu_136_blue_output_V_read;
wire    grp_write_output_fu_136_green_output_V_read;
wire    grp_write_output_fu_136_red_output_V_read;
wire   [255:0] grp_write_output_fu_136_out_r_TDATA;
wire    grp_write_output_fu_136_out_r_TVALID;
wire    grp_write_output_fu_136_out_r_TREADY;
wire   [31:0] grp_write_output_fu_136_out_r_TKEEP;
wire   [31:0] grp_write_output_fu_136_out_r_TSTRB;
wire   [0:0] grp_write_output_fu_136_out_r_TLAST;
wire    grp_convolve_fu_151_ap_start;
wire    grp_convolve_fu_151_ap_done;
wire    grp_convolve_fu_151_ap_idle;
wire    grp_convolve_fu_151_ap_ready;
wire    grp_convolve_fu_151_in_r_TREADY;
wire   [15:0] grp_convolve_fu_151_blue_output_V_din;
wire    grp_convolve_fu_151_blue_output_V_write;
wire   [15:0] grp_convolve_fu_151_green_output_V_din;
wire    grp_convolve_fu_151_green_output_V_write;
wire   [15:0] grp_convolve_fu_151_red_output_V_din;
wire    grp_convolve_fu_151_red_output_V_write;
reg    grp_write_output_fu_136_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [15:0] blue_output_V_dout;
wire    blue_output_V_empty_n;
reg    blue_output_V_read;
wire    ap_CS_fsm_state5;
wire   [15:0] green_output_V_dout;
wire    green_output_V_empty_n;
reg    green_output_V_read;
wire   [15:0] red_output_V_dout;
wire    red_output_V_empty_n;
reg    red_output_V_read;
reg    grp_convolve_fu_151_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    blue_output_V_full_n;
reg    blue_output_V_write;
wire    green_output_V_full_n;
reg    green_output_V_write;
wire    red_output_V_full_n;
reg    red_output_V_write;
wire    ap_CS_fsm_state6;
wire    regslice_both_out_V_data_V_U_apdone_blk;
reg   [5:0] ap_NS_fsm;
wire    regslice_both_in_V_data_V_U_apdone_blk;
wire   [255:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_V_data_V_U_ack_in;
wire    regslice_both_in_V_keep_V_U_apdone_blk;
wire   [31:0] in_r_TKEEP_int;
wire    regslice_both_in_V_keep_V_U_vld_out;
wire    regslice_both_in_V_keep_V_U_ack_in;
wire    regslice_both_in_V_strb_V_U_apdone_blk;
wire   [31:0] in_r_TSTRB_int;
wire    regslice_both_in_V_strb_V_U_vld_out;
wire    regslice_both_in_V_strb_V_U_ack_in;
wire    regslice_both_in_V_last_V_U_apdone_blk;
wire   [0:0] in_r_TLAST_int;
wire    regslice_both_in_V_last_V_U_vld_out;
wire    regslice_both_in_V_last_V_U_ack_in;
wire    out_r_TREADY_int;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_write_output_fu_136_ap_start_reg = 1'b0;
#0 grp_convolve_fu_151_ap_start_reg = 1'b0;
end

convolution_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
convolution_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

write_output grp_write_output_fu_136(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_write_output_fu_136_ap_start),
    .ap_done(grp_write_output_fu_136_ap_done),
    .ap_idle(grp_write_output_fu_136_ap_idle),
    .ap_ready(grp_write_output_fu_136_ap_ready),
    .blue_output_V_dout(blue_output_V_dout),
    .blue_output_V_empty_n(blue_output_V_empty_n),
    .blue_output_V_read(grp_write_output_fu_136_blue_output_V_read),
    .green_output_V_dout(green_output_V_dout),
    .green_output_V_empty_n(green_output_V_empty_n),
    .green_output_V_read(grp_write_output_fu_136_green_output_V_read),
    .red_output_V_dout(red_output_V_dout),
    .red_output_V_empty_n(red_output_V_empty_n),
    .red_output_V_read(grp_write_output_fu_136_red_output_V_read),
    .out_r_TDATA(grp_write_output_fu_136_out_r_TDATA),
    .out_r_TVALID(grp_write_output_fu_136_out_r_TVALID),
    .out_r_TREADY(grp_write_output_fu_136_out_r_TREADY),
    .out_r_TKEEP(grp_write_output_fu_136_out_r_TKEEP),
    .out_r_TSTRB(grp_write_output_fu_136_out_r_TSTRB),
    .out_r_TLAST(grp_write_output_fu_136_out_r_TLAST)
);

convolve grp_convolve_fu_151(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolve_fu_151_ap_start),
    .ap_done(grp_convolve_fu_151_ap_done),
    .ap_idle(grp_convolve_fu_151_ap_idle),
    .ap_ready(grp_convolve_fu_151_ap_ready),
    .in_r_TDATA(in_r_TDATA_int),
    .in_r_TVALID(in_r_TVALID_int),
    .in_r_TREADY(grp_convolve_fu_151_in_r_TREADY),
    .in_r_TKEEP(in_r_TKEEP_int),
    .in_r_TSTRB(in_r_TSTRB_int),
    .in_r_TLAST(in_r_TLAST_int),
    .blue_output_V_din(grp_convolve_fu_151_blue_output_V_din),
    .blue_output_V_full_n(blue_output_V_full_n),
    .blue_output_V_write(grp_convolve_fu_151_blue_output_V_write),
    .green_output_V_din(grp_convolve_fu_151_green_output_V_din),
    .green_output_V_full_n(green_output_V_full_n),
    .green_output_V_write(grp_convolve_fu_151_green_output_V_write),
    .red_output_V_din(grp_convolve_fu_151_red_output_V_din),
    .red_output_V_full_n(red_output_V_full_n),
    .red_output_V_write(grp_convolve_fu_151_red_output_V_write)
);

fifo_w16_d640_A blue_output_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_convolve_fu_151_blue_output_V_din),
    .if_full_n(blue_output_V_full_n),
    .if_write(blue_output_V_write),
    .if_dout(blue_output_V_dout),
    .if_empty_n(blue_output_V_empty_n),
    .if_read(blue_output_V_read)
);

fifo_w16_d640_A green_output_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_convolve_fu_151_green_output_V_din),
    .if_full_n(green_output_V_full_n),
    .if_write(green_output_V_write),
    .if_dout(green_output_V_dout),
    .if_empty_n(green_output_V_empty_n),
    .if_read(green_output_V_read)
);

fifo_w16_d640_A red_output_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_convolve_fu_151_red_output_V_din),
    .if_full_n(red_output_V_full_n),
    .if_write(red_output_V_write),
    .if_dout(red_output_V_dout),
    .if_empty_n(red_output_V_empty_n),
    .if_read(red_output_V_read)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_data_V_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TKEEP),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_keep_V_U_ack_in),
    .data_out(in_r_TKEEP_int),
    .vld_out(regslice_both_in_V_keep_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TSTRB),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_strb_V_U_ack_in),
    .data_out(in_r_TSTRB_int),
    .vld_out(regslice_both_in_V_strb_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_V_last_V_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_in_V_last_V_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_136_out_r_TDATA),
    .vld_in(grp_write_output_fu_136_out_r_TVALID),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_136_out_r_TKEEP),
    .vld_in(grp_write_output_fu_136_out_r_TVALID),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_136_out_r_TSTRB),
    .vld_in(grp_write_output_fu_136_out_r_TVALID),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_write_output_fu_136_out_r_TLAST),
    .vld_in(grp_write_output_fu_136_out_r_TVALID),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolve_fu_151_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_convolve_fu_151_ap_start_reg <= 1'b1;
        end else if ((grp_convolve_fu_151_ap_ready == 1'b1)) begin
            grp_convolve_fu_151_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_write_output_fu_136_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_write_output_fu_136_ap_start_reg <= 1'b1;
        end else if ((grp_write_output_fu_136_ap_ready == 1'b1)) begin
            grp_write_output_fu_136_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        blue_output_V_read = grp_write_output_fu_136_blue_output_V_read;
    end else begin
        blue_output_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        blue_output_V_write = grp_convolve_fu_151_blue_output_V_write;
    end else begin
        blue_output_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        green_output_V_read = grp_write_output_fu_136_green_output_V_read;
    end else begin
        green_output_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        green_output_V_write = grp_convolve_fu_151_green_output_V_write;
    end else begin
        green_output_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_in_V_data_V_U_ack_in == 1'b1) & (in_r_TVALID == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_TREADY_int = grp_convolve_fu_151_in_r_TREADY;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        red_output_V_read = grp_write_output_fu_136_red_output_V_read;
    end else begin
        red_output_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        red_output_V_write = grp_convolve_fu_151_red_output_V_write;
    end else begin
        red_output_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_convolve_fu_151_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_write_output_fu_136_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((regslice_both_out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_convolve_fu_151_ap_start = grp_convolve_fu_151_ap_start_reg;

assign grp_write_output_fu_136_ap_start = grp_write_output_fu_136_ap_start_reg;

assign grp_write_output_fu_136_out_r_TREADY = (out_r_TREADY_int & ap_CS_fsm_state5);

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

endmodule //convolution
