-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sample_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_0_ce0 : OUT STD_LOGIC;
    sample_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_1_ce0 : OUT STD_LOGIC;
    sample_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_2_ce0 : OUT STD_LOGIC;
    sample_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_3_ce0 : OUT STD_LOGIC;
    sample_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_4_ce0 : OUT STD_LOGIC;
    sample_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_5_ce0 : OUT STD_LOGIC;
    sample_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_6_ce0 : OUT STD_LOGIC;
    sample_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sample_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sample_7_ce0 : OUT STD_LOGIC;
    sample_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    prediction_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    prediction_0_ce0 : OUT STD_LOGIC;
    prediction_0_we0 : OUT STD_LOGIC;
    prediction_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    prediction_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    prediction_1_ce0 : OUT STD_LOGIC;
    prediction_1_we0 : OUT STD_LOGIC;
    prediction_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mlp_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal l1_weights_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal l1_weights_1_ce0 : STD_LOGIC;
    signal l1_weights_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_weights_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal l1_weights_0_ce0 : STD_LOGIC;
    signal l1_weights_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_biases_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_biases_1_ce0 : STD_LOGIC;
    signal l1_biases_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_biases_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_biases_0_ce0 : STD_LOGIC;
    signal l1_biases_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal l2_weights_1_ce0 : STD_LOGIC;
    signal l2_weights_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal l2_weights_0_ce0 : STD_LOGIC;
    signal l2_weights_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_biases_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal l2_biases_1_ce0 : STD_LOGIC;
    signal l2_biases_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_biases_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal l2_biases_0_ce0 : STD_LOGIC;
    signal l2_biases_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_464_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_813 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_474_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_reg_818 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln339_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_492_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_826 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln344_1_fu_498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln344_1_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln342_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln344_2_fu_523_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln344_2_reg_846 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln346_fu_549_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln346_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_out_0_addr_reg_906 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_out_1_addr_reg_911 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln344_fu_571_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln344_reg_916 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_581_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_794_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum_1_fu_648_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_1_reg_931 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_fu_662_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_940 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal shl_ln1_fu_668_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1_reg_945 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln352_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_686_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_953 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln357_fu_692_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln355_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln359_fu_733_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln359_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal prediction_0_addr_reg_999 : STD_LOGIC_VECTOR (2 downto 0);
    signal prediction_1_addr_reg_1004 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln357_fu_755_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln357_reg_1009 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln357_1_fu_762_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln357_1_reg_1014 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_802_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal l1_out_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_out_0_ce0 : STD_LOGIC;
    signal l1_out_0_we0 : STD_LOGIC;
    signal l1_out_0_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal l1_out_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_out_1_ce0 : STD_LOGIC;
    signal l1_out_1_we0 : STD_LOGIC;
    signal l1_out_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_reg_388 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_0_reg_400 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_0_reg_411 : STD_LOGIC_VECTOR (15 downto 0);
    signal i1_0_reg_423 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum2_0_reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal j3_0_reg_447 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln344_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln344_2_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln346_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln357_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln357_1_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln359_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_fu_786_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln344_fu_470_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln342_fu_482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln344_fu_502_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln1_fu_507_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln344_1_fu_527_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln_fu_553_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_581_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln346_fu_609_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln346_fu_616_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln346_1_fu_624_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln346_1_fu_620_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_fu_628_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln346_1_fu_634_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln355_fu_676_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln357_fu_696_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln3_fu_701_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln357_1_fu_717_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln2_fu_737_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln359_fu_775_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln359_fu_782_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_802_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_802_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component mlp_mux_832_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_mac_muladd_8sjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mlp_mac_muladd_15kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mlp_kernel_l1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_biadEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_biaeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_biahbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l2_biaibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mlp_kernel_l1_out_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    l1_weights_1_U : component mlp_kernel_l1_weibkb
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_weights_1_address0,
        ce0 => l1_weights_1_ce0,
        q0 => l1_weights_1_q0);

    l1_weights_0_U : component mlp_kernel_l1_weicud
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_weights_0_address0,
        ce0 => l1_weights_0_ce0,
        q0 => l1_weights_0_q0);

    l1_biases_1_U : component mlp_kernel_l1_biadEe
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_biases_1_address0,
        ce0 => l1_biases_1_ce0,
        q0 => l1_biases_1_q0);

    l1_biases_0_U : component mlp_kernel_l1_biaeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_biases_0_address0,
        ce0 => l1_biases_0_ce0,
        q0 => l1_biases_0_q0);

    l2_weights_1_U : component mlp_kernel_l2_weifYi
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_weights_1_address0,
        ce0 => l2_weights_1_ce0,
        q0 => l2_weights_1_q0);

    l2_weights_0_U : component mlp_kernel_l2_weig8j
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_weights_0_address0,
        ce0 => l2_weights_0_ce0,
        q0 => l2_weights_0_q0);

    l2_biases_1_U : component mlp_kernel_l2_biahbi
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_biases_1_address0,
        ce0 => l2_biases_1_ce0,
        q0 => l2_biases_1_q0);

    l2_biases_0_U : component mlp_kernel_l2_biaibs
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l2_biases_0_address0,
        ce0 => l2_biases_0_ce0,
        q0 => l2_biases_0_q0);

    l1_out_0_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_0_address0,
        ce0 => l1_out_0_ce0,
        we0 => l1_out_0_we0,
        d0 => sum_1_reg_931,
        q0 => l1_out_0_q0);

    l1_out_1_U : component mlp_kernel_l1_out_0
    generic map (
        DataWidth => 15,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => l1_out_1_address0,
        ce0 => l1_out_1_ce0,
        we0 => l1_out_1_we0,
        d0 => sum_1_reg_931,
        q0 => l1_out_1_q0);

    mlp_mux_832_8_1_1_U1 : component mlp_mux_832_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => sample_0_q0,
        din1 => sample_1_q0,
        din2 => sample_2_q0,
        din3 => sample_3_q0,
        din4 => sample_4_q0,
        din5 => sample_5_q0,
        din6 => sample_6_q0,
        din7 => sample_7_q0,
        din8 => tmp_2_fu_581_p9,
        dout => tmp_2_fu_581_p10);

    mlp_mac_muladd_8sjbC_U2 : component mlp_mac_muladd_8sjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln344_reg_916,
        din1 => tmp_2_reg_921,
        din2 => sum_0_reg_411,
        dout => grp_fu_794_p3);

    mlp_mac_muladd_15kbM_U3 : component mlp_mac_muladd_15kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_802_p0,
        din1 => select_ln357_reg_1009,
        din2 => sum2_0_reg_435,
        dout => grp_fu_802_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln339_fu_458_p2 = ap_const_lv1_1))) then 
                i1_0_reg_423 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i1_0_reg_423 <= i_1_reg_940;
            end if; 
        end if;
    end process;

    i_0_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_388 <= i_reg_813;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_388 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j3_0_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j3_0_reg_447 <= j_1_reg_953;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln352_fu_656_p2 = ap_const_lv1_0))) then 
                j3_0_reg_447 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_400 <= j_reg_826;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln339_fu_458_p2 = ap_const_lv1_0))) then 
                j_0_reg_400 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    sum2_0_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                sum2_0_reg_435 <= grp_fu_802_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln352_fu_656_p2 = ap_const_lv1_0))) then 
                sum2_0_reg_435 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    sum_0_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_0_reg_411 <= grp_fu_794_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln339_fu_458_p2 = ap_const_lv1_0))) then 
                sum_0_reg_411 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_1_reg_940 <= i_1_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_813 <= i_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_1_reg_953 <= j_1_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_826 <= j_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln342_fu_486_p2 = ap_const_lv1_1))) then
                l1_out_0_addr_reg_906 <= zext_ln346_fu_563_p1(5 - 1 downto 0);
                l1_out_1_addr_reg_911 <= zext_ln346_fu_563_p1(5 - 1 downto 0);
                trunc_ln346_reg_891 <= trunc_ln346_fu_549_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                prediction_0_addr_reg_999 <= zext_ln359_fu_747_p1(3 - 1 downto 0);
                prediction_1_addr_reg_1004 <= zext_ln359_fu_747_p1(3 - 1 downto 0);
                trunc_ln359_reg_984 <= trunc_ln359_fu_733_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln344_reg_916 <= select_ln344_fu_571_p3;
                tmp_2_reg_921 <= tmp_2_fu_581_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                select_ln357_1_reg_1014 <= select_ln357_1_fu_762_p3;
                select_ln357_reg_1009 <= select_ln357_fu_755_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln352_fu_656_p2 = ap_const_lv1_0))) then
                    shl_ln1_reg_945(9 downto 6) <= shl_ln1_fu_668_p3(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln339_fu_458_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_818(11 downto 6) <= shl_ln_fu_474_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sum_1_reg_931 <= sum_1_fu_648_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln342_fu_486_p2 = ap_const_lv1_0))) then
                trunc_ln344_1_reg_831 <= trunc_ln344_1_fu_498_p1;
                trunc_ln344_2_reg_846 <= trunc_ln344_2_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln355_fu_680_p2 = ap_const_lv1_0))) then
                trunc_ln357_reg_958 <= trunc_ln357_fu_692_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_818(5 downto 0) <= "000000";
    shl_ln1_reg_945(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln339_fu_458_p2, ap_CS_fsm_state3, icmp_ln342_fu_486_p2, ap_CS_fsm_state8, icmp_ln352_fu_656_p2, ap_CS_fsm_state9, icmp_ln355_fu_680_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln339_fu_458_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln342_fu_486_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln352_fu_656_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln355_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln344_fu_502_p2 <= std_logic_vector(unsigned(zext_ln342_fu_482_p1) + unsigned(shl_ln_reg_818));
    add_ln346_1_fu_634_p2 <= std_logic_vector(unsigned(trunc_ln346_1_fu_624_p1) + unsigned(sext_ln346_1_fu_620_p1));
    add_ln357_fu_696_p2 <= std_logic_vector(unsigned(zext_ln355_fu_676_p1) + unsigned(shl_ln1_reg_945));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln352_fu_656_p2)
    begin
        if ((((icmp_ln352_fu_656_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln352_fu_656_p2)
    begin
        if (((icmp_ln352_fu_656_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_802_p0 <= grp_fu_802_p00(15 - 1 downto 0);
    grp_fu_802_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln357_1_reg_1014),16));
    i_1_fu_662_p2 <= std_logic_vector(unsigned(i1_0_reg_423) + unsigned(ap_const_lv4_1));
    i_fu_464_p2 <= std_logic_vector(unsigned(i_0_reg_388) + unsigned(ap_const_lv7_1));
    icmp_ln339_fu_458_p2 <= "1" when (i_0_reg_388 = ap_const_lv7_40) else "0";
    icmp_ln342_fu_486_p2 <= "1" when (j_0_reg_400 = ap_const_lv7_40) else "0";
    icmp_ln352_fu_656_p2 <= "1" when (i1_0_reg_423 = ap_const_lv4_A) else "0";
    icmp_ln355_fu_680_p2 <= "1" when (j3_0_reg_447 = ap_const_lv7_40) else "0";
    j_1_fu_686_p2 <= std_logic_vector(unsigned(j3_0_reg_447) + unsigned(ap_const_lv7_1));
    j_fu_492_p2 <= std_logic_vector(unsigned(j_0_reg_400) + unsigned(ap_const_lv7_1));
    l1_biases_0_address0 <= zext_ln346_fu_563_p1(5 - 1 downto 0);

    l1_biases_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            l1_biases_0_ce0 <= ap_const_logic_1;
        else 
            l1_biases_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l1_biases_1_address0 <= zext_ln346_fu_563_p1(5 - 1 downto 0);

    l1_biases_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            l1_biases_1_ce0 <= ap_const_logic_1;
        else 
            l1_biases_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_0_address0_assign_proc : process(l1_out_0_addr_reg_906, ap_CS_fsm_state9, ap_CS_fsm_state7, zext_ln357_1_fu_727_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            l1_out_0_address0 <= zext_ln357_1_fu_727_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            l1_out_0_address0 <= l1_out_0_addr_reg_906;
        else 
            l1_out_0_address0 <= "XXXXX";
        end if; 
    end process;


    l1_out_0_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            l1_out_0_ce0 <= ap_const_logic_1;
        else 
            l1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_0_we0_assign_proc : process(trunc_ln346_reg_891, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (trunc_ln346_reg_891 = ap_const_lv1_0))) then 
            l1_out_0_we0 <= ap_const_logic_1;
        else 
            l1_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_1_address0_assign_proc : process(l1_out_1_addr_reg_911, ap_CS_fsm_state9, ap_CS_fsm_state7, zext_ln357_1_fu_727_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            l1_out_1_address0 <= zext_ln357_1_fu_727_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            l1_out_1_address0 <= l1_out_1_addr_reg_911;
        else 
            l1_out_1_address0 <= "XXXXX";
        end if; 
    end process;


    l1_out_1_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            l1_out_1_ce0 <= ap_const_logic_1;
        else 
            l1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_out_1_we0_assign_proc : process(trunc_ln346_reg_891, ap_CS_fsm_state7)
    begin
        if (((trunc_ln346_reg_891 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            l1_out_1_we0 <= ap_const_logic_1;
        else 
            l1_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    l1_weights_0_address0 <= zext_ln344_fu_517_p1(11 - 1 downto 0);

    l1_weights_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            l1_weights_0_ce0 <= ap_const_logic_1;
        else 
            l1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l1_weights_1_address0 <= zext_ln344_fu_517_p1(11 - 1 downto 0);

    l1_weights_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            l1_weights_1_ce0 <= ap_const_logic_1;
        else 
            l1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_biases_0_address0 <= zext_ln359_fu_747_p1(3 - 1 downto 0);

    l2_biases_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            l2_biases_0_ce0 <= ap_const_logic_1;
        else 
            l2_biases_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_biases_1_address0 <= zext_ln359_fu_747_p1(3 - 1 downto 0);

    l2_biases_1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            l2_biases_1_ce0 <= ap_const_logic_1;
        else 
            l2_biases_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_weights_0_address0 <= zext_ln357_fu_711_p1(9 - 1 downto 0);

    l2_weights_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            l2_weights_0_ce0 <= ap_const_logic_1;
        else 
            l2_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l2_weights_1_address0 <= zext_ln357_fu_711_p1(9 - 1 downto 0);

    l2_weights_1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            l2_weights_1_ce0 <= ap_const_logic_1;
        else 
            l2_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_507_p4 <= add_ln344_fu_502_p2(11 downto 1);
    lshr_ln2_fu_737_p4 <= i1_0_reg_423(3 downto 1);
    lshr_ln344_1_fu_527_p4 <= j_0_reg_400(6 downto 3);
    lshr_ln357_1_fu_717_p4 <= j3_0_reg_447(6 downto 1);
    lshr_ln3_fu_701_p4 <= add_ln357_fu_696_p2(9 downto 1);
    lshr_ln_fu_553_p4 <= i_0_reg_388(6 downto 1);
    prediction_0_address0 <= prediction_0_addr_reg_999;

    prediction_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            prediction_0_ce0 <= ap_const_logic_1;
        else 
            prediction_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_0_d0 <= sum_3_fu_786_p2;

    prediction_0_we0_assign_proc : process(trunc_ln359_reg_984, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (trunc_ln359_reg_984 = ap_const_lv1_0))) then 
            prediction_0_we0 <= ap_const_logic_1;
        else 
            prediction_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_1_address0 <= prediction_1_addr_reg_1004;

    prediction_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            prediction_1_ce0 <= ap_const_logic_1;
        else 
            prediction_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_1_d0 <= sum_3_fu_786_p2;

    prediction_1_we0_assign_proc : process(trunc_ln359_reg_984, ap_CS_fsm_state12)
    begin
        if (((trunc_ln359_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            prediction_1_we0 <= ap_const_logic_1;
        else 
            prediction_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_0_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_0_ce0 <= ap_const_logic_1;
        else 
            sample_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_1_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_1_ce0 <= ap_const_logic_1;
        else 
            sample_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_2_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_2_ce0 <= ap_const_logic_1;
        else 
            sample_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_3_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_3_ce0 <= ap_const_logic_1;
        else 
            sample_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_4_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_4_ce0 <= ap_const_logic_1;
        else 
            sample_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_5_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_5_ce0 <= ap_const_logic_1;
        else 
            sample_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_6_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_6_ce0 <= ap_const_logic_1;
        else 
            sample_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_7_address0 <= zext_ln344_2_fu_537_p1(3 - 1 downto 0);

    sample_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_7_ce0 <= ap_const_logic_1;
        else 
            sample_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln344_fu_571_p3 <= 
        l1_weights_1_q0 when (trunc_ln344_1_reg_831(0) = '1') else 
        l1_weights_0_q0;
    select_ln346_fu_609_p3 <= 
        l1_biases_1_q0 when (trunc_ln346_reg_891(0) = '1') else 
        l1_biases_0_q0;
    select_ln357_1_fu_762_p3 <= 
        l1_out_1_q0 when (trunc_ln357_reg_958(0) = '1') else 
        l1_out_0_q0;
    select_ln357_fu_755_p3 <= 
        l2_weights_1_q0 when (trunc_ln357_reg_958(0) = '1') else 
        l2_weights_0_q0;
    select_ln359_fu_775_p3 <= 
        l2_biases_1_q0 when (trunc_ln359_reg_984(0) = '1') else 
        l2_biases_0_q0;
        sext_ln346_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln346_fu_609_p3),15));

        sext_ln346_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln346_fu_609_p3),16));

        sext_ln359_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln359_fu_775_p3),16));

    shl_ln1_fu_668_p3 <= (i1_0_reg_423 & ap_const_lv6_0);
    shl_ln_fu_474_p3 <= (trunc_ln344_fu_470_p1 & ap_const_lv6_0);
    sum_1_fu_648_p3 <= 
        ap_const_lv15_0 when (tmp_3_fu_640_p3(0) = '1') else 
        add_ln346_1_fu_634_p2;
    sum_3_fu_786_p2 <= std_logic_vector(unsigned(sum2_0_reg_435) + unsigned(sext_ln359_fu_782_p1));
    sum_fu_628_p2 <= std_logic_vector(signed(sext_ln346_fu_616_p1) + signed(sum_0_reg_411));
    tmp_2_fu_581_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln344_2_reg_846),32));
    tmp_3_fu_640_p3 <= sum_fu_628_p2(15 downto 15);
    trunc_ln344_1_fu_498_p1 <= j_0_reg_400(1 - 1 downto 0);
    trunc_ln344_2_fu_523_p1 <= j_0_reg_400(3 - 1 downto 0);
    trunc_ln344_fu_470_p1 <= i_0_reg_388(6 - 1 downto 0);
    trunc_ln346_1_fu_624_p1 <= sum_0_reg_411(15 - 1 downto 0);
    trunc_ln346_fu_549_p1 <= i_0_reg_388(1 - 1 downto 0);
    trunc_ln357_fu_692_p1 <= j3_0_reg_447(1 - 1 downto 0);
    trunc_ln359_fu_733_p1 <= i1_0_reg_423(1 - 1 downto 0);
    zext_ln342_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_400),12));
    zext_ln344_2_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln344_1_fu_527_p4),64));
    zext_ln344_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_507_p4),64));
    zext_ln346_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_553_p4),64));
    zext_ln355_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_0_reg_447),10));
    zext_ln357_1_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln357_1_fu_717_p4),64));
    zext_ln357_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_701_p4),64));
    zext_ln359_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_737_p4),64));
end behav;
