-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l2_weig8j_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 320
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l2_weig8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01101000", 1 => "11001000", 2 => "00010010", 3 => "00011010", 
    4 => "11100101", 5 => "11010110", 6 => "00001001", 7 => "01000101", 
    8 => "01001110", 9 => "01101101", 10 => "11100010", 11 => "01011001", 
    12 => "10001100", 13 => "01010110", 14 => "01100011", 15 => "11010010", 
    16 => "10010000", 17 => "10110010", 18 => "01100000", 19 => "00010010", 
    20 => "01111001", 21 => "11000011", 22 => "11001110", 23 => "11111111", 
    24 => "11011110", 25 => "01101001", 26 => "10101100", 27 => "10100010", 
    28 => "01101001", 29 => "00011100", 30 => "10110001", 31 => "10011111", 
    32 => "11101011", 33 => "11111110", 34 => "01101010", 35 => "11010001", 
    36 => "10010001", 37 => "11001001", 38 => "00010000", 39 => "00001001", 
    40 => "00111101", 41 => "00101111", 42 => "10110100", 43 => "01010011", 
    44 => "00000000", 45 => "11111110", 46 => "10110101", 47 => "11100110", 
    48 => "11100101", 49 => "11111001", 50 => "11111010", 51 => "11010010", 
    52 => "11011010", 53 => "01100010", 54 => "11010110", 55 => "00100100", 
    56 => "11100110", 57 => "00111010", 58 => "00011001", 59 => "11001001", 
    60 => "11100101", 61 => "10010000", 62 => "00100011", 63 => "01010100", 
    64 => "00010100", 65 => "10100011", 66 => "01100110", 67 => "11010110", 
    68 => "10011001", 69 => "10100010", 70 => "10100100", 71 => "01100101", 
    72 => "00100100", 73 => "11000000", 74 => "01001101", 75 => "01111000", 
    76 => "00101000", 77 => "11011100", 78 => "11001010", 79 => "01001000", 
    80 => "11011110", 81 => "11010111", 82 => "01111011", 83 => "00000111", 
    84 => "00000000", 85 => "01000111", 86 => "00101100", 87 => "00001110", 
    88 => "10000110", 89 => "01011100", 90 => "00110111", 91 => "01011111", 
    92 => "11001011", 93 => "10100111", 94 => "11001001", 95 => "00101011", 
    96 => "11010101", 97 => "01110111", 98 => "10011000", 99 => "11110000", 
    100 => "00100010", 101 => "00111110", 102 => "10010011", 103 => "10100000", 
    104 => "10111101", 105 => "01111110", 106 => "01011000", 107 => "11011010", 
    108 => "10111110", 109 => "01100010", 110 => "01101110", 111 => "10001001", 
    112 => "00111001", 113 => "00100001", 114 => "11101100", 115 => "11111100", 
    116 => "01000110", 117 => "10001010", 118 => "11000011", 119 => "01000100", 
    120 => "10110100", 121 => "10110010", 122 => "00011110", 123 => "01101100", 
    124 => "01101000", 125 => "11000110", 126 => "11101001", 127 => "00111101", 
    128 => "01001011", 129 => "00000110", 130 => "11101110", 131 => "01001001", 
    132 => "10010010", 133 => "11011000", 134 => "00111101", 135 => "10110011", 
    136 => "11110001", 137 => "00101011", 138 => "01110000", 139 => "00111101", 
    140 => "10010100", 141 => "01010111", 142 => "10101000", 143 => "11101110", 
    144 => "11010000", 145 => "01000101", 146 => "10101101", 147 => "00011010", 
    148 => "11010101", 149 => "11011111", 150 => "10001110", 151 => "10101001", 
    152 => "11011100", 153 => "01101011", 154 => "10110110", 155 => "11001011", 
    156 => "01101111", 157 => "01000011", 158 => "10100000", 159 => "00001111", 
    160 => "01010001", 161 => "00110111", 162 => "00100101", 163 => "01101010", 
    164 => "11100111", 165 => "01000110", 166 => "10001101", 167 => "10000010", 
    168 => "10111011", 169 => "01001100", 170 => "00011111", 171 => "00001101", 
    172 => "01010100", 173 => "00101101", 174 => "01011000", 175 => "00100101", 
    176 => "00100100", 177 => "01110000", 178 => "10011011", 179 => "10010000", 
    180 => "01010011", 181 => "11010110", 182 => "10010100", 183 => "11011011", 
    184 => "10111111", 185 => "11101101", 186 => "00010010", 187 => "11010111", 
    188 => "10101000", 189 => "01000101", 190 => "01111010", 191 => "00110100", 
    192 => "10010010", 193 => "11000010", 194 => "11101010", 195 => "10111101", 
    196 => "01111100", 197 => "01000011", 198 => "01100111", 199 => "01010101", 
    200 => "11111011", 201 => "11011101", 202 => "00110100", 203 => "11110000", 
    204 => "10100110", 205 => "10000100", 206 => "01101011", 207 => "01010000", 
    208 => "00010101", 209 => "11101101", 210 => "11001010", 211 => "10110111", 
    212 => "10001111", 213 => "00110110", 214 => "11000010", 215 => "01001000", 
    216 => "11101011", 217 => "10111010", 218 => "00001100", 219 => "01100101", 
    220 => "11100000", 221 => "10011000", 222 => "10101011", 223 => "00000010", 
    224 => "00100110", 225 => "00101001", 226 => "11010011", 227 => "11010001", 
    228 => "01111001", 229 => "01010001", 230 => "00001000", 231 => "01010000", 
    232 => "10100111", 233 => "10001111", 234 => "11010100", 235 => "00100001", 
    236 => "10110111", 237 => "00011000", 238 => "10111001", 239 => "11101011", 
    240 => "10110001", 241 => "00011000", 242 => "01110001", 243 => "00001100", 
    244 => "11111110", 245 => "11001100", 246 => "00011010", 247 => "10100011", 
    248 => "01011110", 249 => "01001001", 250 => "01010000", 251 => "10110111", 
    252 => "11001001", 253 => "10010000", 254 => "01000111", 255 => "01111100", 
    256 => "01110001", 257 => "11100101", 258 => "00001001", 259 => "00011010", 
    260 => "01110000", 261 => "11100000", 262 => "01110100", 263 => "10000110", 
    264 => "00111100", 265 => "11111110", 266 => "11001000", 267 => "00111010", 
    268 => "01101001", 269 => "00101100", 270 => "01100011", 271 => "00011011", 
    272 => "10010011", 273 => "01010111", 274 => "01011011", 275 => "00110100", 
    276 => "10101111", 277 => "11110111", 278 => "01001001", 279 => "10001101", 
    280 => "00001101", 281 => "00001100", 282 => "01011111", 283 => "01000000", 
    284 => "10000010", 285 => "00101111", 286 => "01101000", 287 => "11111001", 
    288 => "11101001", 289 => "00011001", 290 => "01000000", 291 => "10010100", 
    292 => "01111110", 293 => "11000011", 294 => "01100001", 295 => "11111100", 
    296 => "00000000", 297 => "01110110", 298 => "10010101", 299 => "11100011", 
    300 => "11100001", 301 => "10110000", 302 => "00100000", 303 => "01111100", 
    304 => "11001101", 305 => "11110000", 306 => "01110010", 307 => "01000001", 
    308 => "00011001", 309 => "00100110", 310 => "11011000", 311 => "10101000", 
    312 => "01001111", 313 => "00100011", 314 => "11001000", 315 => "00111011", 
    316 => "00010111", 317 => "11010001", 318 => "00001011", 319 => "10111000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l2_weig8j is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 320;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l2_weig8j is
    component mlp_kernel_l2_weig8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l2_weig8j_rom_U :  component mlp_kernel_l2_weig8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


