-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_kernel_l2_weifYi_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 320
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_kernel_l2_weifYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10010101", 1 => "10111100", 2 => "11110011", 3 => "11110110", 
    4 => "01110111", 5 => "01101101", 6 => "00000000", 7 => "00111001", 
    8 => "00001110", 9 => "11110001", 10 => "10011101", 11 => "00001000", 
    12 => "10101000", 13 => "01011110", 14 => "11110101", 15 => "10110000", 
    16 => "00110111", 17 => "10110011", 18 => "00101101", 19 => "10110110", 
    20 => "00000110", 21 => "01010110", 22 => "10000101", 23 => "11111100", 
    24 => "00110010", 25 => "11100111", 26 => "10001011", 27 => "01010010", 
    28 => "00101000", 29 => "11001111", 30 => "11010111", 31 => "10011011", 
    32 => "01011000", 33 => "10110001", 34 => "10110010", 35 => "01101011", 
    36 => "10000010", 37 => "01001010", 38 => "01000001", 39 => "00001000", 
    40 to 41=> "01011000", 42 => "11001001", 43 => "10101011", 44 => "01000101", 
    45 => "11111000", 46 => "11101000", 47 => "11101111", 48 => "00011010", 
    49 => "10100100", 50 => "01110110", 51 => "00100001", 52 => "11101010", 
    53 => "01101000", 54 => "10001001", 55 => "00111111", 56 => "10010000", 
    57 => "01110100", 58 => "10010100", 59 => "01110110", 60 => "01010010", 
    61 => "11010010", 62 => "11100111", 63 => "00110110", 64 => "00010011", 
    65 => "00100110", 66 => "00100011", 67 => "01010101", 68 => "10011011", 
    69 => "11101011", 70 => "11111010", 71 => "01001111", 72 => "11110100", 
    73 => "00110000", 74 => "00011111", 75 => "10010101", 76 => "01010001", 
    77 => "00010010", 78 => "10001010", 79 => "10111010", 80 => "11110101", 
    81 => "00001100", 82 => "11110100", 83 => "11110001", 84 => "01110100", 
    85 => "10100101", 86 => "00011100", 87 => "10100010", 88 => "00111100", 
    89 => "11011110", 90 => "00101100", 91 => "00110011", 92 => "00001010", 
    93 => "10110000", 94 => "11100101", 95 => "01110100", 96 => "01011111", 
    97 => "11011110", 98 => "01011101", 99 => "11011000", 100 => "00011000", 
    101 => "01100101", 102 => "10101000", 103 => "11001100", 104 => "11100101", 
    105 => "00110010", 106 => "11000110", 107 => "10001000", 108 => "11000011", 
    109 => "01001100", 110 => "00101001", 111 => "10001010", 112 => "00011100", 
    113 => "01101111", 114 => "11111110", 115 => "01010111", 116 => "00010010", 
    117 => "11011000", 118 => "01010110", 119 => "01011010", 120 => "11010101", 
    121 => "00010000", 122 => "01110010", 123 => "00010000", 124 => "00110000", 
    125 => "00001111", 126 => "01011101", 127 => "11010101", 128 => "01101001", 
    129 => "10001000", 130 => "01110101", 131 => "11000111", 132 => "00001100", 
    133 => "10100000", 134 => "00011100", 135 => "10100100", 136 => "01011100", 
    137 => "10010101", 138 => "01101010", 139 => "00000011", 140 => "01001111", 
    141 => "11010111", 142 => "11000101", 143 => "01110110", 144 => "00111010", 
    145 => "11011111", 146 => "11101100", 147 => "10101111", 148 => "00000011", 
    149 => "01101011", 150 => "00101010", 151 => "00001000", 152 => "10001011", 
    153 => "11010110", 154 => "01111100", 155 => "10110010", 156 => "10100111", 
    157 => "01111000", 158 => "10000111", 159 => "00001100", 160 => "11010100", 
    161 => "00000110", 162 => "11001001", 163 => "01111000", 164 => "11001101", 
    165 => "00110011", 166 => "00111010", 167 => "01001110", 168 => "01101100", 
    169 => "01110010", 170 => "01010100", 171 => "10010110", 172 => "11001101", 
    173 => "01111011", 174 => "01101111", 175 => "00111101", 176 => "00100010", 
    177 => "00111001", 178 => "00000000", 179 => "01110000", 180 => "01111110", 
    181 => "00110011", 182 => "00101101", 183 => "00110001", 184 => "10010100", 
    185 => "11110010", 186 => "10101011", 187 => "11010110", 188 => "00011100", 
    189 => "10001010", 190 => "00111100", 191 => "01000010", 192 => "01111011", 
    193 => "11010100", 194 => "00000111", 195 => "01011011", 196 => "10100100", 
    197 => "00010100", 198 => "01010000", 199 => "00010110", 200 => "01010000", 
    201 => "00001110", 202 => "10010110", 203 => "10100101", 204 => "01110010", 
    205 => "11111110", 206 => "00010011", 207 => "11001001", 208 => "00010011", 
    209 => "10010011", 210 => "11011101", 211 => "00000111", 212 => "01100000", 
    213 => "00011110", 214 => "11010111", 215 => "01111011", 216 => "11110101", 
    217 => "10011011", 218 => "10011001", 219 => "11000010", 220 => "10110111", 
    221 => "11011010", 222 => "00111011", 223 => "01111000", 224 => "11010000", 
    225 => "00011101", 226 => "01111100", 227 => "11101110", 228 => "10101000", 
    229 => "11111000", 230 => "01001100", 231 => "10111111", 232 => "11010111", 
    233 => "10001101", 234 => "10000011", 235 => "11001101", 236 => "01010000", 
    237 => "01110001", 238 => "11110011", 239 => "11000101", 240 => "00010101", 
    241 => "00011010", 242 => "00111001", 243 => "11110110", 244 => "10101000", 
    245 => "11111011", 246 => "00011110", 247 => "11011100", 248 => "10001000", 
    249 => "00001110", 250 => "10101001", 251 => "01110010", 252 => "10110100", 
    253 => "10000101", 254 => "00000001", 255 => "01100000", 256 => "00000110", 
    257 => "00001101", 258 => "01100011", 259 => "10101110", 260 => "10110110", 
    261 => "00110010", 262 => "00010111", 263 => "01000011", 264 => "00100010", 
    265 => "00001001", 266 => "00100001", 267 => "11000111", 268 => "00010101", 
    269 => "00101001", 270 => "01000101", 271 => "10011110", 272 => "00110110", 
    273 => "10110111", 274 => "11011000", 275 => "11110100", 276 => "11100001", 
    277 => "10010001", 278 => "11001000", 279 => "10011101", 280 => "10110011", 
    281 => "00001110", 282 => "00011011", 283 => "01011000", 284 => "00111110", 
    285 => "11000111", 286 => "11110100", 287 => "00011001", 288 => "01000100", 
    289 => "11110010", 290 => "01010001", 291 => "00100111", 292 => "01111001", 
    293 => "00100100", 294 => "11000100", 295 => "11101110", 296 => "10001101", 
    297 => "01111110", 298 => "10111000", 299 => "00100110", 300 => "01000010", 
    301 => "00011101", 302 => "01011001", 303 => "00000011", 304 => "10111000", 
    305 => "11001101", 306 => "11000100", 307 => "11000010", 308 => "11010111", 
    309 => "00011101", 310 => "01001011", 311 => "11000100", 312 => "00111110", 
    313 => "10000001", 314 => "00101111", 315 => "01100011", 316 => "10000011", 
    317 => "00110100", 318 => "10100111", 319 => "01010100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_kernel_l2_weifYi is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 320;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_kernel_l2_weifYi is
    component mlp_kernel_l2_weifYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_kernel_l2_weifYi_rom_U :  component mlp_kernel_l2_weifYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


